ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C10_infer_design1_no_eyetracking_2015_Sep_29_1629
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'd\xa5z*j\x01N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Sep_29_1629
p66
sVparticipant
p67
VC10
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.86677606820740039
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F15.88310447580443
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P1\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F9.7170000000000005
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0.99999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x08\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p102
sg21
F1.7
sg69
Vn
sa(dp103
g63
g64
sg20
F16.734000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.57999999999999874
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x07\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p109
sg21
F1.8999999999999999
sg69
Vn
sa(dp110
g63
g64
sg20
F7.9669999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.51999999999999935
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x15\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V29-beans.png
p116
sg21
F1.2
sg69
Vn
sa(dp117
g63
g64
sg20
F4.367
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F1.4399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x00\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p123
sg21
F1.6000000000000001
sg69
Vn
sa(dp124
g63
g64
sg20
F4.8339999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0.49999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x0b\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p130
sg21
F1
sg69
Vn
sa(dp131
g63
g64
sg20
F3.8839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.95999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x12\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p137
sg21
F2
sg69
Vn
sa(dp138
g63
g64
sg20
F3.6339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.97999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x13\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p144
sg21
F2
sg69
Vn
sa(dp145
g63
g64
sg20
F10.034000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F1.52
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x18\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p151
sg21
F1.6000000000000001
sg69
Vn
sa(dp152
g63
g64
sg20
F3.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.7599999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x1b\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p158
sg21
F1.8999999999999999
sg69
Vn
sa(dp159
g63
g64
sg20
F3.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.49999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x19\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p165
sg21
F1
sg69
Vn
sa(dp166
g63
g64
sg20
F6.1840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.97999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x1e\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p172
sg21
F1.5
sg69
Vn
sa(dp173
g63
g64
sg20
F3.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F1.5600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x14\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p179
sg21
F1
sg69
Vn
sa(dp180
g63
g64
sg20
F4.117
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.99999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x01\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p186
sg21
F2
sg69
Vn
sa(dp187
g63
g64
sg20
F7.4009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.73999999999999955
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x17\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p193
sg21
F1.3
sg69
Vn
sa(dp194
g63
g64
sg20
F3.1339999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.9800000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'!\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V44-crunch.png
p200
sg21
F1.1000000000000001
sg69
Vn
sa(dp201
g63
g64
sg20
F6.7670000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x1a\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V35-raisins.png
p207
sg21
F1.5
sg69
Vn
sa(dp208
g63
g64
sg20
F2.0510000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F2
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x06\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V7-olives.png
p214
sg21
F1.8999999999999999
sg69
Vn
sa(dp215
g63
g64
sg20
F2.0009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F1.8
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\t\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p221
sg21
F1.8
sg69
Vn
sa(dp222
g63
g64
sg20
F5.2169999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.51999999999999957
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x0e\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p228
sg21
F1.1000000000000001
sg69
Vn
sa(dp229
g63
g64
sg20
F3.5169999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F1.5600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'$\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V48-twix.png
p235
sg21
F1.1000000000000001
sg69
Vn
sa(dp236
g63
g64
sg20
F3.0670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'#\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p242
sg21
F1.8
sg69
Vn
sa(dp243
g63
g64
sg20
F3.7010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.67999999999999883
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x05\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p249
sg21
F1.8999999999999999
sg69
Vn
sa(dp250
g63
g64
sg20
F3.8170000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F1.5400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x10\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V22-daim.png
p256
sg21
F1.3
sg69
Vn
sa(dp257
g63
g64
sg20
F2.5840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.4999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x11\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p263
sg21
F1.8999999999999999
sg69
Vn
sa(dp264
g63
g64
sg20
F2.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.45999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\n\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p270
sg21
F1.1000000000000001
sg69
Vn
sa(dp271
g63
g64
sg20
F5.5010000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.31999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x16\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p277
sg21
F1.7
sg69
Vn
sa(dp278
g63
g64
sg20
F3.9510000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.45999999999999863
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x1d\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V40-sardines.png
p284
sg21
F1.8999999999999999
sg69
Vn
sa(dp285
g63
g64
sg20
F3.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.99999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'"\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p291
sg21
F1.8
sg69
Vn
sa(dp292
g63
g64
sg20
F4.2670000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F1.9600000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\r\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p298
sg21
F1.7
sg69
Vn
sa(dp299
g63
g64
sg20
F4.601
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0.55999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'&\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V50-polo.png
p305
sg21
F1.8999999999999999
sg69
Vn
sa(dp306
g63
g64
sg20
F1.8839999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F2.02
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x0c\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V18-mms.png
p312
sg21
F1.8999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F2.3180000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F2.0200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S"'\x00\x00\x00"
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V51-mars.png
p319
sg21
F1.3
sg69
Vn
sa(dp320
g63
g64
sg20
F2.9169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F3
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x0f\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p326
sg21
F1.5
sg69
Vn
sa(dp327
g63
g64
sg20
F2.851
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.57999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x03\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V4-corn.png
p333
sg21
F1.3999999999999999
sg69
Vn
sa(dp334
g63
g64
sg20
F1.7170000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F1.5200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x04\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p340
sg21
F1.2
sg69
Vn
sa(dp341
g63
g64
sg20
F1.8009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'%\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p347
sg21
F1.3999999999999999
sg69
Vn
sa(dp348
g63
g64
sg20
F3.1509999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F2.5000000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x02\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p354
sg21
F1.3999999999999999
sg69
Vn
sa(dp355
g63
g64
sg20
F2.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.49999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S' \x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p361
sg21
F1.3999999999999999
sg69
Vn
sa(dp362
g63
g64
sg20
F3.8010000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.49999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x1c\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p368
sg21
F1.3
sg69
Vn
sa(dp369
g63
g64
sg20
F3.234
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0.31999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x1f\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p375
sg21
F2
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F4.2001820064506319
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p380
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F1.8833590681642818
sg27
F4.3170000000000002
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'7-olives.png'
p389
sg26
F5
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.4834021749556996
sg27
F1.351
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'40-sardines.png'
p398
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.2000331853851094
sg27
F2.6669999999999998
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'31-hobnobs.png'
p407
sg26
F5.0000000000000009
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.5500346678963979
sg27
F2.4340000000000002
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p416
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'left'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F2.3501719710075122
sg27
F1.5669999999999999
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p425
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.2334973976248875
sg27
F1.0169999999999999
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'38-maltesers.png'
p434
sg26
F3.9000000000000008
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F4.0831661709744367
sg27
F1.0669999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'49-yorkie.png'
p443
sg26
F5.4999999999999991
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F2.1002004807887715
sg27
F1.784
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p452
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F2.1501846863720857
sg27
F1.5009999999999999
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'22-daim.png'
p461
sg26
F5.1000000000000005
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.3168554394396779
sg27
F1.034
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p470
sg26
F3.5000000000000004
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F5.7333748055643809
sg27
F2.6669999999999998
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p479
sg26
F5.4000000000000004
sg28
F3
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.6835049242108653
sg27
F2.5840000000000001
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p488
sg26
F5.4999999999999991
sg28
F4
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.4334393517092394
sg27
F1.351
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'44-crunch.png'
p497
sg26
F5.5
sg28
F3
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.9501837170391809
sg27
F1.5669999999999999
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p506
sg26
F5.5
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F8.0666236549077439
sg27
F2.7170000000000001
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p515
sg26
F4.6000000000000005
sg28
F4
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.9664950187725481
sg27
F1.234
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p524
sg26
F5.1000000000000014
sg28
F3
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.2167028550829855
sg27
F1.351
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p533
sg26
F4.5000000000000009
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F7.466695442537457
sg27
F2.1669999999999998
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p542
sg26
F5.0000000000000009
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F2.3335561847998179
sg27
F1.651
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p551
sg26
F3.4999999999999996
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F3.8667632388023776
sg27
F1.7010000000000001
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p560
sg26
F5.3999999999999995
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.166764265155507
sg27
F2.101
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'18-mms.png'
p569
sg26
F5.5
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.6334748178815062
sg27
F1.4670000000000001
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'5-pineapple.png'
p578
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.450540659512626
sg27
F2.2170000000000001
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p587
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.1835667904379079
sg27
F2.0339999999999998
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'35-raisins.png'
p596
sg26
F5.5999999999999988
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.566840899449744
sg27
F2.0510000000000002
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p605
sg26
F4.4000000000000004
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'left'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F15.666692705599417
sg27
F1.117
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'4-corn.png'
p614
sg26
F5.1000000000000014
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.333518551884481
sg27
F1.3340000000000001
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p623
sg26
F3.0999999999999988
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F3.7165953732037451
sg27
F2.984
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p632
sg26
F5.5999999999999996
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.0168016699899454
sg27
F1.2509999999999999
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'51-mars.png'
p641
sg26
F5.1000000000000014
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.1833444141375367
sg27
F1.417
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'46-pistachios.png'
p650
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F0.7334355313978449
sg27
F0.91700000000000004
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p659
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.3500428216902947
sg27
F2.1669999999999998
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p668
sg26
F5.1000000000000005
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.533380108379788
sg27
F1.234
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'48-twix.png'
p677
sg26
F5.0000000000000009
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F2.0166916222297004
sg27
F1.0669999999999999
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'25-kitkat.png'
p686
sg26
F5.2000000000000002
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.3000423655357736
sg27
F4.1840000000000002
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p695
sg26
F4.9000000000000021
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'left'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F0.75006300661698333
sg27
F1.268
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'50-polo.png'
p704
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F0.95006255046246224
sg27
F1.917
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p713
sg26
F3.0999999999999996
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F3.2667053069271788
sg27
F3.4340000000000002
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p722
sg26
F3.8000000000000007
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'right'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F7.2499136153601285
sg27
F1.8839999999999999
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'29-beans.png'
p731
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.1835017881348904
sg27
F0.66700000000000004
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F549.21822670294932
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F0.58349916523366119
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'15-walnut_whip.png'
p743
sg82
S'28-maple_pecan.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'28-maple_pecan.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\t\x1d\x10/7\x0e~\xf0'
tRp753
sa(dp754
g63
g64
sg81
S'11-snickers.png'
p755
sg82
S'11-snickers.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'54-frubes_yogurt.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\t\x1d\x100\t\x00Y\xd8'
tRp764
sa(dp765
g63
g64
sg81
S'52-aero_mousse.png'
p766
sg82
S'52-aero_mousse.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'14-discos_salt_vinegar.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\t\x1d\x100\x12\x07\xbcx'
tRp775
sa(dp776
g63
g64
sg81
S'12-topic.png'
p777
sg82
S'39-mackerel.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'39-mackerel.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\t\x1d\x100\x19\nk\xf8'
tRp786
sa(dp787
g63
g64
sg81
S'53-cheestrings.png'
p788
sg82
S'53-cheestrings.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'47-picnic.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\t\x1d\x100"\x00\xaf\xc8'
tRp797
sa(dp798
g63
g64
sg81
S'32-hovis_crackers.png'
p799
sg82
S'32-hovis_crackers.png'
p800
sg56
Vr
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p803
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p805
sS'practice_loop.thisIndex'
p806
g59
(g98
S'\x05\x00\x00\x00'
tRp807
sg34
g752
(S'\x07\xdf\t\x1d\x100,\n\xec\xe0'
tRp808
sa(dp809
g63
g64
sg81
g777
sg82
S'12-topic.png'
p810
sg56
Vr
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p813
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\t\x1d\x1005\x03\x8e('
tRp817
sa(dp818
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p819
sg82
S'9-yu_mango_pieces.png'
p820
sg56
Vr
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p823
I0
sg83
S'9-yu_mango_pieces.png'
p824
sg33
g824
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p825
sS'practice_loop.thisIndex'
p826
g59
(g98
S'\x07\x00\x00\x00'
tRp827
sg34
g752
(S'\x07\xdf\t\x1d\x101\x02\x04\xc2\xc0'
tRp828
sa(dp829
g63
g64
sg81
g788
sg82
S'47-picnic.png'
p830
sg56
Vr
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p833
I0
sg83
g793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\t\x1d\x101\n\x00\xc3P'
tRp837
sa(dp838
g63
g64
sg81
g743
sg82
S'15-walnut_whip.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\t\x1d\x101\x11\x0c@\xb8'
tRp846
sa(dp847
g63
g64
sg81
g799
sg82
S'24-food_doctor_apple_walnut_bar.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\t\x1d\x101\x1d\n\x87P'
tRp855
sa(dp856
g63
g64
sg81
g766
sg82
S'14-discos_salt_vinegar.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\t\x1d\x101$\x089x'
tRp864
sa(dp865
g63
g64
sg81
g755
sg82
S'54-frubes_yogurt.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\t\x1d\x101,\x02\xca\xd8'
tRp873
sa(dp874
g63
g64
sg81
g819
sg82
S'37-nakd_cashew_cookie.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g824
sg33
g824
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\t\x1d\x1014\x0e@p'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F44.799137465044623
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'48-twix.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'48-twix.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'50-polo.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'50-polo.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.6334882174778613
sg34
g752
(S'\x07\xdf\t\x1d\x1024\x04:\x08'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'3-ellas_strawberries_apples.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'13-mccoys_steak_crisps.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'13-mccoys_steak_crisps.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
S'3-ellas_strawberries_apples.png'
p925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p926
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F2.0835114244400756
sg34
g752
(S'\x07\xdf\t\x1d\x102:\x0eP\x10'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
g895
sS'block_loop.thisIndex'
p932
g888
sg38
S'left'
p933
sg58
g62
sS'trial_loop.thisN'
p934
I2
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p935
g59
(g98
S'\x02\x00\x00\x00'
tRp936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p937
I0
sg903
g904
sS'block_loop.thisRepN'
p938
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p939
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p940
Nsg69
Vn
sS'block_loop.thisTrialN'
p941
I0
sg39
F1.6168422109003586
sg34
g752
(S'\x07\xdf\t\x1d\x103\x06\x00\xcb '
tRp942
sa(dp943
S'trial_loop.thisTrialN'
p944
I3
sg894
S'22-daim.png'
p945
sS'block_loop.thisIndex'
p946
g888
sg38
S'right'
p947
sg58
g62
sS'trial_loop.thisN'
p948
I3
sg33
S'22-daim.png'
p949
sg63
g64
sS'trial_loop.thisIndex'
p950
g59
(g98
S'\x03\x00\x00\x00'
tRp951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p952
I0
sg903
S'7-olives.png'
p953
sS'block_loop.thisRepN'
p954
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p955
I0
sg908
S'7-olives.png'
p956
sg55
g11
sS'block_loop.thisTrial'
p957
Nsg69
Vn
sS'block_loop.thisTrialN'
p958
I0
sg39
F1.383523854703526
sg34
g752
(S'\x07\xdf\t\x1d\x103\x0c\n\xe1('
tRp959
sa(dp960
S'trial_loop.thisTrialN'
p961
I4
sg894
S'17-jacobs_mini_cheddars_redo.png'
p962
sS'block_loop.thisIndex'
p963
g888
sg38
S'left'
p964
sg58
g62
sS'trial_loop.thisN'
p965
I4
sg33
S'17-jacobs_mini_cheddars_redo.png'
p966
sg63
g64
sS'trial_loop.thisIndex'
p967
g59
(g98
S'\x04\x00\x00\x00'
tRp968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p969
I0
sg903
S'8-liquorice_catherine_wheels.png'
p970
sS'block_loop.thisRepN'
p971
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p972
I0
sg908
S'8-liquorice_catherine_wheels.png'
p973
sg55
g11
sS'block_loop.thisTrial'
p974
Nsg69
Vn
sS'block_loop.thisTrialN'
p975
I0
sg39
F2.6005069609454949
sg34
g752
(S'\x07\xdf\t\x1d\x103\x13\x01\xe8H'
tRp976
sa(dp977
S'trial_loop.thisTrialN'
p978
I5
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p979
sS'block_loop.thisIndex'
p980
g888
sg38
S'right'
p981
sg58
g62
sS'trial_loop.thisN'
p982
I5
sg33
S'36-fig_rolls.png'
p983
sg63
g64
sS'trial_loop.thisIndex'
p984
g59
(g98
S'\x05\x00\x00\x00'
tRp985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p986
I0
sg903
S'36-fig_rolls.png'
p987
sS'block_loop.thisRepN'
p988
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p989
I0
sg908
S'34-hula_hoops_bbq_beef_redo.png'
p990
sg55
g11
sS'block_loop.thisTrial'
p991
Nsg69
Vn
sS'block_loop.thisTrialN'
p992
I0
sg39
F2.2334309698344441
sg34
g752
(S'\x07\xdf\t\x1d\x103\x1a\x0b}h'
tRp993
sa(dp994
S'trial_loop.thisTrialN'
p995
I6
sg894
S'8-liquorice_catherine_wheels.png'
p996
sS'block_loop.thisIndex'
p997
g888
sg38
S'right'
p998
sg58
g62
sS'trial_loop.thisN'
p999
I6
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p1000
g59
(g98
S'\x06\x00\x00\x00'
tRp1001
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1002
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1003
sS'block_loop.thisRepN'
p1004
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1005
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p1006
Nsg69
Vn
sS'block_loop.thisTrialN'
p1007
I0
sg39
F2.6834852524589223
sg34
g752
(S'\x07\xdf\t\x1d\x103"\x00Y\xd8'
tRp1008
sa(dp1009
S'trial_loop.thisTrialN'
p1010
I7
sg894
S'21-nakd_banana_crunch.png'
p1011
sS'block_loop.thisIndex'
p1012
g888
sg38
S'right'
p1013
sg58
g62
sS'trial_loop.thisN'
p1014
I7
sg33
S'1-treacle_cookies.png'
p1015
sg63
g64
sS'trial_loop.thisIndex'
p1016
g59
(g98
S'\x07\x00\x00\x00'
tRp1017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1018
I0
sg903
S'1-treacle_cookies.png'
p1019
sS'block_loop.thisRepN'
p1020
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1021
I0
sg908
S'21-nakd_banana_crunch.png'
p1022
sg55
g11
sS'block_loop.thisTrial'
p1023
Nsg69
Vn
sS'block_loop.thisTrialN'
p1024
I0
sg39
F3.8167855904721364
sg34
g752
(S'\x07\xdf\t\x1d\x103)\x0b^('
tRp1025
sa(dp1026
S'trial_loop.thisTrialN'
p1027
I8
sg894
S'16-skips_prawn.png'
p1028
sS'block_loop.thisIndex'
p1029
g888
sg38
S'right'
p1030
sg58
g62
sS'trial_loop.thisN'
p1031
I8
sg33
S'42-mrkipling_lemon_slices.png'
p1032
sg63
g64
sS'trial_loop.thisIndex'
p1033
g59
(g98
S'\x08\x00\x00\x00'
tRp1034
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1035
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1036
sS'block_loop.thisRepN'
p1037
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1038
I0
sg908
S'16-skips_prawn.png'
p1039
sg55
g11
sS'block_loop.thisTrial'
p1040
Nsg69
Vn
sS'block_loop.thisTrialN'
p1041
I0
sg39
F3.950269246382959
sg34
g752
(S'\x07\xdf\t\x1d\x1032\t\x00\xb0'
tRp1042
sa(dp1043
S'trial_loop.thisTrialN'
p1044
I9
sg894
S'30-spaghetti_hoops.png'
p1045
sS'block_loop.thisIndex'
p1046
g888
sg38
S'left'
p1047
sg58
g62
sS'trial_loop.thisN'
p1048
I9
sg33
S'19-caramello_redo.png'
p1049
sg63
g64
sS'trial_loop.thisIndex'
p1050
g59
(g98
S'\t\x00\x00\x00'
tRp1051
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1052
I0
sg903
S'19-caramello_redo.png'
p1053
sS'block_loop.thisRepN'
p1054
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1055
I0
sg908
S'30-spaghetti_hoops.png'
p1056
sg55
g11
sS'block_loop.thisTrial'
p1057
Nsg69
Vn
sS'block_loop.thisTrialN'
p1058
I0
sg39
F2.3334997354286315
sg34
g752
(S'\x07\xdf\t\x1d\x103;\x08\xc6\x18'
tRp1059
sa(dp1060
S'trial_loop.thisTrialN'
p1061
I10
sg894
S'20-fruit_pastilles.png'
p1062
sS'block_loop.thisIndex'
p1063
g888
sg38
S'left'
p1064
sg58
g62
sS'trial_loop.thisN'
p1065
I10
sg33
S'20-fruit_pastilles.png'
p1066
sg63
g64
sS'trial_loop.thisIndex'
p1067
g59
(g98
S'\n\x00\x00\x00'
tRp1068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1069
I0
sg903
S'2-steamed_puddings.png'
p1070
sS'block_loop.thisRepN'
p1071
I0
sg906
S'2-steamed_puddings.png'
p1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1073
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vn
sS'block_loop.thisTrialN'
p1075
I0
sg39
F1.6834829716790409
sg34
g752
(S'\x07\xdf\t\x1d\x104\x06\x0eS\xf8'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
S'25-kitkat.png'
p1079
sS'block_loop.thisIndex'
p1080
g888
sg38
S'right'
p1081
sg58
g62
sS'trial_loop.thisN'
p1082
I11
sg33
S'25-kitkat.png'
p1083
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
S'31-hobnobs.png'
p1087
sS'block_loop.thisRepN'
p1088
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1089
I0
sg908
S'31-hobnobs.png'
p1090
sg55
g11
sS'block_loop.thisTrial'
p1091
Nsg69
Vn
sS'block_loop.thisTrialN'
p1092
I0
sg39
F4.0167169959349849
sg34
g752
(S'\x07\xdf\t\x1d\x104\r\n\x19\xf0'
tRp1093
sa(dp1094
S'trial_loop.thisTrialN'
p1095
I12
sg894
S'26-walkers_smoky_bacon.png'
p1096
sS'block_loop.thisIndex'
p1097
g888
sg38
S'left'
p1098
sg58
g62
sS'trial_loop.thisN'
p1099
I12
sg33
S'44-crunch.png'
p1100
sg63
g64
sS'trial_loop.thisIndex'
p1101
g59
(g98
S'\x0c\x00\x00\x00'
tRp1102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1103
I0
sg903
S'44-crunch.png'
p1104
sS'block_loop.thisRepN'
p1105
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1106
I0
sg908
S'26-walkers_smoky_bacon.png'
p1107
sg55
g11
sS'block_loop.thisTrial'
p1108
Nsg69
Vn
sS'block_loop.thisTrialN'
p1109
I0
sg39
F1.9171021060719795
sg34
g752
(S'\x07\xdf\t\x1d\x104\x16\n\xd5p'
tRp1110
sa(dp1111
S'trial_loop.thisTrialN'
p1112
I13
sg894
S'33-ambrosia_rice.png'
p1113
sS'block_loop.thisIndex'
p1114
g888
sg38
S'left'
p1115
sg58
g62
sS'trial_loop.thisN'
p1116
I13
sg33
S'23-crunchie_redo.png'
p1117
sg63
g64
sS'trial_loop.thisIndex'
p1118
g59
(g98
S'\r\x00\x00\x00'
tRp1119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1120
I0
sg903
S'23-crunchie_redo.png'
p1121
sS'block_loop.thisRepN'
p1122
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1123
I0
sg908
S'33-ambrosia_rice.png'
p1124
sg55
g11
sS'block_loop.thisTrial'
p1125
Nsg69
Vn
sS'block_loop.thisTrialN'
p1126
I0
sg39
F2.1500640899903374
sg34
g752
(S'\x07\xdf\t\x1d\x104\x1d\t\xf2\xe0'
tRp1127
sa(dp1128
S'trial_loop.thisTrialN'
p1129
I14
sg894
S'49-yorkie.png'
p1130
sS'block_loop.thisIndex'
p1131
g888
sg38
S'right'
p1132
sg58
g62
sS'trial_loop.thisN'
p1133
I14
sg33
S'49-yorkie.png'
p1134
sg63
g64
sS'trial_loop.thisIndex'
p1135
g59
(g98
S'\x0e\x00\x00\x00'
tRp1136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1137
I0
sg903
S'35-raisins.png'
p1138
sS'block_loop.thisRepN'
p1139
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1140
I0
sg908
S'35-raisins.png'
p1141
sg55
g11
sS'block_loop.thisTrial'
p1142
Nsg69
Vn
sS'block_loop.thisTrialN'
p1143
I0
sg39
F1.6668899932956265
sg34
g752
(S'\x07\xdf\t\x1d\x104$\x0c\xe0\xe0'
tRp1144
sa(dp1145
S'trial_loop.thisTrialN'
p1146
I15
sg894
g1062
sS'block_loop.thisIndex'
p1147
g888
sg38
S'left'
p1148
sg58
g62
sS'trial_loop.thisN'
p1149
I15
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1150
g59
(g98
S'\x0f\x00\x00\x00'
tRp1151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1152
I0
sg903
g1070
sS'block_loop.thisRepN'
p1153
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1154
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p1155
Nsg69
Vn
sS'block_loop.thisTrialN'
p1156
I0
sg39
F2.316733987765474
sg34
g752
(S'\x07\xdf\t\x1d\x104+\x08-\xc0'
tRp1157
sa(dp1158
S'trial_loop.thisTrialN'
p1159
I16
sg894
S'7-olives.png'
p1160
sS'block_loop.thisIndex'
p1161
g888
sg38
S'right'
p1162
sg58
g62
sS'trial_loop.thisN'
p1163
I16
sg33
g949
sg63
g64
sS'trial_loop.thisIndex'
p1164
g59
(g98
S'\x10\x00\x00\x00'
tRp1165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1166
I0
sg903
S'22-daim.png'
p1167
sS'block_loop.thisRepN'
p1168
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1169
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p1170
Nsg69
Vn
sS'block_loop.thisTrialN'
p1171
I0
sg39
F1.1334386104572332
sg34
g752
(S'\x07\xdf\t\x1d\x1042\r} '
tRp1172
sa(dp1173
S'trial_loop.thisTrialN'
p1174
I17
sg894
S'6-sour_patch_kids.png'
p1175
sS'block_loop.thisIndex'
p1176
g888
sg38
S'left'
p1177
sg58
g62
sS'trial_loop.thisN'
p1178
I17
sg33
S'38-maltesers.png'
p1179
sg63
g64
sS'trial_loop.thisIndex'
p1180
g59
(g98
S'\x11\x00\x00\x00'
tRp1181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1182
I0
sg903
S'38-maltesers.png'
p1183
sS'block_loop.thisRepN'
p1184
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1185
I0
sg908
S'6-sour_patch_kids.png'
p1186
sg55
g11
sS'block_loop.thisTrial'
p1187
Nsg69
Vn
sS'block_loop.thisTrialN'
p1188
I0
sg39
F1.2332741660320607
sg34
g752
(S'\x07\xdf\t\x1d\x1049\x00\xf20'
tRp1189
sa(dp1190
S'trial_loop.thisTrialN'
p1191
I18
sg894
g1096
sS'block_loop.thisIndex'
p1192
g888
sg38
S'right'
p1193
sg58
g62
sS'trial_loop.thisN'
p1194
I18
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1195
g59
(g98
S'\x12\x00\x00\x00'
tRp1196
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1197
I0
sg903
g1104
sS'block_loop.thisRepN'
p1198
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1199
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1200
Nsg69
Vn
sS'block_loop.thisTrialN'
p1201
I0
sg39
F3.8333731519924186
sg34
g752
(S'\x07\xdf\t\x1d\x105\x03\x04\xd6H'
tRp1202
sa(dp1203
S'trial_loop.thisTrialN'
p1204
I19
sg894
S'51-mars.png'
p1205
sS'block_loop.thisIndex'
p1206
g888
sg38
S'left'
p1207
sg58
g62
sS'trial_loop.thisN'
p1208
I19
sg33
S'27-hartleys_raspberries_jelly.png'
p1209
sg63
g64
sS'trial_loop.thisIndex'
p1210
g59
(g98
S'\x13\x00\x00\x00'
tRp1211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1212
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1213
sS'block_loop.thisRepN'
p1214
I0
sg906
S'51-mars.png'
p1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1216
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1217
Nsg69
Vn
sS'block_loop.thisTrialN'
p1218
I0
sg39
F1.8501927831457579
sg34
g752
(S'\x07\xdf\t\x1d\x105\x0c\x02\xf5\xd0'
tRp1219
sa(dp1220
S'trial_loop.thisTrialN'
p1221
I20
sg894
S'2-steamed_puddings.png'
p1222
sS'block_loop.thisIndex'
p1223
g888
sg38
S'left'
p1224
sg58
g62
sS'trial_loop.thisN'
p1225
I20
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1226
g59
(g98
S'\x14\x00\x00\x00'
tRp1227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1228
I0
sg903
S'20-fruit_pastilles.png'
p1229
sS'block_loop.thisRepN'
p1230
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1231
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p1232
Nsg69
Vn
sS'block_loop.thisTrialN'
p1233
I0
sg39
F1.8667478435199882
sg34
g752
(S'\x07\xdf\t\x1d\x105\x13\x01\x1d('
tRp1234
sa(dp1235
S'trial_loop.thisTrialN'
p1236
I21
sg894
S'38-maltesers.png'
p1237
sS'block_loop.thisIndex'
p1238
g888
sg38
S'left'
p1239
sg58
g62
sS'trial_loop.thisN'
p1240
I21
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p1241
g59
(g98
S'\x15\x00\x00\x00'
tRp1242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1243
I0
sg903
S'6-sour_patch_kids.png'
p1244
sS'block_loop.thisRepN'
p1245
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1246
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p1247
Nsg69
Vn
sS'block_loop.thisTrialN'
p1248
I0
sg39
F1.8165640694605827
sg34
g752
(S'\x07\xdf\t\x1d\x105\x19\x0e\xc5@'
tRp1249
sa(dp1250
S'trial_loop.thisTrialN'
p1251
I22
sg894
g945
sS'block_loop.thisIndex'
p1252
g888
sg38
S'left'
p1253
sg58
g62
sS'trial_loop.thisN'
p1254
I22
sg33
g956
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
g953
sS'block_loop.thisRepN'
p1258
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1259
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F1.3171482349025609
sg34
g752
(S'\x07\xdf\t\x1d\x105 \x0cwh'
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
S'36-fig_rolls.png'
p1265
sS'block_loop.thisIndex'
p1266
g888
sg38
S'left'
p1267
sg58
g62
sS'trial_loop.thisN'
p1268
I23
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1269
g59
(g98
S'\x17\x00\x00\x00'
tRp1270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1271
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1272
sS'block_loop.thisRepN'
p1273
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vn
sS'block_loop.thisTrialN'
p1276
I0
sg39
F1.9335049242108653
sg34
g752
(S"\x07\xdf\t\x1d\x105'\x02\x88p"
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
S'41-peanuts_redo.png'
p1280
sS'block_loop.thisIndex'
p1281
g888
sg38
S'right'
p1282
sg58
g62
sS'trial_loop.thisN'
p1283
I24
sg33
S'45-chewy_nougat_redo.png'
p1284
sg63
g64
sS'trial_loop.thisIndex'
p1285
g59
(g98
S'\x18\x00\x00\x00'
tRp1286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1287
I0
sg903
S'45-chewy_nougat_redo.png'
p1288
sS'block_loop.thisRepN'
p1289
I0
sg906
S'41-peanuts_redo.png'
p1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1291
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p1292
Nsg69
Vn
sS'block_loop.thisTrialN'
p1293
I0
sg39
F2.0334448255889583
sg34
g752
(S'\x07\xdf\t\x1d\x105.\x02\x1e\xf8'
tRp1294
sa(dp1295
S'trial_loop.thisTrialN'
p1296
I25
sg894
g1011
sS'block_loop.thisIndex'
p1297
g888
sg38
S'right'
p1298
sg58
g62
sS'trial_loop.thisN'
p1299
I25
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p1300
g59
(g98
S'\x19\x00\x00\x00'
tRp1301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1302
I0
sg903
g1019
sS'block_loop.thisRepN'
p1303
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1304
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p1305
Nsg69
Vn
sS'block_loop.thisTrialN'
p1306
I0
sg39
F2.0001938665191119
sg34
g752
(S'\x07\xdf\t\x1d\x1055\x03$\xb0'
tRp1307
sa(dp1308
S'trial_loop.thisTrialN'
p1309
I26
sg894
g979
sS'block_loop.thisIndex'
p1310
g888
sg38
S'right'
p1311
sg58
g62
sS'trial_loop.thisN'
p1312
I26
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1313
g59
(g98
S'\x1a\x00\x00\x00'
tRp1314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1315
I0
sg903
g987
sS'block_loop.thisRepN'
p1316
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1317
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p1318
Nsg69
Vn
sS'block_loop.thisTrialN'
p1319
I0
sg39
F1.6835217449806805
sg34
g752
(S'\x07\xdf\t\x1d\x106\x00\x03\xb1P'
tRp1320
sa(dp1321
S'trial_loop.thisTrialN'
p1322
I27
sg894
S'13-mccoys_steak_crisps.png'
p1323
sS'block_loop.thisIndex'
p1324
g888
sg38
S'left'
p1325
sg58
g62
sS'trial_loop.thisN'
p1326
I27
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1327
g59
(g98
S'\x1b\x00\x00\x00'
tRp1328
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1329
I0
sg903
S'3-ellas_strawberries_apples.png'
p1330
sS'block_loop.thisRepN'
p1331
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1332
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1333
Nsg69
Vn
sS'block_loop.thisTrialN'
p1334
I0
sg39
F1.7338674546008406
sg34
g752
(S'\x07\xdf\t\x1d\x106\x06\x0e~\xf0'
tRp1335
sa(dp1336
S'trial_loop.thisTrialN'
p1337
I28
sg894
g1265
sS'block_loop.thisIndex'
p1338
g888
sg38
S'left'
p1339
sg58
g62
sS'trial_loop.thisN'
p1340
I28
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1341
g59
(g98
S'\x1c\x00\x00\x00'
tRp1342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1343
I0
sg903
g1272
sS'block_loop.thisRepN'
p1344
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1345
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p1346
Nsg69
Vn
sS'block_loop.thisTrialN'
p1347
I0
sg39
F1.0501584003504831
sg34
g752
(S'\x07\xdf\t\x1d\x106\r\n\xfc\x80'
tRp1348
sa(dp1349
S'trial_loop.thisTrialN'
p1350
I29
sg894
S'43-mrporky_pork_crackles_redo.png'
p1351
sS'block_loop.thisIndex'
p1352
g888
sg38
S'left'
p1353
sg58
g62
sS'trial_loop.thisN'
p1354
I29
sg33
S'18-mms.png'
p1355
sg63
g64
sS'trial_loop.thisIndex'
p1356
g59
(g98
S'\x1d\x00\x00\x00'
tRp1357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1358
I0
sg903
S'18-mms.png'
p1359
sS'block_loop.thisRepN'
p1360
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1361
I0
sg908
S'43-mrporky_pork_crackles_redo.png'
p1362
sg55
g11
sS'block_loop.thisTrial'
p1363
Nsg69
Vn
sS'block_loop.thisTrialN'
p1364
I0
sg39
F2.5000966481602518
sg34
g752
(S'\x07\xdf\t\x1d\x106\x13\x0cD\xa0'
tRp1365
sa(dp1366
S'trial_loop.thisTrialN'
p1367
I30
sg894
S'35-raisins.png'
p1368
sS'block_loop.thisIndex'
p1369
g888
sg38
S'right'
p1370
sg58
g62
sS'trial_loop.thisN'
p1371
I30
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p1372
g59
(g98
S'\x1e\x00\x00\x00'
tRp1373
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1374
I0
sg903
S'49-yorkie.png'
p1375
sS'block_loop.thisRepN'
p1376
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1377
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vn
sS'block_loop.thisTrialN'
p1379
I0
sg39
F1.6501664401075686
sg34
g752
(S'\x07\xdf\t\x1d\x106\x1b\x05,8'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
g1205
sS'block_loop.thisIndex'
p1383
g888
sg38
S'right'
p1384
sg58
g62
sS'trial_loop.thisN'
p1385
I31
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p1386
g59
(g98
S'\x1f\x00\x00\x00'
tRp1387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1388
I0
sg903
g1213
sS'block_loop.thisRepN'
p1389
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1390
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1391
Nsg69
Vn
sS'block_loop.thisTrialN'
p1392
I0
sg39
F1.4835127929109149
sg34
g752
(S'\x07\xdf\t\x1d\x106"\x00>\x80'
tRp1393
sa(dp1394
S'trial_loop.thisTrialN'
p1395
I32
sg894
S'46-pistachios.png'
p1396
sS'block_loop.thisIndex'
p1397
g888
sg38
S'right'
p1398
sg58
g62
sS'trial_loop.thisN'
p1399
I32
sg33
S'46-pistachios.png'
p1400
sg63
g64
sS'trial_loop.thisIndex'
p1401
g59
(g98
S' \x00\x00\x00'
tRp1402
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1403
I0
sg903
S'29-beans.png'
p1404
sS'block_loop.thisRepN'
p1405
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1406
I0
sg908
S'29-beans.png'
p1407
sg55
g11
sS'block_loop.thisTrial'
p1408
Nsg69
Vn
sS'block_loop.thisTrialN'
p1409
I0
sg39
F1.5668548692447075
sg34
g752
(S'\x07\xdf\t\x1d\x106(\x081\xa8'
tRp1410
sa(dp1411
S'trial_loop.thisTrialN'
p1412
I33
sg894
S'10-bounty_redo.png'
p1413
sS'block_loop.thisIndex'
p1414
g888
sg38
S'right'
p1415
sg58
g62
sS'trial_loop.thisN'
p1416
I33
sg33
S'10-bounty_redo.png'
p1417
sg63
g64
sS'trial_loop.thisIndex'
p1418
g59
(g98
S'!\x00\x00\x00'
tRp1419
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1420
I0
sg903
S'4-corn.png'
p1421
sS'block_loop.thisRepN'
p1422
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1423
I0
sg908
S'4-corn.png'
p1424
sg55
g11
sS'block_loop.thisTrial'
p1425
Nsg69
Vn
sS'block_loop.thisTrialN'
p1426
I0
sg39
F2.9168472286219185
sg34
g752
(S'\x07\xdf\t\x1d\x106/\x02\x0fX'
tRp1427
sa(dp1428
S'trial_loop.thisTrialN'
p1429
I34
sg894
g1396
sS'block_loop.thisIndex'
p1430
g888
sg38
S'left'
p1431
sg58
g62
sS'trial_loop.thisN'
p1432
I34
sg33
g1407
sg63
g64
sS'trial_loop.thisIndex'
p1433
g59
(g98
S'"\x00\x00\x00'
tRp1434
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1435
I0
sg903
g1404
sS'block_loop.thisRepN'
p1436
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1437
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p1438
Nsg69
Vn
sS'block_loop.thisTrialN'
p1439
I0
sg39
F0.96692808236184646
sg34
g752
(S'\x07\xdf\t\x1d\x1067\x01cx'
tRp1440
sa(dp1441
S'trial_loop.thisTrialN'
p1442
I35
sg894
S'40-sardines.png'
p1443
sS'block_loop.thisIndex'
p1444
g888
sg38
S'left'
p1445
sg58
g62
sS'trial_loop.thisN'
p1446
I35
sg33
S'5-pineapple.png'
p1447
sg63
g64
sS'trial_loop.thisIndex'
p1448
g59
(g98
S'#\x00\x00\x00'
tRp1449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1450
I0
sg903
S'5-pineapple.png'
p1451
sS'block_loop.thisRepN'
p1452
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1453
I0
sg908
S'40-sardines.png'
p1454
sg55
g11
sS'block_loop.thisTrial'
p1455
Nsg69
Vn
sS'block_loop.thisTrialN'
p1456
I0
sg39
F2.0001704884962237
sg34
g752
(S'\x07\xdf\t\x1d\x107\x01\x01@P'
tRp1457
sa(dp1458
S'trial_loop.thisTrialN'
p1459
I36
sg894
g1280
sS'block_loop.thisIndex'
p1460
g888
sg38
S'right'
p1461
sg58
g62
sS'trial_loop.thisN'
p1462
I36
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p1463
g59
(g98
S'$\x00\x00\x00'
tRp1464
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1465
I0
sg903
g1288
sS'block_loop.thisRepN'
p1466
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1467
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p1468
Nsg69
Vn
sS'block_loop.thisTrialN'
p1469
I0
sg39
F1.3334390095915296
sg34
g752
(S'\x07\xdf\t\x1d\x107\x08\x01\xc9\x08'
tRp1470
sa(dp1471
S'trial_loop.thisTrialN'
p1472
I37
sg894
S'44-crunch.png'
p1473
sS'block_loop.thisIndex'
p1474
g888
sg38
S'right'
p1475
sg58
g62
sS'trial_loop.thisN'
p1476
I37
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p1477
g59
(g98
S'%\x00\x00\x00'
tRp1478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1479
I0
sg903
S'26-walkers_smoky_bacon.png'
p1480
sS'block_loop.thisRepN'
p1481
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1482
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p1483
Nsg69
Vn
sS'block_loop.thisTrialN'
p1484
I0
sg39
F2.0335357717922307
sg34
g752
(S'\x07\xdf\t\x1d\x107\x0e\x07Z\xd0'
tRp1485
sa(dp1486
S'trial_loop.thisTrialN'
p1487
I38
sg894
S'4-corn.png'
p1488
sS'block_loop.thisIndex'
p1489
g888
sg38
S'right'
p1490
sg58
g62
sS'trial_loop.thisN'
p1491
I38
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p1492
g59
(g98
S'&\x00\x00\x00'
tRp1493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1494
I0
sg903
S'10-bounty_redo.png'
p1495
sS'block_loop.thisRepN'
p1496
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1497
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p1498
Nsg69
Vn
sS'block_loop.thisTrialN'
p1499
I0
sg39
F5.2500590152521909
sg34
g752
(S'\x07\xdf\t\x1d\x107\x15\x08`\x88'
tRp1500
sa(dp1501
S'trial_loop.thisTrialN'
p1502
I39
sg894
g915
sS'block_loop.thisIndex'
p1503
g888
sg38
S'left'
p1504
sg58
g62
sS'trial_loop.thisN'
p1505
I39
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1506
g59
(g98
S"'\x00\x00\x00"
tRp1507
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1508
I0
sg903
g923
sS'block_loop.thisRepN'
p1509
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1510
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1511
Nsg69
Vn
sS'block_loop.thisTrialN'
p1512
I0
sg39
F0.93346900188407744
sg34
g752
(S'\x07\xdf\t\x1d\x107\x1f\x0c\xe4\xc8'
tRp1513
sa(dp1514
S'trial_loop.thisTrialN'
p1515
I40
sg894
g1280
sS'block_loop.thisIndex'
p1516
g888
sg38
S'right'
p1517
sg58
g62
sS'trial_loop.thisN'
p1518
I40
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p1519
g59
(g98
S'(\x00\x00\x00'
tRp1520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1521
I0
sg903
g1288
sS'block_loop.thisRepN'
p1522
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1523
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p1524
Nsg69
Vn
sS'block_loop.thisTrialN'
p1525
I0
sg39
F1.100077888724627
sg34
g752
(S'\x07\xdf\t\x1d\x107%\x0cD\xa0'
tRp1526
sa(dp1527
S'trial_loop.thisTrialN'
p1528
I41
sg894
S'31-hobnobs.png'
p1529
sS'block_loop.thisIndex'
p1530
g888
sg38
S'left'
p1531
sg58
g62
sS'trial_loop.thisN'
p1532
I41
sg33
g1090
sg63
g64
sS'trial_loop.thisIndex'
p1533
g59
(g98
S')\x00\x00\x00'
tRp1534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1535
I0
sg903
S'25-kitkat.png'
p1536
sS'block_loop.thisRepN'
p1537
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1538
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1539
Nsg69
Vn
sS'block_loop.thisTrialN'
p1540
I0
sg39
F2.3834232151712058
sg34
g752
(S'\x07\xdf\t\x1d\x107+\x0eDX'
tRp1541
sa(dp1542
S'trial_loop.thisTrialN'
p1543
I42
sg894
g1280
sS'block_loop.thisIndex'
p1544
g888
sg38
S'right'
p1545
sg58
g62
sS'trial_loop.thisN'
p1546
I42
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p1547
g59
(g98
S'*\x00\x00\x00'
tRp1548
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1549
I0
sg903
g1288
sS'block_loop.thisRepN'
p1550
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1551
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p1552
Nsg69
Vn
sS'block_loop.thisTrialN'
p1553
I0
sg39
F0.90049487280339235
sg34
g752
(S'\x07\xdf\t\x1d\x1073\x05\x82('
tRp1554
sa(dp1555
S'trial_loop.thisTrialN'
p1556
I43
sg894
g895
sS'block_loop.thisIndex'
p1557
g888
sg38
S'right'
p1558
sg58
g62
sS'trial_loop.thisN'
p1559
I43
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1560
g59
(g98
S'+\x00\x00\x00'
tRp1561
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1562
I0
sg903
g904
sS'block_loop.thisRepN'
p1563
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1564
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1565
Nsg69
Vn
sS'block_loop.thisTrialN'
p1566
I0
sg39
F1.8168351974927646
sg34
g752
(S'\x07\xdf\t\x1d\x1079\x04h\xe8'
tRp1567
sa(dp1568
S'trial_loop.thisTrialN'
p1569
I44
sg894
g1113
sS'block_loop.thisIndex'
p1570
g888
sg38
S'right'
p1571
sg58
g62
sS'trial_loop.thisN'
p1572
I44
sg33
g1124
sg63
g64
sS'trial_loop.thisIndex'
p1573
g59
(g98
S',\x00\x00\x00'
tRp1574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1575
I0
sg903
g1121
sS'block_loop.thisRepN'
p1576
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1577
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg69
Vn
sS'block_loop.thisTrialN'
p1579
I0
sg39
F1.2167533173960692
sg34
g752
(S'\x07\xdf\t\x1d\x108\x04\x02\x17('
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I45
sg894
g1130
sS'block_loop.thisIndex'
p1583
g888
sg38
S'left'
p1584
sg58
g62
sS'trial_loop.thisN'
p1585
I45
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p1586
g59
(g98
S'-\x00\x00\x00'
tRp1587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1588
I0
sg903
g1138
sS'block_loop.thisRepN'
p1589
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1590
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p1591
Nsg69
Vn
sS'block_loop.thisTrialN'
p1592
I0
sg39
F1.7834559444017941
sg34
g752
(S'\x07\xdf\t\x1d\x108\n\x05\xff('
tRp1593
sa(dp1594
S'trial_loop.thisTrialN'
p1595
I46
sg894
g915
sS'block_loop.thisIndex'
p1596
g888
sg38
S'left'
p1597
sg58
g62
sS'trial_loop.thisN'
p1598
I46
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1599
g59
(g98
S'.\x00\x00\x00'
tRp1600
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1601
I0
sg903
g923
sS'block_loop.thisRepN'
p1602
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1603
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1604
Nsg69
Vn
sS'block_loop.thisTrialN'
p1605
I0
sg39
F0.91690852465399075
sg34
g752
(S'\x07\xdf\t\x1d\x108\x11\x034P'
tRp1606
sa(dp1607
S'trial_loop.thisTrialN'
p1608
I47
sg894
S'19-caramello_redo.png'
p1609
sS'block_loop.thisIndex'
p1610
g888
sg38
S'left'
p1611
sg58
g62
sS'trial_loop.thisN'
p1612
I47
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1613
g59
(g98
S'/\x00\x00\x00'
tRp1614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1615
I0
sg903
S'30-spaghetti_hoops.png'
p1616
sS'block_loop.thisRepN'
p1617
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1618
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1619
Nsg69
Vn
sS'block_loop.thisTrialN'
p1620
I0
sg39
F1.8835301268591138
sg34
g752
(S'\x07\xdf\t\x1d\x108\x17\x02Y\x90'
tRp1621
sa(dp1622
S'trial_loop.thisTrialN'
p1623
I48
sg894
g962
sS'block_loop.thisIndex'
p1624
g888
sg38
S'left'
p1625
sg58
g62
sS'trial_loop.thisN'
p1626
I48
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p1627
g59
(g98
S'0\x00\x00\x00'
tRp1628
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1629
I0
sg903
g970
sS'block_loop.thisRepN'
p1630
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1631
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p1632
Nsg69
Vn
sS'block_loop.thisTrialN'
p1633
I0
sg39
F2.4500477253750432
sg34
g752
(S'\x07\xdf\t\x1d\x108\x1e\x00\xfa\x00'
tRp1634
sa(dp1635
S'trial_loop.thisTrialN'
p1636
I49
sg894
S'42-mrkipling_lemon_slices.png'
p1637
sS'block_loop.thisIndex'
p1638
g888
sg38
S'left'
p1639
sg58
g62
sS'trial_loop.thisN'
p1640
I49
sg33
g1039
sg63
g64
sS'trial_loop.thisIndex'
p1641
g59
(g98
S'1\x00\x00\x00'
tRp1642
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1643
I0
sg903
S'16-skips_prawn.png'
p1644
sS'block_loop.thisRepN'
p1645
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1646
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1647
Nsg69
Vn
sS'block_loop.thisTrialN'
p1648
I0
sg39
F2.999942410238873
sg34
g752
(S'\x07\xdf\t\x1d\x108%\x08l@'
tRp1649
sa(dp1650
S'trial_loop.thisTrialN'
p1651
I50
sg894
g1368
sS'block_loop.thisIndex'
p1652
g888
sg38
S'right'
p1653
sg58
g62
sS'trial_loop.thisN'
p1654
I50
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p1655
g59
(g98
S'2\x00\x00\x00'
tRp1656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1657
I0
sg903
g1375
sS'block_loop.thisRepN'
p1658
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1659
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p1660
Nsg69
Vn
sS'block_loop.thisTrialN'
p1661
I0
sg39
F1.9334461940597976
sg34
g752
(S'\x07\xdf\t\x1d\x108-\x08\xf1\x10'
tRp1662
sa(dp1663
S'trial_loop.thisTrialN'
p1664
I51
sg894
g1637
sS'block_loop.thisIndex'
p1665
g888
sg38
S'right'
p1666
sg58
g62
sS'trial_loop.thisN'
p1667
I51
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p1668
g59
(g98
S'3\x00\x00\x00'
tRp1669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1670
I0
sg903
g1644
sS'block_loop.thisRepN'
p1671
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1672
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p1673
Nsg69
Vn
sS'block_loop.thisTrialN'
p1674
I0
sg39
F1.8333027328335447
sg34
g752
(S'\x07\xdf\t\x1d\x1084\x08\x8b\x80'
tRp1675
sa(dp1676
S'trial_loop.thisTrialN'
p1677
I52
sg894
S'45-chewy_nougat_redo.png'
p1678
sS'block_loop.thisIndex'
p1679
g888
sg38
S'left'
p1680
sg58
g62
sS'trial_loop.thisN'
p1681
I52
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p1682
g59
(g98
S'4\x00\x00\x00'
tRp1683
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1684
I0
sg903
S'41-peanuts_redo.png'
p1685
sS'block_loop.thisRepN'
p1686
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1687
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg69
Vn
sS'block_loop.thisTrialN'
p1689
I0
sg39
F1.1167256058906787
sg34
g752
(S'\x07\xdf\t\x1d\x108;\x06x@'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I53
sg894
g1045
sS'block_loop.thisIndex'
p1693
g888
sg38
S'right'
p1694
sg58
g62
sS'trial_loop.thisN'
p1695
I53
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p1696
g59
(g98
S'5\x00\x00\x00'
tRp1697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1698
I0
sg903
g1053
sS'block_loop.thisRepN'
p1699
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1700
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p1701
Nsg69
Vn
sS'block_loop.thisTrialN'
p1702
I0
sg39
F1.8168323465142748
sg34
g752
(S'\x07\xdf\t\x1d\x109\x05\x08\xb2\x90'
tRp1703
sa(dp1704
S'trial_loop.thisTrialN'
p1705
I54
sg894
S'18-mms.png'
p1706
sS'block_loop.thisIndex'
p1707
g888
sg38
S'left'
p1708
sg58
g62
sS'trial_loop.thisN'
p1709
I54
sg33
g1355
sg63
g64
sS'trial_loop.thisIndex'
p1710
g59
(g98
S'6\x00\x00\x00'
tRp1711
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1712
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1713
sS'block_loop.thisRepN'
p1714
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1715
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p1716
Nsg69
Vn
sS'block_loop.thisTrialN'
p1717
I0
sg39
F1.4668251620496449
sg34
g752
(S'\x07\xdf\t\x1d\x109\x0c\x06`\xd0'
tRp1718
sa(dp1719
S'trial_loop.thisTrialN'
p1720
I55
sg894
S'5-pineapple.png'
p1721
sS'block_loop.thisIndex'
p1722
g888
sg38
S'left'
p1723
sg58
g62
sS'trial_loop.thisN'
p1724
I55
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p1725
g59
(g98
S'7\x00\x00\x00'
tRp1726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1727
I0
sg903
S'40-sardines.png'
p1728
sS'block_loop.thisRepN'
p1729
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1730
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p1731
Nsg69
Vn
sS'block_loop.thisTrialN'
p1732
I0
sg39
F1.5668371931787988
sg34
g752
(S'\x07\xdf\t\x1d\x109\x12\x0e\x19`'
tRp1733
sa(dp1734
S'trial_loop.thisTrialN'
p1735
I56
sg894
S'29-beans.png'
p1736
sS'block_loop.thisIndex'
p1737
g888
sg38
S'right'
p1738
sg58
g62
sS'trial_loop.thisN'
p1739
I56
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p1740
g59
(g98
S'8\x00\x00\x00'
tRp1741
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1742
I0
sg903
S'46-pistachios.png'
p1743
sS'block_loop.thisRepN'
p1744
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1745
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p1746
Nsg69
Vn
sS'block_loop.thisTrialN'
p1747
I0
sg39
F0.95009733239930938
sg34
g752
(S'\x07\xdf\t\x1d\x109\x19\x07\xf7\x10'
tRp1748
sa(dp1749
S'trial_loop.thisTrialN'
p1750
I57
sg894
g1323
sS'block_loop.thisIndex'
p1751
g888
sg38
S'right'
p1752
sg58
g62
sS'trial_loop.thisN'
p1753
I57
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1754
g59
(g98
S'9\x00\x00\x00'
tRp1755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1756
I0
sg903
g1330
sS'block_loop.thisRepN'
p1757
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1758
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1759
Nsg69
Vn
sS'block_loop.thisTrialN'
p1760
I0
sg39
F1.0005633533000946
sg34
g752
(S'\x07\xdf\t\x1d\x109\x1f\x07\x95h'
tRp1761
sa(dp1762
S'trial_loop.thisTrialN'
p1763
I58
sg894
g979
sS'block_loop.thisIndex'
p1764
g888
sg38
S'right'
p1765
sg58
g62
sS'trial_loop.thisN'
p1766
I58
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p1767
g59
(g98
S':\x00\x00\x00'
tRp1768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1769
I0
sg903
g987
sS'block_loop.thisRepN'
p1770
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1771
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p1772
Nsg69
Vn
sS'block_loop.thisTrialN'
p1773
I0
sg39
F2.2501066265867848
sg34
g752
(S'\x07\xdf\t\x1d\x109%\x08%\xf0'
tRp1774
sa(dp1775
S'trial_loop.thisTrialN'
p1776
I59
sg894
g1130
sS'block_loop.thisIndex'
p1777
g888
sg38
S'right'
p1778
sg58
g62
sS'trial_loop.thisN'
p1779
I59
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p1780
g59
(g98
S';\x00\x00\x00'
tRp1781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1782
I0
sg903
g1138
sS'block_loop.thisRepN'
p1783
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1784
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p1785
Nsg69
Vn
sS'block_loop.thisTrialN'
p1786
I0
sg39
F1.4001852565670561
sg34
g752
(S'\x07\xdf\t\x1d\x109,\x0c\x83 '
tRp1787
sa(dp1788
S'trial_loop.thisTrialN'
p1789
I60
sg894
g1678
sS'block_loop.thisIndex'
p1790
g888
sg38
S'left'
p1791
sg58
g62
sS'trial_loop.thisN'
p1792
I60
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p1793
g59
(g98
S'<\x00\x00\x00'
tRp1794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1795
I0
sg903
g1685
sS'block_loop.thisRepN'
p1796
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1797
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p1798
Nsg69
Vn
sS'block_loop.thisTrialN'
p1799
I0
sg39
F0.81692699899213039
sg34
g752
(S'\x07\xdf\t\x1d\x1093\x03\xc4\xd8'
tRp1800
sa(dp1801
S'trial_loop.thisTrialN'
p1802
I61
sg894
S'27-hartleys_raspberries_jelly.png'
p1803
sS'block_loop.thisIndex'
p1804
g888
sg38
S'left'
p1805
sg58
g62
sS'trial_loop.thisN'
p1806
I61
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p1807
g59
(g98
S'=\x00\x00\x00'
tRp1808
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1809
I0
sg903
S'51-mars.png'
p1810
sS'block_loop.thisRepN'
p1811
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1812
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1813
Nsg69
Vn
sS'block_loop.thisTrialN'
p1814
I0
sg39
F1.5001077669767255
sg34
g752
(S'\x07\xdf\t\x1d\x1099\x01z\xe8'
tRp1815
sa(dp1816
S'trial_loop.thisTrialN'
p1817
I62
sg894
g1130
sS'block_loop.thisIndex'
p1818
g888
sg38
S'right'
p1819
sg58
g62
sS'trial_loop.thisN'
p1820
I62
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p1821
g59
(g98
S'>\x00\x00\x00'
tRp1822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1823
I0
sg903
g1138
sS'block_loop.thisRepN'
p1824
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1825
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p1826
Nsg69
Vn
sS'block_loop.thisTrialN'
p1827
I0
sg39
F1.933938557998772
sg34
g752
(S'\x07\xdf\t\x1d\x10:\x03\t\xa8\xa8'
tRp1828
sa(dp1829
S'trial_loop.thisTrialN'
p1830
I63
sg894
g1079
sS'block_loop.thisIndex'
p1831
g888
sg38
S'left'
p1832
sg58
g62
sS'trial_loop.thisN'
p1833
I63
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1834
g59
(g98
S'?\x00\x00\x00'
tRp1835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1836
I0
sg903
g1087
sS'block_loop.thisRepN'
p1837
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1838
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1839
Nsg69
Vn
sS'block_loop.thisTrialN'
p1840
I0
sg39
F1.55011877175275
sg34
g752
(S'\x07\xdf\t\x1d\x10:\n\tC\x18'
tRp1841
sa(dp1842
S'trial_loop.thisTrialN'
p1843
I64
sg894
g1323
sS'block_loop.thisIndex'
p1844
g888
sg38
S'right'
p1845
sg58
g62
sS'trial_loop.thisN'
p1846
I64
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1847
g59
(g98
S'@\x00\x00\x00'
tRp1848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1849
I0
sg903
g1330
sS'block_loop.thisRepN'
p1850
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1851
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1852
Nsg69
Vn
sS'block_loop.thisTrialN'
p1853
I0
sg39
F0.80011563567677513
sg34
g752
(S'\x07\xdf\t\x1d\x10:\x11\x02\xe60'
tRp1854
sa(dp1855
S'trial_loop.thisTrialN'
p1856
I65
sg894
g1079
sS'block_loop.thisIndex'
p1857
g888
sg38
S'left'
p1858
sg58
g62
sS'trial_loop.thisN'
p1859
I65
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1860
g59
(g98
S'A\x00\x00\x00'
tRp1861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1862
I0
sg903
g1087
sS'block_loop.thisRepN'
p1863
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1864
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p1865
Nsg69
Vn
sS'block_loop.thisTrialN'
p1866
I0
sg39
F2.716817179309146
sg34
g752
(S'\x07\xdf\t\x1d\x10:\x17\x00]\xc0'
tRp1867
sa(dp1868
S'trial_loop.thisTrialN'
p1869
I66
sg894
g1413
sS'block_loop.thisIndex'
p1870
g888
sg38
S'left'
p1871
sg58
g62
sS'trial_loop.thisN'
p1872
I66
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p1873
g59
(g98
S'B\x00\x00\x00'
tRp1874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1875
I0
sg903
g1421
sS'block_loop.thisRepN'
p1876
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1877
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p1878
Nsg69
Vn
sS'block_loop.thisTrialN'
p1879
I0
sg39
F1.3335259644263715
sg34
g752
(S'\x07\xdf\t\x1d\x10:\x1e\x0b\xdb('
tRp1880
sa(dp1881
S'trial_loop.thisTrialN'
p1882
I67
sg894
g1205
sS'block_loop.thisIndex'
p1883
g888
sg38
S'right'
p1884
sg58
g62
sS'trial_loop.thisN'
p1885
I67
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p1886
g59
(g98
S'C\x00\x00\x00'
tRp1887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1888
I0
sg903
g1213
sS'block_loop.thisRepN'
p1889
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1890
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1891
Nsg69
Vn
sS'block_loop.thisTrialN'
p1892
I0
sg39
F1.2837208002783882
sg34
g752
(S'\x07\xdf\t\x1d\x10:%\x02*\xb0'
tRp1893
sa(dp1894
S'trial_loop.thisTrialN'
p1895
I68
sg894
S'23-crunchie_redo.png'
p1896
sS'block_loop.thisIndex'
p1897
g888
sg38
S'right'
p1898
sg58
g62
sS'trial_loop.thisN'
p1899
I68
sg33
g1124
sg63
g64
sS'trial_loop.thisIndex'
p1900
g59
(g98
S'D\x00\x00\x00'
tRp1901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1902
I0
sg903
S'33-ambrosia_rice.png'
p1903
sS'block_loop.thisRepN'
p1904
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1905
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p1906
Nsg69
Vn
sS'block_loop.thisTrialN'
p1907
I0
sg39
F1.6002201525370765
sg34
g752
(S'\x07\xdf\t\x1d\x10:+\x07\x04\xe0'
tRp1908
sa(dp1909
S'trial_loop.thisTrialN'
p1910
I69
sg894
g1443
sS'block_loop.thisIndex'
p1911
g888
sg38
S'right'
p1912
sg58
g62
sS'trial_loop.thisN'
p1913
I69
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p1914
g59
(g98
S'E\x00\x00\x00'
tRp1915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1916
I0
sg903
g1451
sS'block_loop.thisRepN'
p1917
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1918
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p1919
Nsg69
Vn
sS'block_loop.thisTrialN'
p1920
I0
sg39
F1.2168502506574441
sg34
g752
(S'\x07\xdf\t\x1d\x10:2\x01_\x90'
tRp1921
sa(dp1922
S'trial_loop.thisTrialN'
p1923
I70
sg894
g1160
sS'block_loop.thisIndex'
p1924
g888
sg38
S'right'
p1925
sg58
g62
sS'trial_loop.thisN'
p1926
I70
sg33
g949
sg63
g64
sS'trial_loop.thisIndex'
p1927
g59
(g98
S'F\x00\x00\x00'
tRp1928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1929
I0
sg903
g1167
sS'block_loop.thisRepN'
p1930
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1931
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p1932
Nsg69
Vn
sS'block_loop.thisTrialN'
p1933
I0
sg39
F2.7500382031103072
sg34
g752
(S'\x07\xdf\t\x1d\x10:8\x05\t\x10'
tRp1934
sa(dp1935
S'trial_loop.thisTrialN'
p1936
I71
sg894
g1175
sS'block_loop.thisIndex'
p1937
g888
sg38
S'right'
p1938
sg58
g62
sS'trial_loop.thisN'
p1939
I71
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p1940
g59
(g98
S'G\x00\x00\x00'
tRp1941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1942
I0
sg903
g1183
sS'block_loop.thisRepN'
p1943
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1944
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p1945
Nsg69
Vn
sS'block_loop.thisTrialN'
p1946
I0
sg39
F2.4998238095467968
sg34
g752
(S'\x07\xdf\t\x1d\x10;\x04\x01\xc18'
tRp1947
sa(dp1948
S'trial_loop.thisTrialN'
p1949
I72
sg894
g1011
sS'block_loop.thisIndex'
p1950
g888
sg38
S'right'
p1951
sg58
g62
sS'trial_loop.thisN'
p1952
I72
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p1953
g59
(g98
S'H\x00\x00\x00'
tRp1954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1955
I0
sg903
g1019
sS'block_loop.thisRepN'
p1956
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1957
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p1958
Nsg69
Vn
sS'block_loop.thisTrialN'
p1959
I0
sg39
F1.9499131592019694
sg34
g752
(S'\x07\xdf\t\x1d\x10;\x0b\t\xe7('
tRp1960
sa(dp1961
S'trial_loop.thisTrialN'
p1962
I73
sg894
g1896
sS'block_loop.thisIndex'
p1963
g888
sg38
S'right'
p1964
sg58
g62
sS'trial_loop.thisN'
p1965
I73
sg33
g1124
sg63
g64
sS'trial_loop.thisIndex'
p1966
g59
(g98
S'I\x00\x00\x00'
tRp1967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1968
I0
sg903
g1903
sS'block_loop.thisRepN'
p1969
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1970
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p1971
Nsg69
Vn
sS'block_loop.thisTrialN'
p1972
I0
sg39
F1.1668212847180257
sg34
g752
(S'\x07\xdf\t\x1d\x10;\x12\t\xbc0'
tRp1973
sa(dp1974
S'trial_loop.thisTrialN'
p1975
I74
sg894
g1265
sS'block_loop.thisIndex'
p1976
g888
sg38
S'left'
p1977
sg58
g62
sS'trial_loop.thisN'
p1978
I74
sg33
g990
sg63
g64
sS'trial_loop.thisIndex'
p1979
g59
(g98
S'J\x00\x00\x00'
tRp1980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1981
I0
sg903
g1272
sS'block_loop.thisRepN'
p1982
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1983
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p1984
Nsg69
Vn
sS'block_loop.thisTrialN'
p1985
I0
sg39
F1.1835174685147649
sg34
g752
(S'\x07\xdf\t\x1d\x10;\x18\x0c\xae\x18'
tRp1986
sa(dp1987
S'trial_loop.thisTrialN'
p1988
I75
sg894
S'1-treacle_cookies.png'
p1989
sS'block_loop.thisIndex'
p1990
g888
sg38
S'left'
p1991
sg58
g62
sS'trial_loop.thisN'
p1992
I75
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p1993
g59
(g98
S'K\x00\x00\x00'
tRp1994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1995
I0
sg903
S'21-nakd_banana_crunch.png'
p1996
sS'block_loop.thisRepN'
p1997
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1998
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p1999
Nsg69
Vn
sS'block_loop.thisTrialN'
p2000
I0
sg39
F0.93340428467854508
sg34
g752
(S'\x07\xdf\t\x1d\x10;\x1f\x00\xda\xc0'
tRp2001
sa(dp2002
S'trial_loop.thisTrialN'
p2003
I76
sg894
g996
sS'block_loop.thisIndex'
p2004
g888
sg38
S'right'
p2005
sg58
g62
sS'trial_loop.thisN'
p2006
I76
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2007
g59
(g98
S'L\x00\x00\x00'
tRp2008
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2009
I0
sg903
g1003
sS'block_loop.thisRepN'
p2010
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2011
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2012
Nsg69
Vn
sS'block_loop.thisTrialN'
p2013
I0
sg39
F2.4501543519618281
sg34
g752
(S'\x07\xdf\t\x1d\x10;%\x00:\x98'
tRp2014
sa(dp2015
S'trial_loop.thisTrialN'
p2016
I77
sg894
g1989
sS'block_loop.thisIndex'
p2017
g888
sg38
S'left'
p2018
sg58
g62
sS'trial_loop.thisN'
p2019
I77
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p2020
g59
(g98
S'M\x00\x00\x00'
tRp2021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2022
I0
sg903
g1996
sS'block_loop.thisRepN'
p2023
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2024
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p2025
Nsg69
Vn
sS'block_loop.thisTrialN'
p2026
I0
sg39
F1.9169672548050585
sg34
g752
(S'\x07\xdf\t\x1d\x10;,\x07\xac\xd8'
tRp2027
sa(dp2028
S'trial_loop.thisTrialN'
p2029
I78
sg894
S'50-polo.png'
p2030
sS'block_loop.thisIndex'
p2031
g888
sg38
S'right'
p2032
sg58
g62
sS'trial_loop.thisN'
p2033
I78
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2034
g59
(g98
S'N\x00\x00\x00'
tRp2035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2036
I0
sg903
S'48-twix.png'
p2037
sS'block_loop.thisRepN'
p2038
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2039
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2040
Nsg69
Vn
sS'block_loop.thisTrialN'
p2041
I0
sg39
F1.6001534396491479
sg34
g752
(S'\x07\xdf\t\x1d\x10;3\x07\x08\xc8'
tRp2042
sa(dp2043
S'trial_loop.thisTrialN'
p2044
I79
sg894
g1205
sS'block_loop.thisIndex'
p2045
g888
sg38
S'left'
p2046
sg58
g62
sS'trial_loop.thisN'
p2047
I79
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p2048
g59
(g98
S'O\x00\x00\x00'
tRp2049
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2050
I0
sg903
g1213
sS'block_loop.thisRepN'
p2051
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2052
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p2053
Nsg69
Vn
sS'block_loop.thisTrialN'
p2054
I0
sg39
F0.53348787536015152
sg34
g752
(S'\x07\xdf\t\x1d\x10;:\x01cx'
tRp2055
sa(dp2056
S'trial_loop.thisTrialN'
p2057
I80
sg894
g1443
sS'block_loop.thisIndex'
p2058
g888
sg38
S'right'
p2059
sg58
g62
sS'trial_loop.thisN'
p2060
I80
sg33
g1454
sg63
g64
sS'trial_loop.thisIndex'
p2061
g59
(g98
S'P\x00\x00\x00'
tRp2062
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2063
I0
sg903
g1451
sS'block_loop.thisRepN'
p2064
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2065
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p2066
Nsg69
Vn
sS'block_loop.thisTrialN'
p2067
I0
sg39
F1.0501706595568976
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00\x03\n\x12 '
tRp2068
sa(dp2069
S'trial_loop.thisTrialN'
p2070
I81
sg894
g979
sS'block_loop.thisIndex'
p2071
g888
sg38
S'right'
p2072
sg58
g62
sS'trial_loop.thisN'
p2073
I81
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2074
g59
(g98
S'Q\x00\x00\x00'
tRp2075
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2076
I0
sg903
g987
sS'block_loop.thisRepN'
p2077
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2078
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2079
Nsg69
Vn
sS'block_loop.thisTrialN'
p2080
I0
sg39
F1.1168718610715587
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00\t\x0bZ@'
tRp2081
sa(dp2082
S'trial_loop.thisTrialN'
p2083
I82
sg894
g1736
sS'block_loop.thisIndex'
p2084
g888
sg38
S'right'
p2085
sg58
g62
sS'trial_loop.thisN'
p2086
I82
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2087
g59
(g98
S'R\x00\x00\x00'
tRp2088
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2089
I0
sg903
g1743
sS'block_loop.thisRepN'
p2090
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2091
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p2092
Nsg69
Vn
sS'block_loop.thisTrialN'
p2093
I0
sg39
F0.98395840080775088
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00\x0f\r\x94\x90'
tRp2094
sa(dp2095
S'trial_loop.thisTrialN'
p2096
I83
sg894
g1062
sS'block_loop.thisIndex'
p2097
g888
sg38
S'right'
p2098
sg58
g62
sS'trial_loop.thisN'
p2099
I83
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2100
g59
(g98
S'S\x00\x00\x00'
tRp2101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2102
I0
sg903
g1070
sS'block_loop.thisRepN'
p2103
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2104
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p2105
Nsg69
Vn
sS'block_loop.thisTrialN'
p2106
I0
sg39
F1.8501146663438703
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00\x15\r\xac\x00'
tRp2107
sa(dp2108
S'trial_loop.thisTrialN'
p2109
I84
sg894
g1396
sS'block_loop.thisIndex'
p2110
g888
sg38
S'left'
p2111
sg58
g62
sS'trial_loop.thisN'
p2112
I84
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2113
g59
(g98
S'T\x00\x00\x00'
tRp2114
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2115
I0
sg903
g1404
sS'block_loop.thisRepN'
p2116
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2117
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p2118
Nsg69
Vn
sS'block_loop.thisTrialN'
p2119
I0
sg39
F0.68344476856873371
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00\x1c\x0c\x15\xc0'
tRp2120
sa(dp2121
S'trial_loop.thisTrialN'
p2122
I85
sg894
g1368
sS'block_loop.thisIndex'
p2123
g888
sg38
S'left'
p2124
sg58
g62
sS'trial_loop.thisN'
p2125
I85
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p2126
g59
(g98
S'U\x00\x00\x00'
tRp2127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2128
I0
sg903
g1375
sS'block_loop.thisRepN'
p2129
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2130
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p2131
Nsg69
Vn
sS'block_loop.thisTrialN'
p2132
I0
sg39
F1.8000771474726207
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00"\x07\xa5\x08'
tRp2133
sa(dp2134
S'trial_loop.thisTrialN'
p2135
I86
sg894
g996
sS'block_loop.thisIndex'
p2136
g888
sg38
S'right'
p2137
sg58
g62
sS'trial_loop.thisN'
p2138
I86
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2139
g59
(g98
S'V\x00\x00\x00'
tRp2140
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2141
I0
sg903
g1003
sS'block_loop.thisRepN'
p2142
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2143
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2144
Nsg69
Vn
sS'block_loop.thisTrialN'
p2145
I0
sg39
F1.3835295566641435
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00)\x05\x18\xb0'
tRp2146
sa(dp2147
S'trial_loop.thisTrialN'
p2148
I87
sg894
g945
sS'block_loop.thisIndex'
p2149
g888
sg38
S'left'
p2150
sg58
g62
sS'trial_loop.thisN'
p2151
I87
sg33
g949
sg63
g64
sS'trial_loop.thisIndex'
p2152
g59
(g98
S'W\x00\x00\x00'
tRp2153
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2154
I0
sg903
g953
sS'block_loop.thisRepN'
p2155
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2156
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p2157
Nsg69
Vn
sS'block_loop.thisTrialN'
p2158
I0
sg39
F1.6334713967044081
sg34
g752
(S'\x07\xdf\t\x1d\x11\x00/\x0bb\x10'
tRp2159
sa(dp2160
S'trial_loop.thisTrialN'
p2161
I88
sg894
g1280
sS'block_loop.thisIndex'
p2162
g888
sg38
S'right'
p2163
sg58
g62
sS'trial_loop.thisN'
p2164
I88
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p2165
g59
(g98
S'X\x00\x00\x00'
tRp2166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2167
I0
sg903
g1288
sS'block_loop.thisRepN'
p2168
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2169
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p2170
Nsg69
Vn
sS'block_loop.thisTrialN'
p2171
I0
sg39
F1.3335196922780597
sg34
g752
(S'\x07\xdf\t\x1d\x11\x006\x06pp'
tRp2172
sa(dp2173
S'trial_loop.thisTrialN'
p2174
I89
sg894
g1721
sS'block_loop.thisIndex'
p2175
g888
sg38
S'left'
p2176
sg58
g62
sS'trial_loop.thisN'
p2177
I89
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p2178
g59
(g98
S'Y\x00\x00\x00'
tRp2179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2180
I0
sg903
g1728
sS'block_loop.thisRepN'
p2181
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2182
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p2183
Nsg69
Vn
sS'block_loop.thisTrialN'
p2184
I0
sg39
F0.76685925974743441
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01\x00\x0c\x028'
tRp2185
sa(dp2186
S'trial_loop.thisTrialN'
p2187
I90
sg894
g1678
sS'block_loop.thisIndex'
p2188
g888
sg38
S'left'
p2189
sg58
g62
sS'trial_loop.thisN'
p2190
I90
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p2191
g59
(g98
S'Z\x00\x00\x00'
tRp2192
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2193
I0
sg903
g1685
sS'block_loop.thisRepN'
p2194
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2195
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p2196
Nsg69
Vn
sS'block_loop.thisTrialN'
p2197
I0
sg39
F1.6834524662117474
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01\x06\t\x00\xb0'
tRp2198
sa(dp2199
S'trial_loop.thisTrialN'
p2200
I91
sg894
g1237
sS'block_loop.thisIndex'
p2201
g888
sg38
S'left'
p2202
sg58
g62
sS'trial_loop.thisN'
p2203
I91
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2204
g59
(g98
S'[\x00\x00\x00'
tRp2205
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2206
I0
sg903
g1244
sS'block_loop.thisRepN'
p2207
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2208
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p2209
Nsg69
Vn
sS'block_loop.thisTrialN'
p2210
I0
sg39
F1.5165333929398912
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01\r\x04\x8c\x10'
tRp2211
sa(dp2212
S'trial_loop.thisTrialN'
p2213
I92
sg894
g1413
sS'block_loop.thisIndex'
p2214
g888
sg38
S'left'
p2215
sg58
g62
sS'trial_loop.thisN'
p2216
I92
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2217
g59
(g98
S'\\\x00\x00\x00'
tRp2218
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2219
I0
sg903
g1421
sS'block_loop.thisRepN'
p2220
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2221
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p2222
Nsg69
Vn
sS'block_loop.thisTrialN'
p2223
I0
sg39
F1.4839410098393273
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01\x13\x0c\xf8P'
tRp2224
sa(dp2225
S'trial_loop.thisTrialN'
p2226
I93
sg894
g1706
sS'block_loop.thisIndex'
p2227
g888
sg38
S'left'
p2228
sg58
g62
sS'trial_loop.thisN'
p2229
I93
sg33
g1355
sg63
g64
sS'trial_loop.thisIndex'
p2230
g59
(g98
S']\x00\x00\x00'
tRp2231
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2232
I0
sg903
g1713
sS'block_loop.thisRepN'
p2233
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2234
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p2235
Nsg69
Vn
sS'block_loop.thisTrialN'
p2236
I0
sg39
F1.2501297195121879
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01\x1a\x05\xa98'
tRp2237
sa(dp2238
S'trial_loop.thisTrialN'
p2239
I94
sg894
g1237
sS'block_loop.thisIndex'
p2240
g888
sg38
S'left'
p2241
sg58
g62
sS'trial_loop.thisN'
p2242
I94
sg33
g1186
sg63
g64
sS'trial_loop.thisIndex'
p2243
g59
(g98
S'^\x00\x00\x00'
tRp2244
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2245
I0
sg903
g1244
sS'block_loop.thisRepN'
p2246
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2247
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p2248
Nsg69
Vn
sS'block_loop.thisTrialN'
p2249
I0
sg39
F0.94993596702988725
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01 \n\nP'
tRp2250
sa(dp2251
S'trial_loop.thisTrialN'
p2252
I95
sg894
g895
sS'block_loop.thisIndex'
p2253
g888
sg38
S'right'
p2254
sg58
g62
sS'trial_loop.thisN'
p2255
I95
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2256
g59
(g98
S'_\x00\x00\x00'
tRp2257
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2258
I0
sg903
g904
sS'block_loop.thisRepN'
p2259
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2260
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2261
Nsg69
Vn
sS'block_loop.thisTrialN'
p2262
I0
sg39
F3.5834384393965593
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01&\t\xa8\xa8'
tRp2263
sa(dp2264
S'trial_loop.thisTrialN'
p2265
I96
sg894
g1368
sS'block_loop.thisIndex'
p2266
g888
sg38
S'right'
p2267
sg58
g62
sS'trial_loop.thisN'
p2268
I96
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p2269
g59
(g98
S'`\x00\x00\x00'
tRp2270
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2271
I0
sg903
g1375
sS'block_loop.thisRepN'
p2272
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2273
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p2274
Nsg69
Vn
sS'block_loop.thisTrialN'
p2275
I0
sg39
F1.6667865027848165
sg34
g752
(S'\x07\xdf\t\x1d\x11\x01/\x03\xf7\xa0'
tRp2276
sa(dp2277
S'trial_loop.thisTrialN'
p2278
I97
sg894
g1096
sS'block_loop.thisIndex'
p2279
g888
sg38
S'right'
p2280
sg58
g62
sS'trial_loop.thisN'
p2281
I97
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2282
g59
(g98
S'a\x00\x00\x00'
tRp2283
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2284
I0
sg903
g1104
sS'block_loop.thisRepN'
p2285
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2286
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2287
Nsg69
Vn
sS'block_loop.thisTrialN'
p2288
I0
sg39
F2.6339061708858935
sg34
g752
(S'\x07\xdf\t\x1d\x11\x015\x0e\x86\xc0'
tRp2289
sa(dp2290
S'trial_loop.thisTrialN'
p2291
I98
sg894
g2030
sS'block_loop.thisIndex'
p2292
g888
sg38
S'left'
p2293
sg58
g62
sS'trial_loop.thisN'
p2294
I98
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2295
g59
(g98
S'b\x00\x00\x00'
tRp2296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2297
I0
sg903
g2037
sS'block_loop.thisRepN'
p2298
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2299
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2300
Nsg69
Vn
sS'block_loop.thisTrialN'
p2301
I0
sg39
F1.3335182667869958
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02\x01\tV\xa0'
tRp2302
sa(dp2303
S'trial_loop.thisTrialN'
p2304
I99
sg894
g1803
sS'block_loop.thisIndex'
p2305
g888
sg38
S'right'
p2306
sg58
g62
sS'trial_loop.thisN'
p2307
I99
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2308
g59
(g98
S'c\x00\x00\x00'
tRp2309
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2310
I0
sg903
g1810
sS'block_loop.thisRepN'
p2311
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2312
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p2313
Nsg69
Vn
sS'block_loop.thisTrialN'
p2314
I0
sg39
F1.6665971978291054
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02\x07\x0f#\x00'
tRp2315
sa(dp2316
S'trial_loop.thisTrialN'
p2317
I100
sg894
g1175
sS'block_loop.thisIndex'
p2318
g888
sg38
S'right'
p2319
sg58
g62
sS'trial_loop.thisN'
p2320
I100
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2321
g59
(g98
S'd\x00\x00\x00'
tRp2322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2323
I0
sg903
g1183
sS'block_loop.thisRepN'
p2324
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2325
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vn
sS'block_loop.thisTrialN'
p2327
I0
sg39
F0.84994104177167173
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02\x0e\ns\xc8'
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g962
sS'block_loop.thisIndex'
p2331
g888
sg38
S'left'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g970
sS'block_loop.thisRepN'
p2337
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2338
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vn
sS'block_loop.thisTrialN'
p2340
I0
sg39
F1.5501803528823075
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02\x14\x08\xa2\xf0'
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g1736
sS'block_loop.thisIndex'
p2344
g888
sg38
S'right'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g1743
sS'block_loop.thisRepN'
p2350
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2351
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vn
sS'block_loop.thisTrialN'
p2353
I0
sg39
F0.66688001486909343
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02\x1b\x02F\x08'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1237
sS'block_loop.thisIndex'
p2357
g888
sg38
S'left'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1244
sS'block_loop.thisRepN'
p2363
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2364
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vn
sS'block_loop.thisTrialN'
p2366
I0
sg39
F0.66655101198557531
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02 \r\x1bx'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g1609
sS'block_loop.thisIndex'
p2370
g888
sg38
S'left'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g1616
sS'block_loop.thisRepN'
p2376
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2377
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vn
sS'block_loop.thisTrialN'
p2379
I0
sg39
F1.0667659187201934
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02&\x08p('
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g1062
sS'block_loop.thisIndex'
p2383
g888
sg38
S'left'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g1070
sS'block_loop.thisRepN'
p2389
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2390
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vn
sS'block_loop.thisTrialN'
p2392
I0
sg39
F1.2668424389776192
sg34
g752
(S'\x07\xdf\t\x1d\x11\x02,\t\xf2\xe0'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g1175
sS'block_loop.thisIndex'
p2396
g888
sg38
S'right'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g1186
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g1183
sS'block_loop.thisRepN'
p2402
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2403
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F0.69985556944084237
sg34
g752
(S'\x07\xdf\t\x1d\x11\x022\x0e\x92x'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1028
sS'block_loop.thisIndex'
p2409
g888
sg38
S'left'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1036
sS'block_loop.thisRepN'
p2415
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2416
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F1.8833961308810103
sg34
g752
(S'\x07\xdf\t\x1d\x11\x028\n`@'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1396
sS'block_loop.thisIndex'
p2422
g888
sg38
S'left'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1404
sS'block_loop.thisRepN'
p2428
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2429
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F0.76677430059862672
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03\x03\t?0'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g979
sS'block_loop.thisIndex'
p2435
g888
sg38
S'right'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g987
sS'block_loop.thisRepN'
p2441
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2442
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F1.0501880505253212
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03\t\x06\x03\x10'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g962
sS'block_loop.thisIndex'
p2448
g888
sg38
S'left'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g970
sS'block_loop.thisRepN'
p2454
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2455
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F1.383523854707164
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03\x0f\x07K0'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g945
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g949
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g953
sS'block_loop.thisRepN'
p2467
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2468
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F1.2167938012862578
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03\x15\r\xcf('
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g2030
sS'block_loop.thisIndex'
p2474
g888
sg38
S'left'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g2037
sS'block_loop.thisRepN'
p2480
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2481
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F0.95018656801403267
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03\x1c\x026h'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g1706
sS'block_loop.thisIndex'
p2487
g888
sg38
S'left'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g1362
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g1713
sS'block_loop.thisRepN'
p2493
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2494
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F1.5167939723469317
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03"\x02\x0fX'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1205
sS'block_loop.thisIndex'
p2500
g888
sg38
S'left'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1213
sS'block_loop.thisRepN'
p2506
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2507
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F1.1668549262612942
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03(\n\x7f\x80'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g1473
sS'block_loop.thisIndex'
p2513
g888
sg38
S'left'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g1480
sS'block_loop.thisRepN'
p2519
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2520
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.3334814891677524
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03.\rqh'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1488
sS'block_loop.thisIndex'
p2526
g888
sg38
S'right'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1495
sS'block_loop.thisRepN'
p2532
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F1.1167683705643867
sg34
g752
(S'\x07\xdf\t\x1d\x11\x035\x03\xc0\xf0'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1351
sS'block_loop.thisIndex'
p2539
g888
sg38
S'right'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1355
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1359
sS'block_loop.thisRepN'
p2545
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F1.3172215050435625
sg34
g752
(S'\x07\xdf\t\x1d\x11\x03;\x069\xc0'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g1609
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g1616
sS'block_loop.thisRepN'
p2558
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F0.91688856780820061
sg34
g752
(S'\x07\xdf\t\x1d\x11\x04\x05\x0b\x8d\x08'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1113
sS'block_loop.thisIndex'
p2565
g888
sg38
S'left'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1117
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1121
sS'block_loop.thisRepN'
p2571
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F1.2501739096733218
sg34
g752
(S'\x07\xdf\t\x1d\x11\x04\x0b\n\xae`'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g1989
sS'block_loop.thisIndex'
p2578
g888
sg38
S'left'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g1996
sS'block_loop.thisRepN'
p2584
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.0501980289482162
sg34
g752
(S'\x07\xdf\t\x1d\x11\x04\x11\x0f\x0fx'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1396
sS'block_loop.thisIndex'
p2591
g888
sg38
S'left'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1404
sS'block_loop.thisRepN'
p2597
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F0.6335763127062819
sg34
g752
(S'\x07\xdf\t\x1d\x11\x04\x18\x01\x15X'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1011
sS'block_loop.thisIndex'
p2604
g888
sg38
S'right'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1019
sS'block_loop.thisRepN'
p2610
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F1.0672180838701024
sg34
g752
(S'\x07\xdf\t\x1d\x11\x04\x1d\x0b30'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g945
sS'block_loop.thisIndex'
p2617
g888
sg38
S'left'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g949
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g953
sS'block_loop.thisRepN'
p2623
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F1.400175278140523
sg34
g752
(S'\x07\xdf\t\x1d\x11\x04#\x0c\xb9\xd0'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1413
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1421
sS'block_loop.thisRepN'
p2636
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.000113468933705
sg34
g752
(S'\x07\xdf\t\x1d\x11\x04*\x03\xfb\x88'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1351
sS'block_loop.thisIndex'
p2643
g888
sg38
S'right'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1355
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1359
sS'block_loop.thisRepN'
p2649
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.1501929542064318
sg34
g752
(S'\x07\xdf\t\x1d\x11\x040\x04\x8c\x10'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1028
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1036
sS'block_loop.thisRepN'
p2662
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.5166882010562404
sg34
g752
(S'\x07\xdf\t\x1d\x11\x046\x07}\xf8'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1265
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g990
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1272
sS'block_loop.thisRepN'
p2675
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.86688126930312137
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05\x01\x00m`'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1473
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1480
sS'block_loop.thisRepN'
p2688
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F1.5501786422973964
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05\x06\x0eW\xe0'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1237
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1186
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1244
sS'block_loop.thisRepN'
p2701
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F0.93326572713704081
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05\r\x07\xfa\xf8'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1222
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1229
sS'block_loop.thisRepN'
p2714
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F2.9834888446930563
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05\x13\x07Z\xd0'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1473
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1107
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1480
sS'block_loop.thisRepN'
p2727
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F1.3167636379366741
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05\x1b\x07\xa5\x08'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g895
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g904
sS'block_loop.thisRepN'
p2740
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F2.1001976298102818
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05!\x0c\xf8P'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1160
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g949
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1167
sS'block_loop.thisRepN'
p2753
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.0335155298489553
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05(\x0e\xf08'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1488
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1495
sS'block_loop.thisRepN'
p2766
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.2834069075761363
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05/\x00\xbb\x80'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1736
sS'block_loop.thisIndex'
p2773
g888
sg38
S'right'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1743
sS'block_loop.thisRepN'
p2779
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.73352704779972555
sg34
g752
(S'\x07\xdf\t\x1d\x11\x055\x05\x95\xb0'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1028
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1039
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1036
sS'block_loop.thisRepN'
p2792
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F2.6666619150382758
sg34
g752
(S'\x07\xdf\t\x1d\x11\x05;\x02\x1b\x10'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1045
sS'block_loop.thisIndex'
p2799
g888
sg38
S'right'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1053
sS'block_loop.thisRepN'
p2805
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.0172136363435129
sg34
g752
(S'\x07\xdf\t\x1d\x11\x06\x06\x0c\xa6H'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1368
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1141
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1375
sS'block_loop.thisRepN'
p2818
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.233516214080737
sg34
g752
(S'\x07\xdf\t\x1d\x11\x06\x0c\rqh'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1529
sS'block_loop.thisIndex'
p2825
g888
sg38
S'right'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1536
sS'block_loop.thisRepN'
p2831
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.4168888529020478
sg34
g752
(S'\x07\xdf\t\x1d\x11\x06\x13\x02U\xa8'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1488
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1495
sS'block_loop.thisRepN'
p2844
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.86687129087658832
sg34
g752
(S'\x07\xdf\t\x1d\x11\x06\x19\t\x148'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1045
sS'block_loop.thisIndex'
p2851
g888
sg38
S'right'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1053
sS'block_loop.thisRepN'
p2857
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.050117061167839
sg34
g752
(S'\x07\xdf\t\x1d\x11\x06\x1f\x07\x81\xe0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1473
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1107
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1480
sS'block_loop.thisRepN'
p2870
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F0.81722863248796784
sg34
g752
(S'\x07\xdf\t\x1d\x11\x06%\x08\xca\x00'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g996
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1003
sS'block_loop.thisRepN'
p2883
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F0.98342099141154904
sg34
g752
(S'\x07\xdf\t\x1d\x11\x06+\x06\x80\x10'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1637
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1039
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1644
sS'block_loop.thisRepN'
p2896
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.1834176842749002
sg34
g752
(S'\x07\xdf\t\x1d\x11\x061\x06\xd6\x00'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1323
sS'block_loop.thisIndex'
p2903
g888
sg38
S'right'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1330
sS'block_loop.thisRepN'
p2909
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.76680765704441001
sg34
g752
(S'\x07\xdf\t\x1d\x11\x067\nA\x00'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1678
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1290
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1685
sS'block_loop.thisRepN'
p2922
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F2.0834783530917775
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07\x01\x07\x04\xe0'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1989
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1022
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1996
sS'block_loop.thisRepN'
p2935
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.88396033946992247
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07\x08\x08\xfc\xc8'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1721
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1728
sS'block_loop.thisRepN'
p2948
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.96685566751693841
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07\x0e\x07\xa5\x08'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1096
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1104
sS'block_loop.thisRepN'
p2961
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F1.0834415754725342
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07\x14\x07\x81\xe0'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1160
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g956
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1167
sS'block_loop.thisRepN'
p2974
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.1335078892261663
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07\x1a\t\x81\x98'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1079
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1087
sS'block_loop.thisRepN'
p2987
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.91681102119764546
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07 \x0b\xfah'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1113
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1124
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1121
sS'block_loop.thisRepN'
p3000
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.8839244171467726
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07&\x0b\x1b\xc0'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1160
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g956
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1167
sS'block_loop.thisRepN'
p3013
I0
sg906
g949
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g956
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.8834089602823951
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07-\t\xfe\x98'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1443
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1451
sS'block_loop.thisRepN'
p3026
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.1501658699125983
sg34
g752
(S'\x07\xdf\t\x1d\x11\x074\x08\xa2\xf0'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1803
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1810
sS'block_loop.thisRepN'
p3039
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.5334120393417834
sg34
g752
(S'\x07\xdf\t\x1d\x11\x07:\x0bVX'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1678
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1685
sS'block_loop.thisRepN'
p3052
I0
sg906
g1290
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1284
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.250085529347416
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08\x05\x04\xbe\xd8'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1096
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1100
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1104
sS'block_loop.thisRepN'
p3065
I0
sg906
g1100
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1107
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.96687049260071944
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08\x0b\t\x1f\xf0'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g915
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g923
sS'block_loop.thisRepN'
p3078
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.66685920273084776
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08\x11\t7`'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1488
sS'block_loop.thisIndex'
p3085
g888
sg38
S'right'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1495
sS'block_loop.thisRepN'
p3091
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.8835207186275511
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08\x17\x04\x8c\x10'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1443
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1451
sS'block_loop.thisRepN'
p3104
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.75019757279369514
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08\x1d\x034P'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g996
sS'block_loop.thisIndex'
p3111
g888
sg38
S'right'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1003
sS'block_loop.thisRepN'
p3117
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.85020504235217231
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08"\x0f:p'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1222
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1229
sS'block_loop.thisRepN'
p3130
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.5668354825938877
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08(\ri\x98'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1529
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1536
sS'block_loop.thisRepN'
p3143
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.85035300812523928
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08/\x07K0'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1736
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1743
sS'block_loop.thisRepN'
p3156
I0
sg906
g1400
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1407
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.0166750865573704
sg34
g752
(S'\x07\xdf\t\x1d\x11\x085\x05zX'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1413
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1421
sS'block_loop.thisRepN'
p3169
I0
sg906
g1417
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1424
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.81685914571062312
sg34
g752
(S'\x07\xdf\t\x1d\x11\x08;\x06I`'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1222
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1066
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1229
sS'block_loop.thisRepN'
p3182
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F1.5334379832384002
sg34
g752
(S'\x07\xdf\t\x1d\x11\t\x05\x03\xffp'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1011
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1022
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1019
sS'block_loop.thisRepN'
p3195
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.3335447808858589
sg34
g752
(S'\x07\xdf\t\x1d\x11\t\x0b\x0c\xa6H'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1896
sS'block_loop.thisIndex'
p3202
g888
sg38
S'right'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1124
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1903
sS'block_loop.thisRepN'
p3208
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.66723353617271641
sg34
g752
(S'\x07\xdf\t\x1d\x11\t\x12\x02\xf5\xd0'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1351
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1355
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1359
sS'block_loop.thisRepN'
p3221
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.91681843374317396
sg34
g752
(S'\x07\xdf\t\x1d\x11\t\x17\r\xcb@'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1130
sS'block_loop.thisIndex'
p3228
g888
sg38
S'left'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1134
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1138
sS'block_loop.thisRepN'
p3234
I0
sg906
g1134
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1141
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.4170000410522334
sg34
g752
(S'\x07\xdf\t\x1d\x11\t\x1d\x0c\xec\x98'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1175
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1183
sS'block_loop.thisRepN'
p3247
I0
sg906
g1179
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g1186
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.68323949813930085
sg34
g752
(S'\x07\xdf\t\x1d\x11\t$\x04l\xd0'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1323
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1330
sS'block_loop.thisRepN'
p3260
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.60018537060386734
sg34
g752
(S'\x07\xdf\t\x1d\x11\t*\x00:\x98'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1529
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1536
sS'block_loop.thisRepN'
p3273
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.83348947190825129
sg34
g752
(S'\x07\xdf\t\x1d\x11\t/\t\xdfX'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1609
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1616
sS'block_loop.thisRepN'
p3286
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.050217415599036
sg34
g752
(S'\x07\xdf\t\x1d\x11\t5\x07\xd3\xe8'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1803
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1810
sS'block_loop.thisRepN'
p3299
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.200122991198441
sg34
g752
(S'\x07\xdf\t\x1d\x11\t;\t\x1c\x08'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g962
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g966
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g970
sS'block_loop.thisRepN'
p3312
I0
sg906
g966
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g973
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.2835049812274519
sg34
g752
(S'\x07\xdf\t\x1d\x11\n\x05\x0c\xc5\x88'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1045
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1049
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1053
sS'block_loop.thisRepN'
p3325
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.0335303549363744
sg34
g752
(S'\x07\xdf\t\x1d\x11\n\x0c\x02]x'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1721
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1728
sS'block_loop.thisRepN'
p3338
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F0.81688366412345204
sg34
g752
(S'\x07\xdf\t\x1d\x11\n\x12\x03(\x98'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1706
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1355
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1713
sS'block_loop.thisRepN'
p3351
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.5834558303649828
sg34
g752
(S'\x07\xdf\t\x1d\x11\n\x18\x00\xde\xa8'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1028
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1039
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1036
sS'block_loop.thisRepN'
p3364
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F4.5332099049810495
sg34
g752
(S'\x07\xdf\t\x1d\x11\n\x1e\n{\x98'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1721
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1447
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1728
sS'block_loop.thisRepN'
p3377
I0
sg906
g1447
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g1454
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.66681985923059983
sg34
g752
(S'\x07\xdf\t\x1d\x11\n(\x03\xd0\x90'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g2030
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g2037
sS'block_loop.thisRepN'
p3390
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.8168349123952794
sg34
g752
(S'\x07\xdf\t\x1d\x11\n-\x0eg\x80'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1896
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1117
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1903
sS'block_loop.thisRepN'
p3403
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.86678005957583082
sg34
g752
(S'\x07\xdf\t\x1d\x11\n4\x0c\x19\xa8'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1222
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1229
sS'block_loop.thisRepN'
p3416
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.4502050993723969
sg34
g752
(S'\x07\xdf\t\x1d\x11\n:\n\x83h'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1609
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1056
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1616
sS'block_loop.thisRepN'
p3429
I0
sg906
g1049
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1056
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.70019426565704634
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b\x05\x02\xbb8'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1896
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1117
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1903
sS'block_loop.thisRepN'
p3442
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.8168602861042018
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b\n\x0e\t\xc0'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1529
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1536
sS'block_loop.thisRepN'
p3455
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.81676164225427783
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b\x10\x0b\xbf\xd0'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1265
sS'block_loop.thisIndex'
p3462
g888
sg38
S'left'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g983
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1272
sS'block_loop.thisRepN'
p3468
I0
sg906
g983
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g990
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.1167715066403616
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b\x16\tu\xe0'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1637
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1644
sS'block_loop.thisRepN'
p3481
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F1.5004017028331873
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b\x1c\x0b\xb00'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1062
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1070
sS'block_loop.thisRepN'
p3494
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1066
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.93343564543829416
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b#\x04\x9f\x98'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1351
sS'block_loop.thisIndex'
p3501
g888
sg38
S'right'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1362
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1359
sS'block_loop.thisRepN'
p3507
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F0.90015247031624313
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b)\x03\xffp'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1637
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1032
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1644
sS'block_loop.thisRepN'
p3520
I0
sg906
g1032
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1039
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.7833598664365127
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b/\x02\xe60'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g915
sS'block_loop.thisIndex'
p3527
g888
sg38
S'left'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g923
sS'block_loop.thisRepN'
p3533
I0
sg906
g925
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.66687887447915273
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b6\x00\x1bX'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1989
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1015
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1996
sS'block_loop.thisRepN'
p3546
I0
sg906
g1015
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1022
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.8171425329455815
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0b;\n\xf0\xc8'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1706
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1355
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1713
sS'block_loop.thisRepN'
p3559
I0
sg906
g1355
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1362
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F0.73350794624639093
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0c\x06\x08\x9f\x08'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1803
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1810
sS'block_loop.thisRepN'
p3572
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.1335215739200066
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0c\x0c\x04\xe9\xd0'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1079
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1087
sS'block_loop.thisRepN'
p3585
I0
sg906
g1083
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1090
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.91685321567638312
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0c\x12\x07\x9d8'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1113
sS'block_loop.thisIndex'
p3592
g888
sg38
S'left'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1117
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1121
sS'block_loop.thisRepN'
p3598
I0
sg906
g1117
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1124
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.65014990443523857
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0c\x18\x06\xc2x'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g2030
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g2037
sS'block_loop.thisRepN'
p3611
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.5669158801756566
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0c\x1e\x02\x17('
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F7.8833448132754711
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'17-jacobs_mini_cheddars_redo.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'8-liquorice_catherine_wheels.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'8-liquorice_catherine_wheels.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F2.2668221970307059
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0c1\t\xf2\xe0'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'20-fruit_pastilles.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'2-steamed_puddings.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'2-steamed_puddings.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'20-fruit_pastilles.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.81682065750283073
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0c8\x0e\x8a\xa8'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'48-twix.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'48-twix.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'50-polo.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'50-polo.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.85008786714752205
sg34
g752
(S'\x07\xdf\t\x1d\x11\r\x02\x0c@\xb8'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'13-mccoys_steak_crisps.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'13-mccoys_steak_crisps.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
S'3-ellas_strawberries_apples.png'
p3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3698
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.60019392353569856
sg34
g752
(S'\x07\xdf\t\x1d\x11\r\x08\ns\xc8'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'7-olives.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'22-daim.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'22-daim.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'7-olives.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.90007862998027122
sg34
g752
(S'\x07\xdf\t\x1d\x11\r\x0e\x04\xd2`'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'3-ellas_strawberries_apples.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p3725
g59
(g98
S'\x05\x00\x00\x00'
tRp3726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3727
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3728
sS'block_loop.thisRepN'
p3729
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3730
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p3731
Nsg69
Vn
sS'block_loop.thisTrialN'
p3732
I0
sg39
F0.61681484150903998
sg34
g752
(S'\x07\xdf\t\x1d\x11\r\x14\x03\xb9 '
tRp3733
sa(dp3734
S'trial_loop.thisTrialN'
p3735
I6
sg3632
S'23-crunchie_redo.png'
p3736
sS'block_loop.thisIndex'
p3737
g3626
sg38
S'right'
p3738
sg58
g62
sS'trial_loop.thisN'
p3739
I6
sg33
S'23-crunchie_redo.png'
p3740
sg63
g64
sS'trial_loop.thisIndex'
p3741
g59
(g98
S'\x06\x00\x00\x00'
tRp3742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3743
I0
sg3641
S'33-ambrosia_rice.png'
p3744
sS'block_loop.thisRepN'
p3745
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3746
I1
sg3646
S'33-ambrosia_rice.png'
p3747
sg55
g11
sS'block_loop.thisTrial'
p3748
Nsg69
Vn
sS'block_loop.thisTrialN'
p3749
I0
sg39
F0.80018976111023221
sg34
g752
(S'\x07\xdf\t\x1d\x11\r\x19\r\x98x'
tRp3750
sa(dp3751
S'trial_loop.thisTrialN'
p3752
I7
sg3632
S'22-daim.png'
p3753
sS'block_loop.thisIndex'
p3754
g3626
sg38
S'left'
p3755
sg58
g62
sS'trial_loop.thisN'
p3756
I7
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p3757
g59
(g98
S'\x07\x00\x00\x00'
tRp3758
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3759
I0
sg3641
S'7-olives.png'
p3760
sS'block_loop.thisRepN'
p3761
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3762
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p3763
Nsg69
Vn
sS'block_loop.thisTrialN'
p3764
I0
sg39
F0.68349466068684706
sg34
g752
(S'\x07\xdf\t\x1d\x11\r\x1f\x0b\x13\xf0'
tRp3765
sa(dp3766
S'trial_loop.thisTrialN'
p3767
I8
sg3632
S'27-hartleys_raspberries_jelly.png'
p3768
sS'block_loop.thisIndex'
p3769
g3626
sg38
S'right'
p3770
sg58
g62
sS'trial_loop.thisN'
p3771
I8
sg33
S'27-hartleys_raspberries_jelly.png'
p3772
sg63
g64
sS'trial_loop.thisIndex'
p3773
g59
(g98
S'\x08\x00\x00\x00'
tRp3774
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3775
I0
sg3641
S'51-mars.png'
p3776
sS'block_loop.thisRepN'
p3777
I1
sg3644
S'51-mars.png'
p3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3779
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p3780
Nsg69
Vn
sS'block_loop.thisTrialN'
p3781
I0
sg39
F1.2335219160413544
sg34
g752
(S'\x07\xdf\t\x1d\x11\r%\x06\xe1\xb8'
tRp3782
sa(dp3783
S'trial_loop.thisTrialN'
p3784
I9
sg3632
g3687
sS'block_loop.thisIndex'
p3785
g3626
sg38
S'right'
p3786
sg58
g62
sS'trial_loop.thisN'
p3787
I9
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p3788
g59
(g98
S'\t\x00\x00\x00'
tRp3789
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3790
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3791
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3792
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p3793
Nsg69
Vn
sS'block_loop.thisTrialN'
p3794
I0
sg39
F0.68352288537062122
sg34
g752
(S'\x07\xdf\t\x1d\x11\r+\n\xc9\xb8'
tRp3795
sa(dp3796
S'trial_loop.thisTrialN'
p3797
I10
sg3632
S'1-treacle_cookies.png'
p3798
sS'block_loop.thisIndex'
p3799
g3626
sg38
S'left'
p3800
sg58
g62
sS'trial_loop.thisN'
p3801
I10
sg33
S'1-treacle_cookies.png'
p3802
sg63
g64
sS'trial_loop.thisIndex'
p3803
g59
(g98
S'\n\x00\x00\x00'
tRp3804
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3805
I0
sg3641
S'21-nakd_banana_crunch.png'
p3806
sS'block_loop.thisRepN'
p3807
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3808
I1
sg3646
S'21-nakd_banana_crunch.png'
p3809
sg55
g11
sS'block_loop.thisTrial'
p3810
Nsg69
Vn
sS'block_loop.thisTrialN'
p3811
I0
sg39
F0.88348508139824844
sg34
g752
(S'\x07\xdf\t\x1d\x11\r1\x06\x97\x80'
tRp3812
sa(dp3813
S'trial_loop.thisTrialN'
p3814
I11
sg3632
S'5-pineapple.png'
p3815
sS'block_loop.thisIndex'
p3816
g3626
sg38
S'left'
p3817
sg58
g62
sS'trial_loop.thisN'
p3818
I11
sg33
S'5-pineapple.png'
p3819
sg63
g64
sS'trial_loop.thisIndex'
p3820
g59
(g98
S'\x0b\x00\x00\x00'
tRp3821
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3822
I0
sg3641
S'40-sardines.png'
p3823
sS'block_loop.thisRepN'
p3824
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3825
I1
sg3646
S'40-sardines.png'
p3826
sg55
g11
sS'block_loop.thisTrial'
p3827
Nsg69
Vn
sS'block_loop.thisTrialN'
p3828
I0
sg39
F0.81678929674308165
sg34
g752
(S'\x07\xdf\t\x1d\x11\r7\x05?\xc0'
tRp3829
sa(dp3830
S'trial_loop.thisTrialN'
p3831
I12
sg3632
S'38-maltesers.png'
p3832
sS'block_loop.thisIndex'
p3833
g3626
sg38
S'left'
p3834
sg58
g62
sS'trial_loop.thisN'
p3835
I12
sg33
S'38-maltesers.png'
p3836
sg63
g64
sS'trial_loop.thisIndex'
p3837
g59
(g98
S'\x0c\x00\x00\x00'
tRp3838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3839
I0
sg3641
S'6-sour_patch_kids.png'
p3840
sS'block_loop.thisRepN'
p3841
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3842
I1
sg3646
S'6-sour_patch_kids.png'
p3843
sg55
g11
sS'block_loop.thisTrial'
p3844
Nsg69
Vn
sS'block_loop.thisTrialN'
p3845
I0
sg39
F0.91656355628583697
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e\x01\x02\xf5\xd0'
tRp3846
sa(dp3847
S'trial_loop.thisTrialN'
p3848
I13
sg3632
S'41-peanuts_redo.png'
p3849
sS'block_loop.thisIndex'
p3850
g3626
sg38
S'left'
p3851
sg58
g62
sS'trial_loop.thisN'
p3852
I13
sg33
S'45-chewy_nougat_redo.png'
p3853
sg63
g64
sS'trial_loop.thisIndex'
p3854
g59
(g98
S'\r\x00\x00\x00'
tRp3855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3856
I0
sg3641
S'45-chewy_nougat_redo.png'
p3857
sS'block_loop.thisRepN'
p3858
I1
sg3644
S'41-peanuts_redo.png'
p3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3860
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p3861
Nsg69
Vn
sS'block_loop.thisTrialN'
p3862
I0
sg39
F1.5668602861005638
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e\x07\x02\x1b\x10'
tRp3863
sa(dp3864
S'trial_loop.thisTrialN'
p3865
I14
sg3632
S'36-fig_rolls.png'
p3866
sS'block_loop.thisIndex'
p3867
g3626
sg38
S'left'
p3868
sg58
g62
sS'trial_loop.thisN'
p3869
I14
sg33
S'36-fig_rolls.png'
p3870
sg63
g64
sS'trial_loop.thisIndex'
p3871
g59
(g98
S'\x0e\x00\x00\x00'
tRp3872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3873
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3874
sS'block_loop.thisRepN'
p3875
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3876
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p3877
sg55
g11
sS'block_loop.thisTrial'
p3878
Nsg69
Vn
sS'block_loop.thisTrialN'
p3879
I0
sg39
F0.78352408278442454
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e\r\x0by\x80'
tRp3880
sa(dp3881
S'trial_loop.thisTrialN'
p3882
I15
sg3632
S'21-nakd_banana_crunch.png'
p3883
sS'block_loop.thisIndex'
p3884
g3626
sg38
S'right'
p3885
sg58
g62
sS'trial_loop.thisN'
p3886
I15
sg33
g3802
sg63
g64
sS'trial_loop.thisIndex'
p3887
g59
(g98
S'\x0f\x00\x00\x00'
tRp3888
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3889
I0
sg3641
S'1-treacle_cookies.png'
p3890
sS'block_loop.thisRepN'
p3891
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3892
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p3893
Nsg69
Vn
sS'block_loop.thisTrialN'
p3894
I0
sg39
F0.90007435351435561
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e\x13\x08w\xf8'
tRp3895
sa(dp3896
S'trial_loop.thisTrialN'
p3897
I16
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3898
sS'block_loop.thisIndex'
p3899
g3626
sg38
S'right'
p3900
sg58
g62
sS'trial_loop.thisN'
p3901
I16
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p3902
g59
(g98
S'\x10\x00\x00\x00'
tRp3903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3904
I0
sg3641
S'36-fig_rolls.png'
p3905
sS'block_loop.thisRepN'
p3906
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3907
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p3908
Nsg69
Vn
sS'block_loop.thisTrialN'
p3909
I0
sg39
F0.96684312321303878
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e\x19\x07\x9d8'
tRp3910
sa(dp3911
S'trial_loop.thisTrialN'
p3912
I17
sg3632
g3849
sS'block_loop.thisIndex'
p3913
g3626
sg38
S'left'
p3914
sg58
g62
sS'trial_loop.thisN'
p3915
I17
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p3916
g59
(g98
S'\x11\x00\x00\x00'
tRp3917
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3918
I0
sg3641
g3857
sS'block_loop.thisRepN'
p3919
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3920
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p3921
Nsg69
Vn
sS'block_loop.thisTrialN'
p3922
I0
sg39
F1.2001991123215703
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e\x1f\x07v('
tRp3923
sa(dp3924
S'trial_loop.thisTrialN'
p3925
I18
sg3632
S'46-pistachios.png'
p3926
sS'block_loop.thisIndex'
p3927
g3626
sg38
S'left'
p3928
sg58
g62
sS'trial_loop.thisN'
p3929
I18
sg33
S'46-pistachios.png'
p3930
sg63
g64
sS'trial_loop.thisIndex'
p3931
g59
(g98
S'\x12\x00\x00\x00'
tRp3932
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3933
I0
sg3641
S'29-beans.png'
p3934
sS'block_loop.thisRepN'
p3935
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3936
I1
sg3646
S'29-beans.png'
p3937
sg55
g11
sS'block_loop.thisTrial'
p3938
Nsg69
Vn
sS'block_loop.thisTrialN'
p3939
I0
sg39
F0.55020772227726411
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e%\x0b\x1f\xa8'
tRp3940
sa(dp3941
S'trial_loop.thisTrialN'
p3942
I19
sg3632
g3798
sS'block_loop.thisIndex'
p3943
g3626
sg38
S'left'
p3944
sg58
g62
sS'trial_loop.thisN'
p3945
I19
sg33
g3809
sg63
g64
sS'trial_loop.thisIndex'
p3946
g59
(g98
S'\x13\x00\x00\x00'
tRp3947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3948
I0
sg3641
g3806
sS'block_loop.thisRepN'
p3949
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3950
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p3951
Nsg69
Vn
sS'block_loop.thisTrialN'
p3952
I0
sg39
F0.91721614520429284
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e+\x04\xca\x90'
tRp3953
sa(dp3954
S'trial_loop.thisTrialN'
p3955
I20
sg3632
S'10-bounty_redo.png'
p3956
sS'block_loop.thisIndex'
p3957
g3626
sg38
S'left'
p3958
sg58
g62
sS'trial_loop.thisN'
p3959
I20
sg33
S'10-bounty_redo.png'
p3960
sg63
g64
sS'trial_loop.thisIndex'
p3961
g59
(g98
S'\x14\x00\x00\x00'
tRp3962
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3963
I0
sg3641
S'4-corn.png'
p3964
sS'block_loop.thisRepN'
p3965
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3966
I1
sg3646
S'4-corn.png'
p3967
sg55
g11
sS'block_loop.thisTrial'
p3968
Nsg69
Vn
sS'block_loop.thisTrialN'
p3969
I0
sg39
F1.5168318903561158
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e1\x03\xef\xd0'
tRp3970
sa(dp3971
S'trial_loop.thisTrialN'
p3972
I21
sg3632
g3898
sS'block_loop.thisIndex'
p3973
g3626
sg38
S'right'
p3974
sg58
g62
sS'trial_loop.thisN'
p3975
I21
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p3976
g59
(g98
S'\x15\x00\x00\x00'
tRp3977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3978
I0
sg3641
g3905
sS'block_loop.thisRepN'
p3979
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3980
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p3981
Nsg69
Vn
sS'block_loop.thisTrialN'
p3982
I0
sg39
F2.7001469394162996
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0e7\x0c\\\x10'
tRp3983
sa(dp3984
S'trial_loop.thisTrialN'
p3985
I22
sg3632
g3670
sS'block_loop.thisIndex'
p3986
g3626
sg38
S'right'
p3987
sg58
g62
sS'trial_loop.thisN'
p3988
I22
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p3989
g59
(g98
S'\x16\x00\x00\x00'
tRp3990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3991
I0
sg3641
g3678
sS'block_loop.thisRepN'
p3992
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3993
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p3994
Nsg69
Vn
sS'block_loop.thisTrialN'
p3995
I0
sg39
F1.0168786464018922
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f\x03\x08\\\xa0'
tRp3996
sa(dp3997
S'trial_loop.thisTrialN'
p3998
I23
sg3632
S'19-caramello_redo.png'
p3999
sS'block_loop.thisIndex'
p4000
g3626
sg38
S'left'
p4001
sg58
g62
sS'trial_loop.thisN'
p4002
I23
sg33
S'19-caramello_redo.png'
p4003
sg63
g64
sS'trial_loop.thisIndex'
p4004
g59
(g98
S'\x17\x00\x00\x00'
tRp4005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4006
I0
sg3641
S'30-spaghetti_hoops.png'
p4007
sS'block_loop.thisRepN'
p4008
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4009
I1
sg3646
S'30-spaghetti_hoops.png'
p4010
sg55
g11
sS'block_loop.thisTrial'
p4011
Nsg69
Vn
sS'block_loop.thisTrialN'
p4012
I0
sg39
F1.0501256141033082
sg34
g752
(S"\x07\xdf\t\x1d\x11\x0f\t\t'\xc0"
tRp4013
sa(dp4014
S'trial_loop.thisTrialN'
p4015
I24
sg3632
S'50-polo.png'
p4016
sS'block_loop.thisIndex'
p4017
g3626
sg38
S'right'
p4018
sg58
g62
sS'trial_loop.thisN'
p4019
I24
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4020
g59
(g98
S'\x18\x00\x00\x00'
tRp4021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4022
I0
sg3641
S'48-twix.png'
p4023
sS'block_loop.thisRepN'
p4024
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4025
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4026
Nsg69
Vn
sS'block_loop.thisTrialN'
p4027
I0
sg39
F0.81688138333993265
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f\x0f\no\xe0'
tRp4028
sa(dp4029
S'trial_loop.thisTrialN'
p4030
I25
sg3632
g3704
sS'block_loop.thisIndex'
p4031
g3626
sg38
S'right'
p4032
sg58
g62
sS'trial_loop.thisN'
p4033
I25
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4034
g59
(g98
S'\x19\x00\x00\x00'
tRp4035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4036
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4037
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4038
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4039
Nsg69
Vn
sS'block_loop.thisTrialN'
p4040
I0
sg39
F1.1335212888225215
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f\x15\x08%\xf0'
tRp4041
sa(dp4042
S'trial_loop.thisTrialN'
p4043
I26
sg3632
S'42-mrkipling_lemon_slices.png'
p4044
sS'block_loop.thisIndex'
p4045
g3626
sg38
S'right'
p4046
sg58
g62
sS'trial_loop.thisN'
p4047
I26
sg33
S'42-mrkipling_lemon_slices.png'
p4048
sg63
g64
sS'trial_loop.thisIndex'
p4049
g59
(g98
S'\x1a\x00\x00\x00'
tRp4050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4051
I0
sg3641
S'16-skips_prawn.png'
p4052
sS'block_loop.thisRepN'
p4053
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4054
I1
sg3646
S'16-skips_prawn.png'
p4055
sg55
g11
sS'block_loop.thisTrial'
p4056
Nsg69
Vn
sS'block_loop.thisTrialN'
p4057
I0
sg39
F1.1000214393570786
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f\x1b\n\x9e\xc0'
tRp4058
sa(dp4059
S'trial_loop.thisTrialN'
p4060
I27
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4061
sS'block_loop.thisIndex'
p4062
g3626
sg38
S'right'
p4063
sg58
g62
sS'trial_loop.thisN'
p4064
I27
sg33
S'18-mms.png'
p4065
sg63
g64
sS'trial_loop.thisIndex'
p4066
g59
(g98
S'\x1b\x00\x00\x00'
tRp4067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4068
I0
sg3641
S'18-mms.png'
p4069
sS'block_loop.thisRepN'
p4070
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4071
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p4072
sg55
g11
sS'block_loop.thisTrial'
p4073
Nsg69
Vn
sS'block_loop.thisTrialN'
p4074
I0
sg39
F0.90019038832542719
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f!\x0c\x9ex'
tRp4075
sa(dp4076
S'trial_loop.thisTrialN'
p4077
I28
sg3632
g3999
sS'block_loop.thisIndex'
p4078
g3626
sg38
S'left'
p4079
sg58
g62
sS'trial_loop.thisN'
p4080
I28
sg33
g4003
sg63
g64
sS'trial_loop.thisIndex'
p4081
g59
(g98
S'\x1c\x00\x00\x00'
tRp4082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4083
I0
sg3641
g4007
sS'block_loop.thisRepN'
p4084
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4085
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p4086
Nsg69
Vn
sS'block_loop.thisTrialN'
p4087
I0
sg39
F1.0835148456135357
sg34
g752
(S"\x07\xdf\t\x1d\x11\x0f'\x0b\x858"
tRp4088
sa(dp4089
S'trial_loop.thisTrialN'
p4090
I29
sg3632
g3798
sS'block_loop.thisIndex'
p4091
g3626
sg38
S'left'
p4092
sg58
g62
sS'trial_loop.thisN'
p4093
I29
sg33
g3809
sg63
g64
sS'trial_loop.thisIndex'
p4094
g59
(g98
S'\x1d\x00\x00\x00'
tRp4095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4096
I0
sg3641
g3806
sS'block_loop.thisRepN'
p4097
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4098
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p4099
Nsg69
Vn
sS'block_loop.thisTrialN'
p4100
I0
sg39
F0.75020612572552636
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f-\rFp'
tRp4101
sa(dp4102
S'trial_loop.thisTrialN'
p4103
I30
sg3632
S'30-spaghetti_hoops.png'
p4104
sS'block_loop.thisIndex'
p4105
g3626
sg38
S'right'
p4106
sg58
g62
sS'trial_loop.thisN'
p4107
I30
sg33
g4003
sg63
g64
sS'trial_loop.thisIndex'
p4108
g59
(g98
S'\x1e\x00\x00\x00'
tRp4109
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4110
I0
sg3641
S'19-caramello_redo.png'
p4111
sS'block_loop.thisRepN'
p4112
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4113
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p4114
Nsg69
Vn
sS'block_loop.thisTrialN'
p4115
I0
sg39
F0.91685407096883864
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f3\n\nP'
tRp4116
sa(dp4117
S'trial_loop.thisTrialN'
p4118
I31
sg3632
g3866
sS'block_loop.thisIndex'
p4119
g3626
sg38
S'left'
p4120
sg58
g62
sS'trial_loop.thisN'
p4121
I31
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p4122
g59
(g98
S'\x1f\x00\x00\x00'
tRp4123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4124
I0
sg3641
g3874
sS'block_loop.thisRepN'
p4125
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4126
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p4127
Nsg69
Vn
sS'block_loop.thisTrialN'
p4128
I0
sg39
F0.68354056143652997
sg34
g752
(S'\x07\xdf\t\x1d\x11\x0f9\tj('
tRp4129
sa(dp4130
S'trial_loop.thisTrialN'
p4131
I32
sg3632
g3753
sS'block_loop.thisIndex'
p4132
g3626
sg38
S'left'
p4133
sg58
g62
sS'trial_loop.thisN'
p4134
I32
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4135
g59
(g98
S' \x00\x00\x00'
tRp4136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4137
I0
sg3641
g3760
sS'block_loop.thisRepN'
p4138
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4139
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4140
Nsg69
Vn
sS'block_loop.thisTrialN'
p4141
I0
sg39
F0.71676130013656802
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10\x03\x04\xfdX'
tRp4142
sa(dp4143
S'trial_loop.thisTrialN'
p4144
I33
sg3632
S'2-steamed_puddings.png'
p4145
sS'block_loop.thisIndex'
p4146
g3626
sg38
S'left'
p4147
sg58
g62
sS'trial_loop.thisN'
p4148
I33
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4149
g59
(g98
S'!\x00\x00\x00'
tRp4150
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4151
I0
sg3641
S'20-fruit_pastilles.png'
p4152
sS'block_loop.thisRepN'
p4153
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4154
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4155
Nsg69
Vn
sS'block_loop.thisTrialN'
p4156
I0
sg39
F2.2834850243816618
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10\t\x01D8'
tRp4157
sa(dp4158
S'trial_loop.thisTrialN'
p4159
I34
sg3632
g3768
sS'block_loop.thisIndex'
p4160
g3626
sg38
S'right'
p4161
sg58
g62
sS'trial_loop.thisN'
p4162
I34
sg33
g3778
sg63
g64
sS'trial_loop.thisIndex'
p4163
g59
(g98
S'"\x00\x00\x00'
tRp4164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4165
I0
sg3641
g3776
sS'block_loop.thisRepN'
p4166
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4167
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p4168
Nsg69
Vn
sS'block_loop.thisTrialN'
p4169
I0
sg39
F1.7838587876285601
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10\x10\x06\x1a\x80'
tRp4170
sa(dp4171
S'trial_loop.thisTrialN'
p4172
I35
sg3632
g3832
sS'block_loop.thisIndex'
p4173
g3626
sg38
S'left'
p4174
sg58
g62
sS'trial_loop.thisN'
p4175
I35
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p4176
g59
(g98
S'#\x00\x00\x00'
tRp4177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4178
I0
sg3641
g3840
sS'block_loop.thisRepN'
p4179
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4180
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p4181
Nsg69
Vn
sS'block_loop.thisTrialN'
p4182
I0
sg39
F0.89999081984933582
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10\x17\x03O\xa8'
tRp4183
sa(dp4184
S'trial_loop.thisTrialN'
p4185
I36
sg3632
S'18-mms.png'
p4186
sS'block_loop.thisIndex'
p4187
g3626
sg38
S'left'
p4188
sg58
g62
sS'trial_loop.thisN'
p4189
I36
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4190
g59
(g98
S'$\x00\x00\x00'
tRp4191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4192
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4193
sS'block_loop.thisRepN'
p4194
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4195
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4196
Nsg69
Vn
sS'block_loop.thisTrialN'
p4197
I0
sg39
F0.76676318178215297
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10\x1d\x026h'
tRp4198
sa(dp4199
S'trial_loop.thisTrialN'
p4200
I37
sg3632
S'44-crunch.png'
p4201
sS'block_loop.thisIndex'
p4202
g3626
sg38
S'left'
p4203
sg58
g62
sS'trial_loop.thisN'
p4204
I37
sg33
S'26-walkers_smoky_bacon.png'
p4205
sg63
g64
sS'trial_loop.thisIndex'
p4206
g59
(g98
S'%\x00\x00\x00'
tRp4207
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4208
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4209
sS'block_loop.thisRepN'
p4210
I1
sg3644
S'44-crunch.png'
p4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4212
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p4213
Nsg69
Vn
sS'block_loop.thisTrialN'
p4214
I0
sg39
F1.3168551543385547
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10"\x0ew '
tRp4215
sa(dp4216
S'trial_loop.thisTrialN'
p4217
I38
sg3632
S'29-beans.png'
p4218
sS'block_loop.thisIndex'
p4219
g3626
sg38
S'right'
p4220
sg58
g62
sS'trial_loop.thisN'
p4221
I38
sg33
g3930
sg63
g64
sS'trial_loop.thisIndex'
p4222
g59
(g98
S'&\x00\x00\x00'
tRp4223
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4224
I0
sg3641
S'46-pistachios.png'
p4225
sS'block_loop.thisRepN'
p4226
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4227
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p4228
Nsg69
Vn
sS'block_loop.thisTrialN'
p4229
I0
sg39
F0.83352197305794107
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10)\x04\x88('
tRp4230
sa(dp4231
S'trial_loop.thisTrialN'
p4232
I39
sg3632
g3832
sS'block_loop.thisIndex'
p4233
g3626
sg38
S'left'
p4234
sg58
g62
sS'trial_loop.thisN'
p4235
I39
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p4236
g59
(g98
S"'\x00\x00\x00"
tRp4237
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4238
I0
sg3641
g3840
sS'block_loop.thisRepN'
p4239
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4240
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p4241
Nsg69
Vn
sS'block_loop.thisTrialN'
p4242
I0
sg39
F0.76646839063323569
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10/\x02|\xb8'
tRp4243
sa(dp4244
S'trial_loop.thisTrialN'
p4245
I40
sg3632
g3956
sS'block_loop.thisIndex'
p4246
g3626
sg38
S'left'
p4247
sg58
g62
sS'trial_loop.thisN'
p4248
I40
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p4249
g59
(g98
S'(\x00\x00\x00'
tRp4250
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4251
I0
sg3641
g3964
sS'block_loop.thisRepN'
p4252
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4253
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4254
Nsg69
Vn
sS'block_loop.thisTrialN'
p4255
I0
sg39
F0.60055314679266303
sg34
g752
(S'\x07\xdf\t\x1d\x11\x104\x0e\xbdp'
tRp4256
sa(dp4257
S'trial_loop.thisTrialN'
p4258
I41
sg3632
g3883
sS'block_loop.thisIndex'
p4259
g3626
sg38
S'right'
p4260
sg58
g62
sS'trial_loop.thisN'
p4261
I41
sg33
g3802
sg63
g64
sS'trial_loop.thisIndex'
p4262
g59
(g98
S')\x00\x00\x00'
tRp4263
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4264
I0
sg3641
g3890
sS'block_loop.thisRepN'
p4265
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4266
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p4267
Nsg69
Vn
sS'block_loop.thisTrialN'
p4268
I0
sg39
F0.86686530382576166
sg34
g752
(S'\x07\xdf\t\x1d\x11\x10:\t\x1f\xf0'
tRp4269
sa(dp4270
S'trial_loop.thisTrialN'
p4271
I42
sg3632
g4218
sS'block_loop.thisIndex'
p4272
g3626
sg38
S'right'
p4273
sg58
g62
sS'trial_loop.thisN'
p4274
I42
sg33
g3930
sg63
g64
sS'trial_loop.thisIndex'
p4275
g59
(g98
S'*\x00\x00\x00'
tRp4276
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4277
I0
sg3641
g4225
sS'block_loop.thisRepN'
p4278
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4279
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p4280
Nsg69
Vn
sS'block_loop.thisTrialN'
p4281
I0
sg39
F0.65020777929385076
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11\x04\x07\x8d\x98'
tRp4282
sa(dp4283
S'trial_loop.thisTrialN'
p4284
I43
sg3632
g3883
sS'block_loop.thisIndex'
p4285
g3626
sg38
S'right'
p4286
sg58
g62
sS'trial_loop.thisN'
p4287
I43
sg33
g3802
sg63
g64
sS'trial_loop.thisIndex'
p4288
g59
(g98
S'+\x00\x00\x00'
tRp4289
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4290
I0
sg3641
g3890
sS'block_loop.thisRepN'
p4291
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4292
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p4293
Nsg69
Vn
sS'block_loop.thisTrialN'
p4294
I0
sg39
F0.86688611596400733
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11\n\x02\xa3\xc8'
tRp4295
sa(dp4296
S'trial_loop.thisTrialN'
p4297
I44
sg3632
S'35-raisins.png'
p4298
sS'block_loop.thisIndex'
p4299
g3626
sg38
S'right'
p4300
sg58
g62
sS'trial_loop.thisN'
p4301
I44
sg33
S'35-raisins.png'
p4302
sg63
g64
sS'trial_loop.thisIndex'
p4303
g59
(g98
S',\x00\x00\x00'
tRp4304
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4305
I0
sg3641
S'49-yorkie.png'
p4306
sS'block_loop.thisRepN'
p4307
I1
sg3644
S'49-yorkie.png'
p4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4309
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p4310
Nsg69
Vn
sS'block_loop.thisTrialN'
p4311
I0
sg39
F1.4501885637000669
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11\x10\x01\x11p'
tRp4312
sa(dp4313
S'trial_loop.thisTrialN'
p4314
I45
sg3632
g3956
sS'block_loop.thisIndex'
p4315
g3626
sg38
S'left'
p4316
sg58
g62
sS'trial_loop.thisN'
p4317
I45
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p4318
g59
(g98
S'-\x00\x00\x00'
tRp4319
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4320
I0
sg3641
g3964
sS'block_loop.thisRepN'
p4321
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4322
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4323
Nsg69
Vn
sS'block_loop.thisTrialN'
p4324
I0
sg39
F0.66680275335966144
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11\x16\x08\x87\x98'
tRp4325
sa(dp4326
S'trial_loop.thisTrialN'
p4327
I46
sg3632
g4044
sS'block_loop.thisIndex'
p4328
g3626
sg38
S'right'
p4329
sg58
g62
sS'trial_loop.thisN'
p4330
I46
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p4331
g59
(g98
S'.\x00\x00\x00'
tRp4332
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4333
I0
sg3641
g4052
sS'block_loop.thisRepN'
p4334
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4335
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p4336
Nsg69
Vn
sS'block_loop.thisTrialN'
p4337
I0
sg39
F1.0671505156860803
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11\x1c\x03\xdcH'
tRp4338
sa(dp4339
S'trial_loop.thisTrialN'
p4340
I47
sg3632
g4061
sS'block_loop.thisIndex'
p4341
g3626
sg38
S'right'
p4342
sg58
g62
sS'trial_loop.thisN'
p4343
I47
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4344
g59
(g98
S'/\x00\x00\x00'
tRp4345
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4346
I0
sg3641
g4069
sS'block_loop.thisRepN'
p4347
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4348
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4349
Nsg69
Vn
sS'block_loop.thisTrialN'
p4350
I0
sg39
F0.83344556684460258
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11"\x05b\xe8'
tRp4351
sa(dp4352
S'trial_loop.thisTrialN'
p4353
I48
sg3632
g4016
sS'block_loop.thisIndex'
p4354
g3626
sg38
S'right'
p4355
sg58
g62
sS'trial_loop.thisN'
p4356
I48
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4357
g59
(g98
S'0\x00\x00\x00'
tRp4358
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4359
I0
sg3641
g4023
sS'block_loop.thisRepN'
p4360
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4361
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4362
Nsg69
Vn
sS'block_loop.thisTrialN'
p4363
I0
sg39
F1.6335001915867906
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11(\x03\x92\x10'
tRp4364
sa(dp4365
S'trial_loop.thisTrialN'
p4366
I49
sg3632
g3633
sS'block_loop.thisIndex'
p4367
g3626
sg38
S'left'
p4368
sg58
g62
sS'trial_loop.thisN'
p4369
I49
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4370
g59
(g98
S'1\x00\x00\x00'
tRp4371
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4372
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4373
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4374
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4375
Nsg69
Vn
sS'block_loop.thisTrialN'
p4376
I0
sg39
F1.5501715148493531
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11.\r\xa8\x18'
tRp4377
sa(dp4378
S'trial_loop.thisTrialN'
p4379
I50
sg3632
g3999
sS'block_loop.thisIndex'
p4380
g3626
sg38
S'left'
p4381
sg58
g62
sS'trial_loop.thisN'
p4382
I50
sg33
g4010
sg63
g64
sS'trial_loop.thisIndex'
p4383
g59
(g98
S'2\x00\x00\x00'
tRp4384
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4385
I0
sg3641
g4007
sS'block_loop.thisRepN'
p4386
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4387
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p4388
Nsg69
Vn
sS'block_loop.thisTrialN'
p4389
I0
sg39
F0.86687784812966129
sg34
g752
(S'\x07\xdf\t\x1d\x11\x115\x07O\x18'
tRp4390
sa(dp4391
S'trial_loop.thisTrialN'
p4392
I51
sg3632
S'31-hobnobs.png'
p4393
sS'block_loop.thisIndex'
p4394
g3626
sg38
S'right'
p4395
sg58
g62
sS'trial_loop.thisN'
p4396
I51
sg33
S'25-kitkat.png'
p4397
sg63
g64
sS'trial_loop.thisIndex'
p4398
g59
(g98
S'3\x00\x00\x00'
tRp4399
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4400
I0
sg3641
S'25-kitkat.png'
p4401
sS'block_loop.thisRepN'
p4402
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4403
I1
sg3646
S'31-hobnobs.png'
p4404
sg55
g11
sS'block_loop.thisTrial'
p4405
Nsg69
Vn
sS'block_loop.thisTrialN'
p4406
I0
sg39
F1.016855268379004
sg34
g752
(S'\x07\xdf\t\x1d\x11\x11;\x05\xb8\xd8'
tRp4407
sa(dp4408
S'trial_loop.thisTrialN'
p4409
I52
sg3632
S'26-walkers_smoky_bacon.png'
p4410
sS'block_loop.thisIndex'
p4411
g3626
sg38
S'right'
p4412
sg58
g62
sS'trial_loop.thisN'
p4413
I52
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p4414
g59
(g98
S'4\x00\x00\x00'
tRp4415
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4416
I0
sg3641
S'44-crunch.png'
p4417
sS'block_loop.thisRepN'
p4418
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4419
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p4420
Nsg69
Vn
sS'block_loop.thisTrialN'
p4421
I0
sg39
F1.8168346272977942
sg34
g752
(S'\x07\xdf\t\x1d\x11\x12\x05\x06\x87\xe0'
tRp4422
sa(dp4423
S'trial_loop.thisTrialN'
p4424
I53
sg3632
g3670
sS'block_loop.thisIndex'
p4425
g3626
sg38
S'left'
p4426
sg58
g62
sS'trial_loop.thisN'
p4427
I53
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4428
g59
(g98
S'5\x00\x00\x00'
tRp4429
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4430
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4431
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4432
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4433
Nsg69
Vn
sS'block_loop.thisTrialN'
p4434
I0
sg39
F1.0667436810945219
sg34
g752
(S'\x07\xdf\t\x1d\x11\x12\x0c\x04:\x08'
tRp4435
sa(dp4436
S'trial_loop.thisTrialN'
p4437
I54
sg3632
g4393
sS'block_loop.thisIndex'
p4438
g3626
sg38
S'right'
p4439
sg58
g62
sS'trial_loop.thisN'
p4440
I54
sg33
g4397
sg63
g64
sS'trial_loop.thisIndex'
p4441
g59
(g98
S'6\x00\x00\x00'
tRp4442
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4443
I0
sg3641
g4401
sS'block_loop.thisRepN'
p4444
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4445
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p4446
Nsg69
Vn
sS'block_loop.thisTrialN'
p4447
I0
sg39
F1.1336467318651557
sg34
g752
(S'\x07\xdf\t\x1d\x11\x12\x12\x05\xbc\xc0'
tRp4448
sa(dp4449
S'trial_loop.thisTrialN'
p4450
I55
sg3632
g3956
sS'block_loop.thisIndex'
p4451
g3626
sg38
S'left'
p4452
sg58
g62
sS'trial_loop.thisN'
p4453
I55
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p4454
g59
(g98
S'7\x00\x00\x00'
tRp4455
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4456
I0
sg3641
g3964
sS'block_loop.thisRepN'
p4457
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4458
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4459
Nsg69
Vn
sS'block_loop.thisTrialN'
p4460
I0
sg39
F0.70008364770183107
sg34
g752
(S'\x07\xdf\t\x1d\x11\x12\x18\x085\x90'
tRp4461
sa(dp4462
S'trial_loop.thisTrialN'
p4463
I56
sg3632
g3768
sS'block_loop.thisIndex'
p4464
g3626
sg38
S'right'
p4465
sg58
g62
sS'trial_loop.thisN'
p4466
I56
sg33
g3778
sg63
g64
sS'trial_loop.thisIndex'
p4467
g59
(g98
S'8\x00\x00\x00'
tRp4468
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4469
I0
sg3641
g3776
sS'block_loop.thisRepN'
p4470
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4471
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p4472
Nsg69
Vn
sS'block_loop.thisTrialN'
p4473
I0
sg39
F1.6172436286360607
sg34
g752
(S'\x07\xdf\t\x1d\x11\x12\x1e\x04A\xd8'
tRp4474
sa(dp4475
S'trial_loop.thisTrialN'
p4476
I57
sg3632
g4044
sS'block_loop.thisIndex'
p4477
g3626
sg38
S'left'
p4478
sg58
g62
sS'trial_loop.thisN'
p4479
I57
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p4480
g59
(g98
S'9\x00\x00\x00'
tRp4481
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4482
I0
sg3641
g4052
sS'block_loop.thisRepN'
p4483
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4484
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p4485
Nsg69
Vn
sS'block_loop.thisTrialN'
p4486
I0
sg39
F1.0000746956320654
sg34
g752
(S'\x07\xdf\t\x1d\x11\x12$\x0e\x1dH'
tRp4487
sa(dp4488
S'trial_loop.thisTrialN'
p4489
I58
sg3632
g4393
sS'block_loop.thisIndex'
p4490
g3626
sg38
S'right'
p4491
sg58
g62
sS'trial_loop.thisN'
p4492
I58
sg33
g4397
sg63
g64
sS'trial_loop.thisIndex'
p4493
g59
(g98
S':\x00\x00\x00'
tRp4494
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4495
I0
sg3641
g4401
sS'block_loop.thisRepN'
p4496
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4497
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p4498
Nsg69
Vn
sS'block_loop.thisTrialN'
p4499
I0
sg39
F0.76684785583711346
sg34
g752
(S'\x07\xdf\t\x1d\x11\x12*\x0e\xad\xd0'
tRp4500
sa(dp4501
S'trial_loop.thisTrialN'
p4502
I59
sg3632
g4104
sS'block_loop.thisIndex'
p4503
g3626
sg38
S'right'
p4504
sg58
g62
sS'trial_loop.thisN'
p4505
I59
sg33
g4003
sg63
g64
sS'trial_loop.thisIndex'
p4506
g59
(g98
S';\x00\x00\x00'
tRp4507
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4508
I0
sg3641
g4111
sS'block_loop.thisRepN'
p4509
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4510
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p4511
Nsg69
Vn
sS'block_loop.thisTrialN'
p4512
I0
sg39
F2.2000685375169269
sg34
g752
(S'\x07\xdf\t\x1d\x11\x120\x0b\xacH'
tRp4513
sa(dp4514
S'trial_loop.thisTrialN'
p4515
I60
sg3632
g3653
sS'block_loop.thisIndex'
p4516
g3626
sg38
S'right'
p4517
sg58
g62
sS'trial_loop.thisN'
p4518
I60
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4519
g59
(g98
S'<\x00\x00\x00'
tRp4520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4521
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4522
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4523
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4524
Nsg69
Vn
sS'block_loop.thisTrialN'
p4525
I0
sg39
F0.86685618069168413
sg34
g752
(S'\x07\xdf\t\x1d\x11\x127\x0f\x13`'
tRp4526
sa(dp4527
S'trial_loop.thisTrialN'
p4528
I61
sg3632
g3815
sS'block_loop.thisIndex'
p4529
g3626
sg38
S'left'
p4530
sg58
g62
sS'trial_loop.thisN'
p4531
I61
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p4532
g59
(g98
S'=\x00\x00\x00'
tRp4533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4534
I0
sg3641
g3823
sS'block_loop.thisRepN'
p4535
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4536
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p4537
Nsg69
Vn
sS'block_loop.thisTrialN'
p4538
I0
sg39
F0.98388056910334853
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13\x01\r\x81\x08'
tRp4539
sa(dp4540
S'trial_loop.thisTrialN'
p4541
I62
sg3632
g4410
sS'block_loop.thisIndex'
p4542
g3626
sg38
S'right'
p4543
sg58
g62
sS'trial_loop.thisN'
p4544
I62
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p4545
g59
(g98
S'>\x00\x00\x00'
tRp4546
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4547
I0
sg3641
g4417
sS'block_loop.thisRepN'
p4548
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4549
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p4550
Nsg69
Vn
sS'block_loop.thisTrialN'
p4551
I0
sg39
F0.80010850823236979
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13\x07\r\xd3\x10'
tRp4552
sa(dp4553
S'trial_loop.thisTrialN'
p4554
I63
sg3632
g3736
sS'block_loop.thisIndex'
p4555
g3626
sg38
S'right'
p4556
sg58
g62
sS'trial_loop.thisN'
p4557
I63
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4558
g59
(g98
S'?\x00\x00\x00'
tRp4559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4560
I0
sg3641
g3744
sS'block_loop.thisRepN'
p4561
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4562
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4563
Nsg69
Vn
sS'block_loop.thisTrialN'
p4564
I0
sg39
F2.1334996213881823
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13\r\x0bN\x88'
tRp4565
sa(dp4566
S'trial_loop.thisTrialN'
p4567
I64
sg3632
g3898
sS'block_loop.thisIndex'
p4568
g3626
sg38
S'right'
p4569
sg58
g62
sS'trial_loop.thisN'
p4570
I64
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p4571
g59
(g98
S'@\x00\x00\x00'
tRp4572
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4573
I0
sg3641
g3905
sS'block_loop.thisRepN'
p4574
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4575
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p4576
Nsg69
Vn
sS'block_loop.thisTrialN'
p4577
I0
sg39
F0.91680047257614206
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13\x14\r\xbf\x88'
tRp4578
sa(dp4579
S'trial_loop.thisTrialN'
p4580
I65
sg3632
g4145
sS'block_loop.thisIndex'
p4581
g3626
sg38
S'left'
p4582
sg58
g62
sS'trial_loop.thisN'
p4583
I65
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4584
g59
(g98
S'A\x00\x00\x00'
tRp4585
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4586
I0
sg3641
g4152
sS'block_loop.thisRepN'
p4587
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4588
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4589
Nsg69
Vn
sS'block_loop.thisTrialN'
p4590
I0
sg39
F0.83345354958146345
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13\x1a\r\x1f`'
tRp4591
sa(dp4592
S'trial_loop.thisTrialN'
p4593
I66
sg3632
g4393
sS'block_loop.thisIndex'
p4594
g3626
sg38
S'right'
p4595
sg58
g62
sS'trial_loop.thisN'
p4596
I66
sg33
g4397
sg63
g64
sS'trial_loop.thisIndex'
p4597
g59
(g98
S'B\x00\x00\x00'
tRp4598
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4599
I0
sg3641
g4401
sS'block_loop.thisRepN'
p4600
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4601
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p4602
Nsg69
Vn
sS'block_loop.thisTrialN'
p4603
I0
sg39
F0.86680913955206051
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13 \x0b\x13\xf0'
tRp4604
sa(dp4605
S'trial_loop.thisTrialN'
p4606
I67
sg3632
S'6-sour_patch_kids.png'
p4607
sS'block_loop.thisIndex'
p4608
g3626
sg38
S'right'
p4609
sg58
g62
sS'trial_loop.thisN'
p4610
I67
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p4611
g59
(g98
S'C\x00\x00\x00'
tRp4612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4613
I0
sg3641
S'38-maltesers.png'
p4614
sS'block_loop.thisRepN'
p4615
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4616
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p4617
Nsg69
Vn
sS'block_loop.thisTrialN'
p4618
I0
sg39
F1.0332609374927415
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13&\t\x81\x98'
tRp4619
sa(dp4620
S'trial_loop.thisTrialN'
p4621
I68
sg3632
S'51-mars.png'
p4622
sS'block_loop.thisIndex'
p4623
g3626
sg38
S'right'
p4624
sg58
g62
sS'trial_loop.thisN'
p4625
I68
sg33
g3778
sg63
g64
sS'trial_loop.thisIndex'
p4626
g59
(g98
S'D\x00\x00\x00'
tRp4627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4628
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4629
sS'block_loop.thisRepN'
p4630
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4631
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p4632
Nsg69
Vn
sS'block_loop.thisTrialN'
p4633
I0
sg39
F1.8334903272007068
sg34
g752
(S'\x07\xdf\t\x1d\x11\x13,\n\x8b8'
tRp4634
sa(dp4635
S'trial_loop.thisTrialN'
p4636
I69
sg3632
g4104
sS'block_loop.thisIndex'
p4637
g3626
sg38
S'right'
p4638
sg58
g62
sS'trial_loop.thisN'
p4639
I69
sg33
g4003
sg63
g64
sS'trial_loop.thisIndex'
p4640
g59
(g98
S'E\x00\x00\x00'
tRp4641
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4642
I0
sg3641
g4111
sS'block_loop.thisRepN'
p4643
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4644
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p4645
Nsg69
Vn
sS'block_loop.thisTrialN'
p4646
I0
sg39
F0.90011398210845073
sg34
g752
(S'\x07\xdf\t\x1d\x11\x133\x08w\xf8'
tRp4647
sa(dp4648
S'trial_loop.thisTrialN'
p4649
I70
sg3632
S'4-corn.png'
p4650
sS'block_loop.thisIndex'
p4651
g3626
sg38
S'right'
p4652
sg58
g62
sS'trial_loop.thisN'
p4653
I70
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p4654
g59
(g98
S'F\x00\x00\x00'
tRp4655
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4656
I0
sg3641
S'10-bounty_redo.png'
p4657
sS'block_loop.thisRepN'
p4658
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4659
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4660
Nsg69
Vn
sS'block_loop.thisTrialN'
p4661
I0
sg39
F1.0000966481638898
sg34
g752
(S'\x07\xdf\t\x1d\x11\x139\x07\x9d8'
tRp4662
sa(dp4663
S'trial_loop.thisTrialN'
p4664
I71
sg3632
g3721
sS'block_loop.thisIndex'
p4665
g3626
sg38
S'left'
p4666
sg58
g62
sS'trial_loop.thisN'
p4667
I71
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p4668
g59
(g98
S'G\x00\x00\x00'
tRp4669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4670
I0
sg3641
g3728
sS'block_loop.thisRepN'
p4671
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4672
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4673
Nsg69
Vn
sS'block_loop.thisTrialN'
p4674
I0
sg39
F1.1339027497124334
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14\x03\x07\xef@'
tRp4675
sa(dp4676
S'trial_loop.thisTrialN'
p4677
I72
sg3632
g3866
sS'block_loop.thisIndex'
p4678
g3626
sg38
S'left'
p4679
sg58
g62
sS'trial_loop.thisN'
p4680
I72
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p4681
g59
(g98
S'H\x00\x00\x00'
tRp4682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4683
I0
sg3641
g3874
sS'block_loop.thisRepN'
p4684
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4685
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p4686
Nsg69
Vn
sS'block_loop.thisTrialN'
p4687
I0
sg39
F0.93350349871980143
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14\t\n\xa6\x90'
tRp4688
sa(dp4689
S'trial_loop.thisTrialN'
p4690
I73
sg3632
g3704
sS'block_loop.thisIndex'
p4691
g3626
sg38
S'right'
p4692
sg58
g62
sS'trial_loop.thisN'
p4693
I73
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4694
g59
(g98
S'I\x00\x00\x00'
tRp4695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4696
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4697
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4698
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4699
Nsg69
Vn
sS'block_loop.thisTrialN'
p4700
I0
sg39
F1.1168501936408575
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14\x0f\n\x06h'
tRp4701
sa(dp4702
S'trial_loop.thisTrialN'
p4703
I74
sg3632
g3768
sS'block_loop.thisIndex'
p4704
g3626
sg38
S'right'
p4705
sg58
g62
sS'trial_loop.thisN'
p4706
I74
sg33
g3778
sg63
g64
sS'trial_loop.thisIndex'
p4707
g59
(g98
S'J\x00\x00\x00'
tRp4708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4709
I0
sg3641
g3776
sS'block_loop.thisRepN'
p4710
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4711
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p4712
Nsg69
Vn
sS'block_loop.thisTrialN'
p4713
I0
sg39
F1.200174023710133
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14\x15\x0cD\xa0'
tRp4714
sa(dp4715
S'trial_loop.thisTrialN'
p4716
I75
sg3632
g3999
sS'block_loop.thisIndex'
p4717
g3626
sg38
S'left'
p4718
sg58
g62
sS'trial_loop.thisN'
p4719
I75
sg33
g4003
sg63
g64
sS'trial_loop.thisIndex'
p4720
g59
(g98
S'K\x00\x00\x00'
tRp4721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4722
I0
sg3641
g4007
sS'block_loop.thisRepN'
p4723
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4724
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p4725
Nsg69
Vn
sS'block_loop.thisTrialN'
p4726
I0
sg39
F1.1834159736899892
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14\x1c\x00\xab\xe0'
tRp4727
sa(dp4728
S'trial_loop.thisTrialN'
p4729
I76
sg3632
g4186
sS'block_loop.thisIndex'
p4730
g3626
sg38
S'left'
p4731
sg58
g62
sS'trial_loop.thisN'
p4732
I76
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4733
g59
(g98
S'L\x00\x00\x00'
tRp4734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4735
I0
sg3641
g4193
sS'block_loop.thisRepN'
p4736
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4737
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4738
Nsg69
Vn
sS'block_loop.thisTrialN'
p4739
I0
sg39
F1.6505193912125833
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14"\x03\xd8`'
tRp4740
sa(dp4741
S'trial_loop.thisTrialN'
p4742
I77
sg3632
g3721
sS'block_loop.thisIndex'
p4743
g3626
sg38
S'left'
p4744
sg58
g62
sS'trial_loop.thisN'
p4745
I77
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4746
g59
(g98
S'M\x00\x00\x00'
tRp4747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4748
I0
sg3641
g3728
sS'block_loop.thisRepN'
p4749
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4750
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p4751
Nsg69
Vn
sS'block_loop.thisTrialN'
p4752
I0
sg39
F0.65019124361788272
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14(\x0ekh'
tRp4753
sa(dp4754
S'trial_loop.thisTrialN'
p4755
I78
sg3632
S'33-ambrosia_rice.png'
p4756
sS'block_loop.thisIndex'
p4757
g3626
sg38
S'right'
p4758
sg58
g62
sS'trial_loop.thisN'
p4759
I78
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4760
g59
(g98
S'N\x00\x00\x00'
tRp4761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4762
I0
sg3641
S'23-crunchie_redo.png'
p4763
sS'block_loop.thisRepN'
p4764
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4765
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4766
Nsg69
Vn
sS'block_loop.thisTrialN'
p4767
I0
sg39
F1.2335127929109149
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14.\t\x81\x98'
tRp4768
sa(dp4769
S'trial_loop.thisTrialN'
p4770
I79
sg3632
g3898
sS'block_loop.thisIndex'
p4771
g3626
sg38
S'right'
p4772
sg58
g62
sS'trial_loop.thisN'
p4773
I79
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p4774
g59
(g98
S'O\x00\x00\x00'
tRp4775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4776
I0
sg3641
g3905
sS'block_loop.thisRepN'
p4777
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4778
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p4779
Nsg69
Vn
sS'block_loop.thisTrialN'
p4780
I0
sg39
F0.83349888013253803
sg34
g752
(S'\x07\xdf\t\x1d\x11\x144\r\xa8\x18'
tRp4781
sa(dp4782
S'trial_loop.thisTrialN'
p4783
I80
sg3632
g3815
sS'block_loop.thisIndex'
p4784
g3626
sg38
S'left'
p4785
sg58
g62
sS'trial_loop.thisN'
p4786
I80
sg33
g3826
sg63
g64
sS'trial_loop.thisIndex'
p4787
g59
(g98
S'P\x00\x00\x00'
tRp4788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4789
I0
sg3641
g3823
sS'block_loop.thisRepN'
p4790
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4791
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p4792
Nsg69
Vn
sS'block_loop.thisTrialN'
p4793
I0
sg39
F1.1668554964562645
sg34
g752
(S'\x07\xdf\t\x1d\x11\x14:\x0b\x98\xc0'
tRp4794
sa(dp4795
S'trial_loop.thisTrialN'
p4796
I81
sg3632
g3898
sS'block_loop.thisIndex'
p4797
g3626
sg38
S'right'
p4798
sg58
g62
sS'trial_loop.thisN'
p4799
I81
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p4800
g59
(g98
S'Q\x00\x00\x00'
tRp4801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4802
I0
sg3641
g3905
sS'block_loop.thisRepN'
p4803
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4804
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p4805
Nsg69
Vn
sS'block_loop.thisTrialN'
p4806
I0
sg39
F0.76684586015471723
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15\x04\x0e\x8a\xa8'
tRp4807
sa(dp4808
S'trial_loop.thisTrialN'
p4809
I82
sg3632
g4607
sS'block_loop.thisIndex'
p4810
g3626
sg38
S'right'
p4811
sg58
g62
sS'trial_loop.thisN'
p4812
I82
sg33
g3843
sg63
g64
sS'trial_loop.thisIndex'
p4813
g59
(g98
S'R\x00\x00\x00'
tRp4814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4815
I0
sg3641
g4614
sS'block_loop.thisRepN'
p4816
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4817
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p4818
Nsg69
Vn
sS'block_loop.thisTrialN'
p4819
I0
sg39
F0.79994087071099784
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15\n\x0b\x8d\x08'
tRp4820
sa(dp4821
S'trial_loop.thisTrialN'
p4822
I83
sg3632
g4104
sS'block_loop.thisIndex'
p4823
g3626
sg38
S'right'
p4824
sg58
g62
sS'trial_loop.thisN'
p4825
I83
sg33
g4010
sg63
g64
sS'trial_loop.thisIndex'
p4826
g59
(g98
S'S\x00\x00\x00'
tRp4827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4828
I0
sg3641
g4111
sS'block_loop.thisRepN'
p4829
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4830
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p4831
Nsg69
Vn
sS'block_loop.thisTrialN'
p4832
I0
sg39
F0.88353867979094503
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15\x10\t\x04\x98'
tRp4833
sa(dp4834
S'trial_loop.thisTrialN'
p4835
I84
sg3632
g4622
sS'block_loop.thisIndex'
p4836
g3626
sg38
S'left'
p4837
sg58
g62
sS'trial_loop.thisN'
p4838
I84
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p4839
g59
(g98
S'T\x00\x00\x00'
tRp4840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4841
I0
sg3641
g4629
sS'block_loop.thisRepN'
p4842
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4843
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p4844
Nsg69
Vn
sS'block_loop.thisTrialN'
p4845
I0
sg39
F1.7334703133310541
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15\x16\x07\xac\xd8'
tRp4846
sa(dp4847
S'trial_loop.thisTrialN'
p4848
I85
sg3632
g3633
sS'block_loop.thisIndex'
p4849
g3626
sg38
S'left'
p4850
sg58
g62
sS'trial_loop.thisN'
p4851
I85
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4852
g59
(g98
S'U\x00\x00\x00'
tRp4853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4854
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4855
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4856
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4857
Nsg69
Vn
sS'block_loop.thisTrialN'
p4858
I0
sg39
F1.1167931740710628
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15\x1d\x04.P'
tRp4859
sa(dp4860
S'trial_loop.thisTrialN'
p4861
I86
sg3632
g4201
sS'block_loop.thisIndex'
p4862
g3626
sg38
S'left'
p4863
sg58
g62
sS'trial_loop.thisN'
p4864
I86
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p4865
g59
(g98
S'V\x00\x00\x00'
tRp4866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4867
I0
sg3641
g4209
sS'block_loop.thisRepN'
p4868
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4869
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p4870
Nsg69
Vn
sS'block_loop.thisTrialN'
p4871
I0
sg39
F1.1501034334905853
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15#\x06h\xa0'
tRp4872
sa(dp4873
S'trial_loop.thisTrialN'
p4874
I87
sg3632
S'8-liquorice_catherine_wheels.png'
p4875
sS'block_loop.thisIndex'
p4876
g3626
sg38
S'right'
p4877
sg58
g62
sS'trial_loop.thisN'
p4878
I87
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4879
g59
(g98
S'W\x00\x00\x00'
tRp4880
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4881
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4882
sS'block_loop.thisRepN'
p4883
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4884
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4885
Nsg69
Vn
sS'block_loop.thisTrialN'
p4886
I0
sg39
F0.8668821245955769
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15)\tZ\x88'
tRp4887
sa(dp4888
S'trial_loop.thisTrialN'
p4889
I88
sg3632
g3926
sS'block_loop.thisIndex'
p4890
g3626
sg38
S'left'
p4891
sg58
g62
sS'trial_loop.thisN'
p4892
I88
sg33
g3930
sg63
g64
sS'trial_loop.thisIndex'
p4893
g59
(g98
S'X\x00\x00\x00'
tRp4894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4895
I0
sg3641
g3934
sS'block_loop.thisRepN'
p4896
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4897
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p4898
Nsg69
Vn
sS'block_loop.thisTrialN'
p4899
I0
sg39
F0.86687157597407349
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15/\x07\xc80'
tRp4900
sa(dp4901
S'trial_loop.thisTrialN'
p4902
I89
sg3632
g3653
sS'block_loop.thisIndex'
p4903
g3626
sg38
S'right'
p4904
sg58
g62
sS'trial_loop.thisN'
p4905
I89
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4906
g59
(g98
S'Y\x00\x00\x00'
tRp4907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4908
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4909
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4910
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4911
Nsg69
Vn
sS'block_loop.thisTrialN'
p4912
I0
sg39
F1.0335340612073196
sg34
g752
(S'\x07\xdf\t\x1d\x11\x155\x065\xd8'
tRp4913
sa(dp4914
S'trial_loop.thisTrialN'
p4915
I90
sg3632
S'49-yorkie.png'
p4916
sS'block_loop.thisIndex'
p4917
g3626
sg38
S'left'
p4918
sg58
g62
sS'trial_loop.thisN'
p4919
I90
sg33
g4302
sg63
g64
sS'trial_loop.thisIndex'
p4920
g59
(g98
S'Z\x00\x00\x00'
tRp4921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4922
I0
sg3641
S'35-raisins.png'
p4923
sS'block_loop.thisRepN'
p4924
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4925
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p4926
Nsg69
Vn
sS'block_loop.thisTrialN'
p4927
I0
sg39
F1.3168785323614429
sg34
g752
(S'\x07\xdf\t\x1d\x11\x15;\x07?x'
tRp4928
sa(dp4929
S'trial_loop.thisTrialN'
p4930
I91
sg3632
g3798
sS'block_loop.thisIndex'
p4931
g3626
sg38
S'left'
p4932
sg58
g62
sS'trial_loop.thisN'
p4933
I91
sg33
g3802
sg63
g64
sS'trial_loop.thisIndex'
p4934
g59
(g98
S'[\x00\x00\x00'
tRp4935
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4936
I0
sg3641
g3806
sS'block_loop.thisRepN'
p4937
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4938
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p4939
Nsg69
Vn
sS'block_loop.thisTrialN'
p4940
I0
sg39
F1.0001071967817552
sg34
g752
(S'\x07\xdf\t\x1d\x11\x16\x05\x0c\x96\xa8'
tRp4941
sa(dp4942
S'trial_loop.thisTrialN'
p4943
I92
sg3632
g4622
sS'block_loop.thisIndex'
p4944
g3626
sg38
S'left'
p4945
sg58
g62
sS'trial_loop.thisN'
p4946
I92
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p4947
g59
(g98
S'\\\x00\x00\x00'
tRp4948
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4949
I0
sg3641
g4629
sS'block_loop.thisRepN'
p4950
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4951
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p4952
Nsg69
Vn
sS'block_loop.thisTrialN'
p4953
I0
sg39
F1.467206908033404
sg34
g752
(S"\x07\xdf\t\x1d\x11\x16\x0b\r'0"
tRp4954
sa(dp4955
S'trial_loop.thisTrialN'
p4956
I93
sg3632
g4650
sS'block_loop.thisIndex'
p4957
g3626
sg38
S'right'
p4958
sg58
g62
sS'trial_loop.thisN'
p4959
I93
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p4960
g59
(g98
S']\x00\x00\x00'
tRp4961
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4962
I0
sg3641
g4657
sS'block_loop.thisRepN'
p4963
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4964
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4965
Nsg69
Vn
sS'block_loop.thisTrialN'
p4966
I0
sg39
F1.8501548651365738
sg34
g752
(S'\x07\xdf\t\x1d\x11\x16\x12\x05[\x18'
tRp4967
sa(dp4968
S'trial_loop.thisTrialN'
p4969
I94
sg3632
S'45-chewy_nougat_redo.png'
p4970
sS'block_loop.thisIndex'
p4971
g3626
sg38
S'right'
p4972
sg58
g62
sS'trial_loop.thisN'
p4973
I94
sg33
g3853
sg63
g64
sS'trial_loop.thisIndex'
p4974
g59
(g98
S'^\x00\x00\x00'
tRp4975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4976
I0
sg3641
S'41-peanuts_redo.png'
p4977
sS'block_loop.thisRepN'
p4978
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4979
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p4980
Nsg69
Vn
sS'block_loop.thisTrialN'
p4981
I0
sg39
F1.0835159860071144
sg34
g752
(S'\x07\xdf\t\x1d\x11\x16\x19\x03\xc4\xd8'
tRp4982
sa(dp4983
S'trial_loop.thisTrialN'
p4984
I95
sg3632
g3768
sS'block_loop.thisIndex'
p4985
g3626
sg38
S'right'
p4986
sg58
g62
sS'trial_loop.thisN'
p4987
I95
sg33
g3778
sg63
g64
sS'trial_loop.thisIndex'
p4988
g59
(g98
S'_\x00\x00\x00'
tRp4989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4990
I0
sg3641
g3776
sS'block_loop.thisRepN'
p4991
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4992
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p4993
Nsg69
Vn
sS'block_loop.thisTrialN'
p4994
I0
sg39
F1.8334994503311464
sg34
g752
(S'\x07\xdf\t\x1d\x11\x16\x1f\x05\x86\x10'
tRp4995
sa(dp4996
S'trial_loop.thisTrialN'
p4997
I96
sg3632
g4145
sS'block_loop.thisIndex'
p4998
g3626
sg38
S'left'
p4999
sg58
g62
sS'trial_loop.thisN'
p5000
I96
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5001
g59
(g98
S'`\x00\x00\x00'
tRp5002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5003
I0
sg3641
g4152
sS'block_loop.thisRepN'
p5004
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5005
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5006
Nsg69
Vn
sS'block_loop.thisTrialN'
p5007
I0
sg39
F0.73347202391960309
sg34
g752
(S'\x07\xdf\t\x1d\x11\x16&\x03r\xd0'
tRp5008
sa(dp5009
S'trial_loop.thisTrialN'
p5010
I97
sg3632
g3687
sS'block_loop.thisIndex'
p5011
g3626
sg38
S'right'
p5012
sg58
g62
sS'trial_loop.thisN'
p5013
I97
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5014
g59
(g98
S'a\x00\x00\x00'
tRp5015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5016
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5017
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5018
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5019
Nsg69
Vn
sS'block_loop.thisTrialN'
p5020
I0
sg39
F0.56682293828635011
sg34
g752
(S'\x07\xdf\t\x1d\x11\x16+\x0f:p'
tRp5021
sa(dp5022
S'trial_loop.thisTrialN'
p5023
I98
sg3632
g4607
sS'block_loop.thisIndex'
p5024
g3626
sg38
S'right'
p5025
sg58
g62
sS'trial_loop.thisN'
p5026
I98
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p5027
g59
(g98
S'b\x00\x00\x00'
tRp5028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5029
I0
sg3641
g4614
sS'block_loop.thisRepN'
p5030
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5031
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p5032
Nsg69
Vn
sS'block_loop.thisTrialN'
p5033
I0
sg39
F0.86658590795559576
sg34
g752
(S'\x07\xdf\t\x1d\x11\x161\x08\xe5X'
tRp5034
sa(dp5035
S'trial_loop.thisTrialN'
p5036
I99
sg3632
g4410
sS'block_loop.thisIndex'
p5037
g3626
sg38
S'right'
p5038
sg58
g62
sS'trial_loop.thisN'
p5039
I99
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5040
g59
(g98
S'c\x00\x00\x00'
tRp5041
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5042
I0
sg3641
g4417
sS'block_loop.thisRepN'
p5043
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5044
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p5045
Nsg69
Vn
sS'block_loop.thisTrialN'
p5046
I0
sg39
F1.1834943755893619
sg34
g752
(S'\x07\xdf\t\x1d\x11\x167\x07\x8d\x98'
tRp5047
sa(dp5048
S'trial_loop.thisTrialN'
p5049
I100
sg3632
g3832
sS'block_loop.thisIndex'
p5050
g3626
sg38
S'left'
p5051
sg58
g62
sS'trial_loop.thisN'
p5052
I100
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p5053
g59
(g98
S'd\x00\x00\x00'
tRp5054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5055
I0
sg3641
g3840
sS'block_loop.thisRepN'
p5056
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5057
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p5058
Nsg69
Vn
sS'block_loop.thisTrialN'
p5059
I0
sg39
F1.3332445728774474
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17\x01\n\xbe\x00'
tRp5060
sa(dp5061
S'trial_loop.thisTrialN'
p5062
I101
sg3632
g4410
sS'block_loop.thisIndex'
p5063
g3626
sg38
S'right'
p5064
sg58
g62
sS'trial_loop.thisN'
p5065
I101
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5066
g59
(g98
S'e\x00\x00\x00'
tRp5067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5068
I0
sg3641
g4417
sS'block_loop.thisRepN'
p5069
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5070
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p5071
Nsg69
Vn
sS'block_loop.thisTrialN'
p5072
I0
sg39
F0.88346997121698223
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17\x08\x01\r\x88'
tRp5073
sa(dp5074
S'trial_loop.thisTrialN'
p5075
I102
sg3632
g4756
sS'block_loop.thisIndex'
p5076
g3626
sg38
S'left'
p5077
sg58
g62
sS'trial_loop.thisN'
p5078
I102
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p5079
g59
(g98
S'f\x00\x00\x00'
tRp5080
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5081
I0
sg3641
g4763
sS'block_loop.thisRepN'
p5082
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5083
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5084
Nsg69
Vn
sS'block_loop.thisTrialN'
p5085
I0
sg39
F0.91701543633826077
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17\r\x0f6\x88'
tRp5086
sa(dp5087
S'trial_loop.thisTrialN'
p5088
I103
sg3632
g4145
sS'block_loop.thisIndex'
p5089
g3626
sg38
S'left'
p5090
sg58
g62
sS'trial_loop.thisN'
p5091
I103
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5092
g59
(g98
S'g\x00\x00\x00'
tRp5093
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5094
I0
sg3641
g4152
sS'block_loop.thisRepN'
p5095
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5096
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5097
Nsg69
Vn
sS'block_loop.thisTrialN'
p5098
I0
sg39
F1.1168042928875366
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17\x13\x0eW\xe0'
tRp5099
sa(dp5100
S'trial_loop.thisTrialN'
p5101
I104
sg3632
g4298
sS'block_loop.thisIndex'
p5102
g3626
sg38
S'right'
p5103
sg58
g62
sS'trial_loop.thisN'
p5104
I104
sg33
g4308
sg63
g64
sS'trial_loop.thisIndex'
p5105
g59
(g98
S'h\x00\x00\x00'
tRp5106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5107
I0
sg3641
g4306
sS'block_loop.thisRepN'
p5108
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5109
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p5110
Nsg69
Vn
sS'block_loop.thisTrialN'
p5111
I0
sg39
F1.3668456320738187
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17\x1a\x01S\xd8'
tRp5112
sa(dp5113
S'trial_loop.thisTrialN'
p5114
I105
sg3632
g4393
sS'block_loop.thisIndex'
p5115
g3626
sg38
S'right'
p5116
sg58
g62
sS'trial_loop.thisN'
p5117
I105
sg33
g4404
sg63
g64
sS'trial_loop.thisIndex'
p5118
g59
(g98
S'i\x00\x00\x00'
tRp5119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5120
I0
sg3641
g4401
sS'block_loop.thisRepN'
p5121
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5122
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p5123
Nsg69
Vn
sS'block_loop.thisTrialN'
p5124
I0
sg39
F0.76675947551120771
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17 \x07^\xb8'
tRp5125
sa(dp5126
S'trial_loop.thisTrialN'
p5127
I106
sg3632
g3832
sS'block_loop.thisIndex'
p5128
g3626
sg38
S'left'
p5129
sg58
g62
sS'trial_loop.thisN'
p5130
I106
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p5131
g59
(g98
S'j\x00\x00\x00'
tRp5132
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5133
I0
sg3641
g3840
sS'block_loop.thisRepN'
p5134
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5135
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p5136
Nsg69
Vn
sS'block_loop.thisTrialN'
p5137
I0
sg39
F1.9499325458564272
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17&\x04]0'
tRp5138
sa(dp5139
S'trial_loop.thisTrialN'
p5140
I107
sg3632
g4875
sS'block_loop.thisIndex'
p5141
g3626
sg38
S'right'
p5142
sg58
g62
sS'trial_loop.thisN'
p5143
I107
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5144
g59
(g98
S'k\x00\x00\x00'
tRp5145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5146
I0
sg3641
g4882
sS'block_loop.thisRepN'
p5147
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5148
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5149
Nsg69
Vn
sS'block_loop.thisTrialN'
p5150
I0
sg39
F1.0999347696197219
sg34
g752
(S'\x07\xdf\t\x1d\x11\x17-\x0428'
tRp5151
sa(dp5152
S'trial_loop.thisTrialN'
p5153
I108
sg3632
g3849
sS'block_loop.thisIndex'
p5154
g3626
sg38
S'left'
p5155
sg58
g62
sS'trial_loop.thisN'
p5156
I108
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5157
g59
(g98
S'l\x00\x00\x00'
tRp5158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5159
I0
sg3641
g3857
sS'block_loop.thisRepN'
p5160
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5161
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5162
Nsg69
Vn
sS'block_loop.thisTrialN'
p5163
I0
sg39
F1.3168637072740239
sg34
g752
(S'\x07\xdf\t\x1d\x11\x173\x061\xf0'
tRp5164
sa(dp5165
S'trial_loop.thisTrialN'
p5166
I109
sg3632
g4298
sS'block_loop.thisIndex'
p5167
g3626
sg38
S'right'
p5168
sg58
g62
sS'trial_loop.thisN'
p5169
I109
sg33
g4308
sg63
g64
sS'trial_loop.thisIndex'
p5170
g59
(g98
S'm\x00\x00\x00'
tRp5171
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5172
I0
sg3641
g4306
sS'block_loop.thisRepN'
p5173
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5174
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p5175
Nsg69
Vn
sS'block_loop.thisTrialN'
p5176
I0
sg39
F1.9167836518099648
sg34
g752
(S'\x07\xdf\t\x1d\x11\x179\x0b\x858'
tRp5177
sa(dp5178
S'trial_loop.thisTrialN'
p5179
I110
sg3632
g3956
sS'block_loop.thisIndex'
p5180
g3626
sg38
S'left'
p5181
sg58
g62
sS'trial_loop.thisN'
p5182
I110
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5183
g59
(g98
S'n\x00\x00\x00'
tRp5184
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5185
I0
sg3641
g3964
sS'block_loop.thisRepN'
p5186
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5187
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5188
Nsg69
Vn
sS'block_loop.thisTrialN'
p5189
I0
sg39
F0.90012624131486518
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18\x04\n\xdd@'
tRp5190
sa(dp5191
S'trial_loop.thisTrialN'
p5192
I111
sg3632
S'25-kitkat.png'
p5193
sS'block_loop.thisIndex'
p5194
g3626
sg38
S'left'
p5195
sg58
g62
sS'trial_loop.thisN'
p5196
I111
sg33
g4404
sg63
g64
sS'trial_loop.thisIndex'
p5197
g59
(g98
S'o\x00\x00\x00'
tRp5198
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5199
I0
sg3641
S'31-hobnobs.png'
p5200
sS'block_loop.thisRepN'
p5201
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5202
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p5203
Nsg69
Vn
sS'block_loop.thisTrialN'
p5204
I0
sg39
F0.78343256638254388
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18\n\t\xc4\x00'
tRp5205
sa(dp5206
S'trial_loop.thisTrialN'
p5207
I112
sg3632
g4875
sS'block_loop.thisIndex'
p5208
g3626
sg38
S'right'
p5209
sg58
g62
sS'trial_loop.thisN'
p5210
I112
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5211
g59
(g98
S'p\x00\x00\x00'
tRp5212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5213
I0
sg3641
g4882
sS'block_loop.thisRepN'
p5214
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5215
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5216
Nsg69
Vn
sS'block_loop.thisTrialN'
p5217
I0
sg39
F1.0168669573904481
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18\x10\x07\x00\xf8'
tRp5218
sa(dp5219
S'trial_loop.thisTrialN'
p5220
I113
sg3632
g4607
sS'block_loop.thisIndex'
p5221
g3626
sg38
S'right'
p5222
sg58
g62
sS'trial_loop.thisN'
p5223
I113
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p5224
g59
(g98
S'q\x00\x00\x00'
tRp5225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5226
I0
sg3641
g4614
sS'block_loop.thisRepN'
p5227
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5228
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p5229
Nsg69
Vn
sS'block_loop.thisTrialN'
p5230
I0
sg39
F0.96654605128060211
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18\x16\x07\xd0\x00'
tRp5231
sa(dp5232
S'trial_loop.thisTrialN'
p5233
I114
sg3632
g3670
sS'block_loop.thisIndex'
p5234
g3626
sg38
S'left'
p5235
sg58
g62
sS'trial_loop.thisN'
p5236
I114
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5237
g59
(g98
S'r\x00\x00\x00'
tRp5238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5239
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5240
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5241
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5242
Nsg69
Vn
sS'block_loop.thisTrialN'
p5243
I0
sg39
F1.4667789762024768
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18\x1c\x07\xa8\xf0'
tRp5244
sa(dp5245
S'trial_loop.thisTrialN'
p5246
I115
sg3632
g4916
sS'block_loop.thisIndex'
p5247
g3626
sg38
S'left'
p5248
sg58
g62
sS'trial_loop.thisN'
p5249
I115
sg33
g4302
sg63
g64
sS'trial_loop.thisIndex'
p5250
g59
(g98
S's\x00\x00\x00'
tRp5251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5252
I0
sg3641
g4923
sS'block_loop.thisRepN'
p5253
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5254
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p5255
Nsg69
Vn
sS'block_loop.thisTrialN'
p5256
I0
sg39
F1.0335109682855546
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18#\x00\x1f@'
tRp5257
sa(dp5258
S'trial_loop.thisTrialN'
p5259
I116
sg3632
g4186
sS'block_loop.thisIndex'
p5260
g3626
sg38
S'left'
p5261
sg58
g62
sS'trial_loop.thisN'
p5262
I116
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5263
g59
(g98
S't\x00\x00\x00'
tRp5264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5265
I0
sg3641
g4193
sS'block_loop.thisRepN'
p5266
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5267
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5268
Nsg69
Vn
sS'block_loop.thisTrialN'
p5269
I0
sg39
F1.6834250968167908
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18)\x01(\xe0'
tRp5270
sa(dp5271
S'trial_loop.thisTrialN'
p5272
I117
sg3632
g3721
sS'block_loop.thisIndex'
p5273
g3626
sg38
S'left'
p5274
sg58
g62
sS'trial_loop.thisN'
p5275
I117
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5276
g59
(g98
S'u\x00\x00\x00'
tRp5277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5278
I0
sg3641
g3728
sS'block_loop.thisRepN'
p5279
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5280
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5281
Nsg69
Vn
sS'block_loop.thisTrialN'
p5282
I0
sg39
F0.61689039242992294
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18/\x0b\xf6\x80'
tRp5283
sa(dp5284
S'trial_loop.thisTrialN'
p5285
I118
sg3632
g4044
sS'block_loop.thisIndex'
p5286
g3626
sg38
S'left'
p5287
sg58
g62
sS'trial_loop.thisN'
p5288
I118
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5289
g59
(g98
S'v\x00\x00\x00'
tRp5290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5291
I0
sg3641
g4052
sS'block_loop.thisRepN'
p5292
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5293
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5294
Nsg69
Vn
sS'block_loop.thisTrialN'
p5295
I0
sg39
F0.96674105818965472
sg34
g752
(S'\x07\xdf\t\x1d\x11\x185\x06\x93\x98'
tRp5296
sa(dp5297
S'trial_loop.thisTrialN'
p5298
I119
sg3632
g4916
sS'block_loop.thisIndex'
p5299
g3626
sg38
S'left'
p5300
sg58
g62
sS'trial_loop.thisN'
p5301
I119
sg33
g4308
sg63
g64
sS'trial_loop.thisIndex'
p5302
g59
(g98
S'w\x00\x00\x00'
tRp5303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5304
I0
sg3641
g4923
sS'block_loop.thisRepN'
p5305
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5306
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p5307
Nsg69
Vn
sS'block_loop.thisTrialN'
p5308
I0
sg39
F1.2334583392221248
sg34
g752
(S'\x07\xdf\t\x1d\x11\x18;\x06\xab\x08'
tRp5309
sa(dp5310
S'trial_loop.thisTrialN'
p5311
I120
sg3632
g3926
sS'block_loop.thisIndex'
p5312
g3626
sg38
S'left'
p5313
sg58
g62
sS'trial_loop.thisN'
p5314
I120
sg33
g3930
sg63
g64
sS'trial_loop.thisIndex'
p5315
g59
(g98
S'x\x00\x00\x00'
tRp5316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5317
I0
sg3641
g3934
sS'block_loop.thisRepN'
p5318
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5319
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p5320
Nsg69
Vn
sS'block_loop.thisTrialN'
p5321
I0
sg39
F0.60018651099744602
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19\x05\n\xd1\x88'
tRp5322
sa(dp5323
S'trial_loop.thisTrialN'
p5324
I121
sg3632
S'16-skips_prawn.png'
p5325
sS'block_loop.thisIndex'
p5326
g3626
sg38
S'right'
p5327
sg58
g62
sS'trial_loop.thisN'
p5328
I121
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5329
g59
(g98
S'y\x00\x00\x00'
tRp5330
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5331
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p5332
sS'block_loop.thisRepN'
p5333
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5334
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5335
Nsg69
Vn
sS'block_loop.thisTrialN'
p5336
I0
sg39
F0.98336226125684334
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19\x0b\x050 '
tRp5337
sa(dp5338
S'trial_loop.thisTrialN'
p5339
I122
sg3632
S'40-sardines.png'
p5340
sS'block_loop.thisIndex'
p5341
g3626
sg38
S'right'
p5342
sg58
g62
sS'trial_loop.thisN'
p5343
I122
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5344
g59
(g98
S'z\x00\x00\x00'
tRp5345
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5346
I0
sg3641
S'5-pineapple.png'
p5347
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.75010349051080993
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19\x11\x05\x86\x10'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3849
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'left'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3857
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F1.2335264776047552
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19\x17\x02\x0bp'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g3704
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'right'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.9501754492011969
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19\x1d\x06.\x08'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g3926
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3930
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g3934
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.48347744077909738
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19#\x06\x06\xf8'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g5325
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g5332
sS'block_loop.thisRepN'
p5400
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.86677264703030232
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19(\r\xc3p'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g5193
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g4404
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g5200
sS'block_loop.thisRepN'
p5413
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.61680429288753658
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19.\x0c1\x18'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g4201
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g4209
sS'block_loop.thisRepN'
p5426
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.66687231722971774
sg34
g752
(S'\x07\xdf\t\x1d\x11\x194\x07\x0c\xb0'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g5193
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'left'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4397
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g5200
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.51688748443484656
sg34
g752
(S'\x07\xdf\t\x1d\x11\x19:\x02a`'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g4016
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.0501903313088405
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a\x03\n\xd1\x88'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g3687
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'right'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.65019266910894657
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a\t\x0c\x19\xa8'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3849
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'left'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3857
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.2501109030527005
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a\x0f\x073\xc0'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g3736
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g3744
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F1.2000904900487512
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a\x15\x0b\x94\xd8'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g5193
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g4404
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g5200
sS'block_loop.thisRepN'
p5504
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.50020270455206628
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a\x1b\x0e\xff\xd8'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g5325
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'right'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g5332
sS'block_loop.thisRepN'
p5517
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.93340000820899149
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a!\x07\xf3('
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4061
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4069
sS'block_loop.thisRepN'
p5530
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F1.0335061216210306
sg34
g752
(S"\x07\xdf\t\x1d\x11\x1a'\x07S\x00"
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3753
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3760
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.6502129110522219
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a-\x08`\x88'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g5193
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g4404
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g5200
sS'block_loop.thisRepN'
p5556
I1
sg3644
g4397
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g4404
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.68349950735137099
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a3\x03\xb58'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4410
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4417
sS'block_loop.thisRepN'
p5569
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.88343233830528334
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1a8\x0e\x86\xc0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4016
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F1.0834589664409577
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b\x02\r2\xe8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4650
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3967
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4657
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.90056329627623199
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b\x08\x0e\xf4 '
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g5325
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g5332
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.76672412337939022
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b\x0e\x0e\x19`'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4607
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4614
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3836
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3843
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.93310008530170307
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b\x14\x0b\x17\xd8'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4756
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4763
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F1.1335033276627655
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b\x1a\nw\xb0'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4104
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g4003
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4111
sS'block_loop.thisRepN'
p5647
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.0168036656723416
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b \x0c\xf0\x80'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g4650
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g4657
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F2.3001635321088543
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b&\r\xbf\x88'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3883
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3809
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3890
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F1.8835084594247746
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b.\x03\x8e('
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g4201
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g4211
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g4209
sS'block_loop.thisRepN'
p5686
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.90019494989246596
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b5\x02m\x18'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g4298
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g4308
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g4306
sS'block_loop.thisRepN'
p5699
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.98343724199003191
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1b;\x01S\xd8'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3753
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3760
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.6168821245955769
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c\x05\x01\xa9\xc8'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4218
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3930
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4225
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.63352642058453057
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c\n\x0b\x89 '
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g5325
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g5332
sS'block_loop.thisRepN'
p5738
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.5334034864026762
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c\x10\x06d\xb8'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4650
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4657
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.78358994038353558
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c\x16\x0f\x0fx'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g5340
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g5347
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.5001645014417591
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c\x1c\x0cH\x88'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3883
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3802
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3890
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F1.1501932393039169
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c#\x057\xf0'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4970
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4977
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.98386260793995461
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c)\x07\xebX'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g5340
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g5347
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.6334756731739617
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c/\x08AH'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4756
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4763
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F1.4334233862318797
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c5\x03\x1c\xe0'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4061
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4069
sS'block_loop.thisRepN'
p5829
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.88346198847648338
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1c;\n\x19\xf0'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4970
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4977
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.86680429288753658
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d\x05\t\x00\xb0'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3721
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3728
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.58352054757051519
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d\x0b\x07nX'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g4970
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3859
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g4977
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.93354597829602426
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d\x11\x01\x92X'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4016
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.88351872294515488
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d\x17\x00\xf20'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g3815
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g3823
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.73348741920199245
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d\x1c\x0f\x1b0'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g4145
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g4152
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.83354649147440796
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d"\x0be\xf8'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4916
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g4308
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4923
sS'block_loop.thisRepN'
p5920
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.2667446504237887
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d(\tV\xa0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4970
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3853
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4977
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3859
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3853
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.96682516204964486
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d.\r\xf68'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3633
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F1.0505364400632971
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d4\x0e\r\xa8'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g3926
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3937
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g3934
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.60014887808210915
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1d;\x00\x13\x88'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3999
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4003
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4007
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4003
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4010
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.73352305643129512
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e\x04\t\xb4`'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g3653
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.96685167614487
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e\n\x069\xc0'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3687
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3697
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3697
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3691
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.66679961728368653
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e\x10\x06\x16\x98'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4622
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3778
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4629
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.416848083914374
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e\x16\x01\xa5\xe0'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4916
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4302
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4923
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.80053986124039511
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e\x1c\x08hX'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3753
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3760
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.2335127929109149
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e"\x05\xe3\xd0'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g5340
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3826
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g5347
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.3501893619759358
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e(\n\x06h'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4186
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4193
sS'block_loop.thisRepN'
p6063
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.90020863458630629
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e/\x00\x90\x88'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g3815
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'left'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g3823
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.76678285353045794
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e4\x0e\xb9\x88'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3866
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3870
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3874
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F1.1338334709398623
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1e:\x0b\xb8\x00'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4061
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4069
sS'block_loop.thisRepN'
p6102
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.73342754865734605
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f\x04\x0e0\xd0'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3633
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.68353657006809954
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f\n\n\xb60'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4186
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4193
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4065
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.63343347869522404
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f\x10\x06I`'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3736
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3744
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F1.2333291899085452
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f\x16\x01_\x90'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3670
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'left'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.0834127805937896
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f\x1c\x05G\x90'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3653
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.85017197100751218
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f"\x07\x08\xc8'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4218
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3937
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4225
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.70019141467855661
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f(\x05vp'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4875
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'right'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4882
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.8001566897619341
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f.\x01D8'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3798
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3802
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3806
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3802
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3809
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.66684893920682953
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f3\x0e\x01\xf0'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4622
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4629
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3778
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3772
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.2168499655635969
sg34
g752
(S'\x07\xdf\t\x1d\x11\x1f9\tV\xa0'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4044
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g4048
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4052
sS'block_loop.thisRepN'
p6232
I1
sg3644
g4048
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g4055
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.86675639645545743
sg34
g752
(S'\x07\xdf\t\x1d\x11 \x03\r:\xb8'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g3866
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3877
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g3874
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3870
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g3877
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.65020920478127664
sg34
g752
(S'\x07\xdf\t\x1d\x11 \t\x0b\xa8`'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3704
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.0335243678819097
sg34
g752
(S'\x07\xdf\t\x1d\x11 \x0f\x06\xfd\x10'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g5340
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'right'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g5347
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3819
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F0.66685692194732837
sg34
g752
(S'\x07\xdf\t\x1d\x11 \x15\x07\xcc\x18'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g4756
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'right'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g4763
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.88351815275018453
sg34
g752
(S'\x07\xdf\t\x1d\x11 \x1b\x03_H'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4875
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4882
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.58347977857920341
sg34
g752
(S'\x07\xdf\t\x1d\x11 !\x02\x07\x88'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g3736
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g3744
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3740
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.1501444875757443
sg34
g752
(S'\x07\xdf\t\x1d\x11 &\x0bm\xc8'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4201
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g4205
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4209
sS'block_loop.thisRepN'
p6323
I1
sg3644
g4211
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g4205
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.90055702412428218
sg34
g752
(S'\x07\xdf\t\x1d\x11 ,\x0e_\xb0'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4218
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3930
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4225
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3930
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3937
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.68357648376331781
sg34
g752
(S'\x07\xdf\t\x1d\x11 2\rFp'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4298
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g4308
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4306
sS'block_loop.thisRepN'
p6349
I1
sg3644
g4308
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g4302
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.0002141084660252
sg34
g752
(S'\x07\xdf\t\x1d\x11 8\x08\xd9\xa0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F105.74771522604715
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'36-fig_rolls.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'36-fig_rolls.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'34-hula_hoops_bbq_beef_redo.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'34-hula_hoops_bbq_beef_redo.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.0667414003110025
sg34
g752
(S'\x07\xdf\t\x1d\x11"5\x069\xc0'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'38-maltesers.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'38-maltesers.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'6-sour_patch_kids.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'6-sour_patch_kids.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.84972579291570582
sg34
g752
(S'\x07\xdf\t\x1d\x11";\x07\x81\xe0'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'13-mccoys_steak_crisps.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'3-ellas_strawberries_apples.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.58351085424510529
sg34
g752
(S'\x07\xdf\t\x1d\x11#\x05\x05\xef\x88'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'29-beans.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'29-beans.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'46-pistachios.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
S'46-pistachios.png'
p6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6436
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.63347310728931916
sg34
g752
(S'\x07\xdf\t\x1d\x11#\x0b\x00\x13\x88'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'45-chewy_nougat_redo.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'41-peanuts_redo.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'41-peanuts_redo.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'45-chewy_nougat_redo.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F1.1668497944992851
sg34
g752
(S'\x07\xdf\t\x1d\x11#\x10\n1`'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'50-polo.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'48-twix.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'48-twix.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'50-polo.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.90052309748352855
sg34
g752
(S'\x07\xdf\t\x1d\x11#\x16\r#H'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'7-olives.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'right'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'7-olives.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'22-daim.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
S'22-daim.png'
p6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6487
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vn
sS'block_loop.thisTrialN'
p6489
I0
sg39
F0.90014163659725455
sg34
g752
(S'\x07\xdf\t\x1d\x11#\x1c\x0cH\x88'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'51-mars.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'left'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
S'51-mars.png'
p6497
sg63
g64
sS'trial_loop.thisIndex'
p6498
g59
(g98
S'\x07\x00\x00\x00'
tRp6499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6500
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6503
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6504
sg55
g11
sS'block_loop.thisTrial'
p6505
Nsg69
Vn
sS'block_loop.thisTrialN'
p6506
I0
sg39
F1.1834516109156539
sg34
g752
(S'\x07\xdf\t\x1d\x11#"\x0b/H'
tRp6507
sa(dp6508
S'trial_loop.thisTrialN'
p6509
I8
sg6370
S'20-fruit_pastilles.png'
p6510
sS'block_loop.thisIndex'
p6511
g6364
sg38
S'right'
p6512
sg58
g62
sS'trial_loop.thisN'
p6513
I8
sg33
S'2-steamed_puddings.png'
p6514
sg63
g64
sS'trial_loop.thisIndex'
p6515
g59
(g98
S'\x08\x00\x00\x00'
tRp6516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6517
I0
sg6379
S'2-steamed_puddings.png'
p6518
sS'block_loop.thisRepN'
p6519
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6520
I2
sg6384
S'20-fruit_pastilles.png'
p6521
sg55
g11
sS'block_loop.thisTrial'
p6522
Nsg69
Vn
sS'block_loop.thisTrialN'
p6523
I0
sg39
F1.0501689489683486
sg34
g752
(S'\x07\xdf\t\x1d\x11#(\x0e_\xb0'
tRp6524
sa(dp6525
S'trial_loop.thisTrialN'
p6526
I9
sg6370
S'23-crunchie_redo.png'
p6527
sS'block_loop.thisIndex'
p6528
g6364
sg38
S'left'
p6529
sg58
g62
sS'trial_loop.thisN'
p6530
I9
sg33
S'23-crunchie_redo.png'
p6531
sg63
g64
sS'trial_loop.thisIndex'
p6532
g59
(g98
S'\t\x00\x00\x00'
tRp6533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6534
I0
sg6379
S'33-ambrosia_rice.png'
p6535
sS'block_loop.thisRepN'
p6536
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6537
I2
sg6384
S'33-ambrosia_rice.png'
p6538
sg55
g11
sS'block_loop.thisTrial'
p6539
Nsg69
Vn
sS'block_loop.thisTrialN'
p6540
I0
sg39
F0.91685948782833293
sg34
g752
(S'\x07\xdf\t\x1d\x11#/\x00e\x90'
tRp6541
sa(dp6542
S'trial_loop.thisTrialN'
p6543
I10
sg6370
g6476
sS'block_loop.thisIndex'
p6544
g6364
sg38
S'right'
p6545
sg58
g62
sS'trial_loop.thisN'
p6546
I10
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p6547
g59
(g98
S'\n\x00\x00\x00'
tRp6548
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6549
I0
sg6379
g6484
sS'block_loop.thisRepN'
p6550
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6551
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6552
Nsg69
Vn
sS'block_loop.thisTrialN'
p6553
I0
sg39
F0.75011660500967992
sg34
g752
(S'\x07\xdf\t\x1d\x11#4\x0f\x07\xa8'
tRp6554
sa(dp6555
S'trial_loop.thisTrialN'
p6556
I11
sg6370
S'27-hartleys_raspberries_jelly.png'
p6557
sS'block_loop.thisIndex'
p6558
g6364
sg38
S'right'
p6559
sg58
g62
sS'trial_loop.thisN'
p6560
I11
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p6561
g59
(g98
S'\x0b\x00\x00\x00'
tRp6562
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6563
I0
sg6379
S'51-mars.png'
p6564
sS'block_loop.thisRepN'
p6565
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6566
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6567
Nsg69
Vn
sS'block_loop.thisTrialN'
p6568
I0
sg39
F0.78348901575009222
sg34
g752
(S'\x07\xdf\t\x1d\x11#:\x0b\xcb\x88'
tRp6569
sa(dp6570
S'trial_loop.thisTrialN'
p6571
I12
sg6370
S'44-crunch.png'
p6572
sS'block_loop.thisIndex'
p6573
g6364
sg38
S'left'
p6574
sg58
g62
sS'trial_loop.thisN'
p6575
I12
sg33
S'44-crunch.png'
p6576
sg63
g64
sS'trial_loop.thisIndex'
p6577
g59
(g98
S'\x0c\x00\x00\x00'
tRp6578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6579
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6580
sS'block_loop.thisRepN'
p6581
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6582
I2
sg6384
S'26-walkers_smoky_bacon.png'
p6583
sg55
g11
sS'block_loop.thisTrial'
p6584
Nsg69
Vn
sS'block_loop.thisTrialN'
p6585
I0
sg39
F0.83354221500485437
sg34
g752
(S'\x07\xdf\t\x1d\x11$\x04\x08\xca\x00'
tRp6586
sa(dp6587
S'trial_loop.thisTrialN'
p6588
I13
sg6370
S'5-pineapple.png'
p6589
sS'block_loop.thisIndex'
p6590
g6364
sg38
S'left'
p6591
sg58
g62
sS'trial_loop.thisN'
p6592
I13
sg33
S'5-pineapple.png'
p6593
sg63
g64
sS'trial_loop.thisIndex'
p6594
g59
(g98
S'\r\x00\x00\x00'
tRp6595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6596
I0
sg6379
S'40-sardines.png'
p6597
sS'block_loop.thisRepN'
p6598
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6599
I2
sg6384
S'40-sardines.png'
p6600
sg55
g11
sS'block_loop.thisTrial'
p6601
Nsg69
Vn
sS'block_loop.thisTrialN'
p6602
I0
sg39
F0.93348781833992689
sg34
g752
(S'\x07\xdf\t\x1d\x11$\n\x06\xba\xa8'
tRp6603
sa(dp6604
S'trial_loop.thisTrialN'
p6605
I14
sg6370
S'31-hobnobs.png'
p6606
sS'block_loop.thisIndex'
p6607
g6364
sg38
S'right'
p6608
sg58
g62
sS'trial_loop.thisN'
p6609
I14
sg33
S'25-kitkat.png'
p6610
sg63
g64
sS'trial_loop.thisIndex'
p6611
g59
(g98
S'\x0e\x00\x00\x00'
tRp6612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6613
I0
sg6379
S'25-kitkat.png'
p6614
sS'block_loop.thisRepN'
p6615
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6616
I2
sg6384
S'31-hobnobs.png'
p6617
sg55
g11
sS'block_loop.thisTrial'
p6618
Nsg69
Vn
sS'block_loop.thisTrialN'
p6619
I0
sg39
F1.0001730543808662
sg34
g752
(S'\x07\xdf\t\x1d\x11$\x10\x06Y\x00'
tRp6620
sa(dp6621
S'trial_loop.thisTrialN'
p6622
I15
sg6370
S'49-yorkie.png'
p6623
sS'block_loop.thisIndex'
p6624
g6364
sg38
S'left'
p6625
sg58
g62
sS'trial_loop.thisN'
p6626
I15
sg33
S'49-yorkie.png'
p6627
sg63
g64
sS'trial_loop.thisIndex'
p6628
g59
(g98
S'\x0f\x00\x00\x00'
tRp6629
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6630
I0
sg6379
S'35-raisins.png'
p6631
sS'block_loop.thisRepN'
p6632
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6633
I2
sg6384
S'35-raisins.png'
p6634
sg55
g11
sS'block_loop.thisTrial'
p6635
Nsg69
Vn
sS'block_loop.thisTrialN'
p6636
I0
sg39
F0.88352271431358531
sg34
g752
(S'\x07\xdf\t\x1d\x11$\x16\x06\xe9\x88'
tRp6637
sa(dp6638
S'trial_loop.thisTrialN'
p6639
I16
sg6370
S'16-skips_prawn.png'
p6640
sS'block_loop.thisIndex'
p6641
g6364
sg38
S'right'
p6642
sg58
g62
sS'trial_loop.thisN'
p6643
I16
sg33
S'42-mrkipling_lemon_slices.png'
p6644
sg63
g64
sS'trial_loop.thisIndex'
p6645
g59
(g98
S'\x10\x00\x00\x00'
tRp6646
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6647
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6648
sS'block_loop.thisRepN'
p6649
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6650
I2
sg6384
S'16-skips_prawn.png'
p6651
sg55
g11
sS'block_loop.thisTrial'
p6652
Nsg69
Vn
sS'block_loop.thisTrialN'
p6653
I0
sg39
F1.0504072907497175
sg34
g752
(S'\x07\xdf\t\x1d\x11$\x1c\x05\x95\xb0'
tRp6654
sa(dp6655
S'trial_loop.thisTrialN'
p6656
I17
sg6370
g6572
sS'block_loop.thisIndex'
p6657
g6364
sg38
S'left'
p6658
sg58
g62
sS'trial_loop.thisN'
p6659
I17
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p6660
g59
(g98
S'\x11\x00\x00\x00'
tRp6661
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6662
I0
sg6379
g6580
sS'block_loop.thisRepN'
p6663
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6664
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p6665
Nsg69
Vn
sS'block_loop.thisTrialN'
p6666
I0
sg39
F0.66678792827224243
sg34
g752
(S'\x07\xdf\t\x1d\x11$"\x06\xdd\xd0'
tRp6667
sa(dp6668
S'trial_loop.thisTrialN'
p6669
I18
sg6370
S'33-ambrosia_rice.png'
p6670
sS'block_loop.thisIndex'
p6671
g6364
sg38
S'right'
p6672
sg58
g62
sS'trial_loop.thisN'
p6673
I18
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p6674
g59
(g98
S'\x12\x00\x00\x00'
tRp6675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6676
I0
sg6379
S'23-crunchie_redo.png'
p6677
sS'block_loop.thisRepN'
p6678
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6679
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p6680
Nsg69
Vn
sS'block_loop.thisTrialN'
p6681
I0
sg39
F1.1168473426587298
sg34
g752
(S'\x07\xdf\t\x1d\x11$(\x022\x80'
tRp6682
sa(dp6683
S'trial_loop.thisTrialN'
p6684
I19
sg6370
S'6-sour_patch_kids.png'
p6685
sS'block_loop.thisIndex'
p6686
g6364
sg38
S'right'
p6687
sg58
g62
sS'trial_loop.thisN'
p6688
I19
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6689
g59
(g98
S'\x13\x00\x00\x00'
tRp6690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6691
I0
sg6379
S'38-maltesers.png'
p6692
sS'block_loop.thisRepN'
p6693
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6694
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6695
Nsg69
Vn
sS'block_loop.thisTrialN'
p6696
I0
sg39
F0.71658567987833521
sg34
g752
(S'\x07\xdf\t\x1d\x11$.\x04\xabP'
tRp6697
sa(dp6698
S'trial_loop.thisTrialN'
p6699
I20
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6700
sS'block_loop.thisIndex'
p6701
g6364
sg38
S'left'
p6702
sg58
g62
sS'trial_loop.thisN'
p6703
I20
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6704
sg63
g64
sS'trial_loop.thisIndex'
p6705
g59
(g98
S'\x14\x00\x00\x00'
tRp6706
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6707
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6708
sS'block_loop.thisRepN'
p6709
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6710
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6711
sg55
g11
sS'block_loop.thisTrial'
p6712
Nsg69
Vn
sS'block_loop.thisTrialN'
p6713
I0
sg39
F1.2667600457061781
sg34
g752
(S'\x07\xdf\t\x1d\x11$4\x00\xb7\x98'
tRp6714
sa(dp6715
S'trial_loop.thisTrialN'
p6716
I21
sg6370
g6459
sS'block_loop.thisIndex'
p6717
g6364
sg38
S'right'
p6718
sg58
g62
sS'trial_loop.thisN'
p6719
I21
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6720
g59
(g98
S'\x15\x00\x00\x00'
tRp6721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6722
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6723
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6724
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6725
Nsg69
Vn
sS'block_loop.thisTrialN'
p6726
I0
sg39
F0.9335337190896098
sg34
g752
(S'\x07\xdf\t\x1d\x11$:\x05SH'
tRp6727
sa(dp6728
S'trial_loop.thisTrialN'
p6729
I22
sg6370
g6685
sS'block_loop.thisIndex'
p6730
g6364
sg38
S'right'
p6731
sg58
g62
sS'trial_loop.thisN'
p6732
I22
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6733
g59
(g98
S'\x16\x00\x00\x00'
tRp6734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6735
I0
sg6379
g6692
sS'block_loop.thisRepN'
p6736
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6737
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6738
Nsg69
Vn
sS'block_loop.thisTrialN'
p6739
I0
sg39
F0.68330678122219979
sg34
g752
(S'\x07\xdf\t\x1d\x11%\x04\x04\xb3 '
tRp6740
sa(dp6741
S'trial_loop.thisTrialN'
p6742
I23
sg6370
g6442
sS'block_loop.thisIndex'
p6743
g6364
sg38
S'right'
p6744
sg58
g62
sS'trial_loop.thisN'
p6745
I23
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6746
g59
(g98
S'\x17\x00\x00\x00'
tRp6747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6748
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6749
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6750
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6751
Nsg69
Vn
sS'block_loop.thisTrialN'
p6752
I0
sg39
F1.0668383335687395
sg34
g752
(S'\x07\xdf\t\x1d\x11%\n\x00\x80\xe8'
tRp6753
sa(dp6754
S'trial_loop.thisTrialN'
p6755
I24
sg6370
S'18-mms.png'
p6756
sS'block_loop.thisIndex'
p6757
g6364
sg38
S'left'
p6758
sg58
g62
sS'trial_loop.thisN'
p6759
I24
sg33
S'43-mrporky_pork_crackles_redo.png'
p6760
sg63
g64
sS'trial_loop.thisIndex'
p6761
g59
(g98
S'\x18\x00\x00\x00'
tRp6762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6763
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6764
sS'block_loop.thisRepN'
p6765
I2
sg6382
S'18-mms.png'
p6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6767
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p6768
Nsg69
Vn
sS'block_loop.thisTrialN'
p6769
I0
sg39
F0.90015874246819294
sg34
g752
(S'\x07\xdf\t\x1d\x11%\x10\x02\x07\x88'
tRp6770
sa(dp6771
S'trial_loop.thisTrialN'
p6772
I25
sg6370
g6510
sS'block_loop.thisIndex'
p6773
g6364
sg38
S'right'
p6774
sg58
g62
sS'trial_loop.thisN'
p6775
I25
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p6776
g59
(g98
S'\x19\x00\x00\x00'
tRp6777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6778
I0
sg6379
g6518
sS'block_loop.thisRepN'
p6779
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6780
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p6781
Nsg69
Vn
sS'block_loop.thisTrialN'
p6782
I0
sg39
F0.81676677401264897
sg34
g752
(S'\x07\xdf\t\x1d\x11%\x16\x00\xeeH'
tRp6783
sa(dp6784
S'trial_loop.thisTrialN'
p6785
I26
sg6370
S'10-bounty_redo.png'
p6786
sS'block_loop.thisIndex'
p6787
g6364
sg38
S'right'
p6788
sg58
g62
sS'trial_loop.thisN'
p6789
I26
sg33
S'10-bounty_redo.png'
p6790
sg63
g64
sS'trial_loop.thisIndex'
p6791
g59
(g98
S'\x1a\x00\x00\x00'
tRp6792
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6793
I0
sg6379
S'4-corn.png'
p6794
sS'block_loop.thisRepN'
p6795
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6796
I2
sg6384
S'4-corn.png'
p6797
sg55
g11
sS'block_loop.thisTrial'
p6798
Nsg69
Vn
sS'block_loop.thisTrialN'
p6799
I0
sg39
F0.8000634627751424
sg34
g752
(S'\x07\xdf\t\x1d\x11%\x1b\r\xe6\x98'
tRp6800
sa(dp6801
S'trial_loop.thisTrialN'
p6802
I27
sg6370
g6623
sS'block_loop.thisIndex'
p6803
g6364
sg38
S'left'
p6804
sg58
g62
sS'trial_loop.thisN'
p6805
I27
sg33
g6634
sg63
g64
sS'trial_loop.thisIndex'
p6806
g59
(g98
S'\x1b\x00\x00\x00'
tRp6807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6808
I0
sg6379
g6631
sS'block_loop.thisRepN'
p6809
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6810
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p6811
Nsg69
Vn
sS'block_loop.thisTrialN'
p6812
I0
sg39
F0.86676979605545057
sg34
g752
(S'\x07\xdf\t\x1d\x11%!\x0b^('
tRp6813
sa(dp6814
S'trial_loop.thisTrialN'
p6815
I28
sg6370
g6408
sS'block_loop.thisIndex'
p6816
g6364
sg38
S'right'
p6817
sg58
g62
sS'trial_loop.thisN'
p6818
I28
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6819
g59
(g98
S'\x1c\x00\x00\x00'
tRp6820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6821
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6822
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6823
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6824
Nsg69
Vn
sS'block_loop.thisTrialN'
p6825
I0
sg39
F0.56687197511200793
sg34
g752
(S"\x07\xdf\t\x1d\x11%'\t\xcb\xd0"
tRp6826
sa(dp6827
S'trial_loop.thisTrialN'
p6828
I29
sg6370
g6371
sS'block_loop.thisIndex'
p6829
g6364
sg38
S'left'
p6830
sg58
g62
sS'trial_loop.thisN'
p6831
I29
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6832
g59
(g98
S'\x1d\x00\x00\x00'
tRp6833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6834
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6835
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6836
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6837
Nsg69
Vn
sS'block_loop.thisTrialN'
p6838
I0
sg39
F0.76685897465358721
sg34
g752
(S'\x07\xdf\t\x1d\x11%-\x03\xb58'
tRp6839
sa(dp6840
S'trial_loop.thisTrialN'
p6841
I30
sg6370
S'42-mrkipling_lemon_slices.png'
p6842
sS'block_loop.thisIndex'
p6843
g6364
sg38
S'left'
p6844
sg58
g62
sS'trial_loop.thisN'
p6845
I30
sg33
g6644
sg63
g64
sS'trial_loop.thisIndex'
p6846
g59
(g98
S'\x1e\x00\x00\x00'
tRp6847
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6848
I0
sg6379
S'16-skips_prawn.png'
p6849
sS'block_loop.thisRepN'
p6850
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6851
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p6852
Nsg69
Vn
sS'block_loop.thisTrialN'
p6853
I0
sg39
F0.71675930445053382
sg34
g752
(S'\x07\xdf\t\x1d\x11%3\x00\xb3\xb0'
tRp6854
sa(dp6855
S'trial_loop.thisTrialN'
p6856
I31
sg6370
S'46-pistachios.png'
p6857
sS'block_loop.thisIndex'
p6858
g6364
sg38
S'left'
p6859
sg58
g62
sS'trial_loop.thisN'
p6860
I31
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p6861
g59
(g98
S'\x1f\x00\x00\x00'
tRp6862
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6863
I0
sg6379
S'29-beans.png'
p6864
sS'block_loop.thisRepN'
p6865
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6866
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6867
Nsg69
Vn
sS'block_loop.thisTrialN'
p6868
I0
sg39
F0.58353024089592509
sg34
g752
(S'\x07\xdf\t\x1d\x11%8\x0c<\xd0'
tRp6869
sa(dp6870
S'trial_loop.thisTrialN'
p6871
I32
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6872
sS'block_loop.thisIndex'
p6873
g6364
sg38
S'left'
p6874
sg58
g62
sS'trial_loop.thisN'
p6875
I32
sg33
g6766
sg63
g64
sS'trial_loop.thisIndex'
p6876
g59
(g98
S' \x00\x00\x00'
tRp6877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6878
I0
sg6379
S'18-mms.png'
p6879
sS'block_loop.thisRepN'
p6880
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6881
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p6882
Nsg69
Vn
sS'block_loop.thisTrialN'
p6883
I0
sg39
F0.90056358137735515
sg34
g752
(S'\x07\xdf\t\x1d\x11&\x02\x06`\xd0'
tRp6884
sa(dp6885
S'trial_loop.thisTrialN'
p6886
I33
sg6370
g6557
sS'block_loop.thisIndex'
p6887
g6364
sg38
S'right'
p6888
sg58
g62
sS'trial_loop.thisN'
p6889
I33
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p6890
g59
(g98
S'!\x00\x00\x00'
tRp6891
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6892
I0
sg6379
g6564
sS'block_loop.thisRepN'
p6893
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6894
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6895
Nsg69
Vn
sS'block_loop.thisTrialN'
p6896
I0
sg39
F1.0000866697373567
sg34
g752
(S'\x07\xdf\t\x1d\x11&\x08\x05G\x90'
tRp6897
sa(dp6898
S'trial_loop.thisTrialN'
p6899
I34
sg6370
g6589
sS'block_loop.thisIndex'
p6900
g6364
sg38
S'left'
p6901
sg58
g62
sS'trial_loop.thisN'
p6902
I34
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p6903
g59
(g98
S'"\x00\x00\x00'
tRp6904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6905
I0
sg6379
g6597
sS'block_loop.thisRepN'
p6906
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6907
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p6908
Nsg69
Vn
sS'block_loop.thisTrialN'
p6909
I0
sg39
F0.83351199463504599
sg34
g752
(S'\x07\xdf\t\x1d\x11&\x0e\x05\xdc\x00'
tRp6910
sa(dp6911
S'trial_loop.thisTrialN'
p6912
I35
sg6370
S'26-walkers_smoky_bacon.png'
p6913
sS'block_loop.thisIndex'
p6914
g6364
sg38
S'right'
p6915
sg58
g62
sS'trial_loop.thisN'
p6916
I35
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p6917
g59
(g98
S'#\x00\x00\x00'
tRp6918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6919
I0
sg6379
S'44-crunch.png'
p6920
sS'block_loop.thisRepN'
p6921
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6922
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p6923
Nsg69
Vn
sS'block_loop.thisTrialN'
p6924
I0
sg39
F0.85026491289681871
sg34
g752
(S'\x07\xdf\t\x1d\x11&\x14\x03\xcc\xa8'
tRp6925
sa(dp6926
S'trial_loop.thisTrialN'
p6927
I36
sg6370
g6623
sS'block_loop.thisIndex'
p6928
g6364
sg38
S'left'
p6929
sg58
g62
sS'trial_loop.thisN'
p6930
I36
sg33
g6634
sg63
g64
sS'trial_loop.thisIndex'
p6931
g59
(g98
S'$\x00\x00\x00'
tRp6932
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6933
I0
sg6379
g6631
sS'block_loop.thisRepN'
p6934
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6935
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p6936
Nsg69
Vn
sS'block_loop.thisTrialN'
p6937
I0
sg39
F0.85013718907066504
sg34
g752
(S'\x07\xdf\t\x1d\x11&\x1a\x01\xfb\xd0'
tRp6938
sa(dp6939
S'trial_loop.thisTrialN'
p6940
I37
sg6370
S'8-liquorice_catherine_wheels.png'
p6941
sS'block_loop.thisIndex'
p6942
g6364
sg38
S'right'
p6943
sg58
g62
sS'trial_loop.thisN'
p6944
I37
sg33
g6704
sg63
g64
sS'trial_loop.thisIndex'
p6945
g59
(g98
S'%\x00\x00\x00'
tRp6946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6947
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6948
sS'block_loop.thisRepN'
p6949
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6950
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p6951
Nsg69
Vn
sS'block_loop.thisTrialN'
p6952
I0
sg39
F1.0668300657343934
sg34
g752
(S'\x07\xdf\t\x1d\x11& \x00.\xe0'
tRp6953
sa(dp6954
S'trial_loop.thisTrialN'
p6955
I38
sg6370
S'21-nakd_banana_crunch.png'
p6956
sS'block_loop.thisIndex'
p6957
g6364
sg38
S'right'
p6958
sg58
g62
sS'trial_loop.thisN'
p6959
I38
sg33
S'1-treacle_cookies.png'
p6960
sg63
g64
sS'trial_loop.thisIndex'
p6961
g59
(g98
S'&\x00\x00\x00'
tRp6962
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6963
I0
sg6379
S'1-treacle_cookies.png'
p6964
sS'block_loop.thisRepN'
p6965
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6966
I2
sg6384
S'21-nakd_banana_crunch.png'
p6967
sg55
g11
sS'block_loop.thisTrial'
p6968
Nsg69
Vn
sS'block_loop.thisTrialN'
p6969
I0
sg39
F0.90059779311559396
sg34
g752
(S'\x07\xdf\t\x1d\x11&&\x01\xb1\x98'
tRp6970
sa(dp6971
S'trial_loop.thisTrialN'
p6972
I39
sg6370
g6557
sS'block_loop.thisIndex'
p6973
g6364
sg38
S'right'
p6974
sg58
g62
sS'trial_loop.thisN'
p6975
I39
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p6976
g59
(g98
S"'\x00\x00\x00"
tRp6977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6978
I0
sg6379
g6564
sS'block_loop.thisRepN'
p6979
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6980
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6981
Nsg69
Vn
sS'block_loop.thisTrialN'
p6982
I0
sg39
F0.91677395848091692
sg34
g752
(S'\x07\xdf\t\x1d\x11&,\x00\xd6\xd8'
tRp6983
sa(dp6984
S'trial_loop.thisTrialN'
p6985
I40
sg6370
g6476
sS'block_loop.thisIndex'
p6986
g6364
sg38
S'right'
p6987
sg58
g62
sS'trial_loop.thisN'
p6988
I40
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p6989
g59
(g98
S'(\x00\x00\x00'
tRp6990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6991
I0
sg6379
g6484
sS'block_loop.thisRepN'
p6992
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6993
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6994
Nsg69
Vn
sS'block_loop.thisTrialN'
p6995
I0
sg39
F1.0834521240940376
sg34
g752
(S'\x07\xdf\t\x1d\x11&1\x0f:p'
tRp6996
sa(dp6997
S'trial_loop.thisTrialN'
p6998
I41
sg6370
S'41-peanuts_redo.png'
p6999
sS'block_loop.thisIndex'
p7000
g6364
sg38
S'left'
p7001
sg58
g62
sS'trial_loop.thisN'
p7002
I41
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7003
g59
(g98
S')\x00\x00\x00'
tRp7004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7005
I0
sg6379
S'45-chewy_nougat_redo.png'
p7006
sS'block_loop.thisRepN'
p7007
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7008
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7009
Nsg69
Vn
sS'block_loop.thisTrialN'
p7010
I0
sg39
F0.8335151307110209
sg34
g752
(S'\x07\xdf\t\x1d\x11&8\x01\xbdP'
tRp7011
sa(dp7012
S'trial_loop.thisTrialN'
p7013
I42
sg6370
g6476
sS'block_loop.thisIndex'
p7014
g6364
sg38
S'right'
p7015
sg58
g62
sS'trial_loop.thisN'
p7016
I42
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7017
g59
(g98
S'*\x00\x00\x00'
tRp7018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7019
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7020
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7021
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7022
Nsg69
Vn
sS'block_loop.thisTrialN'
p7023
I0
sg39
F0.80018491444934625
sg34
g752
(S"\x07\xdf\t\x1d\x11'\x01\x0e\xf08"
tRp7024
sa(dp7025
S'trial_loop.thisTrialN'
p7026
I43
sg6370
g6408
sS'block_loop.thisIndex'
p7027
g6364
sg38
S'right'
p7028
sg58
g62
sS'trial_loop.thisN'
p7029
I43
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7030
g59
(g98
S'+\x00\x00\x00'
tRp7031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7032
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7033
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7034
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7035
Nsg69
Vn
sS'block_loop.thisTrialN'
p7036
I0
sg39
F0.58357186517605442
sg34
g752
(S"\x07\xdf\t\x1d\x11'\x07\x0ck\xb0"
tRp7037
sa(dp7038
S'trial_loop.thisTrialN'
p7039
I44
sg6370
g6685
sS'block_loop.thisIndex'
p7040
g6364
sg38
S'right'
p7041
sg58
g62
sS'trial_loop.thisN'
p7042
I44
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7043
g59
(g98
S',\x00\x00\x00'
tRp7044
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7045
I0
sg6379
g6692
sS'block_loop.thisRepN'
p7046
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7047
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7048
Nsg69
Vn
sS'block_loop.thisTrialN'
p7049
I0
sg39
F0.80025077204481931
sg34
g752
(S"\x07\xdf\t\x1d\x11'\r\x06\x8f\xb0"
tRp7050
sa(dp7051
S'trial_loop.thisTrialN'
p7052
I45
sg6370
S'4-corn.png'
p7053
sS'block_loop.thisIndex'
p7054
g6364
sg38
S'right'
p7055
sg58
g62
sS'trial_loop.thisN'
p7056
I45
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p7057
g59
(g98
S'-\x00\x00\x00'
tRp7058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7059
I0
sg6379
S'10-bounty_redo.png'
p7060
sS'block_loop.thisRepN'
p7061
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7062
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p7063
Nsg69
Vn
sS'block_loop.thisTrialN'
p7064
I0
sg39
F0.88354096057446441
sg34
g752
(S"\x07\xdf\t\x1d\x11'\x13\x04\x07@"
tRp7065
sa(dp7066
S'trial_loop.thisTrialN'
p7067
I46
sg6370
S'1-treacle_cookies.png'
p7068
sS'block_loop.thisIndex'
p7069
g6364
sg38
S'left'
p7070
sg58
g62
sS'trial_loop.thisN'
p7071
I46
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p7072
g59
(g98
S'.\x00\x00\x00'
tRp7073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7074
I0
sg6379
S'21-nakd_banana_crunch.png'
p7075
sS'block_loop.thisRepN'
p7076
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7077
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p7078
Nsg69
Vn
sS'block_loop.thisTrialN'
p7079
I0
sg39
F0.71672594800475053
sg34
g752
(S"\x07\xdf\t\x1d\x11'\x19\x02\xaf\x80"
tRp7080
sa(dp7081
S'trial_loop.thisTrialN'
p7082
I47
sg6370
g6700
sS'block_loop.thisIndex'
p7083
g6364
sg38
S'right'
p7084
sg58
g62
sS'trial_loop.thisN'
p7085
I47
sg33
g6711
sg63
g64
sS'trial_loop.thisIndex'
p7086
g59
(g98
S'/\x00\x00\x00'
tRp7087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7088
I0
sg6379
g6708
sS'block_loop.thisRepN'
p7089
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7090
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p7091
Nsg69
Vn
sS'block_loop.thisTrialN'
p7092
I0
sg39
F0.61685161912828335
sg34
g752
(S"\x07\xdf\t\x1d\x11'\x1e\x0e<\x88"
tRp7093
sa(dp7094
S'trial_loop.thisTrialN'
p7095
I48
sg6370
g6425
sS'block_loop.thisIndex'
p7096
g6364
sg38
S'right'
p7097
sg58
g62
sS'trial_loop.thisN'
p7098
I48
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7099
g59
(g98
S'0\x00\x00\x00'
tRp7100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7101
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7102
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7103
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7104
Nsg69
Vn
sS'block_loop.thisTrialN'
p7105
I0
sg39
F0.6502117706622812
sg34
g752
(S"\x07\xdf\t\x1d\x11'$\x08\xd9\xa0"
tRp7106
sa(dp7107
S'trial_loop.thisTrialN'
p7108
I49
sg6370
g6589
sS'block_loop.thisIndex'
p7109
g6364
sg38
S'left'
p7110
sg58
g62
sS'trial_loop.thisN'
p7111
I49
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7112
g59
(g98
S'1\x00\x00\x00'
tRp7113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7114
I0
sg6379
g6597
sS'block_loop.thisRepN'
p7115
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7116
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7117
Nsg69
Vn
sS'block_loop.thisTrialN'
p7118
I0
sg39
F0.70020167819893686
sg34
g752
(S"\x07\xdf\t\x1d\x11'*\x03\xf3\xb8"
tRp7119
sa(dp7120
S'trial_loop.thisTrialN'
p7121
I50
sg6370
S'22-daim.png'
p7122
sS'block_loop.thisIndex'
p7123
g6364
sg38
S'left'
p7124
sg58
g62
sS'trial_loop.thisN'
p7125
I50
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7126
g59
(g98
S'2\x00\x00\x00'
tRp7127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7128
I0
sg6379
S'7-olives.png'
p7129
sS'block_loop.thisRepN'
p7130
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7131
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7132
Nsg69
Vn
sS'block_loop.thisTrialN'
p7133
I0
sg39
F0.98353759642122895
sg34
g752
(S"\x07\xdf\t\x1d\x11'/\x0f>X"
tRp7134
sa(dp7135
S'trial_loop.thisTrialN'
p7136
I51
sg6370
S'25-kitkat.png'
p7137
sS'block_loop.thisIndex'
p7138
g6364
sg38
S'left'
p7139
sg58
g62
sS'trial_loop.thisN'
p7140
I51
sg33
g6610
sg63
g64
sS'trial_loop.thisIndex'
p7141
g59
(g98
S'3\x00\x00\x00'
tRp7142
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7143
I0
sg6379
S'31-hobnobs.png'
p7144
sS'block_loop.thisRepN'
p7145
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7146
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p7147
Nsg69
Vn
sS'block_loop.thisTrialN'
p7148
I0
sg39
F1.0335049812310899
sg34
g752
(S"\x07\xdf\t\x1d\x11'6\x00R\x08"
tRp7149
sa(dp7150
S'trial_loop.thisTrialN'
p7151
I52
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p7152
sS'block_loop.thisIndex'
p7153
g6364
sg38
S'right'
p7154
sg58
g62
sS'trial_loop.thisN'
p7155
I52
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7156
g59
(g98
S'4\x00\x00\x00'
tRp7157
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7158
I0
sg6379
S'36-fig_rolls.png'
p7159
sS'block_loop.thisRepN'
p7160
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7161
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7162
Nsg69
Vn
sS'block_loop.thisTrialN'
p7163
I0
sg39
F0.88344003594465903
sg34
g752
(S'\x07\xdf\t\x1d\x11(\x00\x01!\x10'
tRp7164
sa(dp7165
S'trial_loop.thisTrialN'
p7166
I53
sg6370
g6956
sS'block_loop.thisIndex'
p7167
g6364
sg38
S'right'
p7168
sg58
g62
sS'trial_loop.thisN'
p7169
I53
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p7170
g59
(g98
S'5\x00\x00\x00'
tRp7171
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7172
I0
sg6379
g6964
sS'block_loop.thisRepN'
p7173
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7174
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p7175
Nsg69
Vn
sS'block_loop.thisTrialN'
p7176
I0
sg39
F0.8335356577517814
sg34
g752
(S'\x07\xdf\t\x1d\x11(\x06\x00\x07\xd0'
tRp7177
sa(dp7178
S'trial_loop.thisTrialN'
p7179
I54
sg6370
g6756
sS'block_loop.thisIndex'
p7180
g6364
sg38
S'left'
p7181
sg58
g62
sS'trial_loop.thisN'
p7182
I54
sg33
g6766
sg63
g64
sS'trial_loop.thisIndex'
p7183
g59
(g98
S'6\x00\x00\x00'
tRp7184
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7185
I0
sg6379
g6764
sS'block_loop.thisRepN'
p7186
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7187
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p7188
Nsg69
Vn
sS'block_loop.thisTrialN'
p7189
I0
sg39
F0.95078128207387635
sg34
g752
(S'\x07\xdf\t\x1d\x11(\x0b\r:\xb8'
tRp7190
sa(dp7191
S'trial_loop.thisTrialN'
p7192
I55
sg6370
g7122
sS'block_loop.thisIndex'
p7193
g6364
sg38
S'left'
p7194
sg58
g62
sS'trial_loop.thisN'
p7195
I55
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7196
g59
(g98
S'7\x00\x00\x00'
tRp7197
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7198
I0
sg6379
g7129
sS'block_loop.thisRepN'
p7199
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7200
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7201
Nsg69
Vn
sS'block_loop.thisTrialN'
p7202
I0
sg39
F0.63354409665043931
sg34
g752
(S'\x07\xdf\t\x1d\x11(\x11\x0c\xd9\x10'
tRp7203
sa(dp7204
S'trial_loop.thisTrialN'
p7205
I56
sg6370
g6557
sS'block_loop.thisIndex'
p7206
g6364
sg38
S'right'
p7207
sg58
g62
sS'trial_loop.thisN'
p7208
I56
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7209
g59
(g98
S'8\x00\x00\x00'
tRp7210
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7211
I0
sg6379
g6564
sS'block_loop.thisRepN'
p7212
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7213
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7214
Nsg69
Vn
sS'block_loop.thisTrialN'
p7215
I0
sg39
F1.2173112538366695
sg34
g752
(S'\x07\xdf\t\x1d\x11(\x17\x07\xf3('
tRp7216
sa(dp7217
S'trial_loop.thisTrialN'
p7218
I57
sg6370
S'48-twix.png'
p7219
sS'block_loop.thisIndex'
p7220
g6364
sg38
S'left'
p7221
sg58
g62
sS'trial_loop.thisN'
p7222
I57
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7223
g59
(g98
S'9\x00\x00\x00'
tRp7224
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7225
I0
sg6379
S'50-polo.png'
p7226
sS'block_loop.thisRepN'
p7227
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7228
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7229
Nsg69
Vn
sS'block_loop.thisTrialN'
p7230
I0
sg39
F1.1501393558173731
sg34
g752
(S'\x07\xdf\t\x1d\x11(\x1d\x0b\x9c\xa8'
tRp7231
sa(dp7232
S'trial_loop.thisTrialN'
p7233
I58
sg6370
g7053
sS'block_loop.thisIndex'
p7234
g6364
sg38
S'right'
p7235
sg58
g62
sS'trial_loop.thisN'
p7236
I58
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p7237
g59
(g98
S':\x00\x00\x00'
tRp7238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7239
I0
sg6379
g7060
sS'block_loop.thisRepN'
p7240
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7241
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p7242
Nsg69
Vn
sS'block_loop.thisTrialN'
p7243
I0
sg39
F0.75020327475067461
sg34
g752
(S'\x07\xdf\t\x1d\x11(#\x0e\x8e\x90'
tRp7244
sa(dp7245
S'trial_loop.thisTrialN'
p7246
I59
sg6370
g6872
sS'block_loop.thisIndex'
p7247
g6364
sg38
S'right'
p7248
sg58
g62
sS'trial_loop.thisN'
p7249
I59
sg33
g6766
sg63
g64
sS'trial_loop.thisIndex'
p7250
g59
(g98
S';\x00\x00\x00'
tRp7251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7252
I0
sg6379
g6879
sS'block_loop.thisRepN'
p7253
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7254
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p7255
Nsg69
Vn
sS'block_loop.thisTrialN'
p7256
I0
sg39
F0.95014579902635887
sg34
g752
(S'\x07\xdf\t\x1d\x11()\x0b\x13\xf0'
tRp7257
sa(dp7258
S'trial_loop.thisTrialN'
p7259
I60
sg6370
g6685
sS'block_loop.thisIndex'
p7260
g6364
sg38
S'right'
p7261
sg58
g62
sS'trial_loop.thisN'
p7262
I60
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7263
g59
(g98
S'<\x00\x00\x00'
tRp7264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7265
I0
sg6379
g6692
sS'block_loop.thisRepN'
p7266
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7267
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7268
Nsg69
Vn
sS'block_loop.thisTrialN'
p7269
I0
sg39
F0.74987854832943412
sg34
g752
(S'\x07\xdf\t\x1d\x11(/\n\xec\xe0'
tRp7270
sa(dp7271
S'trial_loop.thisTrialN'
p7272
I61
sg6370
g6999
sS'block_loop.thisIndex'
p7273
g6364
sg38
S'left'
p7274
sg58
g62
sS'trial_loop.thisN'
p7275
I61
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7276
g59
(g98
S'=\x00\x00\x00'
tRp7277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7278
I0
sg6379
g7006
sS'block_loop.thisRepN'
p7279
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7280
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7281
Nsg69
Vn
sS'block_loop.thisTrialN'
p7282
I0
sg39
F1.2335222011352016
sg34
g752
(S'\x07\xdf\t\x1d\x11(5\x07\xb0\xc0'
tRp7283
sa(dp7284
S'trial_loop.thisTrialN'
p7285
I62
sg6370
g6623
sS'block_loop.thisIndex'
p7286
g6364
sg38
S'left'
p7287
sg58
g62
sS'trial_loop.thisN'
p7288
I62
sg33
g6627
sg63
g64
sS'trial_loop.thisIndex'
p7289
g59
(g98
S'>\x00\x00\x00'
tRp7290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7291
I0
sg6379
g6631
sS'block_loop.thisRepN'
p7292
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7293
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p7294
Nsg69
Vn
sS'block_loop.thisTrialN'
p7295
I0
sg39
F1.0834889017132809
sg34
g752
(S'\x07\xdf\t\x1d\x11(;\x0b\x94\xd8'
tRp7296
sa(dp7297
S'trial_loop.thisTrialN'
p7298
I63
sg6370
g6786
sS'block_loop.thisIndex'
p7299
g6364
sg38
S'left'
p7300
sg58
g62
sS'trial_loop.thisN'
p7301
I63
sg33
g6797
sg63
g64
sS'trial_loop.thisIndex'
p7302
g59
(g98
S'?\x00\x00\x00'
tRp7303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7304
I0
sg6379
g6794
sS'block_loop.thisRepN'
p7305
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7306
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p7307
Nsg69
Vn
sS'block_loop.thisTrialN'
p7308
I0
sg39
F0.75021296807244653
sg34
g752
(S'\x07\xdf\t\x1d\x11)\x05\rY\xf8'
tRp7309
sa(dp7310
S'trial_loop.thisTrialN'
p7311
I64
sg6370
S'19-caramello_redo.png'
p7312
sS'block_loop.thisIndex'
p7313
g6364
sg38
S'left'
p7314
sg58
g62
sS'trial_loop.thisN'
p7315
I64
sg33
S'19-caramello_redo.png'
p7316
sg63
g64
sS'trial_loop.thisIndex'
p7317
g59
(g98
S'@\x00\x00\x00'
tRp7318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7319
I0
sg6379
S'30-spaghetti_hoops.png'
p7320
sS'block_loop.thisRepN'
p7321
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7322
I2
sg6384
S'30-spaghetti_hoops.png'
p7323
sg55
g11
sS'block_loop.thisTrial'
p7324
Nsg69
Vn
sS'block_loop.thisTrialN'
p7325
I0
sg39
F0.83341335078876
sg34
g752
(S'\x07\xdf\t\x1d\x11)\x0b\n\x19\xf0'
tRp7326
sa(dp7327
S'trial_loop.thisTrialN'
p7328
I65
sg6370
g7152
sS'block_loop.thisIndex'
p7329
g6364
sg38
S'right'
p7330
sg58
g62
sS'trial_loop.thisN'
p7331
I65
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7332
g59
(g98
S'A\x00\x00\x00'
tRp7333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7334
I0
sg6379
g7159
sS'block_loop.thisRepN'
p7335
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7336
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7337
Nsg69
Vn
sS'block_loop.thisTrialN'
p7338
I0
sg39
F0.80016182152394322
sg34
g752
(S'\x07\xdf\t\x1d\x11)\x11\x08\x0e\x80'
tRp7339
sa(dp7340
S'trial_loop.thisTrialN'
p7341
I66
sg6370
g6640
sS'block_loop.thisIndex'
p7342
g6364
sg38
S'right'
p7343
sg58
g62
sS'trial_loop.thisN'
p7344
I66
sg33
g6644
sg63
g64
sS'trial_loop.thisIndex'
p7345
g59
(g98
S'B\x00\x00\x00'
tRp7346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7347
I0
sg6379
g6648
sS'block_loop.thisRepN'
p7348
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7349
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p7350
Nsg69
Vn
sS'block_loop.thisTrialN'
p7351
I0
sg39
F1.0167415143514518
sg34
g752
(S'\x07\xdf\t\x1d\x11)\x17\x05\x86\x10'
tRp7352
sa(dp7353
S'trial_loop.thisTrialN'
p7354
I67
sg6370
S'2-steamed_puddings.png'
p7355
sS'block_loop.thisIndex'
p7356
g6364
sg38
S'left'
p7357
sg58
g62
sS'trial_loop.thisN'
p7358
I67
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7359
g59
(g98
S'C\x00\x00\x00'
tRp7360
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7361
I0
sg6379
S'20-fruit_pastilles.png'
p7362
sS'block_loop.thisRepN'
p7363
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7364
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7365
Nsg69
Vn
sS'block_loop.thisTrialN'
p7366
I0
sg39
F0.70020823544837185
sg34
g752
(S'\x07\xdf\t\x1d\x11)\x1d\x06U\x18'
tRp7367
sa(dp7368
S'trial_loop.thisTrialN'
p7369
I68
sg6370
S'40-sardines.png'
p7370
sS'block_loop.thisIndex'
p7371
g6364
sg38
S'right'
p7372
sg58
g62
sS'trial_loop.thisN'
p7373
I68
sg33
g6600
sg63
g64
sS'trial_loop.thisIndex'
p7374
g59
(g98
S'D\x00\x00\x00'
tRp7375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7376
I0
sg6379
S'5-pineapple.png'
p7377
sS'block_loop.thisRepN'
p7378
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7379
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7380
Nsg69
Vn
sS'block_loop.thisTrialN'
p7381
I0
sg39
F1.0168891950233956
sg34
g752
(S'\x07\xdf\t\x1d\x11)#\x02"\xe0'
tRp7382
sa(dp7383
S'trial_loop.thisTrialN'
p7384
I69
sg6370
g6842
sS'block_loop.thisIndex'
p7385
g6364
sg38
S'left'
p7386
sg58
g62
sS'trial_loop.thisN'
p7387
I69
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p7388
g59
(g98
S'E\x00\x00\x00'
tRp7389
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7390
I0
sg6379
g6849
sS'block_loop.thisRepN'
p7391
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7392
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p7393
Nsg69
Vn
sS'block_loop.thisTrialN'
p7394
I0
sg39
F0.70008108182082651
sg34
g752
(S'\x07\xdf\t\x1d\x11))\x02\xf1\xe8'
tRp7395
sa(dp7396
S'trial_loop.thisTrialN'
p7397
I70
sg6370
g6623
sS'block_loop.thisIndex'
p7398
g6364
sg38
S'left'
p7399
sg58
g62
sS'trial_loop.thisN'
p7400
I70
sg33
g6634
sg63
g64
sS'trial_loop.thisIndex'
p7401
g59
(g98
S'F\x00\x00\x00'
tRp7402
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7403
I0
sg6379
g6631
sS'block_loop.thisRepN'
p7404
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7405
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p7406
Nsg69
Vn
sS'block_loop.thisTrialN'
p7407
I0
sg39
F1.1668500796004082
sg34
g752
(S'\x07\xdf\t\x1d\x11).\x0e@p'
tRp7408
sa(dp7409
S'trial_loop.thisTrialN'
p7410
I71
sg6370
g7137
sS'block_loop.thisIndex'
p7411
g6364
sg38
S'left'
p7412
sg58
g62
sS'trial_loop.thisN'
p7413
I71
sg33
g6610
sg63
g64
sS'trial_loop.thisIndex'
p7414
g59
(g98
S'G\x00\x00\x00'
tRp7415
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7416
I0
sg6379
g7144
sS'block_loop.thisRepN'
p7417
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7418
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p7419
Nsg69
Vn
sS'block_loop.thisTrialN'
p7420
I0
sg39
F0.65019808596844086
sg34
g752
(S'\x07\xdf\t\x1d\x11)5\x01\xf0\x18'
tRp7421
sa(dp7422
S'trial_loop.thisTrialN'
p7423
I72
sg6370
g6913
sS'block_loop.thisIndex'
p7424
g6364
sg38
S'right'
p7425
sg58
g62
sS'trial_loop.thisN'
p7426
I72
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p7427
g59
(g98
S'H\x00\x00\x00'
tRp7428
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7429
I0
sg6379
g6920
sS'block_loop.thisRepN'
p7430
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7431
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p7432
Nsg69
Vn
sS'block_loop.thisTrialN'
p7433
I0
sg39
F1.2501798967241484
sg34
g752
(S'\x07\xdf\t\x1d\x11):\x0cLp'
tRp7434
sa(dp7435
S'trial_loop.thisTrialN'
p7436
I73
sg6370
S'30-spaghetti_hoops.png'
p7437
sS'block_loop.thisIndex'
p7438
g6364
sg38
S'right'
p7439
sg58
g62
sS'trial_loop.thisN'
p7440
I73
sg33
g7316
sg63
g64
sS'trial_loop.thisIndex'
p7441
g59
(g98
S'I\x00\x00\x00'
tRp7442
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7443
I0
sg6379
S'19-caramello_redo.png'
p7444
sS'block_loop.thisRepN'
p7445
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7446
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p7447
Nsg69
Vn
sS'block_loop.thisTrialN'
p7448
I0
sg39
F0.70026325933213229
sg34
g752
(S'\x07\xdf\t\x1d\x11*\x05\x01g`'
tRp7449
sa(dp7450
S'trial_loop.thisTrialN'
p7451
I74
sg6370
g6442
sS'block_loop.thisIndex'
p7452
g6364
sg38
S'left'
p7453
sg58
g62
sS'trial_loop.thisN'
p7454
I74
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7455
g59
(g98
S'J\x00\x00\x00'
tRp7456
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7457
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7458
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7459
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7460
Nsg69
Vn
sS'block_loop.thisTrialN'
p7461
I0
sg39
F0.7335287583846366
sg34
g752
(S'\x07\xdf\t\x1d\x11*\n\x0c\xb5\xe8'
tRp7462
sa(dp7463
S'trial_loop.thisTrialN'
p7464
I75
sg6370
g6493
sS'block_loop.thisIndex'
p7465
g6364
sg38
S'left'
p7466
sg58
g62
sS'trial_loop.thisN'
p7467
I75
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p7468
g59
(g98
S'K\x00\x00\x00'
tRp7469
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7470
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7471
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7472
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7473
Nsg69
Vn
sS'block_loop.thisTrialN'
p7474
I0
sg39
F0.73353075407067081
sg34
g752
(S'\x07\xdf\t\x1d\x11*\x10\t\x00\xb0'
tRp7475
sa(dp7476
S'trial_loop.thisTrialN'
p7477
I76
sg6370
g6510
sS'block_loop.thisIndex'
p7478
g6364
sg38
S'right'
p7479
sg58
g62
sS'trial_loop.thisN'
p7480
I76
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7481
g59
(g98
S'L\x00\x00\x00'
tRp7482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7483
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7484
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7485
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7486
Nsg69
Vn
sS'block_loop.thisTrialN'
p7487
I0
sg39
F0.68373585344670573
sg34
g752
(S'\x07\xdf\t\x1d\x11*\x16\x05\x86\x10'
tRp7488
sa(dp7489
S'trial_loop.thisTrialN'
p7490
I77
sg6370
g6842
sS'block_loop.thisIndex'
p7491
g6364
sg38
S'left'
p7492
sg58
g62
sS'trial_loop.thisN'
p7493
I77
sg33
g6644
sg63
g64
sS'trial_loop.thisIndex'
p7494
g59
(g98
S'M\x00\x00\x00'
tRp7495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7496
I0
sg6379
g6849
sS'block_loop.thisRepN'
p7497
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7498
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p7499
Nsg69
Vn
sS'block_loop.thisTrialN'
p7500
I0
sg39
F0.7831902332327445
sg34
g752
(S'\x07\xdf\t\x1d\x11*\x1c\x01\x15X'
tRp7501
sa(dp7502
S'trial_loop.thisTrialN'
p7503
I78
sg6370
S'35-raisins.png'
p7504
sS'block_loop.thisIndex'
p7505
g6364
sg38
S'right'
p7506
sg58
g62
sS'trial_loop.thisN'
p7507
I78
sg33
g6627
sg63
g64
sS'trial_loop.thisIndex'
p7508
g59
(g98
S'N\x00\x00\x00'
tRp7509
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7510
I0
sg6379
S'49-yorkie.png'
p7511
sS'block_loop.thisRepN'
p7512
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7513
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p7514
Nsg69
Vn
sS'block_loop.thisTrialN'
p7515
I0
sg39
F0.98352676270224038
sg34
g752
(S'\x07\xdf\t\x1d\x11*!\r\x94\x90'
tRp7516
sa(dp7517
S'trial_loop.thisTrialN'
p7518
I79
sg6370
g6872
sS'block_loop.thisIndex'
p7519
g6364
sg38
S'right'
p7520
sg58
g62
sS'trial_loop.thisN'
p7521
I79
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p7522
g59
(g98
S'O\x00\x00\x00'
tRp7523
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7524
I0
sg6379
g6879
sS'block_loop.thisRepN'
p7525
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7526
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p7527
Nsg69
Vn
sS'block_loop.thisTrialN'
p7528
I0
sg39
F0.68353143830609042
sg34
g752
(S"\x07\xdf\t\x1d\x11*'\r\xea\x80"
tRp7529
sa(dp7530
S'trial_loop.thisTrialN'
p7531
I80
sg6370
g6670
sS'block_loop.thisIndex'
p7532
g6364
sg38
S'right'
p7533
sg58
g62
sS'trial_loop.thisN'
p7534
I80
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7535
g59
(g98
S'P\x00\x00\x00'
tRp7536
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7537
I0
sg6379
g6677
sS'block_loop.thisRepN'
p7538
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7539
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7540
Nsg69
Vn
sS'block_loop.thisTrialN'
p7541
I0
sg39
F0.91688742741098395
sg34
g752
(S'\x07\xdf\t\x1d\x11*-\ty\xc8'
tRp7542
sa(dp7543
S'trial_loop.thisTrialN'
p7544
I81
sg6370
g6956
sS'block_loop.thisIndex'
p7545
g6364
sg38
S'right'
p7546
sg58
g62
sS'trial_loop.thisN'
p7547
I81
sg33
g6967
sg63
g64
sS'trial_loop.thisIndex'
p7548
g59
(g98
S'Q\x00\x00\x00'
tRp7549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7550
I0
sg6379
g6964
sS'block_loop.thisRepN'
p7551
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7552
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p7553
Nsg69
Vn
sS'block_loop.thisTrialN'
p7554
I0
sg39
F0.78353434630480479
sg34
g752
(S'\x07\xdf\t\x1d\x11*3\x08\xd9\xa0'
tRp7555
sa(dp7556
S'trial_loop.thisTrialN'
p7557
I82
sg6370
g7370
sS'block_loop.thisIndex'
p7558
g6364
sg38
S'right'
p7559
sg58
g62
sS'trial_loop.thisN'
p7560
I82
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7561
g59
(g98
S'R\x00\x00\x00'
tRp7562
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7563
I0
sg6379
g7377
sS'block_loop.thisRepN'
p7564
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7565
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7566
Nsg69
Vn
sS'block_loop.thisTrialN'
p7567
I0
sg39
F0.80006175218659337
sg34
g752
(S'\x07\xdf\t\x1d\x11*9\x06\x16\x98'
tRp7568
sa(dp7569
S'trial_loop.thisTrialN'
p7570
I83
sg6370
g6913
sS'block_loop.thisIndex'
p7571
g6364
sg38
S'right'
p7572
sg58
g62
sS'trial_loop.thisN'
p7573
I83
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p7574
g59
(g98
S'S\x00\x00\x00'
tRp7575
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7576
I0
sg6379
g6920
sS'block_loop.thisRepN'
p7577
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7578
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p7579
Nsg69
Vn
sS'block_loop.thisTrialN'
p7580
I0
sg39
F0.80014984741501394
sg34
g752
(S'\x07\xdf\t\x1d\x11+\x03\x03\x92\x10'
tRp7581
sa(dp7582
S'trial_loop.thisTrialN'
p7583
I84
sg6370
g6391
sS'block_loop.thisIndex'
p7584
g6364
sg38
S'left'
p7585
sg58
g62
sS'trial_loop.thisN'
p7586
I84
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7587
g59
(g98
S'T\x00\x00\x00'
tRp7588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7589
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7590
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7591
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vn
sS'block_loop.thisTrialN'
p7593
I0
sg39
F0.78328716649411945
sg34
g752
(S'\x07\xdf\t\x1d\x11+\t\x01\t\xa0'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6527
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'left'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6535
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7604
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vn
sS'block_loop.thisTrialN'
p7606
I0
sg39
F0.93347441874357173
sg34
g752
(S'\x07\xdf\t\x1d\x11+\x0e\rJX'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
g6606
sS'block_loop.thisIndex'
p7610
g6364
sg38
S'right'
p7611
sg58
g62
sS'trial_loop.thisN'
p7612
I86
sg33
g6617
sg63
g64
sS'trial_loop.thisIndex'
p7613
g59
(g98
S'V\x00\x00\x00'
tRp7614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7615
I0
sg6379
g6614
sS'block_loop.thisRepN'
p7616
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7617
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p7618
Nsg69
Vn
sS'block_loop.thisTrialN'
p7619
I0
sg39
F0.63355122409484466
sg34
g752
(S'\x07\xdf\t\x1d\x11+\x14\x0c\xe8\xb0'
tRp7620
sa(dp7621
S'trial_loop.thisTrialN'
p7622
I87
sg6370
g7355
sS'block_loop.thisIndex'
p7623
g6364
sg38
S'left'
p7624
sg58
g62
sS'trial_loop.thisN'
p7625
I87
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7626
g59
(g98
S'W\x00\x00\x00'
tRp7627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7628
I0
sg6379
g7362
sS'block_loop.thisRepN'
p7629
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7630
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7631
Nsg69
Vn
sS'block_loop.thisTrialN'
p7632
I0
sg39
F0.65011512249839143
sg34
g752
(S'\x07\xdf\t\x1d\x11+\x1a\x07\xc4H'
tRp7633
sa(dp7634
S'trial_loop.thisTrialN'
p7635
I88
sg6370
g6391
sS'block_loop.thisIndex'
p7636
g6364
sg38
S'left'
p7637
sg58
g62
sS'trial_loop.thisN'
p7638
I88
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7639
g59
(g98
S'X\x00\x00\x00'
tRp7640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7641
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7642
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vn
sS'block_loop.thisTrialN'
p7645
I0
sg39
F0.88315949968819041
sg34
g752
(S'\x07\xdf\t\x1d\x11+ \x02\xdax'
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g7370
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'right'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g7377
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vn
sS'block_loop.thisTrialN'
p7658
I0
sg39
F0.80013844350469299
sg34
g752
(S'\x07\xdf\t\x1d\x11+&\x01\xc18'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g6391
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'left'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7668
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vn
sS'block_loop.thisTrialN'
p7671
I0
sg39
F0.73362284066752181
sg34
g752
(S'\x07\xdf\t\x1d\x11++\x0e~\xf0'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g7504
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'right'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6627
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g7511
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vn
sS'block_loop.thisTrialN'
p7684
I0
sg39
F0.76680081469385186
sg34
g752
(S'\x07\xdf\t\x1d\x11+1\n\xc5\xd0'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g6999
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'left'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g7006
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vn
sS'block_loop.thisTrialN'
p7697
I0
sg39
F1.0834663789828483
sg34
g752
(S'\x07\xdf\t\x1d\x11+7\x07\xc4H'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g6510
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'right'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vn
sS'block_loop.thisTrialN'
p7710
I0
sg39
F0.86686074225872289
sg34
g752
(S'\x07\xdf\t\x1d\x11,\x01\t\x89h'
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g6786
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'left'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g6794
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vn
sS'block_loop.thisTrialN'
p7723
I0
sg39
F0.9001849714659329
sg34
g752
(S'\x07\xdf\t\x1d\x11,\x07\x07\xf3('
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
g6408
sS'block_loop.thisIndex'
p7727
g6364
sg38
S'right'
p7728
sg58
g62
sS'trial_loop.thisN'
p7729
I95
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7730
g59
(g98
S'_\x00\x00\x00'
tRp7731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7732
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7733
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vn
sS'block_loop.thisTrialN'
p7736
I0
sg39
F0.65014904914278304
sg34
g752
(S'\x07\xdf\t\x1d\x11,\r\x07\x18h'
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
g7370
sS'block_loop.thisIndex'
p7740
g6364
sg38
S'left'
p7741
sg58
g62
sS'trial_loop.thisN'
p7742
I96
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7743
g59
(g98
S'`\x00\x00\x00'
tRp7744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7745
I0
sg6379
g7377
sS'block_loop.thisRepN'
p7746
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7747
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7748
Nsg69
Vn
sS'block_loop.thisTrialN'
p7749
I0
sg39
F0.8168594308081083
sg34
g752
(S'\x07\xdf\t\x1d\x11,\x13\x02.\x98'
tRp7750
sa(dp7751
S'trial_loop.thisTrialN'
p7752
I97
sg6370
g6670
sS'block_loop.thisIndex'
p7753
g6364
sg38
S'right'
p7754
sg58
g62
sS'trial_loop.thisN'
p7755
I97
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7756
g59
(g98
S'a\x00\x00\x00'
tRp7757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7758
I0
sg6379
g6677
sS'block_loop.thisRepN'
p7759
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7760
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7761
Nsg69
Vn
sS'block_loop.thisTrialN'
p7762
I0
sg39
F0.88346740533597767
sg34
g752
(S'\x07\xdf\t\x1d\x11,\x18\x0f&\xe8'
tRp7763
sa(dp7764
S'trial_loop.thisTrialN'
p7765
I98
sg6370
g6459
sS'block_loop.thisIndex'
p7766
g6364
sg38
S'right'
p7767
sg58
g62
sS'trial_loop.thisN'
p7768
I98
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7769
g59
(g98
S'b\x00\x00\x00'
tRp7770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7771
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7772
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7773
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7774
Nsg69
Vn
sS'block_loop.thisTrialN'
p7775
I0
sg39
F0.9501882786025817
sg34
g752
(S'\x07\xdf\t\x1d\x11,\x1e\r\xd3\x10'
tRp7776
sa(dp7777
S'trial_loop.thisTrialN'
p7778
I99
sg6370
g7152
sS'block_loop.thisIndex'
p7779
g6364
sg38
S'right'
p7780
sg58
g62
sS'trial_loop.thisN'
p7781
I99
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7782
g59
(g98
S'c\x00\x00\x00'
tRp7783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7784
I0
sg6379
g7159
sS'block_loop.thisRepN'
p7785
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7786
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7787
Nsg69
Vn
sS'block_loop.thisTrialN'
p7788
I0
sg39
F0.73358321207342669
sg34
g752
(S'\x07\xdf\t\x1d\x11,$\r\xac\x00'
tRp7789
sa(dp7790
S'trial_loop.thisTrialN'
p7791
I100
sg6370
g6999
sS'block_loop.thisIndex'
p7792
g6364
sg38
S'left'
p7793
sg58
g62
sS'trial_loop.thisN'
p7794
I100
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7795
g59
(g98
S'd\x00\x00\x00'
tRp7796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7797
I0
sg6379
g7006
sS'block_loop.thisRepN'
p7798
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7799
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7800
Nsg69
Vn
sS'block_loop.thisTrialN'
p7801
I0
sg39
F1.1168496234422491
sg34
g752
(S'\x07\xdf\t\x1d\x11,*\n1`'
tRp7802
sa(dp7803
S'trial_loop.thisTrialN'
p7804
I101
sg6370
g6700
sS'block_loop.thisIndex'
p7805
g6364
sg38
S'left'
p7806
sg58
g62
sS'trial_loop.thisN'
p7807
I101
sg33
g6704
sg63
g64
sS'trial_loop.thisIndex'
p7808
g59
(g98
S'e\x00\x00\x00'
tRp7809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7810
I0
sg6379
g6708
sS'block_loop.thisRepN'
p7811
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7812
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p7813
Nsg69
Vn
sS'block_loop.thisTrialN'
p7814
I0
sg39
F1.000139697931445
sg34
g752
(S'\x07\xdf\t\x1d\x11,0\x0co\x98'
tRp7815
sa(dp7816
S'trial_loop.thisTrialN'
p7817
I102
sg6370
g6391
sS'block_loop.thisIndex'
p7818
g6364
sg38
S'left'
p7819
sg58
g62
sS'trial_loop.thisN'
p7820
I102
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7821
g59
(g98
S'f\x00\x00\x00'
tRp7822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7823
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7824
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7825
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7826
Nsg69
Vn
sS'block_loop.thisTrialN'
p7827
I0
sg39
F0.70030488361226162
sg34
g752
(S'\x07\xdf\t\x1d\x11,6\r\x00 '
tRp7828
sa(dp7829
S'trial_loop.thisTrialN'
p7830
I103
sg6370
g6872
sS'block_loop.thisIndex'
p7831
g6364
sg38
S'right'
p7832
sg58
g62
sS'trial_loop.thisN'
p7833
I103
sg33
g6766
sg63
g64
sS'trial_loop.thisIndex'
p7834
g59
(g98
S'g\x00\x00\x00'
tRp7835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7836
I0
sg6379
g6879
sS'block_loop.thisRepN'
p7837
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7838
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p7839
Nsg69
Vn
sS'block_loop.thisTrialN'
p7840
I0
sg39
F0.81676306774170371
sg34
g752
(S'\x07\xdf\t\x1d\x11-\x00\x08\xcd\xe8'
tRp7841
sa(dp7842
S'trial_loop.thisTrialN'
p7843
I104
sg6370
g6371
sS'block_loop.thisIndex'
p7844
g6364
sg38
S'left'
p7845
sg58
g62
sS'trial_loop.thisN'
p7846
I104
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7847
g59
(g98
S'h\x00\x00\x00'
tRp7848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7849
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7850
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7851
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7852
Nsg69
Vn
sS'block_loop.thisTrialN'
p7853
I0
sg39
F0.68345417679665843
sg34
g752
(S'\x07\xdf\t\x1d\x11-\x06\x06\x83\xf8'
tRp7854
sa(dp7855
S'trial_loop.thisTrialN'
p7856
I105
sg6370
g6872
sS'block_loop.thisIndex'
p7857
g6364
sg38
S'right'
p7858
sg58
g62
sS'trial_loop.thisN'
p7859
I105
sg33
g6766
sg63
g64
sS'trial_loop.thisIndex'
p7860
g59
(g98
S'i\x00\x00\x00'
tRp7861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7862
I0
sg6379
g6879
sS'block_loop.thisRepN'
p7863
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7864
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p7865
Nsg69
Vn
sS'block_loop.thisTrialN'
p7866
I0
sg39
F0.85020390196223161
sg34
g752
(S'\x07\xdf\t\x1d\x11-\x0c\x02\x17('
tRp7867
sa(dp7868
S'trial_loop.thisTrialN'
p7869
I106
sg6370
g7219
sS'block_loop.thisIndex'
p7870
g6364
sg38
S'left'
p7871
sg58
g62
sS'trial_loop.thisN'
p7872
I106
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7873
g59
(g98
S'j\x00\x00\x00'
tRp7874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7875
I0
sg6379
g7226
sS'block_loop.thisRepN'
p7876
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vn
sS'block_loop.thisTrialN'
p7879
I0
sg39
F1.0167375229793834
sg34
g752
(S'\x07\xdf\t\x1d\x11-\x12\x00\x80\xe8'
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
g7504
sS'block_loop.thisIndex'
p7883
g6364
sg38
S'right'
p7884
sg58
g62
sS'trial_loop.thisN'
p7885
I107
sg33
g6634
sg63
g64
sS'trial_loop.thisIndex'
p7886
g59
(g98
S'k\x00\x00\x00'
tRp7887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7888
I0
sg6379
g7511
sS'block_loop.thisRepN'
p7889
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7890
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p7891
Nsg69
Vn
sS'block_loop.thisTrialN'
p7892
I0
sg39
F0.8835292715630203
sg34
g752
(S'\x07\xdf\t\x1d\x11-\x18\x01\x15X'
tRp7893
sa(dp7894
S'trial_loop.thisTrialN'
p7895
I108
sg6370
g7122
sS'block_loop.thisIndex'
p7896
g6364
sg38
S'left'
p7897
sg58
g62
sS'trial_loop.thisN'
p7898
I108
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7899
g59
(g98
S'l\x00\x00\x00'
tRp7900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7901
I0
sg6379
g7129
sS'block_loop.thisRepN'
p7902
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7903
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7904
Nsg69
Vn
sS'block_loop.thisTrialN'
p7905
I0
sg39
F0.86730292898209882
sg34
g752
(S'\x07\xdf\t\x1d\x11-\x1d\x0f>X'
tRp7906
sa(dp7907
S'trial_loop.thisTrialN'
p7908
I109
sg6370
g6941
sS'block_loop.thisIndex'
p7909
g6364
sg38
S'right'
p7910
sg58
g62
sS'trial_loop.thisN'
p7911
I109
sg33
g6704
sg63
g64
sS'trial_loop.thisIndex'
p7912
g59
(g98
S'm\x00\x00\x00'
tRp7913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7914
I0
sg6379
g6948
sS'block_loop.thisRepN'
p7915
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7916
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p7917
Nsg69
Vn
sS'block_loop.thisTrialN'
p7918
I0
sg39
F1.1668455180333694
sg34
g752
(S'\x07\xdf\t\x1d\x11-#\r\xac\x00'
tRp7919
sa(dp7920
S'trial_loop.thisTrialN'
p7921
I110
sg6370
g6510
sS'block_loop.thisIndex'
p7922
g6364
sg38
S'right'
p7923
sg58
g62
sS'trial_loop.thisN'
p7924
I110
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7925
g59
(g98
S'n\x00\x00\x00'
tRp7926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7927
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7928
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7929
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7930
Nsg69
Vn
sS'block_loop.thisTrialN'
p7931
I0
sg39
F0.91686804076380213
sg34
g752
(S'\x07\xdf\t\x1d\x11-*\x01[\xa8'
tRp7932
sa(dp7933
S'trial_loop.thisTrialN'
p7934
I111
sg6370
g7053
sS'block_loop.thisIndex'
p7935
g6364
sg38
S'right'
p7936
sg58
g62
sS'trial_loop.thisN'
p7937
I111
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p7938
g59
(g98
S'o\x00\x00\x00'
tRp7939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7940
I0
sg6379
g7060
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vn
sS'block_loop.thisTrialN'
p7944
I0
sg39
F0.88341751321786433
sg34
g752
(S'\x07\xdf\t\x1d\x11-0\x00\xbb\x80'
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g7312
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'left'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g7316
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g7320
sS'block_loop.thisRepN'
p7954
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vn
sS'block_loop.thisTrialN'
p7957
I0
sg39
F0.98350794624639093
sg34
g752
(S'\x07\xdf\t\x1d\x11-5\x0e\xa6\x00'
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
g7053
sS'block_loop.thisIndex'
p7961
g6364
sg38
S'right'
p7962
sg58
g62
sS'trial_loop.thisN'
p7963
I113
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p7964
g59
(g98
S'q\x00\x00\x00'
tRp7965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7966
I0
sg6379
g7060
sS'block_loop.thisRepN'
p7967
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7968
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p7969
Nsg69
Vn
sS'block_loop.thisTrialN'
p7970
I0
sg39
F0.55007572198155685
sg34
g752
(S'\x07\xdf\t\x1d\x11-;\x0e\xfb\xf0'
tRp7971
sa(dp7972
S'trial_loop.thisTrialN'
p7973
I114
sg6370
g6685
sS'block_loop.thisIndex'
p7974
g6364
sg38
S'right'
p7975
sg58
g62
sS'trial_loop.thisN'
p7976
I114
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7977
g59
(g98
S'r\x00\x00\x00'
tRp7978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7979
I0
sg6379
g6692
sS'block_loop.thisRepN'
p7980
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7981
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7982
Nsg69
Vn
sS'block_loop.thisTrialN'
p7983
I0
sg39
F0.71695716234171414
sg34
g752
(S'\x07\xdf\t\x1d\x11.\x05\x08\xa6\xd8'
tRp7984
sa(dp7985
S'trial_loop.thisTrialN'
p7986
I115
sg6370
g6493
sS'block_loop.thisIndex'
p7987
g6364
sg38
S'left'
p7988
sg58
g62
sS'trial_loop.thisN'
p7989
I115
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7990
g59
(g98
S's\x00\x00\x00'
tRp7991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7992
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7993
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7994
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7995
Nsg69
Vn
sS'block_loop.thisTrialN'
p7996
I0
sg39
F0.88343091281421948
sg34
g752
(S'\x07\xdf\t\x1d\x11.\x0b\x04\xb3 '
tRp7997
sa(dp7998
S'trial_loop.thisTrialN'
p7999
I116
sg6370
g6941
sS'block_loop.thisIndex'
p8000
g6364
sg38
S'right'
p8001
sg58
g62
sS'trial_loop.thisN'
p8002
I116
sg33
g6704
sg63
g64
sS'trial_loop.thisIndex'
p8003
g59
(g98
S't\x00\x00\x00'
tRp8004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8005
I0
sg6379
g6948
sS'block_loop.thisRepN'
p8006
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8007
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p8008
Nsg69
Vn
sS'block_loop.thisTrialN'
p8009
I0
sg39
F0.93349580108042574
sg34
g752
(S'\x07\xdf\t\x1d\x11.\x11\x03[`'
tRp8010
sa(dp8011
S'trial_loop.thisTrialN'
p8012
I117
sg6370
g7068
sS'block_loop.thisIndex'
p8013
g6364
sg38
S'left'
p8014
sg58
g62
sS'trial_loop.thisN'
p8015
I117
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p8016
g59
(g98
S'u\x00\x00\x00'
tRp8017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8018
I0
sg6379
g7075
sS'block_loop.thisRepN'
p8019
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8020
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p8021
Nsg69
Vn
sS'block_loop.thisTrialN'
p8022
I0
sg39
F0.8501599968985829
sg34
g752
(S'\x07\xdf\t\x1d\x11.\x17\x02\xf9\xb8'
tRp8023
sa(dp8024
S'trial_loop.thisTrialN'
p8025
I118
sg6370
S'3-ellas_strawberries_apples.png'
p8026
sS'block_loop.thisIndex'
p8027
g6364
sg38
S'left'
p8028
sg58
g62
sS'trial_loop.thisN'
p8029
I118
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8030
g59
(g98
S'v\x00\x00\x00'
tRp8031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8032
I0
sg6379
S'13-mccoys_steak_crisps.png'
p8033
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.76684471976113855
sg34
g752
(S'\x07\xdf\t\x1d\x11.\x1d\x01(\xe0'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g6527
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'left'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.85021359529127949
sg34
g752
(S'\x07\xdf\t\x1d\x11."\ri\x98'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g7068
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g7075
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.85020504235217231
sg34
g752
(S'\x07\xdf\t\x1d\x11.(\x0b\x98\xc0'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g8026
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'left'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g8033
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F0.55015840035048313
sg34
g752
(S'\x07\xdf\t\x1d\x11..\t\xcb\xd0'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g6476
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'right'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.91684722862191848
sg34
g752
(S'\x07\xdf\t\x1d\x11.4\x03r\xd0'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6670
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'right'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6677
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.66673803615412908
sg34
g752
(S'\x07\xdf\t\x1d\x11.:\x02\x98\x10'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g7504
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6627
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g7511
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.85019820000525215
sg34
g752
(S'\x07\xdf\t\x1d\x11/\x03\rm\x80'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6572
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'left'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6580
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.78348302869562758
sg34
g752
(S'\x07\xdf\t\x1d\x11/\t\x0b\x9c\xa8'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6527
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'left'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.85023554781946586
sg34
g752
(S'\x07\xdf\t\x1d\x11/\x0f\x08\xd9\xa0'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6700
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6704
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6708
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F1.0668562947284954
sg34
g752
(S'\x07\xdf\t\x1d\x11/\x15\x07\x08\xc8'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g7137
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'left'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6610
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g7144
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.70015691784283263
sg34
g752
(S'\x07\xdf\t\x1d\x11/\x1b\x08\x8fh'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6459
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.83334863358322764
sg34
g752
(S'\x07\xdf\t\x1d\x11/!\x04]0'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g7152
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g7159
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.78352066160732647
sg34
g752
(S"\x07\xdf\t\x1d\x11/'\x02\x8cX"
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g8026
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'left'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g8033
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.63354438174792449
sg34
g752
(S'\x07\xdf\t\x1d\x11/,\x0e\xcd\x10'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g7355
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'left'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g7362
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.63395007594954222
sg34
g752
(S'\x07\xdf\t\x1d\x11/2\t\xe7('
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6941
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6704
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6948
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.033444255393988
sg34
g752
(S'\x07\xdf\t\x1d\x11/8\x04\xbe\xd8'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6842
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6644
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6849
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.83332839163631434
sg34
g752
(S'\x07\xdf\t\x1d\x110\x02\x05\xcc`'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6606
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6617
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6614
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.80019289718620712
sg34
g752
(S'\x07\xdf\t\x1d\x110\x08\x03\xbd\x08'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6640
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6644
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6648
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.76675947551120771
sg34
g752
(S'\x07\xdf\t\x1d\x110\x0e\x018\x80'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6493
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6504
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.73352875838827458
sg34
g752
(S'\x07\xdf\t\x1d\x110\x13\ry8'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g7122
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g7129
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.70021536289641517
sg34
g752
(S'\x07\xdf\t\x1d\x110\x19\t\xc0\x18'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6700
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6711
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6708
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.0168150695863005
sg34
g752
(S'\x07\xdf\t\x1d\x110\x1f\x05\xcc`'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6857
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6864
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.68359444492671173
sg34
g752
(S'\x07\xdf\t\x1d\x110%\x06\x9bh'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7437
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g7316
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7444
sS'block_loop.thisRepN'
p8333
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.95027181226396351
sg34
g752
(S'\x07\xdf\t\x1d\x110+\x02.\x98'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6842
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6849
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.75000085529245553
sg34
g752
(S'\x07\xdf\t\x1d\x1101\x01\xc9\x08'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6442
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F1.1335175825552142
sg34
g752
(S'\x07\xdf\t\x1d\x1106\r\xcf('
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g6941
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6704
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g6948
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6704
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6711
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.1839625062166306
sg34
g752
(S'\x07\xdf\t\x1d\x111\x01\x01D8'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6956
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6964
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.81679100733163068
sg34
g752
(S'\x07\xdf\t\x1d\x111\x07\x04p\xb8'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6756
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6766
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6764
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F1.0002480351067788
sg34
g752
(S'\x07\xdf\t\x1d\x111\r\x02*\xb0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g7312
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g7323
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g7320
sS'block_loop.thisRepN'
p8411
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.75010634148929967
sg34
g752
(S'\x07\xdf\t\x1d\x111\x13\x02\xbb8'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6371
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.6668061745367595
sg34
g752
(S'\x07\xdf\t\x1d\x111\x18\x0e\x82\xd8'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7219
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7226
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.83354364049591823
sg34
g752
(S'\x07\xdf\t\x1d\x111\x1e\n\x12 '
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6606
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6610
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6614
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.66693332816430484
sg34
g752
(S'\x07\xdf\t\x1d\x111$\x08\x06\xb0'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g7053
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g7060
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.71691240198197193
sg34
g752
(S'\x07\xdf\t\x1d\x111*\x03[`'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6589
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6597
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.96680235422536498
sg34
g752
(S'\x07\xdf\t\x1d\x111/\x0e\xe4\x80'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g7355
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g7362
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.68345161091565387
sg34
g752
(S'\x07\xdf\t\x1d\x1115\x0e\xfb\xf0'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6913
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6920
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.95019312526346766
sg34
g752
(S'\x07\xdf\t\x1d\x111;\n\x8f '
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6408
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.68353314889463945
sg34
g752
(S'\x07\xdf\t\x1d\x112\x05\n-x'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6640
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6644
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6648
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.90021006007737014
sg34
g752
(S'\x07\xdf\t\x1d\x112\x0b\x05\xfb@'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6913
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6583
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6920
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.80019802894821623
sg34
g752
(S'\x07\xdf\t\x1d\x112\x11\x04\xe2\x00'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7137
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'left'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6610
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7144
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.91683325882695499
sg34
g752
(S'\x07\xdf\t\x1d\x112\x17\x02Y\x90'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6459
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.93345930855502957
sg34
g752
(S'\x07\xdf\t\x1d\x112\x1d\x01\xbdP'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g7437
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g7316
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g7444
sS'block_loop.thisRepN'
p8580
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.70019740173302125
sg34
g752
(S'\x07\xdf\t\x1d\x112#\x01\x1d('
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g8026
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g8033
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.66681273178619449
sg34
g752
(S'\x07\xdf\t\x1d\x112(\x0ck\xb0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7219
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7226
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.65056244098741445
sg34
g752
(S'\x07\xdf\t\x1d\x112.\x07\xc0`'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g7122
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g7129
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.63348394100830774
sg34
g752
(S'\x07\xdf\t\x1d\x1124\x02\xd6\x90'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6425
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.66686575998028275
sg34
g752
(S'\x07\xdf\t\x1d\x1129\r/\x00'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g7504
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6627
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g7511
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6627
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6634
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.88352385470716399
sg34
g752
(S'\x07\xdf\t\x1d\x113\x03\x08\x83\xb0'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6999
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g7006
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F1.1001893619759358
sg34
g752
(S'\x07\xdf\t\x1d\x113\t\x07/\xd8'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7219
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7226
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.8835187229415169
sg34
g752
(S'\x07\xdf\t\x1d\x113\x0f\t/\x90'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7370
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7377
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.75052515018978738
sg34
g752
(S'\x07\xdf\t\x1d\x113\x15\x08\x16P'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7068
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7075
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.88353240763899521
sg34
g752
(S'\x07\xdf\t\x1d\x113\x1b\x04\x9b\xb0'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g8026
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g8033
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6412
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.6835111963628151
sg34
g752
(S'\x07\xdf\t\x1d\x113!\x03\x82p'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g7355
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g7362
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.73353788151871413
sg34
g752
(S'\x07\xdf\t\x1d\x113&\x0eS\xf8'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6786
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6794
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.95017630449365242
sg34
g752
(S'\x07\xdf\t\x1d\x113,\n\xd9X'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6857
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6864
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.58343245234209462
sg34
g752
(S'\x07\xdf\t\x1d\x1132\nw\xb0'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g7312
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g7316
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g7320
sS'block_loop.thisRepN'
p8762
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.68353913594910409
sg34
g752
(S'\x07\xdf\t\x1d\x1138\x04\x9b\xb0'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6786
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6790
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6794
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6790
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6797
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.63355464527194272
sg34
g752
(S'\x07\xdf\t\x1d\x114\x02\x00ix'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6589
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6597
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6593
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.86676780036941636
sg34
g752
(S'\x07\xdf\t\x1d\x114\x07\n\x87P'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g7437
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g7323
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g7444
sS'block_loop.thisRepN'
p8801
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.85016655414801789
sg34
g752
(S'\x07\xdf\t\x1d\x114\r\x08\xf4\xf8'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g7152
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g7159
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.81686855393854785
sg34
g752
(S'\x07\xdf\t\x1d\x114\x13\x07$ '
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6670
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'right'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6538
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6677
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.86682938149897382
sg34
g752
(S'\x07\xdf\t\x1d\x114\x19\x04\xda0'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g7437
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g7316
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g7444
sS'block_loop.thisRepN'
p8840
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.68388752548707998
sg34
g752
(S'\x07\xdf\t\x1d\x114\x1f\x03\x86X'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6425
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.56685743512571207
sg34
g752
(S'\x07\xdf\t\x1d\x114$\x0eW\xe0'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6442
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.9501455139288737
sg34
g752
(S'\x07\xdf\t\x1d\x114*\x08AH'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6572
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6576
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6580
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.86687043558413279
sg34
g752
(S'\x07\xdf\t\x1d\x1140\x07\xdb\xb8'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7068
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7075
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.70019825702547678
sg34
g752
(S'\x07\xdf\t\x1d\x1146\x06\x87\xe0'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6857
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6864
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.5501136399943789
sg34
g752
(S'\x07\xdf\t\x1d\x115\x00\x02U\xa8'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6527
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.86715182713305694
sg34
g752
(S'\x07\xdf\t\x1d\x115\x05\x0bB\xd0'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6557
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6564
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.86688868184137391
sg34
g752
(S'\x07\xdf\t\x1d\x115\x0b\t\xb0x'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6371
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.56687824726395775
sg34
g752
(S'\x07\xdf\t\x1d\x115\x11\x08X\xb8'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6493
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6497
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.78347989261965267
sg34
g752
(S'\x07\xdf\t\x1d\x115\x17\x02\x03\xa0'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6756
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6766
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6764
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.60017026041896315
sg34
g752
(S'\x07\xdf\t\x1d\x115\x1c\x0e\x82\xd8'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6857
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6864
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.56690932292622165
sg34
g752
(S'\x07\xdf\t\x1d\x115"\x08\xe1p'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6756
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6760
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6764
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6766
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6760
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.80013388193765422
sg34
g752
(S'\x07\xdf\t\x1d\x115(\x02\xca\xd8'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6425
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6433
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6435
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.76686211072592414
sg34
g752
(S'\x07\xdf\t\x1d\x115.\x00Bh'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g7137
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'left'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6617
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g7144
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.80022824931802461
sg34
g752
(S'\x07\xdf\t\x1d\x1153\x0c\x83 '
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7312
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g7316
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7320
sS'block_loop.thisRepN'
p9035
I2
sg6382
g7316
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g7323
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.80019774385073106
sg34
g752
(S'\x07\xdf\t\x1d\x1159\t\xfe\x98'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6572
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6583
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6580
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6576
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6583
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.81677504185063299
sg34
g752
(S'\x07\xdf\t\x1d\x116\x03\x07v('
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6640
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6644
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6648
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6644
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6651
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.9167291981211747
sg34
g752
(S'\x07\xdf\t\x1d\x116\t\x05,8'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6956
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'right'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6960
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6964
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6967
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.91725605889951112
sg34
g752
(S'\x07\xdf\t\x1d\x116\x0f\x04Qx'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6606
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6610
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6614
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6610
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6617
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.75014454459596891
sg34
g752
(S'\x07\xdf\t\x1d\x116\x15\x03\xb1P'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I76
sg56
Vr
sg57
Vn
sg42
I524
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I76
sg55
g11
sg56
Vr
sg45
F2.6800000000000002
sg42
I524
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g695
sg51
F30.240000000000002
sg46
F0.99999999999999933
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I80790352
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\xecQ\xb8?\x00\x00\x80?\x00\x00 @\xe1z\x14?\\\x8f\xc2?{\x14.?\x00\x00\x00@\xe1z\x14?\x00\x00\x80?ff\xe6?\x1f\x85\xeb>\x00\x00\x00?\xaeG\x01@H\xe1\xfa?\xb8\x1e\x05?\x00\x00@@\xb8\x1e\xc5?\x00\x00\xc0?\x8f\xc2u?H\xe1z?\x14\xae\xc7?\xb8\x1e\x05?\n\xd7\xa3>\xa4p=?\\\x8f\xc2?\x00\x00\x00?\x00\x00\x80?\\\x8fB?\x00\x00\x00?\x1f\x85\xeb>H\xe1z?\n\xd7\xa3>\x00\x00\x00?\xa4p\xfd?\x00\x00\x80?\x00\x00@@\x14\xae\xc7?\x00\x00\xc0?)\\\x0f?\xaeG\x01@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'w\xbe\x8b@w\xbe\x83@\xfc\xa9I@\xc9v6@\xa8\xc6\xdb?/\xddl@\x96C\x03@;\xdf\x85A\xd5x\x1bAb\x10\x00@\xfc\xa9\t@!\xb0\x9a@\xe9&\xf1?D\x8b\x88@\xaa\xf1\xa6@!\xb0:@\xbaIt@B`%@u\x93x@u\x93h@\xa8\xc6k@\xaa\xf1\xfe@1\x08\xb0@\xfe\xd4\xec@D\x8b Ab\x10@@D\x8b\xd8@\xdb\xf9^@\x96Cs@/\xdd|@T\xe3\xc5@\xdb\xf9N@\xbaI$@u\x93H@\xfc\xa9I@\xbaID@\x87\x16a@+\x87\xe6?d;\x93@\x1dZ\x14@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00@@\x00\x00@A\x00\x00\x10B\x00\x00\x04B\x00\x00\x08B\x00\x00\xa8A\x00\x00\x80A\x00\x00\x80?\x00\x00\x00\x00\x00\x00\x88A\x00\x00\xc0A\x00\x00\x80@\x00\x00\xf0A\x00\x00\xe0A\x00\x00\x90A\x00\x00\x00B\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xa0@\x00\x00\xc0@\x00\x000A\x00\x00\x00@\x00\x00\xc8A\x00\x00PA\x00\x00\xe0@\x00\x00\x10A\x00\x00pA\x00\x00\x00A\x00\x00\x18B\x00\x00\xd0A\x00\x00 A\x00\x00\x1cB\x00\x00\x14B\x00\x00`A\x00\x00\xd8A\x00\x00\xa0A\x00\x00\x98A\x00\x00\x0cB\x00\x00\xe8A\x00\x00\xf8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\xcc?\x00\x00\x00@33\xb3?33\xb3?\x9a\x99\x99?33\xf3?33\xf3?33\xf3?\x9a\x99\xd9?ff\xe6?\xcd\xcc\x8c?\x00\x00\x80?33\xf3?\x9a\x99\xd9?\xcd\xcc\x8c?\x00\x00\xc0?ff\xa6?33\xf3?\x00\x00\x00@\x00\x00\x00@\x00\x00\x80?\x9a\x99\x99?\x9a\x99\xd9?ff\xa6?\xcd\xcc\xcc?\x00\x00\x80?\x00\x00\xc0?33\xf3?ff\xa6?33\xf3?\x00\x00\xc0?\x00\x00\x00@33\xb3?\xcd\xcc\x8c?ff\xe6?ff\xe6?\xcd\xcc\x8c?33\xb3?33\xf3?ff\xa6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x08\x00\x00\x00\x07\x00\x00\x00\x15\x00\x00\x00\x00\x00\x00\x00\x0b\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x18\x00\x00\x00\x1b\x00\x00\x00\x19\x00\x00\x00\x1e\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00\x17\x00\x00\x00!\x00\x00\x00\x1a\x00\x00\x00\x06\x00\x00\x00\t\x00\x00\x00\x0e\x00\x00\x00$\x00\x00\x00#\x00\x00\x00\x05\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\n\x00\x00\x00\x16\x00\x00\x00\x1d\x00\x00\x00"\x00\x00\x00\r\x00\x00\x00&\x00\x00\x00\x0c\x00\x00\x00\'\x00\x00\x00\x0f\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00%\x00\x00\x00\x02\x00\x00\x00 \x00\x00\x00\x1c\x00\x00\x00\x1f\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g123
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g186
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g354
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g333
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g340
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g249
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g214
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g109
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g102
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g221
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g270
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g130
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g312
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g298
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g228
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g326
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g256
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g263
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g137
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g144
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g179
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g116
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g277
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g193
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g151
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g165
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g207
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g158
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g368
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g284
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g172
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g375
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g361
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g200
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g291
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g242
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g235
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g347
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g305
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g319
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I80790352
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99y@\x00\x00\xb0@\x00\x00\xc0@33\xa3@\x00\x00`@\xcd\xcc\xac@\x00\x00\xb0@\x00\x00\xb0@\x00\x00\xb0@33\x93@33\xa3@\x00\x00\x90@\x00\x00\xa0@\x00\x00`@\xcd\xcc\xac@\x00\x00\xb0@\x00\x00\xc0@\x00\x00\xc0@33\xb3@\xcd\xcc\x8c@33\xa3@ffF@33\xb3@33\xa3@\x00\x00\xc0@\x00\x00\xc0@33\xa3@\x00\x00\xa0@ff\xa6@\xcd\xcc\x9c@\x00\x00\xc0@ffF@33s@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xe9\x11\xf1?\x1f\xe0\xbd?\xb0\x9a\x99?\x89g\xc6?8i\x16@>\xe3\x9d?L\xa9\x82@\xafi\x06@\xa0\x9c\t@\xb8\x8e\xa8?\xcew\xb7@\x17}\xd7?\xf1z\xb7?\x9f\x9f\xf9?\xe4\x10\x01A\x1c\xb6\xfb?\xeb\xbc\x9b?+\xef\xee@\xfcX\x15@\ryw@\x88X\x95?\xb4\x15\xd1?Q\xab\xb9?\x1e\x7f\x97?>\x8e\xc8?\xc6\xaazA\xbc\xb0\xaa?\xb3\xdcm@\x8f&\x82?\xd4w\x97?n\xc2;?4\xce\xac?\xcdE\xc4?z\x11\x01@\xcag\xa6?!\x04@?M7s?\xb3\x11Q@K\xff\xe7@\xfd|\x97?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\xcd\xccl@\x9a\x99\x89@333@ff\x86@\x9a\x999@\x9a\x99\x89@\xcd\xccL@\xcd\xccl@ffF@33S@333@\x00\x00@@\x00\x00\x80@\x00\x00@@333@\x00\x00\x80@\x00\x00@@33S@\xcd\xccl@33\x83@\xcd\xccl@\xcd\xcc,@\x9a\x99Y@\xcd\xccL@\xcd\xccl@33S@\xcd\xccL@\x9a\x99\x89@\x9a\x999@333@33\x83@\xcd\xcc,@33s@33\x83@fff@333@\x00\x00`@\x9a\x99Y@ffF@\x00\x00\x80@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'`lh\x04`X\xcf\x0c`Z\xcf\x0c\xa0[\xcf\x0c\x00\xf3\xcf\x0c\xe0\xe1f\x04\xc0\xc0\xcd\x0c\x80\xf3\xcf\x0c\x80\xc0\xcd\x0c\xa0\x8c\xfa\x0c@\xe9f\x04@U\xcf\x0c`]\xcf\x0c\x80\\\xcf\x0c\xa0\x8f\xfa\x0c #i\x04\xc0"i\x04\x00!i\x04`!i\x04@!i\x04  i\x04@"i\x04@#i\x04\xe0"i\x04@ i\x04\x80 i\x04\xa0"i\x04\x80%i\x04\xa0 i\x04\x80!i\x04`"i\x04\x00#i\x04 \xebf\x04@\xe2f\x04 X\xcf\x0c\xc0\xebf\x04`\xe1f\x04\x00\x8a\xfa\x0c\x80Q\xce\x0c \x87\xfa\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xdd$\x8a@\x91\xed\xac?!\xb0*@\xa8\xc6\x1b@u\x93\xc8?\x0e-\x82?u\x93\x88?\x1dZ\xe4?\xc5 \xc0?\x1dZ\x84?!\xb0*@B`%@\x91\xed\xac?u\x93\xc8?T\xe3-@\xb6\xf3\x9d?\x91\xed\xac?!\xb0\n@\xf8S\xd3?^\xba\xd9?\xc9v\x06@\xa8\xc6\xbb?T\xe3\r@\x0e-\x02@\x96C\x03@\xdb\xf9\x8e?\x83\xc0\xaa?\xdb\xf9>@\xc5 \xa0?B`\xb5?\x83\xc0j?!\xb0\n@\xb6\xf3\x9d?u\x93\x88?T\xe3\x85@\xd3M\xa2?B`\xf5?\xa8\xc6[@\xe9&\xf1?\x83\xc0*?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I80790352
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\xd8\xcb9\r\x00\xcc9\r(\xcc9\rP\xcc9\rx\xcc9\r\x80\xe6h\x04P\xcc9\r\xc0\xe5h\x04x\xcc9\r\xd8\xcb9\r\x80\xe6h\x04\xf0\xe5h\x04\x00\xcc9\r\xc0\xe5h\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S"p'\xf3\x04h\xc9E\x02\x90\x8b\x96\x04X\x8a\x96\x04@\x8d\x96\x04h\x8c\x96\x04H\x8e\x96\x04H\x88\x96\x04\x00\x8e\x96\x04\x88\x81\x96\x04\x90\x8e\x96\x04\x08\x8c\x96\x04\xd8\x8e\x96\x04\xd0\x87\x96\x04"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g799
sg82
g800
sg83
g804
sg84
g805
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g777
sg82
g810
sg83
g782
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g819
sg82
g820
sg83
g824
sg84
g825
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g788
sg82
g830
sg83
g793
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g743
sg82
g839
sg83
g748
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g799
sg82
g848
sg83
g804
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g766
sg82
g857
sg83
g771
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g755
sg82
g866
sg83
g760
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g819
sg82
g875
sg83
g824
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I80790352
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I80790352
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\x80\xf2f\x04\xa0\x11<\r\xe0\x89\xfa\x0c\x80\xf8f\x04x\xc6;\r\xa0\xec;\rx\xc6;\r\xe0\x10<\r\xb0\xc6;\r\x10\x11<\r0\x12<\r\xc8\xec;\r\xf0\xec;\rp\x11<\r\x18\xed;\r@\x11<\r\x80\xf8f\x04@\xed;\r\xf0\xec;\rX\xc7;\r@\x11<\r@\xed;\r0\xee;\r\xa0\xec;\r\xf0\x12<\r\xe0\x10<\r\xa0\xec;\r@\xc6;\r\xa0\xec;\r\x80\xf9f\x04\x18\xed;\r\x80\xf5f\x04\x90\xed;\r\xb8\xed;\r\xd0\xee;\r\xe0\xed;\rh\xed;\r\xf0\xec;\r\xb8\xed;\r@\xc6;\rh\xed;\r\x80\xee;\rh\xed;\r\x80\xf2f\x04\x90\x12<\r\x18\xed;\r@\xc6;\r\x10\x11<\rx\xc6;\rX\xee;\r\xa8\xee;\r\xb0\xc6;\rh\xed;\r\x10\x11<\r\x80\xf9f\x04\xe0\xed;\r\x90\xed;\r@\xc6;\r\xa0\xec;\r\xa8\xee;\rh\xed;\r\x80\xf5f\x04\x18\xed;\r\xc8\xec;\r\xa0\x11<\r\xc8\xec;\r\xb8\xed;\r\x80\xf5f\x04\x90\x12<\r\xe0\xed;\r\x80\xf8f\x04@\xed;\r\xe0\x10<\r\x90\x12<\r \xc7;\r\xe0\x10<\rx\xc6;\r\xe0\x10<\r\xe0\x89\xfa\x0c\x80\xf5f\x04\xf8\xee;\r\xa0\xec;\r\x90\xed;\r0\x12<\r\x90\xed;\r\x18\xed;\rx\xc6;\r\x80\xf8f\x04h\xed;\r\xe0\xed;\rh\xed;\r@\xed;\r\xb8\xed;\r\x80\xf9f\x04\xc0\x12<\r\x80\xf2f\x04\x18\xed;\r\xf0\xec;\r\xe0\x89\xfa\x0cX\xc7;\r@\xed;\rx\xc6;\r\x90\xed;\r@\xed;\r\x10\x11<\r0\x12<\r\xc0\x12<\r\xb0\xc6;\r\x90\xed;\r\xa0\xec;\rx\xc6;\r\x80\xf8f\x04\x80\xf2f\x04\x90\xc7;\rX\xc7;\r\xf0\xec;\r\xb8\xed;\r\x80\xf9f\x04\x10\x11<\rp\x11<\r\xe0\x10<\r\x90\xed;\r\xe0\x10<\r\x80\xf8f\x04\xb8\xed;\r\x80\xf9f\x04\xb0\xc6;\r \xc7;\r\xf0\xec;\r\xc0\x12<\r0\x12<\r`\x12<\r\x80\xf2f\x04\x80\xf8f\x04\xb8\xed;\r\x90\xed;\rX\xee;\r\x10\x11<\r\xa8\xee;\r\xc8\xec;\r\xb8\xed;\r\x10\x11<\r`\x12<\rx\xc6;\rX\xee;\r@\xc6;\rh\xed;\r\xd0\x11<\r\xe0\xed;\r\xf0\xec;\r0\xee;\r\xc8\xec;\r\x90\x12<\r0\xee;\r\xe0\xed;\r\x80\xf5f\x04\xf0\x12<\r\xf0\xec;\r@\xc6;\r\xb8\xed;\r\xe0\xed;\rx\xc6;\r@\x11<\r\xc8\xec;\r\x90\xed;\r\xb8\xed;\r0\x12<\r\xd0\x11<\r\x90\x12<\r\x80\xf9f\x04\x18\xed;\r@\xed;\r\xa0\x11<\r\xc8\xec;\r\x10\x11<\r\x80\xf5f\x04x\xc6;\r\x10\x11<\r\xe0\xed;\r\x80\xf9f\x04X\xee;\r\xe0\xed;\r\x80\xf2f\x04p\x11<\r@\x11<\r\x00\x12<\rp\x11<\r\xc8\xec;\r\xa0\xec;\r\xb0\xc6;\r@\x11<\r\x90\xc7;\r\xb0\xc6;\r@\xc6;\r\xe0\x10<\r\x80\xf9f\x04X\xc7;\r\xc8\xec;\rp\x11<\r\x80\xf2f\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xe0!\xfd\x0c \xe0\xd2\x0c`\xe6\xd2\x0c@\xed\xd2\x0c\xe0\xeb\xd2\x0c\xc0\xe2\xd2\x0c\xa0\xe2\xd2\x0c@\xe6\xd2\x0c\xa0\xe7\xd2\x0c\x00\xe6\xd2\x0c \xed\xd2\x0c\xe0\xef\xd2\x0c\xa0\xe3\xd2\x0c\xc0\xe7\xd2\x0c \xeb\xd2\x0c\x80\xe6\xd2\x0c@\xeb\xd2\x0c`\xe7\xd2\x0c \xe7\xd2\x0c \xe6\xd2\x0c@\xe0\xd2\x0c`\xed\xd2\x0c\x00\xeb\xd2\x0c\xe0\xe2\xd2\x0c\xa0\xec\xd2\x0c\xe0\xe6\xd2\x0c\xc0\xeb\xd2\x0c@\xe3\xd2\x0c\xe0\xe7\xd2\x0c\x80\xeb\xd2\x0c\x00\xe3\xd2\x0c\x80\xec\xd2\x0c`\xec\xd2\x0c`\xe2\xd2\x0c@\xe7\xd2\x0c\xa0\xe6\xd2\x0c\x80\xe3\xd2\x0c\xa0\xb0\xfc\x0c\xe0\x8dg\x04 \x8eg\x04 \x8cg\x04\xe0\x89g\x04`\x8eg\x04\xa0\x8fg\x04 \x8bg\x04\xe0\x8eg\x04\x00\x8dg\x04\xe0\x8cg\x04\xe0\x8bg\x04\x00\x8fg\x04\xc0\x8eg\x04\xc0\x8dg\x04@\x8cg\x04\x80\x8eg\x04\x80\x8fg\x04\x80\x8dg\x04`\x8fg\x04@\x8bg\x04\x00\x8eg\x04 \x8dg\x04\x80\x8bg\x04@\x8ag\x04\xe0\x8ag\x04\xc0\x8cg\x04@\x8dg\x04\x80\x85g\x04\xc0\x8bg\x04 \x8fg\x04`\x8dg\x04\x00\x82g\x04\xa0\x8cg\x04\xa0\x8bg\x04\x00\xec\xd2\x0c\x00\x8bg\x04@\x8eg\x04\x00\x8ag\x04`\x8bg\x04`\x8cg\x04\xa0\x8eg\x04\x80\x8cg\x04\xe0\x8fg\x04\x00\x8cg\x04\x80Z\xcf\x0c\xe0?\xcd\x0c\xe0>\xcd\x0c`?\xcd\x0c ?\xcd\x0c\x00>\xcd\x0c \x8ag\x04\xa0\x8dg\x04\xa0B\xa0\x04\xc0C\xa0\x04@B\xa0\x04@A\xa0\x04\x00A\xa0\x04`D\xa0\x04\xa0A\xa0\x04\xc0A\xa0\x04\xa0@\xa0\x04`\xf6f\x04`A\xa0\x04\xe0D\xa0\x04 E\xa0\x04 C\xa0\x04 B\xa0\x04\xa0C\xa0\x04\xe0N\xa0\x04\xe0@\xa0\x04\x80A\xa0\x04\x00D\xa0\x04\xc0E\xa0\x04\xe0E\xa0\x04\x00E\xa0\x04@E\xa0\x04\x00F\xa0\x04\x00C\xa0\x04\x00G\xa0\x04\xe0G\xa0\x04\x80B\xa0\x04@G\xa0\x04`C\xa0\x04\x00B\xa0\x04\xc0D\xa0\x04\xa0H\xa0\x04\x80F\xa0\x04@C\xa0\x04 A\xa0\x04\x80C\xa0\x04 H\xa0\x04@F\xa0\x04\xc0G\xa0\x04`H\xa0\x04`B\xa0\x04\x00H\xa0\x04\x80E\xa0\x04\xc0B\xa0\x04\xe0H\xa0\x04\xe0F\xa0\x04@J\xa0\x04`I\xa0\x04\xa0E\xa0\x04 D\xa0\x04\xe0B\xa0\x04\xe0C\xa0\x04 G\xa0\x04@I\xa0\x04 F\xa0\x04\x00J\xa0\x04\x80D\xa0\x04\xc0H\xa0\x04\xc0J\xa0\x04\xa0I\xa0\x04\x80H\xa0\x04`G\xa0\x04`F\xa0\x04\x80J\xa0\x04\x00K\xa0\x04\xc0K\xa0\x04\xa0F\xa0\x04\xa0G\xa0\x04`K\xa0\x04\x80G\xa0\x04`J\xa0\x04\x80I\xa0\x04\x80L\xa0\x04\xe0A\xa0\x04\x80K\xa0\x04 I\xa0\x04\xe0I\xa0\x04\xa0K\xa0\x04@L\xa0\x04@K\xa0\x04\xa0D\xa0\x04 O\xa0\x04\xa0M\xa0\x04 K\xa0\x04\x80M\xa0\x04\xc0F\xa0\x04\xc0M\xa0\x04`M\xa0\x04 J\xa0\x04\xa0O\xa0\x04\x00O\xa0\x04\xc0I\xa0\x04@D\xa0\x04\xc0L\xa0\x04\xc0O\xa0\x04\xe0L\xa0\x04`N\xa0\x04\x80N\xa0\x04\x80O\xa0\x04 L\xa0\x04\xc0@\xa0\x04`E\xa0\x04\xe0O\xa0\x04`L\xa0\x04@M\xa0\x04@N\xa0\x04\xc0N\xa0\x04\x00M\xa0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'$\x16\xd1?@X\x05@\xb0\xf4\xce?O\x17\xb1?\xb5n&@\x88\xf0\x0e@9\xbe+@7Ft@6\xd1|@\x0fX\x15@_|\xd7?\xf2\x88\x80@\x9ac\xf5?\xa6\x9a\t@\xa7\\\xd5?_E\x14@\x84\x14\x91?\xee\xdb\x9d?\xfcUu@\x1e\xd3\xec?\x98\xf1\xee?,\x85\xe8?P\x98\xa8?\x17}\xf7?\xf6#\x02@-\x03\x00@\xa4}\xd7?^\xef\xdd?\x97k\x86?\x95\x01 @\xa78\xd3?\xbf\xe3\xbd?\xb3\x8e\xc8?\xa0\xad:@\x99\x88w?\xcb\x02\x00@!\xae\xaa?s%\x02@|\x00\xa8@\xd3\xf7n?Z\xcf\x8c?\x02\x8a\x18@\xd5\x86f?\x0e\x8e\xe8?\x93\xbe\x9b?IH\xe4?\x84\xbaj?\x84\x17\xf1?\x95\xcd\x1c@\x0e\xff?@*{\xf7?\xaa\xa9\xea?\xdd\xf0\x8e?\xf6\x8d\xe8?\xed\xc0\xbb?\x1f\x8e\xc8?\x949s?v\x12\x80?\xbf\x01\x10@E9\xb3?!"Q?\x88\x03\xc0?L\x8b\xf7?Kj\xc6?a\xd4L?U\xe0-@\xfb\xb0\xaa?\xf7P\xa4?\x04\xd4\xcc?\xc0\xc1\x9b?\xa0\x000@\x1d\xfd\x1f@\xc1\x96\xf9?fZ\x95?\x80}\x97?\x95\xf3n?T\xcf\x1c@/_\xf5?\xd4\xd1\xcc?\xa9\x92\x08?\xfek\x86?\xa8\xf5\x8e?\xb3\xe4{?\x8f\xd0\xec?=\xf6.?\xeeh\xe6?\x7f\x17\xb1?\x97\x15\xd1?\xc6\xb0\xaa?\xe3PD?_{\xd7?\xc4\x1d\xc2?\xc7\xf1\xbd?@\x04\xa0?\x01/s?\x0eWe@CY\xd5?\xeb\x91(@\xba\xb0\xaa?\x0fS\xd5?\xbc\x95Y?Ol\xc6?\xa6\xb8*?\x16\xa3*?\xc9\x8b\x88?\xe5\'\xa2?\xbc)3? \x13\xf1?RKD?\x90l\x86?O\x17\xb1?\xe6\xbf\x9b?m?s?N&\xc2?\x81[\x95?\x85\xaf\xaa?D\xf2\x8e?\xb7\x9a\xa8?6\xb9j?\xb3\x05\xa0?\xe4l\x86?\x0f2"?\x9a\x9a\x88?\xf28\xb3?\xb8\x03\x80?\x869\x93?\xd7"\xc2?\xee\xeb]?Al\xc6?\x81\xean?{\xf1>@\xb6\x8b\xa8?\xa3i\x06@=J\x84?\xadF\xa4?n\xc8;?\x97\xaa*@\x0e4\x82?\xdc\xe3\x9d?\x9d\\\xb5?G\xeb]?<j\x86?\xe55Q?z\xc1{?;z\x97?\x82MD?\xb6W\x05@:Kb?\xda\x83w?7\xae\x8a?\xc9\x16\x91?!\xb4j?o$\xf1?\x8b\x13\xf1?\xa38\x93?\xd9F\xc4?\xcd\x02\xa0?\xd3\x84w?I\xb7*?j.b?\xf3\x0c@?\n\xa7Y?\x11\x8e\xc8?\xbc\xb0Y?i"\x82?\xae\x1dQ?\xb2G\xc4?\x98\xb1\xaa?\xd1\xcf*?\x9d\xb4j?B`\xb5?\xc9\xe8.?\xc0\xa5\x19?\x91_U?\x86m\x86?\xa1\x9d\x99?\xe4I\xa4?\xb9J\x84?J\x1fQ?\xae\xae\xca?\x0e\x10\x91@\xb5\xb4*?\x0c\x8e\xe8?L\xe5]?R\xa0\xb9?\xee?3?\xc1\x1dQ?J\x17Q?^\xf2\x8e?*\r\xc0?\xa3\xf5n?dpf?#E\xe4?\x93\xb8*? \x98\xe8?-\xc7;?<\x17\x91?\xe4\xb6j?9p&?\xb3\x90\xc8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'@\x8a\x96\x04P\x83\x96\x04p\xa7\xe4\x04P\xa0\xe4\x04\xf8\xa3\xe4\x04P\xa6\xe4\x04\xc8\xa9\xe4\x04P\xac\xe4\x04\x88\xa1\xe4\x04\x98\xa0\xe4\x04X\xa1\xe4\x04\xf8\xa9\xe4\x04\xc0\xab\xe4\x04\x90\xa2\xe4\x04H\xa5\xe4\x04\xb8\xa7\xe4\x04\x18\xa2\xe4\x04\xa8\xa8\xe4\x04\x08\xac\xe4\x04X\xaa\xe4\x04H\xab\xe4\x04\x08\xa9\xe4\x04\xa0\xa1\xe4\x04\xc8\xa0\xe4\x04 \xa6\xe4\x04\x98\xaf\xe4\x04p\xa1\xe4\x04\x18\xab\xe4\x048\xa6\xe4\x04\xa8\xa2\xe4\x04\xe0\xac\xe4\x04\xa0\xad\xe4\x04\xd0\xa7\xe4\x04\x00\xa8\xe4\x048\xa9\xe4\x04\xa8\xa5\xe4\x04P\xa3\xe4\x04P\xa9\xe4\x04\xa8\xae\xe4\x04 \xa3\xe4\x04\xb8\xad\xe4\x04\xf0\xae\xe4\x040\xa5\xe4\x04\xc8\xa6\xe4\x04\xe0\xa0\xe4\x04\xb0\xa6\xe4\x04\x90\xab\xe4\x04\x88\xaa\xe4\x04\x08\xa3\xe4\x04\xe0\xa9\xe4\x04p\xa4\xe4\x04h\xa6\xe4\x040\xa2\xe4\x04\x98\xa3\xe4\x04\x80\xa3\xe4\x04\xb0\xac\xe4\x04\x88\xad\xe4\x04\x10\xad\xe4\x04\xf0\xa8\xe4\x04\xd0\xa1\xe4\x04\xc8\xa3\xe4\x04P\xaf\xe4\x04\xe8\xaa\xe4\x04\x08\xaf\xe4\x04\x90\xa8\xe4\x04\xc0\xae\xe4\x04(\xad\xe4\x04`\xab\xe4\x04h\xa9\xe4\x04\x00\xa2\xe4\x048\xa0\xe4\x04\x80\xa6\xe4\x04\xb8\xa4\xe4\x04p\xaa\xe4\x04\xe0\xa6\xe4\x04\x00\xab\xe4\x04h\xa0\xe4\x04\x10\xaa\xe4\x04@\xad\xe4\x04h\xac\xe4\x04\xb0\xa9\xe4\x04\x90\xae\xe4\x04X\xad\xe4\x04\x98\xa9\xe4\x04\x90\xa5\xe4\x04x\xab\xe4\x04(\xa7\xe4\x04@\xa7\xe4\x04x\xae\xe4\x04\xc8\xac\xe4\x04h\xaf\xe4\x04\x00\xae\xe4\x04x\xa5\xe4\x04\x10\xa7\xe4\x04`\xae\xe4\x04\xe8\xa1\xe4\x04\x98\xac\xe4\x04 \xaf\xe4\x04\x18\xa5\xe4\x04`\xa5\xe4\x04\x80\xaf\xe4\x048\xaf\xe4\x04\xd0\xaa\xe4\x04\x80\xac\xe4\x040\xae\xe4\x04\xf0\xa5\xe4\x04\xc0\xa8\xe4\x04\xa8\xab\xe4\x04(\xaa\xe4\x04\xd0\xad\xe4\x04\xd8\xa5\xe4\x048\xac\xe4\x04\xf0\xab\xe4\x04\xa0\xa4\xe4\x04 \xac\xe4\x04@\xa4\xe4\x04\xe0\xa3\xe4\x04\xd8\xae\xe4\x04\xb8\xaa\xe4\x04\xc8\xaf\xe4\x04@\xa1\xe4\x04\x18\xae\xe4\x04(\xa4\xe4\x04\xe8\xa4\xe4\x04\xf8\xac\xe4\x04H\xa8\xe4\x04\xe8\xa7\xe4\x04\xb8\xa1\xe4\x04`\xa8\xe4\x04p\xad\xe4\x04\xe8\xad\xe4\x040\xab\xe4\x04\xb0\xa3\xe4\x04@\xaa\xe4\x04h\xa3\xe4\x04\x80\xa0\xe4\x04\xd8\xa8\xe4\x04\xd8\xab\xe4\x04\xe0\xaf\xe4\x048l\x97\x04\x90k\x97\x04\xf8c\x97\x04\xd0m\x97\x04`h\x97\x040h\x97\x04\x00b\x97\x04He\x97\x04\x80c\x97\x04\xf0n\x97\x04\x90e\x97\x04\x08o\x97\x04\xc0k\x97\x04\x00h\x97\x04\xe0i\x97\x04\xd8h\x97\x04\xb0`\x97\x04Pl\x97\x04pa\x97\x04\xf0h\x97\x04Po\x97\x04\x98o\x97\x04\xb0l\x97\x04\xa8h\x97\x04\x00e\x97\x04\x10g\x97\x04\xa0m\x97\x04\xf0e\x97\x04hl\x97\x04\xe8j\x97\x04\xa8n\x97\x04xn\x97\x04\xc0h\x97\x04\x18e\x97\x04@m\x97\x04\xe8g\x97\x04\xa8e\x97\x04\x90n\x97\x04@a\x97\x04\x18k\x97\x04\x18\xa8\xe4\x04`\xa2\xe4\x04H\xae\xe4\x04\x80\xa9\xe4\x04\xd0\xa4\xe4\x04x\xa8\xe4\x04\xf8\xa0\xe4\x04\xc0\xa5\xe4\x04x\xa2\xe4\x04\xf8\xa6\xe4\x04\x98\xa6\xe4\x04\x08\xa6\xe4\x048\xa3\xe4\x040\xa8\xe4\x04\x00\xa5\xe4\x04 \xa9\xe4\x04\x10\xa4\xe4\x04X\xa4\xe4\x04 \xa0\xe4\x04\xf0\xa2\xe4\x04\xa0\xa7\xe4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g949
sg894
g945
sg908
g956
sg903
g953
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g966
sg894
g996
sg908
g973
sg903
g1003
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1072
sg894
g1062
sg908
g1066
sg903
g1070
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1117
sg894
g1113
sg908
g1124
sg903
g1121
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1134
sg894
g1130
sg908
g1141
sg903
g1138
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1072
sg894
g1062
sg908
g1066
sg903
g1070
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g949
sg894
g1160
sg908
g956
sg903
g1167
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1179
sg894
g1175
sg908
g1186
sg903
g1183
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1072
sg894
g1222
sg908
g1066
sg903
g1229
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1179
sg894
g1237
sg908
g1186
sg903
g1244
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g949
sg894
g945
sg908
g956
sg903
g953
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g983
sg894
g1265
sg908
g990
sg903
g1272
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1290
sg894
g1280
sg908
g1284
sg903
g1288
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g925
sg894
g1323
sg908
g919
sg903
g1330
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g983
sg894
g1265
sg908
g990
sg903
g1272
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1355
sg894
g1351
sg908
g1362
sg903
g1359
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1134
sg894
g1368
sg908
g1141
sg903
g1375
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1400
sg894
g1396
sg908
g1407
sg903
g1404
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1417
sg894
g1413
sg908
g1424
sg903
g1421
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1400
sg894
g1396
sg908
g1407
sg903
g1404
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1447
sg894
g1443
sg908
g1454
sg903
g1451
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1290
sg894
g1280
sg908
g1284
sg903
g1288
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1100
sg894
g1473
sg908
g1107
sg903
g1480
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1417
sg894
g1488
sg908
g1424
sg903
g1495
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1290
sg894
g1280
sg908
g1284
sg903
g1288
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1083
sg894
g1529
sg908
g1090
sg903
g1536
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1290
sg894
g1280
sg908
g1284
sg903
g1288
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1117
sg894
g1113
sg908
g1124
sg903
g1121
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1134
sg894
g1130
sg908
g1141
sg903
g1138
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1049
sg894
g1609
sg908
g1056
sg903
g1616
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1032
sg894
g1637
sg908
g1039
sg903
g1644
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1134
sg894
g1368
sg908
g1141
sg903
g1375
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1032
sg894
g1637
sg908
g1039
sg903
g1644
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1290
sg894
g1678
sg908
g1284
sg903
g1685
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1355
sg894
g1706
sg908
g1362
sg903
g1713
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1447
sg894
g1721
sg908
g1454
sg903
g1728
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1400
sg894
g1736
sg908
g1407
sg903
g1743
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g925
sg894
g1323
sg908
g919
sg903
g1330
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1134
sg894
g1130
sg908
g1141
sg903
g1138
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1290
sg894
g1678
sg908
g1284
sg903
g1685
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1215
sg894
g1803
sg908
g1209
sg903
g1810
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1134
sg894
g1130
sg908
g1141
sg903
g1138
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g925
sg894
g1323
sg908
g919
sg903
g1330
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1417
sg894
g1413
sg908
g1424
sg903
g1421
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1117
sg894
g1896
sg908
g1124
sg903
g1903
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1447
sg894
g1443
sg908
g1454
sg903
g1451
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g949
sg894
g1160
sg908
g956
sg903
g1167
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1179
sg894
g1175
sg908
g1186
sg903
g1183
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1117
sg894
g1896
sg908
g1124
sg903
g1903
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g983
sg894
g1265
sg908
g990
sg903
g1272
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1015
sg894
g1989
sg908
g1022
sg903
g1996
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g966
sg894
g996
sg908
g973
sg903
g1003
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1015
sg894
g1989
sg908
g1022
sg903
g1996
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g899
sg894
g2030
sg908
g909
sg903
g2037
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1447
sg894
g1443
sg908
g1454
sg903
g1451
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1400
sg894
g1736
sg908
g1407
sg903
g1743
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1072
sg894
g1062
sg908
g1066
sg903
g1070
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1400
sg894
g1396
sg908
g1407
sg903
g1404
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1134
sg894
g1368
sg908
g1141
sg903
g1375
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g966
sg894
g996
sg908
g973
sg903
g1003
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g949
sg894
g945
sg908
g956
sg903
g953
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1290
sg894
g1280
sg908
g1284
sg903
g1288
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1447
sg894
g1721
sg908
g1454
sg903
g1728
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1290
sg894
g1678
sg908
g1284
sg903
g1685
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1179
sg894
g1237
sg908
g1186
sg903
g1244
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1417
sg894
g1413
sg908
g1424
sg903
g1421
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1355
sg894
g1706
sg908
g1362
sg903
g1713
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1179
sg894
g1237
sg908
g1186
sg903
g1244
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1134
sg894
g1368
sg908
g1141
sg903
g1375
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g899
sg894
g2030
sg908
g909
sg903
g2037
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1215
sg894
g1803
sg908
g1209
sg903
g1810
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1179
sg894
g1175
sg908
g1186
sg903
g1183
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1400
sg894
g1736
sg908
g1407
sg903
g1743
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1179
sg894
g1237
sg908
g1186
sg903
g1244
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1049
sg894
g1609
sg908
g1056
sg903
g1616
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1072
sg894
g1062
sg908
g1066
sg903
g1070
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1179
sg894
g1175
sg908
g1186
sg903
g1183
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1400
sg894
g1396
sg908
g1407
sg903
g1404
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g983
sg894
g979
sg908
g990
sg903
g987
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g949
sg894
g945
sg908
g956
sg903
g953
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g899
sg894
g2030
sg908
g909
sg903
g2037
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1355
sg894
g1706
sg908
g1362
sg903
g1713
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1100
sg894
g1473
sg908
g1107
sg903
g1480
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1417
sg894
g1488
sg908
g1424
sg903
g1495
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1355
sg894
g1351
sg908
g1362
sg903
g1359
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1049
sg894
g1609
sg908
g1056
sg903
g1616
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1117
sg894
g1113
sg908
g1124
sg903
g1121
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1015
sg894
g1989
sg908
g1022
sg903
g1996
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1400
sg894
g1396
sg908
g1407
sg903
g1404
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g949
sg894
g945
sg908
g956
sg903
g953
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1417
sg894
g1413
sg908
g1424
sg903
g1421
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1355
sg894
g1351
sg908
g1362
sg903
g1359
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g983
sg894
g1265
sg908
g990
sg903
g1272
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1100
sg894
g1473
sg908
g1107
sg903
g1480
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1179
sg894
g1237
sg908
g1186
sg903
g1244
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1072
sg894
g1222
sg908
g1066
sg903
g1229
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1100
sg894
g1473
sg908
g1107
sg903
g1480
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g949
sg894
g1160
sg908
g956
sg903
g1167
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1417
sg894
g1488
sg908
g1424
sg903
g1495
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1400
sg894
g1736
sg908
g1407
sg903
g1743
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1134
sg894
g1368
sg908
g1141
sg903
g1375
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1083
sg894
g1529
sg908
g1090
sg903
g1536
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1417
sg894
g1488
sg908
g1424
sg903
g1495
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1100
sg894
g1473
sg908
g1107
sg903
g1480
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g966
sg894
g996
sg908
g973
sg903
g1003
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1032
sg894
g1637
sg908
g1039
sg903
g1644
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g925
sg894
g1323
sg908
g919
sg903
g1330
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1290
sg894
g1678
sg908
g1284
sg903
g1685
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1015
sg894
g1989
sg908
g1022
sg903
g1996
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1447
sg894
g1721
sg908
g1454
sg903
g1728
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g949
sg894
g1160
sg908
g956
sg903
g1167
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1117
sg894
g1113
sg908
g1124
sg903
g1121
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g949
sg894
g1160
sg908
g956
sg903
g1167
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1447
sg894
g1443
sg908
g1454
sg903
g1451
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1215
sg894
g1803
sg908
g1209
sg903
g1810
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1290
sg894
g1678
sg908
g1284
sg903
g1685
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1100
sg894
g1096
sg908
g1107
sg903
g1104
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1417
sg894
g1488
sg908
g1424
sg903
g1495
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1447
sg894
g1443
sg908
g1454
sg903
g1451
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g966
sg894
g996
sg908
g973
sg903
g1003
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1072
sg894
g1222
sg908
g1066
sg903
g1229
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1083
sg894
g1529
sg908
g1090
sg903
g1536
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1400
sg894
g1736
sg908
g1407
sg903
g1743
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1417
sg894
g1413
sg908
g1424
sg903
g1421
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1072
sg894
g1222
sg908
g1066
sg903
g1229
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1015
sg894
g1011
sg908
g1022
sg903
g1019
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1117
sg894
g1896
sg908
g1124
sg903
g1903
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1355
sg894
g1351
sg908
g1362
sg903
g1359
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1134
sg894
g1130
sg908
g1141
sg903
g1138
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1179
sg894
g1175
sg908
g1186
sg903
g1183
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g925
sg894
g1323
sg908
g919
sg903
g1330
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1083
sg894
g1529
sg908
g1090
sg903
g1536
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1049
sg894
g1609
sg908
g1056
sg903
g1616
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1215
sg894
g1803
sg908
g1209
sg903
g1810
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g966
sg894
g962
sg908
g973
sg903
g970
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1049
sg894
g1045
sg908
g1056
sg903
g1053
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1447
sg894
g1721
sg908
g1454
sg903
g1728
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1355
sg894
g1706
sg908
g1362
sg903
g1713
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1032
sg894
g1028
sg908
g1039
sg903
g1036
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1447
sg894
g1721
sg908
g1454
sg903
g1728
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g899
sg894
g2030
sg908
g909
sg903
g2037
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1117
sg894
g1896
sg908
g1124
sg903
g1903
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1072
sg894
g1222
sg908
g1066
sg903
g1229
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1049
sg894
g1609
sg908
g1056
sg903
g1616
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1117
sg894
g1896
sg908
g1124
sg903
g1903
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1083
sg894
g1529
sg908
g1090
sg903
g1536
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g983
sg894
g1265
sg908
g990
sg903
g1272
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1032
sg894
g1637
sg908
g1039
sg903
g1644
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1072
sg894
g1062
sg908
g1066
sg903
g1070
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1355
sg894
g1351
sg908
g1362
sg903
g1359
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1032
sg894
g1637
sg908
g1039
sg903
g1644
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1015
sg894
g1989
sg908
g1022
sg903
g1996
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1355
sg894
g1706
sg908
g1362
sg903
g1713
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1215
sg894
g1803
sg908
g1209
sg903
g1810
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1083
sg894
g1079
sg908
g1090
sg903
g1087
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1117
sg894
g1113
sg908
g1124
sg903
g1121
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g899
sg894
g2030
sg908
g909
sg903
g2037
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I80790352
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\xd0<\xaf\x12pw\xaf\x12\xc0\x8a\xf9\x0c`x\xaf\x12\xe0\x82\xf9\x0c\x08=\xaf\x12\xa0w\xaf\x12\xe0\x82\xf9\x0c\xb0=\xaf\x12\x08=\xaf\x12\xd0w\xaf\x12\xc0o\xaf\x12 \xb0\xaf\x12 y\xaf\x12p\xb0\xaf\x12\xd0w\xaf\x12p\xb0\xaf\x12H\xb0\xaf\x12\x98\xb0\xaf\x12\xc0x\xaf\x12\xc0\xb0\xaf\x12\xe8=\xaf\x12\xc0\x8a\xf9\x0c\x00x\xaf\x12\xc0\x8a\xf9\x0c\xe0\x82\xf9\x0c@=\xaf\x12@\x81\xf9\x0c\x00x\xaf\x12\xc0x\xaf\x12\x00x\xaf\x12p\xb0\xaf\x12\xe0\x82\xf9\x0cpw\xaf\x12\xa0\x80\xf9\x0c \xb0\xaf\x12@\x81\xf9\x0c\x80y\xaf\x12\x98\xb0\xaf\x12 \xb0\xaf\x12\xc0\xb0\xaf\x12\xd0w\xaf\x12\x98\xb0\xaf\x12\xd0w\xaf\x12(\xb2\xaf\x12\xc0\xb0\xaf\x12@=\xaf\x12@\x81\xf9\x0c\xc0\x8a\xf9\x0c\xd0<\xaf\x12Py\xaf\x128\xb1\xaf\x12\xe8\xb0\xaf\x12\xc0\x8a\xf9\x0c8\xb1\xaf\x12\xc0\xb0\xaf\x12\xa0\x80\xf9\x0c@=\xaf\x128\xb1\xaf\x12\x00x\xaf\x12pw\xaf\x12\xc0o\xaf\x12\xe8\xb0\xaf\x12\xa0w\xaf\x12p\xb0\xaf\x12pw\xaf\x128\xb1\xaf\x12 \xb0\xaf\x12\xa0\x80\xf9\x0c\x00x\xaf\x12\xc0\xb0\xaf\x12\x08=\xaf\x12p\xb0\xaf\x12\xe0\x82\xf9\x0c\xa0\x80\xf9\x0c\x00x\xaf\x12@\x81\xf9\x0c`x\xaf\x12\xa0w\xaf\x12p\xb0\xaf\x12\xb0\xb1\xaf\x12p\xb0\xaf\x12\xf0x\xaf\x12Py\xaf\x12\xb0=\xaf\x12\xd0<\xaf\x12\xe8\xb0\xaf\x12\xd0<\xaf\x12\x98\xb0\xaf\x120x\xaf\x12(\xb2\xaf\x12\xd0w\xaf\x12\xb0=\xaf\x12\xc0\xb0\xaf\x12 y\xaf\x12\xa0\x80\xf9\x0c0x\xaf\x12`x\xaf\x12 \xb0\xaf\x12\xe8\xb0\xaf\x12 \xb0\xaf\x12\xe8\xb0\xaf\x12\xa0w\xaf\x12pw\xaf\x12\x10\xb1\xaf\x12P\xb2\xaf\x12 \xb0\xaf\x12\xd0<\xaf\x12H\xb0\xaf\x12\x10\xb1\xaf\x12\xc0\xb0\xaf\x12P\xb2\xaf\x12\xd0<\xaf\x12 \xb0\xaf\x12\xc0\x8a\xf9\x0c(\xb2\xaf\x12@\x81\xf9\x0c\x08=\xaf\x12@=\xaf\x12\x10\xb1\xaf\x12\x98\xb0\xaf\x12@=\xaf\x12\xc0o\xaf\x12H\xb0\xaf\x12\xe0\x82\xf9\x0c\x98\xb0\xaf\x12@=\xaf\x12P\xb2\xaf\x12\xe8\xb0\xaf\x128\xb1\xaf\x12\xc0\x8a\xf9\x0c`x\xaf\x12H\xb0\xaf\x12\x90x\xaf\x12P\xb2\xaf\x12@=\xaf\x12@\x81\xf9\x0c\xe0\x82\xf9\x0cP\xb2\xaf\x12\xe8\xb0\xaf\x12\x80\x80\xf9\x0c@\x83\xf9\x0c@=\xaf\x12 \xb0\xaf\x12\xa0w\xaf\x12\x00x\xaf\x12\xc0\xb0\xaf\x12\xc0x\xaf\x12\xe8\xb0\xaf\x12\x10\xb1\xaf\x12\xe0\x82\xf9\x0c\x98\xb0\xaf\x12@=\xaf\x12\xc0\xb0\xaf\x12\xc0o\xaf\x12\xd0w\xaf\x12H\xb0\xaf\x12\xc0o\xaf\x12\xa0w\xaf\x12@\x81\xf9\x0cH\xb0\xaf\x12\x08=\xaf\x12H\xb0\xaf\x12\xc0\x8a\xf9\x0c\xc0o\xaf\x12pw\xaf\x12\x10\xb1\xaf\x12 y\xaf\x12\xd0<\xaf\x12\xd8\xb1\xaf\x12\x00x\xaf\x12pw\xaf\x12\x08=\xaf\x12\xa0\x80\xf9\x0c(\xb2\xaf\x12\xe0\x82\xf9\x0c\xb0\xb1\xaf\x12@\x81\xf9\x0c\xc0o\xaf\x12p\xb0\xaf\x12@\x81\xf9\x0cx=\xaf\x12@\x81\xf9\x0c\xa0w\xaf\x12\xc0\x8a\xf9\x0cpw\xaf\x12\xd8\xb1\xaf\x12\xd0<\xaf\x12\xd0w\xaf\x12\xb0=\xaf\x12@=\xaf\x12\xe8=\xaf\x12\xe0\x82\xf9\x0c\xc0o\xaf\x12\xa0w\xaf\x12x=\xaf\x12\xa0w\xaf\x12\x80y\xaf\x12\x98\xb0\xaf\x12\x10\xb1\xaf\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\x80:\xcd\x0c\xe0M\xa0\x04`\xe0f\x04\x80\xb0\xb0\x12\xe0\xb1\xb0\x12@\xb1\xb0\x12\xc0\xb1\xb0\x12\x80\xb2\xb0\x12\xc0\xb2\xb0\x12\x80\xb1\xb0\x12\x00\xb3\xb0\x12\xe0\xb2\xb0\x12 \xb0\xb0\x12 \xb3\xb0\x12\x80\xb3\xb0\x12\xa0\xb3\xb0\x12\xc0\xb3\xb0\x12\xa0\xb1\xb0\x12\x00\xb4\xb0\x12\xe0\xb3\xb0\x12\xa0\xb0\xb0\x12 \xb4\xb0\x12@\xb4\xb0\x12`\xb4\xb0\x12\x80\xb4\xb0\x12\xa0\xb4\xb0\x12\xc0\xb4\xb0\x12\xe0\xb4\xb0\x12\x00\xb5\xb0\x12 \xb5\xb0\x12@\xb5\xb0\x12\xa0\xb5\xb0\x12\xc0\xb5\xb0\x12`\xb2\xb0\x12@\xb3\xb0\x12\xe0\xb5\xb0\x12\x00\xb6\xb0\x12`\xb6\xb0\x12@\xb6\xb0\x12\xa0\xb6\xb0\x12\x80\xb6\xb0\x12@\xb2\xb0\x12\x00\xb7\xb0\x12 \xb7\xb0\x12@\xb7\xb0\x12\xe0\xb6\xb0\x12`\xb5\xb0\x12`\xb7\xb0\x12\x80\xb7\xb0\x12\xa0\xb7\xb0\x12\xc0\xb7\xb0\x12\xe0\xb7\xb0\x12\x00\xb8\xb0\x12 \xb8\xb0\x12@\xb8\xb0\x12`\xb8\xb0\x12\x80\xb8\xb0\x12\xa0\xb8\xb0\x12\xc0\xb8\xb0\x12\xe0\xb8\xb0\x12@\xb9\xb0\x12\xe0hh\x04\xe0jh\x04\x80mh\x04\xe0ih\x04`ih\x04\xc0jh\x04`ch\x04\x80jh\x04\xa0ih\x04\xa0kh\x04 ih\x04\x80nh\x04@jh\x04`jh\x04 hh\x04\xa0nh\x04\xe0oh\x04\xc0ih\x04`oh\x04\xe0mh\x04`kh\x04 kh\x04\xa0oh\x04\xc0oh\x04@fh\x04\x80dh\x04\xa0jh\x04\xc0hh\x04@oh\x04\xa0eh\x04\x80lh\x04 eh\x04 oh\x04 mh\x04@dh\x04\xa0mh\x04\x00mh\x04\x00dh\x04\x00jh\x04@kh\x04`hh\x04@ih\x04\xc0dh\x04\xa0ch\x04\x00ih\x04 fh\x04\xe0dh\x04\xc0mh\x04@hh\x04`fh\x04\x00ch\x04\xc0kh\x04 jh\x04 !i\x04\xe0!i\x04\x80"i\x04\xc0lh\x04`eh\x04\x80fh\x04\x00fh\x04`mh\x04@mh\x04\xe0kh\x04\x80`h\x04\x00kh\x04\x80kh\x04\x80oh\x04 ch\x04@\x8fg\x04\xe0\xef\x9d\x04\x80\xe2\xd2\x0c\x00\xe7\xd2\x0c \xe2\xd2\x0c\xc0\x8fg\x04\x80\xe7\xd2\x0c\x00Z\xcf\x0c\xc0U\xcf\x0c\x00[\xcf\x0c U\xcf\x0c\xa0T\xcf\x0c\xe0lh\x04\xc0Y\xcf\x0c@[\xcf\x0c\x80ih\x04`\xfe\xcf\x0c \xf1\xcf\x0c`\xf3\xcf\x0c\xe0\xff\xcf\x0c\xe0\xf6\xcf\x0c\xe0\xfb\xcf\x0c\x00\xf1\xcf\x0c\xc0\xf4\xcf\x0c\x00\xfc\xcf\x0c\x80\xf4\xcf\x0c \xfc\xcf\x0c\xc0\xf7\xcf\x0c\xa0\xf1\xcf\x0c\xa0\xfb\xcf\x0c\xe0\xf2\xcf\x0c\x00\xf2\xcf\x0c\xe0\xf1\xcf\x0c\xe0\xf4\xcf\x0c\xe0\xf3\xcf\x0c\x00R\xcf\x0c\x00\xfb\xcf\x0c \x83\xf9\x0c\xa0\x8a\xf9\x0c\xc0\x82\xf9\x0c\x00\x83\xf9\x0c`\x81\xf9\x0c\x00\x87\xf9\x0c\xc0!i\x04@R\xce\x0c\xc0d\xfc\x0c`i\xfc\x0c\xa0`\xfc\x0c\x80b\xfc\x0c\xe0b\xfc\x0c@`\xfc\x0c\x00f\xfc\x0c\xc0f\xfc\x0c\xe0e\xfc\x0c``\xfc\x0c\xa0f\xfc\x0c\x80`\xfc\x0c\xe0`\xfc\x0c\xe0f\xfc\x0c\x00g\xfc\x0c\xc0c\xfc\x0c`\x8a\xf9\x0c\xc0\xb6\xfc\x0c \xbb\xfc\x0c@\xb7\xfc\x0c@\xb0\xfc\x0c\xc0\xb9\xfc\x0c\xc0`\xfc\x0c\xc0e\xfc\x0c@\x80\xf9\x0c\xc0\xfb\xcf\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\x9d\x13\x11@)\x1bQ?\\\x9fY?O\xa6\x19?\x8ekf?\x94\xe7\x1d?<\xd9L?\x82\xf9.?\x0c\xe4\x9d?[\xfb.?\x14,b?\x1a\x19Q?\xe9\xa3j?\xe1\x8e\xc8?\t\x95H?Fkf?\x08\x83w? \xa0\x99?j\xda\x0c?\xad\xcej?\x8c\'\xc2?5\xcf,@\x14)\x82?\x84j\x86?#\x1fQ?:\x17\x91?\x81\xcd\x8c?\xe1rf?\x9d\xb0\x8a?\x82\r@?\xf3\xb6j?\x84\xfc.?\xab}7?\x9e$\x12@|U\xe4?\xccef?\x98JD?\xb6\x8e\xa8?\xb2aU?F7D?\xda\xbd\x19?\xe2\xea]?\x04t&?@\xec]?\xc7\x9f\xb9?\x96\xb3*?c\x98\x88?\xb0\\U?\x89\x16\xd1?\x05l\xc6?\xb5\xeb]?P(\x82?\t\x8e\xe8?\x0f\x8b\x88?V\x1b\x91?\xaf83?\xd7\x01\xcf?s\x02\x80?$PD?\xec\xcd\x0c@I\xea]?\x99\xdf{?\xe9\xd3L?B\x8b\x08@p\xb3j?6]U?4\xe7]?\xe5A\x84?\xd0\xaf\xea?\xdfmf?+\x03\x80?\xba#\x91?\x16\xfan?\xf2\xf4\x8e?M\x9f\x99?-z\x97?8D\xd3?\xefr&?\xbf\xe3\x9d?/`U?\x85[\x95?\x03PD?\xed\xc8L?\x97/b?[\xe2\xdd?\x14\xf3\x8e?\x976\x93?\xfd\xeb]?L\xeb]?\xd8J\x84?z\x8f\xa8?\x83\x03\x80?p\xcd\xbb?\xe0\xd1\xec?\xa7\xb0\x8a?\x1c\xb0\xea?\xd3\xc4;?O\x1b\x11?\x93\xd8]?\xbe|\x97?\xc2\xa7\xaa?\x17+b?\x86\xc1j?q\xf3\x8e?\xcc\xf4\xae?YJD?d\x97\xf9?\xaa\xca\x8c?\xfd\x8e\xa8?+Y\xf5?\xacnf?\t\x8fH?\xb2(\x82?\x90ow?j\xbf\xbb?\x16J\x84?yz\xd7?\x87\xec\x1d?X|w?\xf6\xe1\x9d?\xd3\xa5\x19?\xa1\xbd{?\xc8\x06@?2\xe4\x9d?\xb3>s?[\x8a\xf7>\xd0\xe4]?\xe3\xe6\x1d?%\xb8*?\xbdR\x04?\xa3l\x86?\x07s&?\xa2\x03\xa0?\x91\x9c\x99?I\r\x00?N\xf3n?\xeeI\x84?Zt&?\xd3\xf9.?\x9f(b?\xc9\xae\x8a?Q\x8bf?\x08HD?\xa6\xdfn?\xa3\x16\x91?\x9f&\x82?\xe15\x13@\xce\x16\xf1?-sf?\x8b\xc2{?\xfd\xeb\x1d?\xca."?\x91F\xc4?Z\x99H?d\x05\xc0?\x889\x93?k\xde{?v+"?kz\xb7?\x91*b?\xe3\xe6]?\x9aa\x15?\xdf\xfcn?H.b?\xd5\xc5;?NcU?\xb0$\xa2?\xdb\x81w?\xfaw\x86?[\xa3\x19?+\xc8;?\x97\x83w?a\xb3*?G[\xb5?.\xf0L?\xbf\xe3\x9d?\x01\xd3\xac?\x13tf?\xe2KD?u!\x91?\xe8\xc1;?A\xfc.?\xb2("?\xbb\xdd\x9d?E\xad\x8a?\xdf\xa4Y?\xbf?3?\x12\xd7L?\x9d\xb6*?\xbd\xc1\x9b?\xbf\xe3]?\x1ct&?\x87J\x84?#\xb7*??.b?\xee^\x15?\xef7\x93?\xe8\x8af?\xde\xfe.?\x04\x07\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xb8a\x97\x04\xd8n\x97\x04\xe8\xea\x91\x04p\xea\x91\x04\xf8\xe9\x91\x04\xc0\xee\x91\x04X\xed\x91\x04\xd8\xee\x91\x048\xe9\x91\x04p\xed\x91\x04\xa8\xee\x91\x04H\xee\x91\x04\x88\xe7\x91\x04\x80\xef\x91\x04\x18\xe8\x91\x04\xf8\xec\x91\x04\xd0\xe7\x91\x04x\xee\x91\x04\xf0\xe5\x91\x04\xb0\xec\x91\x04@\xe1\x91\x04\xe8\xed\x91\x04\xe0\xe9\x91\x04\x10\xe4\x91\x04 \xe9\x91\x04\xb8\xe1\x91\x04\x00\xee\x91\x04(\xea\x91\x04 \xe3\x91\x04\x80\xe9\x91\x04h\xe6\x91\x04\x80\xe3\x91\x04`\xee\x91\x04\xa8\xeb\x91\x04\x18\xeb\x91\x04`\xe8\x91\x04\xb0\xe6\x91\x04\xe0\xe3\x91\x040\xee\x91\x04\xf8\xe6\x91\x04\x80\xec\x91\x04\x10\xe7\x91\x048\xe0\x91\x04\xa0\xe7\x91\x04\xb8\xea\x91\x04\x88\xea\x91\x04\xf0\xe8\x91\x040\xe8\x91\x04 \xec\x91\x04\xa0\xed\x91\x04\xd0\xea\x91\x04\xc8\xef\x91\x04\xb0\xe3\x91\x04\x08\xec\x91\x04\x98\xec\x91\x048\xec\x91\x04\x90\xe8\x91\x04p\xe7\x91\x04\x10\xea\x91\x04\x88\xed\x91\x04\xf0\xee\x91\x04\x88\xa7\xe4\x04\x08\xef\x91\x04`\xeb\x91\x04\x10\xed\x91\x04\x98\xe3\x91\x04\x00\xeb\x91\x04@\xed\x91\x04\x90\xee\x91\x048\xef\x91\x04\xb0\xef\x91\x04\xb0\xe9\x91\x04\xb8\xed\x91\x04P\xef\x91\x04X\xe7\x91\x04P\xec\x91\x04x\xe8\x91\x04\x98\xef\x91\x04\xb0\xe0\x91\x04\xe8\xe1\x91\x04h\xec\x91\x04\xe0\xef\x91\x04h\xef\x91\x04\x00\xfe\xbf\x04\xc8\xff\xbf\x04\x80\xf3\xbf\x04\xd8\xf8\xbf\x04\xc8\xf0\xbf\x04h\xfc\xbf\x04\xd8\xfb\xbf\x04\xf8\xf6\xbf\x04\xe0\xf6\xbf\x04\x00\xfb\xbf\x04\xb8\xf4\xbf\x04\xf0\xfb\xbf\x04\xc0\xf2\xbf\x040\xf5\xbf\x04\xe8\xfd\xbf\x04x\xf8\xbf\x04(\xfd\xbf\x04\x10\xf4\xbf\x04@\xfd\xbf\x04H\xf5\xbf\x04\xf8\xf9\xbf\x04\x10\xfa\xbf\x04p\xf1\xbf\x04\x90\xf2\xbf\x04\xb0\xf0\xbf\x04 \xf0\xbf\x04\xf0\xfe\xbf\x04\xc8\xf6\xbf\x04\xc8\xf3\xbf\x04X\xf4\xbf\x048\xf3\xbf\x04\xf8\xfc\xbf\x04\xa0\xfa\xbf\x04\x98\xf0\xbf\x04\xa8\xfb\xbf\x04\x10\xfd\xbf\x04\x88\xf1\xbf\x04 \xfc\xbf\x048\xfc\xbf\x04P\xff\xbf\x04\xe8\xf7\xbf\x04@\xf1\xbf\x040\xf2\xbf\x04\xb0\xf6\xbf\x04 \xf9\xbf\x04\xa0\x81\x96\x04`\x8b\x96\x04\xe8\x87\x96\x04p\x8d\x96\x040\x8b\x96\x04\xd0\x84\x96\x04 \xef\x91\x04\x98\xe0\x91\x04\xd0\xe4\x91\x04\x88\xe1\x91\x04\xc8\xe3\x91\x04\x80\xe0\x91\x04H\xe8\x91\x04\x08\xe9\x91\x04\xc8\xec\x91\x04\xc0\xeb\x91\x04\xe8\xe7\x91\x04\xf8\xe3\x91\x04P\xe9\x91\x04(\xe1\x91\x04\x18\xee\x91\x04\xc8\xe0\x91\x04(\xe4\x91\x04\xe0\xec\x91\x04\xd8\xe2\x91\x04\xd8\xeb\x91\x04(\xe7\x91\x04X\xea\x91\x04\x80\xe6\x91\x040\xeb\x91\x04\xa0\xe1\x91\x04\xb8\xe7\x91\x04\x18\xe2\x91\x04\xa0\xea\x91\x04X\xe4\x91\x04x\xeb\x91\x04H\xeb\x91\x04@\xe7\x91\x04\xe0\xe6\x91\x04\xe0\xe0\x91\x04`\xe2\x91\x04\x90\xe2\x91\x04@\xea\x91\x04\x98\xe6\x91\x04\xf8\xe0\x91\x04P\xe6\x91\x04\xd8\xe8\x91\x04\x00\xe2\x91\x04\xd0\xe1\x91\x04\xc0\xe8\x91\x04 \xe6\x91\x04\xf0\xeb\x91\x04h\xe9\x91\x04\xa8\xe2\x91\x04x\xe2\x91\x04\x90\xeb\x91\x04\x98\xe9\x91\x04h\xe3\x91\x04H\xe2\x91\x048\xe6\x91\x04\xa8\xe8\x91\x04\x00\xe8\x91\x04\xa0\xe4\x91\x04X\xe1\x91\x04h\xe0\x91\x04P\xe0\x91\x04\x10\xe1\x91\x040\xe2\x91\x04(\xed\x91\x04\x08\xe6\x91\x04\xd8\xe5\x91\x04 \xe0\x91\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3697
sg3632
g3721
sg3646
g3691
sg3641
g3728
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3708
sg3632
g3753
sg3646
g3715
sg3641
g3760
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3778
sg3632
g3768
sg3646
g3772
sg3641
g3776
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3802
sg3632
g3798
sg3646
g3809
sg3641
g3806
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3836
sg3632
g3832
sg3646
g3843
sg3641
g3840
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3802
sg3632
g3883
sg3646
g3809
sg3641
g3890
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3870
sg3632
g3898
sg3646
g3877
sg3641
g3905
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3930
sg3632
g3926
sg3646
g3937
sg3641
g3934
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3802
sg3632
g3798
sg3646
g3809
sg3641
g3806
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3870
sg3632
g3898
sg3646
g3877
sg3641
g3905
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g4003
sg3632
g3999
sg3646
g4010
sg3641
g4007
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3674
sg3632
g4016
sg3646
g3681
sg3641
g4023
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4003
sg3632
g3999
sg3646
g4010
sg3641
g4007
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3802
sg3632
g3798
sg3646
g3809
sg3641
g3806
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4003
sg3632
g4104
sg3646
g4010
sg3641
g4111
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3708
sg3632
g3753
sg3646
g3715
sg3641
g3760
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3657
sg3632
g4145
sg3646
g3664
sg3641
g4152
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3778
sg3632
g3768
sg3646
g3772
sg3641
g3776
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3836
sg3632
g3832
sg3646
g3843
sg3641
g3840
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g4065
sg3632
g4186
sg3646
g4072
sg3641
g4193
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4211
sg3632
g4201
sg3646
g4205
sg3641
g4209
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3930
sg3632
g4218
sg3646
g3937
sg3641
g4225
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3836
sg3632
g3832
sg3646
g3843
sg3641
g3840
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3802
sg3632
g3883
sg3646
g3809
sg3641
g3890
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3930
sg3632
g4218
sg3646
g3937
sg3641
g4225
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3802
sg3632
g3883
sg3646
g3809
sg3641
g3890
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g4308
sg3632
g4298
sg3646
g4302
sg3641
g4306
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3674
sg3632
g4016
sg3646
g3681
sg3641
g4023
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g4003
sg3632
g3999
sg3646
g4010
sg3641
g4007
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g4397
sg3632
g4393
sg3646
g4404
sg3641
g4401
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4211
sg3632
g4410
sg3646
g4205
sg3641
g4417
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4397
sg3632
g4393
sg3646
g4404
sg3641
g4401
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3778
sg3632
g3768
sg3646
g3772
sg3641
g3776
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g4397
sg3632
g4393
sg3646
g4404
sg3641
g4401
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g4003
sg3632
g4104
sg3646
g4010
sg3641
g4111
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g4211
sg3632
g4410
sg3646
g4205
sg3641
g4417
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3870
sg3632
g3898
sg3646
g3877
sg3641
g3905
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3657
sg3632
g4145
sg3646
g3664
sg3641
g4152
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g4397
sg3632
g4393
sg3646
g4404
sg3641
g4401
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3836
sg3632
g4607
sg3646
g3843
sg3641
g4614
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3778
sg3632
g4622
sg3646
g3772
sg3641
g4629
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g4003
sg3632
g4104
sg3646
g4010
sg3641
g4111
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3960
sg3632
g4650
sg3646
g3967
sg3641
g4657
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3697
sg3632
g3721
sg3646
g3691
sg3641
g3728
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3778
sg3632
g3768
sg3646
g3772
sg3641
g3776
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4003
sg3632
g3999
sg3646
g4010
sg3641
g4007
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g4065
sg3632
g4186
sg3646
g4072
sg3641
g4193
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3697
sg3632
g3721
sg3646
g3691
sg3641
g3728
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3740
sg3632
g4756
sg3646
g3747
sg3641
g4763
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3870
sg3632
g3898
sg3646
g3877
sg3641
g3905
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3870
sg3632
g3898
sg3646
g3877
sg3641
g3905
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3836
sg3632
g4607
sg3646
g3843
sg3641
g4614
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4003
sg3632
g4104
sg3646
g4010
sg3641
g4111
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3778
sg3632
g4622
sg3646
g3772
sg3641
g4629
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g4211
sg3632
g4201
sg3646
g4205
sg3641
g4209
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3637
sg3632
g4875
sg3646
g3647
sg3641
g4882
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3930
sg3632
g3926
sg3646
g3937
sg3641
g3934
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4308
sg3632
g4916
sg3646
g4302
sg3641
g4923
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3802
sg3632
g3798
sg3646
g3809
sg3641
g3806
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3778
sg3632
g4622
sg3646
g3772
sg3641
g4629
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3960
sg3632
g4650
sg3646
g3967
sg3641
g4657
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3859
sg3632
g4970
sg3646
g3853
sg3641
g4977
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3778
sg3632
g3768
sg3646
g3772
sg3641
g3776
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3657
sg3632
g4145
sg3646
g3664
sg3641
g4152
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3836
sg3632
g4607
sg3646
g3843
sg3641
g4614
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g4211
sg3632
g4410
sg3646
g4205
sg3641
g4417
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3836
sg3632
g3832
sg3646
g3843
sg3641
g3840
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4211
sg3632
g4410
sg3646
g4205
sg3641
g4417
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3740
sg3632
g4756
sg3646
g3747
sg3641
g4763
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3657
sg3632
g4145
sg3646
g3664
sg3641
g4152
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g4308
sg3632
g4298
sg3646
g4302
sg3641
g4306
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4397
sg3632
g4393
sg3646
g4404
sg3641
g4401
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3836
sg3632
g3832
sg3646
g3843
sg3641
g3840
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3637
sg3632
g4875
sg3646
g3647
sg3641
g4882
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g4308
sg3632
g4298
sg3646
g4302
sg3641
g4306
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g4397
sg3632
g5193
sg3646
g4404
sg3641
g5200
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3637
sg3632
g4875
sg3646
g3647
sg3641
g4882
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3836
sg3632
g4607
sg3646
g3843
sg3641
g4614
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g4308
sg3632
g4916
sg3646
g4302
sg3641
g4923
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g4065
sg3632
g4186
sg3646
g4072
sg3641
g4193
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3697
sg3632
g3721
sg3646
g3691
sg3641
g3728
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g4308
sg3632
g4916
sg3646
g4302
sg3641
g4923
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3930
sg3632
g3926
sg3646
g3937
sg3641
g3934
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g4048
sg3632
g5325
sg3646
g4055
sg3641
g5332
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3819
sg3632
g5340
sg3646
g3826
sg3641
g5347
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3930
sg3632
g3926
sg3646
g3937
sg3641
g3934
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g4048
sg3632
g5325
sg3646
g4055
sg3641
g5332
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g4397
sg3632
g5193
sg3646
g4404
sg3641
g5200
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g4211
sg3632
g4201
sg3646
g4205
sg3641
g4209
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4397
sg3632
g5193
sg3646
g4404
sg3641
g5200
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3674
sg3632
g4016
sg3646
g3681
sg3641
g4023
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3859
sg3632
g3849
sg3646
g3853
sg3641
g3857
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4397
sg3632
g5193
sg3646
g4404
sg3641
g5200
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g4048
sg3632
g5325
sg3646
g4055
sg3641
g5332
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3708
sg3632
g3753
sg3646
g3715
sg3641
g3760
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4397
sg3632
g5193
sg3646
g4404
sg3641
g5200
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g4211
sg3632
g4410
sg3646
g4205
sg3641
g4417
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3674
sg3632
g4016
sg3646
g3681
sg3641
g4023
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3960
sg3632
g4650
sg3646
g3967
sg3641
g4657
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4048
sg3632
g5325
sg3646
g4055
sg3641
g5332
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3836
sg3632
g4607
sg3646
g3843
sg3641
g4614
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3740
sg3632
g4756
sg3646
g3747
sg3641
g4763
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g4003
sg3632
g4104
sg3646
g4010
sg3641
g4111
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3960
sg3632
g4650
sg3646
g3967
sg3641
g4657
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3802
sg3632
g3883
sg3646
g3809
sg3641
g3890
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g4211
sg3632
g4201
sg3646
g4205
sg3641
g4209
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g4308
sg3632
g4298
sg3646
g4302
sg3641
g4306
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3708
sg3632
g3753
sg3646
g3715
sg3641
g3760
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3930
sg3632
g4218
sg3646
g3937
sg3641
g4225
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g4048
sg3632
g5325
sg3646
g4055
sg3641
g5332
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3960
sg3632
g4650
sg3646
g3967
sg3641
g4657
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3819
sg3632
g5340
sg3646
g3826
sg3641
g5347
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3802
sg3632
g3883
sg3646
g3809
sg3641
g3890
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3859
sg3632
g4970
sg3646
g3853
sg3641
g4977
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3819
sg3632
g5340
sg3646
g3826
sg3641
g5347
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3740
sg3632
g4756
sg3646
g3747
sg3641
g4763
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3859
sg3632
g4970
sg3646
g3853
sg3641
g4977
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3697
sg3632
g3721
sg3646
g3691
sg3641
g3728
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3859
sg3632
g4970
sg3646
g3853
sg3641
g4977
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3674
sg3632
g4016
sg3646
g3681
sg3641
g4023
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3657
sg3632
g4145
sg3646
g3664
sg3641
g4152
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g4308
sg3632
g4916
sg3646
g4302
sg3641
g4923
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3859
sg3632
g4970
sg3646
g3853
sg3641
g4977
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3930
sg3632
g3926
sg3646
g3937
sg3641
g3934
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4003
sg3632
g3999
sg3646
g4010
sg3641
g4007
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3697
sg3632
g3687
sg3646
g3691
sg3641
g3695
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3778
sg3632
g4622
sg3646
g3772
sg3641
g4629
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4308
sg3632
g4916
sg3646
g4302
sg3641
g4923
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3708
sg3632
g3753
sg3646
g3715
sg3641
g3760
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3819
sg3632
g5340
sg3646
g3826
sg3641
g5347
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g4065
sg3632
g4186
sg3646
g4072
sg3641
g4193
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4065
sg3632
g4186
sg3646
g4072
sg3641
g4193
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3930
sg3632
g4218
sg3646
g3937
sg3641
g4225
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3637
sg3632
g4875
sg3646
g3647
sg3641
g4882
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3802
sg3632
g3798
sg3646
g3809
sg3641
g3806
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3778
sg3632
g4622
sg3646
g3772
sg3641
g4629
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g4048
sg3632
g4044
sg3646
g4055
sg3641
g4052
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3870
sg3632
g3866
sg3646
g3877
sg3641
g3874
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3819
sg3632
g5340
sg3646
g3826
sg3641
g5347
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3740
sg3632
g4756
sg3646
g3747
sg3641
g4763
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3637
sg3632
g4875
sg3646
g3647
sg3641
g4882
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g4211
sg3632
g4201
sg3646
g4205
sg3641
g4209
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3930
sg3632
g4218
sg3646
g3937
sg3641
g4225
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g4308
sg3632
g4298
sg3646
g4302
sg3641
g4306
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I80790352
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\xf0\xe7\xeb\x12\x18\xe8\xeb\x12\xe0\x01\xec\x12\x80\xe9\xeb\x12h\xe8\xeb\x12\xa0\xf6f\x04\xa8\xe9\xeb\x12\xa0-\xfd\x0c \x0c\xeb\x12P\x0c\xeb\x12\x00/\xfd\x0c\xa0-\xfd\x0c\x90\xe8\xeb\x12\xb8\xe8\xeb\x12\xe0\xe8\xeb\x12\x08\xe9\xeb\x12\x18\x02\xec\x12\x90\xe8\xeb\x12P\x0c\xeb\x12\x18\xe8\xeb\x12P\x02\xec\x12\xa0\xf6f\x04\x18\xe8\xeb\x12@\r\xeb\x120\x03\xec\x12 \x0c\xeb\x120\xe9\xeb\x12 \xea\xeb\x12\xe0\x01\xec\x12\xf0\xe7\xeb\x12\x18\x02\xec\x12@\xe8\xeb\x12\xc0-\xfd\x0c\xa0-\xfd\x0c\xb8\xe8\xeb\x12\x90\xe8\xeb\x12 \xea\xeb\x12P\x02\xec\x12\x80\x0c\xeb\x12\xa0-\xfd\x0c\x00/\xfd\x0ch\xe8\xeb\x12\x00/\xfd\x0c\xe0\x01\xec\x12\xe0\x0c\xeb\x120\xe9\xeb\x12\x80\x0c\xeb\x12\xf8\x02\xec\x12\x80\xe9\xeb\x12\xb8\xe8\xeb\x12\x00/\xfd\x0c\xe0\xe8\xeb\x12\xf0\xe7\xeb\x12\x80\x0c\xeb\x12\xc0-\xfd\x0c\x00/\xfd\x0c\xa0-\xfd\x0c\xa0\xf6f\x040\xe9\xeb\x12\xc0-\xfd\x0c\xe0\x0c\xeb\x12h\xe8\xeb\x12\x08\xe9\xeb\x12\xa0"\xfd\x0c\xb0\x0c\xeb\x12\xf0\xe7\xeb\x12\x18\x02\xec\x12 \x0c\xeb\x12\xd0\xe9\xeb\x12H\xea\xeb\x12 \xea\xeb\x12\xe0\xe8\xeb\x12\x90\xe8\xeb\x12\xb0\x0c\xeb\x12h\xe8\xeb\x12\xc0\x02\xec\x12 \x0c\xeb\x12\x18\x02\xec\x12\x08\xe9\xeb\x120\x03\xec\x12P\x0c\xeb\x12\x00\x0e\xeb\x12\xb8\xe8\xeb\x12\x90\xe8\xeb\x12\x18\xe8\xeb\x12P\x0c\xeb\x12\xf8\xe9\xeb\x12 \x0c\xeb\x12\x18\xe8\xeb\x12\xb8\xe8\xeb\x12\x18\xe8\xeb\x12\x08\xe9\xeb\x12h\xe8\xeb\x12 \x0c\xeb\x120\xe9\xeb\x12\xe0\x01\xec\x12\xb8\xe8\xeb\x12P\x0c\xeb\x12\xa0\xf6f\x04\xf0\xe7\xeb\x12h\xe8\xeb\x12P\x02\xec\x12\x18\xe8\xeb\x12\xc0-\xfd\x0c\x88\x02\xec\x12\xc0-\xfd\x0c\xe0#\xfd\x0c \xea\xeb\x12\x00/\xfd\x0cP\x02\xec\x12 \x0c\xeb\x120\xe9\xeb\x12\xb0\x0c\xeb\x120\xe9\xeb\x12\xe0\x0c\xeb\x12\xa0-\xfd\x0cP\x02\xec\x12\x80\x0c\xeb\x12\xe0\x01\xec\x12P\x0c\xeb\x12\x80\x0c\xeb\x12\xe0\x01\xec\x12\xa8\xe9\xeb\x12P\x0c\xeb\x12\x08\xe9\xeb\x12\x90\xe8\xeb\x12P\x0c\xeb\x12P\x02\xec\x12\xe0\xe8\xeb\x12\xa0\xf6f\x04\xf0\xe7\xeb\x12\xe0\x01\xec\x12 \x0c\xeb\x12P\x02\xec\x12\x18\x02\xec\x12\xf8\xe9\xeb\x12\x18\x02\xec\x12\xc0\x02\xec\x12\x00/\xfd\x0c\xf8\x02\xec\x12@\xe8\xeb\x12\xb0\x0c\xeb\x12H\xea\xeb\x12h\xe8\xeb\x12P\x02\xec\x12\x80\x0c\xeb\x12\xc0-\xfd\x0c0\x0e\xeb\x12\xf0\xe7\xeb\x12\xa0\xf6f\x04\xe0\xe8\xeb\x120\xe9\xeb\x12\xb8\xe8\xeb\x12 \x0c\xeb\x12\x90\xe8\xeb\x12\xe0\x01\xec\x12\x18\x02\xec\x12\xd0\r\xeb\x12\xe0\xe8\xeb\x12\xe0#\xfd\x0c\xb0\x0c\xeb\x12\xe0\x01\xec\x12\xa0\xf6f\x04\x00/\xfd\x0c@\xe8\xeb\x12\x08\xe9\xeb\x12h\xe8\xeb\x12\xa0\xf6f\x04\xb8\xe8\xeb\x12\x80\x0c\xeb\x12\xe0\x01\xec\x12 \x0c\xeb\x120\xe9\xeb\x12@\xe8\xeb\x12\xb0\x0c\xeb\x120\xe9\xeb\x12\xb8\xe8\xeb\x120\x0e\xeb\x12\xf0\xe7\xeb\x12\xa0\r\xeb\x12\xb0\x0c\xeb\x12@\xe8\xeb\x12h\xe8\xeb\x12\x90\xe8\xeb\x12\x80\x0c\xeb\x12@\xe8\xeb\x12P\x0c\xeb\x12\xa0-\xfd\x0c\xf0\xe7\xeb\x12\xa0-\xfd\x0c\xc0-\xfd\x0c\x80\xe9\xeb\x120\x03\xec\x12@\xe8\xeb\x12\xf8\xe9\xeb\x12\xb0\x0c\xeb\x12\xd0\r\xeb\x12\x18\x02\xec\x12\x80\x0c\xeb\x12\xe0\xe8\xeb\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x00\xcc\xec\x12\xe0U\xcf\x0c\x00\xcb\xec\x12\xe0\xcb\xec\x12\xc0\xcb\xec\x12\x80\xcb\xec\x12\xa0\xcb\xec\x12 \xcc\xec\x12`\xcd\xec\x12@\xcc\xec\x12@\xcd\xec\x12\x80\xcd\xec\x12 \xcb\xec\x12\xa0\xcd\xec\x12\xc0\xcd\xec\x12\xe0\xcd\xec\x12@\xce\xec\x12`\xce\xec\x12\xa0\xcc\xec\x12\xa0\xce\xec\x12\x80\xce\xec\x12\xe0\xca\xec\x12\xc0\xce\xec\x12\xe0\xce\xec\x12@\xcf\xec\x12`\xcf\xec\x12\xc0\xca\xec\x12\x80\xcc\xec\x12\xc0\xcc\xec\x12 \xce\xec\x12\x80\xcf\xec\x12 \xcf\xec\x12\x00\xcd\xec\x12\x00\xcf\xec\x12\x00\xce\xec\x12\xa0\xca\xec\x12\xa0\xcf\xec\x12\xe0\xcc\xec\x12 \xcd\xec\x12`\xcb\xec\x12@\xcb\xec\x12\xe0\xcf\xec\x12\xc0\xcf\xec\x12 g\xfc\x0c\xe0\xe0f\x04`\xca\xec\x12\xc0\x01\x03\x13 \x01\x03\x13\xa0\x01\x03\x13`\x02\x03\x13\xa0\x02\x03\x13`\x01\x03\x13\xe0\x02\x03\x13\xc0\x02\x03\x13 \x03\x03\x13@\x03\x03\x13\x00\x02\x03\x13 \x02\x03\x13`\x03\x03\x13\xc0\x03\x03\x13\xa0\x03\x03\x13\x80\x01\x03\x13 \x04\x03\x13@\x04\x03\x13\xc0\x00\x03\x13`\x00\x03\x13`\x04\x03\x13\xc0\x04\x03\x13\xa0\x04\x03\x13\x00\x03\x03\x13\xe0\x04\x03\x13@\x05\x03\x13`\x05\x03\x13\x80\x03\x03\x13\xa0\x05\x03\x13\xc0\x05\x03\x13@\x01\x03\x13`\xcc\xec\x12\xe0\x05\x03\x13@\x06\x03\x13@\x00\x03\x13\x00\x05\x03\x13\xa0\x06\x03\x13\xc0\x06\x03\x13 \x00\x03\x13 \x05\x03\x13\x00\x07\x03\x13`\x06\x03\x13 \x06\x03\x13\x80\x07\x03\x13\x80\x04\x03\x13\x80\x02\x03\x13\xe0\x03\x03\x13\xe0\x07\x03\x13\xa0\x00\x03\x13\xe0\x00\x03\x13`\x08\x03\x13\x80\x08\x03\x13\xa0\x07\x03\x13\xe0\x01\x03\x13`\x07\x03\x13\xe0\x08\x03\x13\xe0\x06\x03\x13\x80\x06\x03\x13\xc0\x07\x03\x13`\t\x03\x13\xc0\x08\x03\x13@\x08\x03\x13\xe0\t\x03\x13 \x07\x03\x13 \n\x03\x13@\n\x03\x13\xc0\t\x03\x13\xa0\t\x03\x13`\n\x03\x13\x00\x08\x03\x13\x00\x04\x03\x13\x00\x0b\x03\x13 \x0b\x03\x13\x80\t\x03\x13@\x0b\x03\x13\xe0\n\x03\x13\x80\n\x03\x13\x80\x00\x03\x13\xe0\x0b\x03\x13\x00\x0c\x03\x13\xa0\x0b\x03\x13 \x0c\x03\x13\x00\t\x03\x13\x80\x0c\x03\x13\xa0\x0c\x03\x13@\x07\x03\x13 \x08\x03\x13 \t\x03\x13 \r\x03\x13@\r\x03\x13\x00\x06\x03\x13\x80\x0b\x03\x13@\x02\x03\x13\xc0\r\x03\x13@\t\x03\x13`\r\x03\x13 \x0e\x03\x13@\x0e\x03\x13\xc0\n\x03\x13\xc0\x0c\x03\x13\xe0\x0c\x03\x13\xc0\x0e\x03\x13\xe0\x0e\x03\x13@\x0c\x03\x13`\x0e\x03\x13@\x0f\x03\x13\x00\x0e\x03\x13\x00\r\x03\x13\x80\r\x03\x13`\x0b\x03\x13\xc0\x0f\x03\x13\x80\x0e\x03\x13\x80\x05\x03\x13\xa0\r\x03\x13\xa0\x0e\x03\x13 \x0f\x03\x13\xa0\n\x03\x13\xe0\x0f\x03\x13\x00\x0f\x03\x13\xe0\r\x03\x13\x00\x01\x03\x13`\x0c\x03\x13\x80\x0f\x03\x13\xa0\x08\x03\x13\xc0\x0b\x03\x13`\x0f\x03\x13\x00\n\x03\x13@\xc0)\x13\xe0\xc1)\x13@\xc1)\x13\xc0\xc1)\x13`\xc2)\x13\xa0\xc2)\x13\x80\xc2)\x13\x00\xc3)\x13 \xc3)\x13@\xc3)\x13`\xc3)\x13 \xc1)\x13`\xc0)\x13\x80\xc3)\x13\xe0\xc3)\x13\xc0\xc3)\x13 \xc4)\x13\x00\xc4)\x13`\xc4)\x13@\xc4)\x13\xa0\xc4)\x13\xc0\xc4)\x13\xe0\xc4)\x13\xc0\xc0)\x13\xa0\xc0)\x13@\xc5)\x13`\xc5)\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xfb\x8a\x88?\xa1\x87Y?\xf8`\x15?K+"?V[\x95?\xaf\x88f?\xafof?X{\x97?\xf0k\x86?N\xb7j?\xa4\x07@?\xbc\x92H?\x06cU?\x0f\xf9n?\xac\x05\x80?\x8b.b?\xbfs\x86?\x9d\xb2*?\xdb\xf4\x8e?)r7?1%\xa2?\x11\xfcn?1\xed.?)\x8e\x88?\xcepf?\xa1\x17Q?\xf6\xd0L?\xa0\xe4]?\x86\x1e\x11?\xdfPD?\x8a}7?=b\x15?V\x8bf?\xd7\x02\x80?\x0baU?\xf6\xaaY?\x97\xa2Y?\xe3\x8d\x88?\x94\x8df?\xb3\xb1j?\x8f\xae\x8a??aU?\xeb\xd8L?\xf7d\x15?<\xddL?\xbe/b?Z{7?\xfd\xe9\x1d?Gt&?k@3?\x1f\xc9{?\xe4I\x84? )b?\x98bU?gfs?\xf2/"?\xdb\xd0\x9b?\xc47\x93?R\r@?\xc1<s?\n\xf8??\x0e\xe4\x9d?\xc4\xaf\x8a?\xf5\r@?\x94ZU?h\xd7L?\x96$\x82?\xd9@3?m)\x82?\x8483?X[\x95?bs&?\xe5\x05\xa0?tD3?\x8a\xc8;?\xac\xc8;?P\t/?(\x7fH?i\xc8{?\xeb\xfb.?"\xb9j?\xb5\x95H?\xd9\xd0L?\x9f\xd6L?\x82\x85H?.\xf8n?j0"?\xf2m&?\xbe\x16b?\xdf\xd5L?\xb5\xce;?\x0fMD?\x07\xaf\x8a?\x96\xea]?\x86rf?+p&?\xb3\x1dQ?\xeb*b?\x8a?s?\x1c\xcc;?\xee\xf4\x8e?\x94\x04\x80?.G3?b\x17Q?\xda\xf6.?\xf7\xa6Y?u$\x82?\xf9.b?\x91\x07^?2[\x95?\xdd\xb7j?\xa6\'b?-\xc7{?\xc3\xd1\x0c?\x81\x8a7?\x87(b?\x95\xf9n?\x16\xa4Y?\xf0OD?\x99\xa7Y?\n\xa7Y?.\xd7\x0c?\x80\xb6j?X\xaf*?\x97\xa6Y?X\x92H?\t\xa9Y?\xbf\x8e\x88?|=3?VVU?\xcf\x94H?\xf7/"?\x8dJ"?\xe7G\x84?\x02UU?q\xd9L?YJD?\x8a\xc8;?PA3?\xff&\x82?\x0c\x00/?\x03Es?\x0e\x00@?\x1b\x17\x91?\x15\x8c\x97?7\x19Q?!\x08\x80?\xf8\x06@?\xcf\xb3*?\x1ecU?%\xbc*?\x92\x877?\\\x80w?\xaf\xf6.?\xdb?s?\x07\xfc.?+tf?\xc7\xd9L?\x96\xb5j?0\xf7n?#@3?=\xb4*?C\x8b&?\x01,"?\xb7\xb7*?\x9f.b?\x01\xd3\x8c?H.b?k"@?./b?\x97\xfa.?#\xc9;?\xc1>s?\xd4[\x15?l\xfc.?\xa30"?\x7f\xe4]?\x84\xa4Y?L\x1eQ?\x88\xe8]?A\x13/?\x92\x1d\x11?\xbd<s?9\xeb]?1@3??\xd4\x0c?\xaa\xfd]?k\xec]?\xef\x1e\x11?#\x92H?\xc2\xa4\x19?\xf8 \x11?\x93\xd5L?\x13QD?\xc2\xdbL?\xc2\xd9L?+\x18Q?\xc4\xaej?K\xd1j?y\t@?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\x18\xfb\xbf\x04\xe0\xf9\xbf\x04\xe0\x8c\xbf\x04X\x84\xbf\x04H\x88\xbf\x04P\x83\xbf\x04\x80\x89\xbf\x04\xf8\x80\xbf\x04\xb0\x86\xbf\x04 \x83\xbf\x048\x8c\xbf\x04\x00\x85\xbf\x04\x08\x89\xbf\x04x\x8e\xbf\x04h\x8f\xbf\x04H\x8e\xbf\x04\xc0\x85\xbf\x04h\x83\xbf\x04P\x8f\xbf\x04`\x8e\xbf\x04p\x87\xbf\x04\x80\x8f\xbf\x04\xf0\x82\xbf\x04\x80\x8c\xbf\x04\xa0\x8a\xbf\x04\xf0\x8e\xbf\x040\x8b\xbf\x04\x98\x8f\xbf\x04 \x8f\xbf\x04(\x84\xbf\x04\x90\x88\xbf\x04(\x8a\xbf\x04\xd0\x87\xbf\x04\xb0\x8c\xbf\x04 \x89\xbf\x040\x8e\xbf\x04\x18\x8b\xbf\x04\x10\x8a\xbf\x04\x08\x8c\xbf\x04Py\xe2\x04Hx\xe2\x04\x98\x7f\xe2\x04Xz\xe2\x048\x7f\xe2\x04\xe0y\xe2\x04\x98y\xe2\x04\xb8}\xe2\x04\xe8t\xe2\x04Pp\xe2\x04\x08v\xe2\x04X}\xe2\x04@w\xe2\x048y\xe2\x04\xe8w\xe2\x04\xb8q\xe2\x04\xd0z\xe2\x04\x00u\xe2\x04 |\xe2\x04\x80s\xe2\x04\xf8y\xe2\x04\xc0u\xe2\x04\xa0q\xe2\x04xu\xe2\x04@q\xe2\x04\xd8u\xe2\x04Hu\xe2\x04\xb8w\xe2\x040u\xe2\x04\xb0v\xe2\x04x~\xe2\x04\x88w\xe2\x04\x98v\xe2\x04pw\xe2\x04Xt\xe2\x04\xf8|\xe2\x04\xc8v\xe2\x04\xa8x\xe2\x04\xc0x\xe2\x04(q\xe2\x04\x90u\xe2\x04\x18x\xe2\x048|\xe2\x04xx\xe2\x04\x90{\xe2\x04 p\xe2\x04\x00~\xe2\x04\xa8~\xe2\x04\x10w\xe2\x04\xf8p\xe2\x04\x88t\xe2\x04Pv\xe2\x04P\x7f\xe2\x04\xb8t\xe2\x04xr\xe2\x04\x18~\xe2\x04\xd8x\xe2\x04pz\xe2\x04`u\xe2\x048p\xe2\x04\xe0|\xe2\x04\x00{\xe2\x04 y\xe2\x04\xa0}\xe2\x040{\xe2\x04\x98|\xe2\x04p}\xe2\x04\x90x\xe2\x04\x80y\xe2\x04\xf8v\xe2\x04\xd0}\xe2\x04\xf8s\xe2\x04\x08|\xe2\x04@z\xe2\x04 v\xe2\x04\x18{\xe2\x04hy\xe2\x04pq\xe2\x04\x18r\xe2\x04(}\xe2\x04\xe8z\xe2\x04\x88}\xe2\x04\xc0~\xe2\x04\x80p\xe2\x040~\xe2\x04\x10t\xe2\x04\x18u\xe2\x04\x98p\xe2\x04`{\xe2\x04\xd8~\xe2\x04\xa0t\xe2\x04\x90~\xe2\x04\xc8\x7f\xe2\x04H~\xe2\x04`~\xe2\x04\xb0y\xe2\x04\xc8|\xe2\x04hp\xe2\x04\xe0\x7f\xe2\x04\xa8{\xe2\x04Xq\xe2\x04h|\xe2\x04\x80v\xe2\x04pt\xe2\x04\xf0~\xe2\x04\xc0{\xe2\x04\xf0u\xe2\x04hv\xe2\x04H{\xe2\x04\x80\x7f\xe2\x04\xf0{\xe2\x04P|\xe2\x04\xd0w\xe2\x04\xd0q\xe2\x04\x80|\xe2\x04(z\xe2\x04\xb0\x7f\xe2\x04\x00x\xe2\x04\xe8}\xe2\x04`x\xe2\x04\xc8y\xe2\x04\x10z\xe2\x04@}\xe2\x04\xa8u\xe2\x04h\x7f\xe2\x04\xf0x\xe2\x04\xa0w\xe2\x040x\xe2\x04\xd8{\xe2\x04 \x7f\xe2\x04@t\xe2\x04\xa0z\xe2\x04\x08y\xe2\x04\x88q\xe2\x04\x10}\xe2\x04Xw\xe2\x048v\xe2\x04\xc0\x88\xbf\x04\x08\x83\xbf\x04\xf0\x85\xbf\x04\xe8\x81\xbf\x04p\x8d\xbf\x04\x88\x8d\xbf\x04\xd0\x81\xbf\x048\x83\xbf\x04\xe0\x80\xbf\x04`\x82\xbf\x04\xa0\x84\xbf\x04\xa8\x82\xbf\x04h\x89\xbf\x04\xc8\x80\xbf\x04@\x84\xbf\x04(\x8d\xbf\x04X\x8d\xbf\x04\xc8\x83\xbf\x04\xe8\x87\xbf\x04\xc0\x8e\xbf\x04@\x87\xbf\x04 \x8c\xbf\x04x\x88\xbf\x04x\x8b\xbf\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6497
sg6370
g6557
sg6384
g6504
sg6379
g6564
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6610
sg6370
g6606
sg6384
g6617
sg6379
g6614
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6627
sg6370
g6623
sg6384
g6634
sg6379
g6631
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6644
sg6370
g6640
sg6384
g6651
sg6379
g6648
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6531
sg6370
g6670
sg6384
g6538
sg6379
g6677
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6395
sg6370
g6685
sg6384
g6402
sg6379
g6692
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6704
sg6370
g6700
sg6384
g6711
sg6379
g6708
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6395
sg6370
g6685
sg6384
g6402
sg6379
g6692
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6766
sg6370
g6756
sg6384
g6760
sg6379
g6764
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6790
sg6370
g6786
sg6384
g6797
sg6379
g6794
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6627
sg6370
g6623
sg6384
g6634
sg6379
g6631
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6644
sg6370
g6842
sg6384
g6651
sg6379
g6849
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6435
sg6370
g6857
sg6384
g6429
sg6379
g6864
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6766
sg6370
g6872
sg6384
g6760
sg6379
g6879
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6497
sg6370
g6557
sg6384
g6504
sg6379
g6564
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6576
sg6370
g6913
sg6384
g6583
sg6379
g6920
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6627
sg6370
g6623
sg6384
g6634
sg6379
g6631
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6704
sg6370
g6941
sg6384
g6711
sg6379
g6948
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6960
sg6370
g6956
sg6384
g6967
sg6379
g6964
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6497
sg6370
g6557
sg6384
g6504
sg6379
g6564
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6446
sg6370
g6999
sg6384
g6453
sg6379
g7006
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6395
sg6370
g6685
sg6384
g6402
sg6379
g6692
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6790
sg6370
g7053
sg6384
g6797
sg6379
g7060
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6960
sg6370
g7068
sg6384
g6967
sg6379
g7075
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6704
sg6370
g6700
sg6384
g6711
sg6379
g6708
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6486
sg6370
g7122
sg6384
g6480
sg6379
g7129
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6610
sg6370
g7137
sg6384
g6617
sg6379
g7144
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6375
sg6370
g7152
sg6384
g6385
sg6379
g7159
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6960
sg6370
g6956
sg6384
g6967
sg6379
g6964
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6766
sg6370
g6756
sg6384
g6760
sg6379
g6764
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6486
sg6370
g7122
sg6384
g6480
sg6379
g7129
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6497
sg6370
g6557
sg6384
g6504
sg6379
g6564
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6463
sg6370
g7219
sg6384
g6470
sg6379
g7226
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6790
sg6370
g7053
sg6384
g6797
sg6379
g7060
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6766
sg6370
g6872
sg6384
g6760
sg6379
g6879
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6395
sg6370
g6685
sg6384
g6402
sg6379
g6692
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6446
sg6370
g6999
sg6384
g6453
sg6379
g7006
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6627
sg6370
g6623
sg6384
g6634
sg6379
g6631
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6790
sg6370
g6786
sg6384
g6797
sg6379
g6794
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g7316
sg6370
g7312
sg6384
g7323
sg6379
g7320
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6375
sg6370
g7152
sg6384
g6385
sg6379
g7159
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6644
sg6370
g6640
sg6384
g6651
sg6379
g6648
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6514
sg6370
g7355
sg6384
g6521
sg6379
g7362
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6593
sg6370
g7370
sg6384
g6600
sg6379
g7377
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6644
sg6370
g6842
sg6384
g6651
sg6379
g6849
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6627
sg6370
g6623
sg6384
g6634
sg6379
g6631
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6610
sg6370
g7137
sg6384
g6617
sg6379
g7144
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6576
sg6370
g6913
sg6384
g6583
sg6379
g6920
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g7316
sg6370
g7437
sg6384
g7323
sg6379
g7444
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6644
sg6370
g6842
sg6384
g6651
sg6379
g6849
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6627
sg6370
g7504
sg6384
g6634
sg6379
g7511
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6766
sg6370
g6872
sg6384
g6760
sg6379
g6879
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6531
sg6370
g6670
sg6384
g6538
sg6379
g6677
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6960
sg6370
g6956
sg6384
g6967
sg6379
g6964
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6593
sg6370
g7370
sg6384
g6600
sg6379
g7377
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6576
sg6370
g6913
sg6384
g6583
sg6379
g6920
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6610
sg6370
g6606
sg6384
g6617
sg6379
g6614
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6514
sg6370
g7355
sg6384
g6521
sg6379
g7362
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6593
sg6370
g7370
sg6384
g6600
sg6379
g7377
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6627
sg6370
g7504
sg6384
g6634
sg6379
g7511
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6446
sg6370
g6999
sg6384
g6453
sg6379
g7006
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6790
sg6370
g6786
sg6384
g6797
sg6379
g6794
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6593
sg6370
g7370
sg6384
g6600
sg6379
g7377
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6531
sg6370
g6670
sg6384
g6538
sg6379
g6677
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6375
sg6370
g7152
sg6384
g6385
sg6379
g7159
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6446
sg6370
g6999
sg6384
g6453
sg6379
g7006
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6704
sg6370
g6700
sg6384
g6711
sg6379
g6708
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6766
sg6370
g6872
sg6384
g6760
sg6379
g6879
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6766
sg6370
g6872
sg6384
g6760
sg6379
g6879
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6463
sg6370
g7219
sg6384
g6470
sg6379
g7226
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6627
sg6370
g7504
sg6384
g6634
sg6379
g7511
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6486
sg6370
g7122
sg6384
g6480
sg6379
g7129
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6704
sg6370
g6941
sg6384
g6711
sg6379
g6948
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6790
sg6370
g7053
sg6384
g6797
sg6379
g7060
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g7316
sg6370
g7312
sg6384
g7323
sg6379
g7320
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6790
sg6370
g7053
sg6384
g6797
sg6379
g7060
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6395
sg6370
g6685
sg6384
g6402
sg6379
g6692
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6704
sg6370
g6941
sg6384
g6711
sg6379
g6948
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6960
sg6370
g7068
sg6384
g6967
sg6379
g7075
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6412
sg6370
g8026
sg6384
g6419
sg6379
g8033
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6960
sg6370
g7068
sg6384
g6967
sg6379
g7075
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6412
sg6370
g8026
sg6384
g6419
sg6379
g8033
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6531
sg6370
g6670
sg6384
g6538
sg6379
g6677
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6627
sg6370
g7504
sg6384
g6634
sg6379
g7511
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6704
sg6370
g6700
sg6384
g6711
sg6379
g6708
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6610
sg6370
g7137
sg6384
g6617
sg6379
g7144
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6375
sg6370
g7152
sg6384
g6385
sg6379
g7159
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6412
sg6370
g8026
sg6384
g6419
sg6379
g8033
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6514
sg6370
g7355
sg6384
g6521
sg6379
g7362
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6704
sg6370
g6941
sg6384
g6711
sg6379
g6948
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6644
sg6370
g6842
sg6384
g6651
sg6379
g6849
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6610
sg6370
g6606
sg6384
g6617
sg6379
g6614
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6644
sg6370
g6640
sg6384
g6651
sg6379
g6648
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6486
sg6370
g7122
sg6384
g6480
sg6379
g7129
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6704
sg6370
g6700
sg6384
g6711
sg6379
g6708
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6435
sg6370
g6857
sg6384
g6429
sg6379
g6864
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g7316
sg6370
g7437
sg6384
g7323
sg6379
g7444
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6644
sg6370
g6842
sg6384
g6651
sg6379
g6849
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6704
sg6370
g6941
sg6384
g6711
sg6379
g6948
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6960
sg6370
g6956
sg6384
g6967
sg6379
g6964
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6766
sg6370
g6756
sg6384
g6760
sg6379
g6764
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g7316
sg6370
g7312
sg6384
g7323
sg6379
g7320
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6463
sg6370
g7219
sg6384
g6470
sg6379
g7226
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6610
sg6370
g6606
sg6384
g6617
sg6379
g6614
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6790
sg6370
g7053
sg6384
g6797
sg6379
g7060
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6514
sg6370
g7355
sg6384
g6521
sg6379
g7362
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6576
sg6370
g6913
sg6384
g6583
sg6379
g6920
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6644
sg6370
g6640
sg6384
g6651
sg6379
g6648
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6576
sg6370
g6913
sg6384
g6583
sg6379
g6920
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6610
sg6370
g7137
sg6384
g6617
sg6379
g7144
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g7316
sg6370
g7437
sg6384
g7323
sg6379
g7444
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6412
sg6370
g8026
sg6384
g6419
sg6379
g8033
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6463
sg6370
g7219
sg6384
g6470
sg6379
g7226
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6486
sg6370
g7122
sg6384
g6480
sg6379
g7129
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6627
sg6370
g7504
sg6384
g6634
sg6379
g7511
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6446
sg6370
g6999
sg6384
g6453
sg6379
g7006
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6463
sg6370
g7219
sg6384
g6470
sg6379
g7226
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6593
sg6370
g7370
sg6384
g6600
sg6379
g7377
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6960
sg6370
g7068
sg6384
g6967
sg6379
g7075
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6412
sg6370
g8026
sg6384
g6419
sg6379
g8033
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6514
sg6370
g7355
sg6384
g6521
sg6379
g7362
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6790
sg6370
g6786
sg6384
g6797
sg6379
g6794
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6435
sg6370
g6857
sg6384
g6429
sg6379
g6864
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g7316
sg6370
g7312
sg6384
g7323
sg6379
g7320
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6790
sg6370
g6786
sg6384
g6797
sg6379
g6794
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g7316
sg6370
g7437
sg6384
g7323
sg6379
g7444
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6375
sg6370
g7152
sg6384
g6385
sg6379
g7159
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6531
sg6370
g6670
sg6384
g6538
sg6379
g6677
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g7316
sg6370
g7437
sg6384
g7323
sg6379
g7444
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6960
sg6370
g7068
sg6384
g6967
sg6379
g7075
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6435
sg6370
g6857
sg6384
g6429
sg6379
g6864
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6497
sg6370
g6557
sg6384
g6504
sg6379
g6564
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6766
sg6370
g6756
sg6384
g6760
sg6379
g6764
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6435
sg6370
g6857
sg6384
g6429
sg6379
g6864
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6766
sg6370
g6756
sg6384
g6760
sg6379
g6764
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6610
sg6370
g7137
sg6384
g6617
sg6379
g7144
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g7316
sg6370
g7312
sg6384
g7323
sg6379
g7320
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6576
sg6370
g6572
sg6384
g6583
sg6379
g6580
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6644
sg6370
g6640
sg6384
g6651
sg6379
g6648
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6960
sg6370
g6956
sg6384
g6967
sg6379
g6964
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6610
sg6370
g6606
sg6384
g6617
sg6379
g6614
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.