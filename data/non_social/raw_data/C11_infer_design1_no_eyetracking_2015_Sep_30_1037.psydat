ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C11_infer_design1_no_eyetracking_2015_Sep_30_1037
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vl
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'"z\xfb6\x10\x06N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Sep_30_1037
p66
sVparticipant
p67
VC11
p68
sVglasses
p69
Vy
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vl
sg15
F0.10013488127970049
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp89
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F31.966252880589309
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P6\x00'
tbsg69
Vy
sa(dp95
g63
g64
sg20
F17.084
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x1f\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p102
sg21
F1.7
sg69
Vy
sa(dp103
g63
g64
sg20
F9.0670000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F1.0800000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x1c\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p109
sg21
F1.1000000000000001
sg69
Vy
sa(dp110
g63
g64
sg20
F8.484
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x05\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p116
sg21
F1.3
sg69
Vy
sa(dp117
g63
g64
sg20
F7.734
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F1.0999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'#\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p123
sg21
F1.6000000000000001
sg69
Vy
sa(dp124
g63
g64
sg20
F7.7839999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0.51999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x18\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p130
sg21
F1.8999999999999999
sg69
Vy
sa(dp131
g63
g64
sg20
F7.484
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x13\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p137
sg21
F1.5
sg69
Vy
sa(dp138
g63
g64
sg20
F8.1669999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.23999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'!\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V44-crunch.png
p144
sg21
F1.3
sg69
Vy
sa(dp145
g63
g64
sg20
F6.0839999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.23999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'"\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p151
sg21
F1.3999999999999999
sg69
Vy
sa(dp152
g63
g64
sg20
F4.3010000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.15999999999999939
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x1a\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V35-raisins.png
p158
sg21
F1.1000000000000001
sg69
Vy
sa(dp159
g63
g64
sg20
F6.1840000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.55999999999999961
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x0c\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V18-mms.png
p165
sg21
F1.1000000000000001
sg69
Vy
sa(dp166
g63
g64
sg20
F4.6509999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.67999999999999949
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\t\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p172
sg21
F1.3
sg69
Vy
sa(dp173
g63
g64
sg20
F4.9009999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.83999999999999941
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'$\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V48-twix.png
p179
sg21
F1.6000000000000001
sg69
Vy
sa(dp180
g63
g64
sg20
F4.4669999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.21999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x1b\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p186
sg21
F1.2
sg69
Vy
sa(dp187
g63
g64
sg20
F5.9340000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.35999999999999877
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'%\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p193
sg21
F1.8
sg69
Vy
sa(dp194
g63
g64
sg20
F6.5510000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.5999999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x10\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V22-daim.png
p200
sg21
F1.3999999999999999
sg69
Vy
sa(dp201
g63
g64
sg20
F9.5009999999999994
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0.079999999999999169
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'&\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V50-polo.png
p207
sg21
F1.2
sg69
Vy
sa(dp208
g63
g64
sg20
F7.3010000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.1599999999999985
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\n\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p214
sg21
F2
sg69
Vy
sa(dp215
g63
g64
sg20
F4.9509999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.37999999999999856
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x04\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p221
sg21
F2
sg69
Vy
sa(dp222
g63
g64
sg20
F5.101
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x07\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p228
sg21
F1.6000000000000001
sg69
Vy
sa(dp229
g63
g64
sg20
F9.0169999999999995
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.33999999999999897
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x14\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p235
sg21
F1.5
sg69
Vy
sa(dp236
g63
g64
sg20
F6.617
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.93999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x01\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p242
sg21
F1.8
sg69
Vy
sa(dp243
g63
g64
sg20
F13.284000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F1.0399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x00\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p249
sg21
F1.5
sg69
Vy
sa(dp250
g63
g64
sg20
F8.2330000000000005
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.41999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x11\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p256
sg21
F1.5
sg69
Vy
sa(dp257
g63
g64
sg20
F5.0019999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F1.0199999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x17\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p263
sg21
F1.8999999999999999
sg69
Vy
sa(dp264
g63
g64
sg20
F4.3840000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.13999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x02\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p270
sg21
F1.3
sg69
Vy
sa(dp271
g63
g64
sg20
F2.601
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.95999999999999974
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x0b\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p277
sg21
F1.3
sg69
Vy
sa(dp278
g63
g64
sg20
F7.0670000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.17999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x0e\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p284
sg21
F1.1000000000000001
sg69
Vy
sa(dp285
g63
g64
sg20
F3.7679999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.11999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S' \x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p291
sg21
F1.7
sg69
Vy
sa(dp292
g63
g64
sg20
F5.5670000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.2199999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x1d\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V40-sardines.png
p298
sg21
F1.8
sg69
Vy
sa(dp299
g63
g64
sg20
F3.3340000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0.619999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x12\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p305
sg21
F1.7
sg69
Vy
sa(dp306
g63
g64
sg20
F4.7670000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.21999999999999847
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x03\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V4-corn.png
p312
sg21
F1.8999999999999999
sg69
Vy
sa(dp313
g63
g64
sg20
F4.0510000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.47999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S"'\x00\x00\x00"
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V51-mars.png
p319
sg21
F1.5
sg69
Vy
sa(dp320
g63
g64
sg20
F7.1669999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0.87999999999999967
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x06\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V7-olives.png
p326
sg21
F1.3
sg69
Vy
sa(dp327
g63
g64
sg20
F4.2670000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.51999999999999957
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1e\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p333
sg21
F1.1000000000000001
sg69
Vy
sa(dp334
g63
g64
sg20
F10.516999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.77999999999999914
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\r\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p340
sg21
F1.7
sg69
Vy
sa(dp341
g63
g64
sg20
F2.6840000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.85999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x19\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p347
sg21
F1.3999999999999999
sg69
Vy
sa(dp348
g63
g64
sg20
F5.9509999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.099999999999999173
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x16\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p354
sg21
F1.3
sg69
Vy
sa(dp355
g63
g64
sg20
F13.266999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.89999999999999947
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x0f\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p361
sg21
F1.6000000000000001
sg69
Vy
sa(dp362
g63
g64
sg20
F7.1340000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x15\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V29-beans.png
p368
sg21
F1.6000000000000001
sg69
Vy
sa(dp369
g63
g64
sg20
F3.7839999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0.61999999999999922
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x08\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p375
sg21
F1.3999999999999999
sg69
Vy
sa(dp376
g63
g64
sg55
g11
sg56
Vl
sg23
F15.166704537582063
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vy
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p380
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vl
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F2.2668094832570205
sg27
F6.5670000000000002
sg69
Vy
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p389
sg26
F5.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vl
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'left'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F4.9668447502499475
sg27
F2.6840000000000002
sg69
Vy
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'38-maltesers.png'
p398
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vl
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F3.4331356918219171
sg27
F3.601
sg69
Vy
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p407
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vl
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F2.8670705217259638
sg27
F3.1840000000000002
sg69
Vy
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'49-yorkie.png'
p416
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vl
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'left'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.7333815344077266
sg27
F2.7010000000000001
sg69
Vy
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p425
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vl
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F2.7668640800975481
sg27
F1.8839999999999999
sg69
Vy
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'18-mms.png'
p434
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vl
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.9501210111166074
sg27
F2.5510000000000002
sg69
Vy
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'48-twix.png'
p443
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vl
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.6668195758325055
sg27
F3.1509999999999998
sg69
Vy
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p452
sg26
F4.0999999999999996
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vl
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F9.2500774761947469
sg27
F3.1840000000000002
sg69
Vy
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'5-pineapple.png'
p461
sg26
F4.5000000000000009
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vl
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'right'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F4.5334906710677387
sg27
F2.7669999999999999
sg69
Vy
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p470
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vl
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.9501914310612847
sg27
F2.6840000000000002
sg69
Vy
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p479
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vl
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.3668656766631102
sg27
F3.4340000000000002
sg69
Vy
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p488
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vl
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.316742641329256
sg27
F2.9340000000000002
sg69
Vy
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p497
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vl
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.2500948673555285
sg27
F2.7170000000000001
sg69
Vy
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p506
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vl
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'right'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.1000713037583409
sg27
F2.3170000000000002
sg69
Vy
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p515
sg26
F5.0000000000000009
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vl
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F5.950392142160581
sg27
F1.7509999999999999
sg69
Vy
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'4-corn.png'
p524
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vl
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.1168047363257756
sg27
F2.867
sg69
Vy
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p533
sg26
F4.5000000000000018
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vl
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'left'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F3.8833905578544545
sg27
F3.6179999999999999
sg69
Vy
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'22-daim.png'
p542
sg26
F5.4000000000000004
sg28
F3
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vl
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F3.6333430172635417
sg27
F4.1680000000000001
sg69
Vy
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p551
sg26
F5.4999999999999991
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vl
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F2.3501941110107509
sg27
F4.234
sg69
Vy
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'44-crunch.png'
p560
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vl
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.2500398428637709
sg27
F2.3340000000000001
sg69
Vy
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'31-hobnobs.png'
p569
sg26
F5.799999999999998
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vl
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F3.1168329613242349
sg27
F2.851
sg69
Vy
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'35-raisins.png'
p578
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vl
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.0167742020094011
sg27
F2.4510000000000001
sg69
Vy
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'25-kitkat.png'
p587
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vl
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.6672047472738996
sg27
F2.3170000000000002
sg69
Vy
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'7-olives.png'
p596
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vl
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F2.9002728131399635
sg27
F2.0339999999999998
sg69
Vy
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p605
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vl
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F2.7001555796118737
sg27
F2.367
sg69
Vy
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p614
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vl
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.4834394811846323
sg27
F1.9510000000000001
sg69
Vy
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p623
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vl
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.1001973183970222
sg27
F2.4670000000000001
sg69
Vy
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'46-pistachios.png'
p632
sg26
F5.5999999999999988
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vl
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.9501845886375122
sg27
F2.0339999999999998
sg69
Vy
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'50-polo.png'
p641
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vl
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.71686221268601
sg27
F2.2170000000000001
sg69
Vy
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p650
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vl
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'right'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F1.6833374720495158
sg27
F2.0840000000000001
sg69
Vy
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'40-sardines.png'
p659
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vl
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.8501811389155591
sg27
F1.917
sg69
Vy
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'29-beans.png'
p668
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vl
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'right'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.4834391960835092
sg27
F1.5840000000000001
sg69
Vy
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p677
sg26
F5.9999999999999973
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vl
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F0.98347412095517939
sg27
F2.9340000000000002
sg69
Vy
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'51-mars.png'
p686
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vl
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'left'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.1334540641000785
sg27
F2.1840000000000002
sg69
Vy
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p695
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vl
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.833409502815357
sg27
F2.2839999999999998
sg69
Vy
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p704
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vl
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'left'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.4001854296857346
sg27
F2.2170000000000001
sg69
Vy
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p713
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vl
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'left'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.2502052014397123
sg27
F1.617
sg69
Vy
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p722
sg26
F5.5999999999999996
sg28
F3
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vl
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F4.7167952139525369
sg27
F3.2170000000000001
sg69
Vy
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p731
sg26
F5.5999999999999996
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vl
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.7001176611797746
sg27
F4.0670000000000002
sg69
Vy
sa(dp738
g63
g64
sg56
Vl
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F472.22593198801815
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp740
g63
g64
sg56
Vl
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F3.5502885364599024
sg65
g66
sg67
g68
sg69
Vy
sa(dp742
g63
g64
sg81
S'52-aero_mousse.png'
p743
sg82
S'14-discos_salt_vinegar.png'
p744
sg56
Vl
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'14-discos_salt_vinegar.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\t\x1e\n87\x0f\x1b0'
tRp753
sa(dp754
g63
g64
sg81
S'32-hovis_crackers.png'
p755
sg82
S'24-food_doctor_apple_walnut_bar.png'
p756
sg56
Vl
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\t\x1e\n9\x04\n\x9a\xd8'
tRp764
sa(dp765
g63
g64
sg81
S'53-cheestrings.png'
p766
sg82
S'53-cheestrings.png'
p767
sg56
Vl
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'47-picnic.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\t\x1e\n9\x0e\x07\x81\xe0'
tRp775
sa(dp776
g63
g64
sg81
S'12-topic.png'
p777
sg82
S'39-mackerel.png'
p778
sg56
Vl
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'39-mackerel.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\t\x1e\n9\x16\x07O\x18'
tRp786
sa(dp787
g63
g64
sg81
S'11-snickers.png'
p788
sg82
S'54-frubes_yogurt.png'
p789
sg56
Vl
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'54-frubes_yogurt.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\t\x1e\n9\x1e\no\xe0'
tRp797
sa(dp798
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p799
sg82
S'9-yu_mango_pieces.png'
p800
sg56
Vl
sS'practice_loop.thisN'
p801
I5
sS'practice_loop.thisTrialN'
p802
I5
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p803
I0
sg83
S'9-yu_mango_pieces.png'
p804
sg33
g799
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p805
sS'practice_loop.thisIndex'
p806
g59
(g98
S'\x05\x00\x00\x00'
tRp807
sg34
g752
(S"\x07\xdf\t\x1e\n9'\x04\x07@"
tRp808
sa(dp809
g63
g64
sg81
g788
sg82
S'11-snickers.png'
p810
sg56
Vl
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p813
I0
sg83
g793
sg33
g793
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\t\x1e\n9/\x08\x9b '
tRp817
sa(dp818
g63
g64
sg81
g766
sg82
S'47-picnic.png'
p819
sg56
Vl
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p822
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\t\x1e\n98\x0b\xb8\x00'
tRp826
sa(dp827
g63
g64
sg81
g799
sg82
S'37-nakd_cashew_cookie.png'
p828
sg56
Vl
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p831
I0
sg83
g804
sg33
g804
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\t\x1e\n:\x04\x03\xe8\x00'
tRp835
sa(dp836
g63
g64
sg81
S'15-walnut_whip.png'
p837
sg82
S'15-walnut_whip.png'
p838
sg56
Vl
sS'practice_loop.thisN'
p839
I9
sS'practice_loop.thisTrialN'
p840
I9
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p841
I0
sg83
S'28-maple_pecan.png'
p842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\t\x1e\n:\x0c\x01\x15X'
tRp846
sa(dp847
g63
g64
sg81
g755
sg82
S'32-hovis_crackers.png'
p848
sg56
Vl
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\t\x1e\n:\x17\x0b\x10\x08'
tRp855
sa(dp856
g63
g64
sg81
g743
sg82
S'52-aero_mousse.png'
p857
sg56
Vl
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\t\x1e\n:!\x02\xf5\xd0'
tRp864
sa(dp865
g63
g64
sg81
g837
sg82
S'28-maple_pecan.png'
p866
sg56
Vl
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g842
sg33
g837
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\t\x1e\n:(\x0es8'
tRp873
sa(dp874
g63
g64
sg81
g777
sg82
S'12-topic.png'
p875
sg56
Vl
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vy
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\t\x1e\n:0\x06d\xb8'
tRp882
sa(dp883
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F22.366948926152872
sg65
g66
sg67
g68
sg69
Vy
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vl
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vy
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'22-daim.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'7-olives.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'7-olives.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'22-daim.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vy
sS'block_loop.thisTrialN'
p911
I0
sg39
F2.3001851160743172
sg34
g752
(S'\x07\xdf\t\x1e\n;\x1b\r\xc7X'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'18-mms.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'43-mrporky_pork_crackles_redo.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'18-mms.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vy
sS'block_loop.thisTrialN'
p928
I0
sg39
F2.1334355325357137
sg34
g752
(S'\x07\xdf\t\x1e\n;#\x03\x95\xf8'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'1-treacle_cookies.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'1-treacle_cookies.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'21-nakd_banana_crunch.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'21-nakd_banana_crunch.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vy
sS'block_loop.thisTrialN'
p945
I0
sg39
F2.233492296143595
sg34
g752
(S'\x07\xdf\t\x1e\n;*\x06\n\xe0'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'30-spaghetti_hoops.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'right'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'30-spaghetti_hoops.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'19-caramello_redo.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg908
S'19-caramello_redo.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vy
sS'block_loop.thisTrialN'
p962
I0
sg39
F2.1167537032479231
sg34
g752
(S'\x07\xdf\t\x1e\n;1\n%\xa8'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'51-mars.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'left'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'27-hartleys_raspberries_jelly.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'51-mars.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vy
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.5835313122142907
sg34
g752
(S'\x07\xdf\t\x1e\n;8\x0c\\\x10'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'8-liquorice_catherine_wheels.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'right'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'8-liquorice_catherine_wheels.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
S'17-jacobs_mini_cheddars_redo.png'
p993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p994
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vy
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.700206327588603
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x00\x03\x06\xb6\xc0'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'38-maltesers.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'left'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'6-sour_patch_kids.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'6-sour_patch_kids.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
S'38-maltesers.png'
p1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1011
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vy
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.5165194642727329
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x00\n\x02\x80\xa0'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'19-caramello_redo.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'left'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1021
g59
(g98
S'\x07\x00\x00\x00'
tRp1022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1023
I0
sg903
S'30-spaghetti_hoops.png'
p1024
sS'block_loop.thisRepN'
p1025
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1026
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vy
sS'block_loop.thisTrialN'
p1028
I0
sg39
F1.3667730188399219
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x00\x10\n\xec\xe0'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'23-crunchie_redo.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'left'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
S'23-crunchie_redo.png'
p1036
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
S'33-ambrosia_rice.png'
p1040
sS'block_loop.thisRepN'
p1041
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1042
I0
sg908
S'33-ambrosia_rice.png'
p1043
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vy
sS'block_loop.thisTrialN'
p1045
I0
sg39
F3.2000525156026924
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x00\x17\x01\xb5\x80'
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1049
sS'block_loop.thisIndex'
p1050
g888
sg38
S'right'
p1051
sg58
g62
sS'trial_loop.thisN'
p1052
I9
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p1053
g59
(g98
S'\t\x00\x00\x00'
tRp1054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1055
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1056
sS'block_loop.thisRepN'
p1057
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1058
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p1059
Nsg69
Vy
sS'block_loop.thisTrialN'
p1060
I0
sg39
F2.3838559852247272
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x00\x1f\x05O`'
tRp1061
sa(dp1062
S'trial_loop.thisTrialN'
p1063
I10
sg894
g895
sS'block_loop.thisIndex'
p1064
g888
sg38
S'right'
p1065
sg58
g62
sS'trial_loop.thisN'
p1066
I10
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1067
g59
(g98
S'\n\x00\x00\x00'
tRp1068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1069
I0
sg903
g904
sS'block_loop.thisRepN'
p1070
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1071
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1072
Nsg69
Vy
sS'block_loop.thisTrialN'
p1073
I0
sg39
F3.0335341489690109
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x00&\x0b\xcfp'
tRp1074
sa(dp1075
S'trial_loop.thisTrialN'
p1076
I11
sg894
S'43-mrporky_pork_crackles_redo.png'
p1077
sS'block_loop.thisIndex'
p1078
g888
sg38
S'right'
p1079
sg58
g62
sS'trial_loop.thisN'
p1080
I11
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1081
g59
(g98
S'\x0b\x00\x00\x00'
tRp1082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1083
I0
sg903
S'18-mms.png'
p1084
sS'block_loop.thisRepN'
p1085
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1086
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1087
Nsg69
Vy
sS'block_loop.thisTrialN'
p1088
I0
sg39
F2.9167613439544766
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x00.\x0c\xcdX'
tRp1089
sa(dp1090
S'trial_loop.thisTrialN'
p1091
I12
sg894
g966
sS'block_loop.thisIndex'
p1092
g888
sg38
S'right'
p1093
sg58
g62
sS'trial_loop.thisN'
p1094
I12
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1095
g59
(g98
S'\x0c\x00\x00\x00'
tRp1096
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1097
I0
sg903
g974
sS'block_loop.thisRepN'
p1098
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1099
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1100
Nsg69
Vy
sS'block_loop.thisTrialN'
p1101
I0
sg39
F1.7000774619395997
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x006\x0b\xe6\xe0'
tRp1102
sa(dp1103
S'trial_loop.thisTrialN'
p1104
I13
sg894
S'25-kitkat.png'
p1105
sS'block_loop.thisIndex'
p1106
g888
sg38
S'right'
p1107
sg58
g62
sS'trial_loop.thisN'
p1108
I13
sg33
S'31-hobnobs.png'
p1109
sg63
g64
sS'trial_loop.thisIndex'
p1110
g59
(g98
S'\r\x00\x00\x00'
tRp1111
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1112
I0
sg903
S'31-hobnobs.png'
p1113
sS'block_loop.thisRepN'
p1114
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1115
I0
sg908
S'25-kitkat.png'
p1116
sg55
g11
sS'block_loop.thisTrial'
p1117
Nsg69
Vy
sS'block_loop.thisTrialN'
p1118
I0
sg39
F2.9502219368678197
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x01\x01\x07\xebX'
tRp1119
sa(dp1120
S'trial_loop.thisTrialN'
p1121
I14
sg894
S'41-peanuts_redo.png'
p1122
sS'block_loop.thisIndex'
p1123
g888
sg38
S'left'
p1124
sg58
g62
sS'trial_loop.thisN'
p1125
I14
sg33
S'41-peanuts_redo.png'
p1126
sg63
g64
sS'trial_loop.thisIndex'
p1127
g59
(g98
S'\x0e\x00\x00\x00'
tRp1128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1129
I0
sg903
S'45-chewy_nougat_redo.png'
p1130
sS'block_loop.thisRepN'
p1131
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1132
I0
sg908
S'45-chewy_nougat_redo.png'
p1133
sg55
g11
sS'block_loop.thisTrial'
p1134
Nsg69
Vy
sS'block_loop.thisTrialN'
p1135
I0
sg39
F3.5167275879971385
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x01\t\x07\xb8\x90'
tRp1136
sa(dp1137
S'trial_loop.thisTrialN'
p1138
I15
sg894
S'33-ambrosia_rice.png'
p1139
sS'block_loop.thisIndex'
p1140
g888
sg38
S'left'
p1141
sg58
g62
sS'trial_loop.thisN'
p1142
I15
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p1143
g59
(g98
S'\x0f\x00\x00\x00'
tRp1144
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1145
I0
sg903
S'23-crunchie_redo.png'
p1146
sS'block_loop.thisRepN'
p1147
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1148
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1149
Nsg69
Vy
sS'block_loop.thisTrialN'
p1150
I0
sg39
F3.4166810880251433
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x01\x12\x00\xd6\xd8'
tRp1151
sa(dp1152
S'trial_loop.thisTrialN'
p1153
I16
sg894
S'36-fig_rolls.png'
p1154
sS'block_loop.thisIndex'
p1155
g888
sg38
S'right'
p1156
sg58
g62
sS'trial_loop.thisN'
p1157
I16
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p1158
sg63
g64
sS'trial_loop.thisIndex'
p1159
g59
(g98
S'\x10\x00\x00\x00'
tRp1160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1161
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1162
sS'block_loop.thisRepN'
p1163
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1164
I0
sg908
S'36-fig_rolls.png'
p1165
sg55
g11
sS'block_loop.thisTrial'
p1166
Nsg69
Vy
sS'block_loop.thisTrialN'
p1167
I0
sg39
F2.1998575065235855
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x01\x1a\x07\x89\xb0'
tRp1168
sa(dp1169
S'trial_loop.thisTrialN'
p1170
I17
sg894
S'4-corn.png'
p1171
sS'block_loop.thisIndex'
p1172
g888
sg38
S'right'
p1173
sg58
g62
sS'trial_loop.thisN'
p1174
I17
sg33
S'4-corn.png'
p1175
sg63
g64
sS'trial_loop.thisIndex'
p1176
g59
(g98
S'\x11\x00\x00\x00'
tRp1177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1178
I0
sg903
S'10-bounty_redo.png'
p1179
sS'block_loop.thisRepN'
p1180
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1181
I0
sg908
S'10-bounty_redo.png'
p1182
sg55
g11
sS'block_loop.thisTrial'
p1183
Nsg69
Vy
sS'block_loop.thisTrialN'
p1184
I0
sg39
F2.4505710430335057
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x01!\x0b/H'
tRp1185
sa(dp1186
S'trial_loop.thisTrialN'
p1187
I18
sg894
S'6-sour_patch_kids.png'
p1188
sS'block_loop.thisIndex'
p1189
g888
sg38
S'left'
p1190
sg58
g62
sS'trial_loop.thisN'
p1191
I18
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p1192
g59
(g98
S'\x12\x00\x00\x00'
tRp1193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1194
I0
sg903
S'38-maltesers.png'
p1195
sS'block_loop.thisRepN'
p1196
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1197
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p1198
Nsg69
Vy
sS'block_loop.thisTrialN'
p1199
I0
sg39
F3.5498888248680487
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x01)\x03_H'
tRp1200
sa(dp1201
S'trial_loop.thisTrialN'
p1202
I19
sg894
g1032
sS'block_loop.thisIndex'
p1203
g888
sg38
S'right'
p1204
sg58
g62
sS'trial_loop.thisN'
p1205
I19
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1206
g59
(g98
S'\x13\x00\x00\x00'
tRp1207
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1208
I0
sg903
g1040
sS'block_loop.thisRepN'
p1209
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1210
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1211
Nsg69
Vy
sS'block_loop.thisTrialN'
p1212
I0
sg39
F2.166742741114831
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x011\x0c8\xe8'
tRp1213
sa(dp1214
S'trial_loop.thisTrialN'
p1215
I20
sg894
g1154
sS'block_loop.thisIndex'
p1216
g888
sg38
S'right'
p1217
sg58
g62
sS'trial_loop.thisN'
p1218
I20
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1219
g59
(g98
S'\x14\x00\x00\x00'
tRp1220
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1221
I0
sg903
g1162
sS'block_loop.thisRepN'
p1222
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1223
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p1224
Nsg69
Vy
sS'block_loop.thisTrialN'
p1225
I0
sg39
F3.1167981790026715
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x018\x0f&\xe8'
tRp1226
sa(dp1227
S'trial_loop.thisTrialN'
p1228
I21
sg894
g915
sS'block_loop.thisIndex'
p1229
g888
sg38
S'right'
p1230
sg58
g62
sS'trial_loop.thisN'
p1231
I21
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1232
g59
(g98
S'\x15\x00\x00\x00'
tRp1233
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1234
I0
sg903
g923
sS'block_loop.thisRepN'
p1235
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1236
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1237
Nsg69
Vy
sS'block_loop.thisTrialN'
p1238
I0
sg39
F1.5168938018759945
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x02\x05\x02M\xd8'
tRp1239
sa(dp1240
S'trial_loop.thisTrialN'
p1241
I22
sg894
S'40-sardines.png'
p1242
sS'block_loop.thisIndex'
p1243
g888
sg38
S'right'
p1244
sg58
g62
sS'trial_loop.thisN'
p1245
I22
sg33
S'40-sardines.png'
p1246
sg63
g64
sS'trial_loop.thisIndex'
p1247
g59
(g98
S'\x16\x00\x00\x00'
tRp1248
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1249
I0
sg903
S'5-pineapple.png'
p1250
sS'block_loop.thisRepN'
p1251
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1252
I0
sg908
S'5-pineapple.png'
p1253
sg55
g11
sS'block_loop.thisTrial'
p1254
Nsg69
Vy
sS'block_loop.thisTrialN'
p1255
I0
sg39
F3.9668125338380378
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x02\x0b\n\xba\x18'
tRp1256
sa(dp1257
S'trial_loop.thisTrialN'
p1258
I23
sg894
g1000
sS'block_loop.thisIndex'
p1259
g888
sg38
S'right'
p1260
sg58
g62
sS'trial_loop.thisN'
p1261
I23
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p1262
g59
(g98
S'\x17\x00\x00\x00'
tRp1263
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1264
I0
sg903
g1008
sS'block_loop.thisRepN'
p1265
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1266
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p1267
Nsg69
Vy
sS'block_loop.thisTrialN'
p1268
I0
sg39
F4.4998287968542172
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x02\x14\n\xc1\xe8'
tRp1269
sa(dp1270
S'trial_loop.thisTrialN'
p1271
I24
sg894
g1122
sS'block_loop.thisIndex'
p1272
g888
sg38
S'left'
p1273
sg58
g62
sS'trial_loop.thisN'
p1274
I24
sg33
g1126
sg63
g64
sS'trial_loop.thisIndex'
p1275
g59
(g98
S'\x18\x00\x00\x00'
tRp1276
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1277
I0
sg903
g1130
sS'block_loop.thisRepN'
p1278
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1279
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p1280
Nsg69
Vy
sS'block_loop.thisTrialN'
p1281
I0
sg39
F4.1501008259660921
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x02\x1e\x03\x99\xe0'
tRp1282
sa(dp1283
S'trial_loop.thisTrialN'
p1284
I25
sg894
S'21-nakd_banana_crunch.png'
p1285
sS'block_loop.thisIndex'
p1286
g888
sg38
S'left'
p1287
sg58
g62
sS'trial_loop.thisN'
p1288
I25
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1289
g59
(g98
S'\x19\x00\x00\x00'
tRp1290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1291
I0
sg903
S'1-treacle_cookies.png'
p1292
sS'block_loop.thisRepN'
p1293
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1294
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1295
Nsg69
Vy
sS'block_loop.thisTrialN'
p1296
I0
sg39
F3.0667070749809682
sg34
g752
(S"\x07\xdf\t\x1e\x0b\x02'\x06=\xa8"
tRp1297
sa(dp1298
S'trial_loop.thisTrialN'
p1299
I26
sg894
g1000
sS'block_loop.thisIndex'
p1300
g888
sg38
S'left'
p1301
sg58
g62
sS'trial_loop.thisN'
p1302
I26
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1303
g59
(g98
S'\x1a\x00\x00\x00'
tRp1304
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1305
I0
sg903
g1008
sS'block_loop.thisRepN'
p1306
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1307
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p1308
Nsg69
Vy
sS'block_loop.thisTrialN'
p1309
I0
sg39
F1.6331602675272734
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x02/\x07\xf3('
tRp1310
sa(dp1311
S'trial_loop.thisTrialN'
p1312
I27
sg894
S'10-bounty_redo.png'
p1313
sS'block_loop.thisIndex'
p1314
g888
sg38
S'left'
p1315
sg58
g62
sS'trial_loop.thisN'
p1316
I27
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p1317
g59
(g98
S'\x1b\x00\x00\x00'
tRp1318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1319
I0
sg903
S'4-corn.png'
p1320
sS'block_loop.thisRepN'
p1321
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1322
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p1323
Nsg69
Vy
sS'block_loop.thisTrialN'
p1324
I0
sg39
F4.2168181645824916
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x026\x02\xc6\xf0'
tRp1325
sa(dp1326
S'trial_loop.thisTrialN'
p1327
I28
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1328
sS'block_loop.thisIndex'
p1329
g888
sg38
S'left'
p1330
sg58
g62
sS'trial_loop.thisN'
p1331
I28
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p1332
g59
(g98
S'\x1c\x00\x00\x00'
tRp1333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1334
I0
sg903
S'36-fig_rolls.png'
p1335
sS'block_loop.thisRepN'
p1336
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1337
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p1338
Nsg69
Vy
sS'block_loop.thisTrialN'
p1339
I0
sg39
F1.6669983341548686
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x03\x03\x06\x9bh'
tRp1340
sa(dp1341
S'trial_loop.thisTrialN'
p1342
I29
sg894
g949
sS'block_loop.thisIndex'
p1343
g888
sg38
S'right'
p1344
sg58
g62
sS'trial_loop.thisN'
p1345
I29
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1346
g59
(g98
S'\x1d\x00\x00\x00'
tRp1347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1348
I0
sg903
g957
sS'block_loop.thisRepN'
p1349
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1350
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1351
Nsg69
Vy
sS'block_loop.thisTrialN'
p1352
I0
sg39
F2.1501880668697595
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x03\n\x01\xe8H'
tRp1353
sa(dp1354
S'trial_loop.thisTrialN'
p1355
I30
sg894
g1077
sS'block_loop.thisIndex'
p1356
g888
sg38
S'left'
p1357
sg58
g62
sS'trial_loop.thisN'
p1358
I30
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1359
g59
(g98
S'\x1e\x00\x00\x00'
tRp1360
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1361
I0
sg903
g1084
sS'block_loop.thisRepN'
p1362
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1363
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1364
Nsg69
Vy
sS'block_loop.thisTrialN'
p1365
I0
sg39
F2.4667493839679082
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x03\x11\x04\xd6H'
tRp1366
sa(dp1367
S'trial_loop.thisTrialN'
p1368
I31
sg894
g966
sS'block_loop.thisIndex'
p1369
g888
sg38
S'right'
p1370
sg58
g62
sS'trial_loop.thisN'
p1371
I31
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1372
g59
(g98
S'\x1f\x00\x00\x00'
tRp1373
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1374
I0
sg903
g974
sS'block_loop.thisRepN'
p1375
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1376
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1377
Nsg69
Vy
sS'block_loop.thisTrialN'
p1378
I0
sg39
F3.083443073457147
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x03\x18\x0c\x87\x08'
tRp1379
sa(dp1380
S'trial_loop.thisTrialN'
p1381
I32
sg894
g1242
sS'block_loop.thisIndex'
p1382
g888
sg38
S'right'
p1383
sg58
g62
sS'trial_loop.thisN'
p1384
I32
sg33
g1253
sg63
g64
sS'trial_loop.thisIndex'
p1385
g59
(g98
S' \x00\x00\x00'
tRp1386
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1387
I0
sg903
g1250
sS'block_loop.thisRepN'
p1388
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1389
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p1390
Nsg69
Vy
sS'block_loop.thisTrialN'
p1391
I0
sg39
F8.1333494320360842
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x03 \x0e<\x88'
tRp1392
sa(dp1393
S'trial_loop.thisTrialN'
p1394
I33
sg894
S'26-walkers_smoky_bacon.png'
p1395
sS'block_loop.thisIndex'
p1396
g888
sg38
S'left'
p1397
sg58
g62
sS'trial_loop.thisN'
p1398
I33
sg33
S'44-crunch.png'
p1399
sg63
g64
sS'trial_loop.thisIndex'
p1400
g59
(g98
S'!\x00\x00\x00'
tRp1401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1402
I0
sg903
S'44-crunch.png'
p1403
sS'block_loop.thisRepN'
p1404
I0
sg906
S'26-walkers_smoky_bacon.png'
p1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1406
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p1407
Nsg69
Vy
sS'block_loop.thisTrialN'
p1408
I0
sg39
F2.6835133793620116
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x03.\x01\x82\xb8'
tRp1409
sa(dp1410
S'trial_loop.thisTrialN'
p1411
I34
sg894
g1171
sS'block_loop.thisIndex'
p1412
g888
sg38
S'left'
p1413
sg58
g62
sS'trial_loop.thisN'
p1414
I34
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p1415
g59
(g98
S'"\x00\x00\x00'
tRp1416
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1417
I0
sg903
g1179
sS'block_loop.thisRepN'
p1418
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1419
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p1420
Nsg69
Vy
sS'block_loop.thisTrialN'
p1421
I0
sg39
F4.1672174342675135
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x035\x0c\x87\x08'
tRp1422
sa(dp1423
S'trial_loop.thisTrialN'
p1424
I35
sg894
S'2-steamed_puddings.png'
p1425
sS'block_loop.thisIndex'
p1426
g888
sg38
S'left'
p1427
sg58
g62
sS'trial_loop.thisN'
p1428
I35
sg33
S'2-steamed_puddings.png'
p1429
sg63
g64
sS'trial_loop.thisIndex'
p1430
g59
(g98
S'#\x00\x00\x00'
tRp1431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1432
I0
sg903
S'20-fruit_pastilles.png'
p1433
sS'block_loop.thisRepN'
p1434
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1435
I0
sg908
S'20-fruit_pastilles.png'
p1436
sg55
g11
sS'block_loop.thisTrial'
p1437
Nsg69
Vy
sS'block_loop.thisTrialN'
p1438
I0
sg39
F2.1169065173799027
sg34
g752
(S"\x07\xdf\t\x1e\x0b\x04\x03\x00'\x10"
tRp1439
sa(dp1440
S'trial_loop.thisTrialN'
p1441
I36
sg894
S'3-ellas_strawberries_apples.png'
p1442
sS'block_loop.thisIndex'
p1443
g888
sg38
S'right'
p1444
sg58
g62
sS'trial_loop.thisN'
p1445
I36
sg33
S'3-ellas_strawberries_apples.png'
p1446
sg63
g64
sS'trial_loop.thisIndex'
p1447
g59
(g98
S'$\x00\x00\x00'
tRp1448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1449
I0
sg903
S'13-mccoys_steak_crisps.png'
p1450
sS'block_loop.thisRepN'
p1451
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1452
I0
sg908
S'13-mccoys_steak_crisps.png'
p1453
sg55
g11
sS'block_loop.thisTrial'
p1454
Nsg69
Vy
sS'block_loop.thisTrialN'
p1455
I0
sg39
F1.7667922346472551
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x04\n\x02\x98\x10'
tRp1456
sa(dp1457
S'trial_loop.thisTrialN'
p1458
I37
sg894
S'45-chewy_nougat_redo.png'
p1459
sS'block_loop.thisIndex'
p1460
g888
sg38
S'right'
p1461
sg58
g62
sS'trial_loop.thisN'
p1462
I37
sg33
g1133
sg63
g64
sS'trial_loop.thisIndex'
p1463
g59
(g98
S'%\x00\x00\x00'
tRp1464
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1465
I0
sg903
S'41-peanuts_redo.png'
p1466
sS'block_loop.thisRepN'
p1467
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1468
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p1469
Nsg69
Vy
sS'block_loop.thisTrialN'
p1470
I0
sg39
F2.7500864568760335
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x04\x10\x0e\xd4\xe0'
tRp1471
sa(dp1472
S'trial_loop.thisTrialN'
p1473
I38
sg894
g1032
sS'block_loop.thisIndex'
p1474
g888
sg38
S'right'
p1475
sg58
g62
sS'trial_loop.thisN'
p1476
I38
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1477
g59
(g98
S'&\x00\x00\x00'
tRp1478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1479
I0
sg903
g1040
sS'block_loop.thisRepN'
p1480
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1481
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1482
Nsg69
Vy
sS'block_loop.thisTrialN'
p1483
I0
sg39
F4.3834910559539821
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x04\x18\x0bJ\xa0'
tRp1484
sa(dp1485
S'trial_loop.thisTrialN'
p1486
I39
sg894
S'27-hartleys_raspberries_jelly.png'
p1487
sS'block_loop.thisIndex'
p1488
g888
sg38
S'left'
p1489
sg58
g62
sS'trial_loop.thisN'
p1490
I39
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1491
g59
(g98
S"'\x00\x00\x00"
tRp1492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1493
I0
sg903
S'51-mars.png'
p1494
sS'block_loop.thisRepN'
p1495
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1496
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1497
Nsg69
Vy
sS'block_loop.thisTrialN'
p1498
I0
sg39
F1.8168069316034234
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x04"\x02|\xb8'
tRp1499
sa(dp1500
S'trial_loop.thisTrialN'
p1501
I40
sg894
g1313
sS'block_loop.thisIndex'
p1502
g888
sg38
S'right'
p1503
sg58
g62
sS'trial_loop.thisN'
p1504
I40
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p1505
g59
(g98
S'(\x00\x00\x00'
tRp1506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1507
I0
sg903
g1320
sS'block_loop.thisRepN'
p1508
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1509
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p1510
Nsg69
Vy
sS'block_loop.thisTrialN'
p1511
I0
sg39
F4.1501501484376604
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x04)\x00*\xf8'
tRp1512
sa(dp1513
S'trial_loop.thisTrialN'
p1514
I41
sg894
S'44-crunch.png'
p1515
sS'block_loop.thisIndex'
p1516
g888
sg38
S'right'
p1517
sg58
g62
sS'trial_loop.thisN'
p1518
I41
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p1519
g59
(g98
S')\x00\x00\x00'
tRp1520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1521
I0
sg903
S'26-walkers_smoky_bacon.png'
p1522
sS'block_loop.thisRepN'
p1523
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1524
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p1525
Nsg69
Vy
sS'block_loop.thisTrialN'
p1526
I0
sg39
F2.2500994289712253
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x042\x03\r@'
tRp1527
sa(dp1528
S'trial_loop.thisTrialN'
p1529
I42
sg894
g1139
sS'block_loop.thisIndex'
p1530
g888
sg38
S'right'
p1531
sg58
g62
sS'trial_loop.thisN'
p1532
I42
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1533
g59
(g98
S'*\x00\x00\x00'
tRp1534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1535
I0
sg903
g1146
sS'block_loop.thisRepN'
p1536
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1537
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1538
Nsg69
Vy
sS'block_loop.thisTrialN'
p1539
I0
sg39
F2.3004716425725746
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x049\x07f\x88'
tRp1540
sa(dp1541
S'trial_loop.thisTrialN'
p1542
I43
sg894
g1122
sS'block_loop.thisIndex'
p1543
g888
sg38
S'right'
p1544
sg58
g62
sS'trial_loop.thisN'
p1545
I43
sg33
g1126
sg63
g64
sS'trial_loop.thisIndex'
p1546
g59
(g98
S'+\x00\x00\x00'
tRp1547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1548
I0
sg903
g1130
sS'block_loop.thisRepN'
p1549
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1550
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p1551
Nsg69
Vy
sS'block_loop.thisTrialN'
p1552
I0
sg39
F2.3501208400557516
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x05\x04\x0cwh'
tRp1553
sa(dp1554
S'trial_loop.thisTrialN'
p1555
I44
sg894
g1313
sS'block_loop.thisIndex'
p1556
g888
sg38
S'right'
p1557
sg58
g62
sS'trial_loop.thisN'
p1558
I44
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p1559
g59
(g98
S',\x00\x00\x00'
tRp1560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1561
I0
sg903
g1320
sS'block_loop.thisRepN'
p1562
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1563
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p1564
Nsg69
Vy
sS'block_loop.thisTrialN'
p1565
I0
sg39
F1.8000917454992305
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x05\x0c\x02\xfd\xa0'
tRp1566
sa(dp1567
S'trial_loop.thisTrialN'
p1568
I45
sg894
S'29-beans.png'
p1569
sS'block_loop.thisIndex'
p1570
g888
sg38
S'right'
p1571
sg58
g62
sS'trial_loop.thisN'
p1572
I45
sg33
S'46-pistachios.png'
p1573
sg63
g64
sS'trial_loop.thisIndex'
p1574
g59
(g98
S'-\x00\x00\x00'
tRp1575
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1576
I0
sg903
S'46-pistachios.png'
p1577
sS'block_loop.thisRepN'
p1578
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1579
I0
sg908
S'29-beans.png'
p1580
sg55
g11
sS'block_loop.thisTrial'
p1581
Nsg69
Vy
sS'block_loop.thisTrialN'
p1582
I0
sg39
F3.2500880249313013
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x05\x13\x00qH'
tRp1583
sa(dp1584
S'trial_loop.thisTrialN'
p1585
I46
sg894
g1313
sS'block_loop.thisIndex'
p1586
g888
sg38
S'right'
p1587
sg58
g62
sS'trial_loop.thisN'
p1588
I46
sg33
g1182
sg63
g64
sS'trial_loop.thisIndex'
p1589
g59
(g98
S'.\x00\x00\x00'
tRp1590
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1591
I0
sg903
g1320
sS'block_loop.thisRepN'
p1592
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1593
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p1594
Nsg69
Vy
sS'block_loop.thisTrialN'
p1595
I0
sg39
F2.6501702480577478
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x05\x1b\x04\xc2\xc0'
tRp1596
sa(dp1597
S'trial_loop.thisTrialN'
p1598
I47
sg894
g949
sS'block_loop.thisIndex'
p1599
g888
sg38
S'right'
p1600
sg58
g62
sS'trial_loop.thisN'
p1601
I47
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1602
g59
(g98
S'/\x00\x00\x00'
tRp1603
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1604
I0
sg903
g957
sS'block_loop.thisRepN'
p1605
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1606
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1607
Nsg69
Vy
sS'block_loop.thisTrialN'
p1608
I0
sg39
F3.8167405030717418
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x05#\x00\x0b\xb8'
tRp1609
sa(dp1610
S'trial_loop.thisTrialN'
p1611
I48
sg894
g1515
sS'block_loop.thisIndex'
p1612
g888
sg38
S'right'
p1613
sg58
g62
sS'trial_loop.thisN'
p1614
I48
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p1615
g59
(g98
S'0\x00\x00\x00'
tRp1616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1617
I0
sg903
g1522
sS'block_loop.thisRepN'
p1618
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1619
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p1620
Nsg69
Vy
sS'block_loop.thisTrialN'
p1621
I0
sg39
F1.5167595193083798
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x05+\x0c\xf0\x80'
tRp1622
sa(dp1623
S'trial_loop.thisTrialN'
p1624
I49
sg894
S'7-olives.png'
p1625
sS'block_loop.thisIndex'
p1626
g888
sg38
S'left'
p1627
sg58
g62
sS'trial_loop.thisN'
p1628
I49
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1629
g59
(g98
S'1\x00\x00\x00'
tRp1630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1631
I0
sg903
S'22-daim.png'
p1632
sS'block_loop.thisRepN'
p1633
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1634
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1635
Nsg69
Vy
sS'block_loop.thisTrialN'
p1636
I0
sg39
F2.950067412129556
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x052\x06\x1a\x80'
tRp1637
sa(dp1638
S'trial_loop.thisTrialN'
p1639
I50
sg894
S'13-mccoys_steak_crisps.png'
p1640
sS'block_loop.thisIndex'
p1641
g888
sg38
S'right'
p1642
sg58
g62
sS'trial_loop.thisN'
p1643
I50
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p1644
g59
(g98
S'2\x00\x00\x00'
tRp1645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1646
I0
sg903
S'3-ellas_strawberries_apples.png'
p1647
sS'block_loop.thisRepN'
p1648
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1649
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p1650
Nsg69
Vy
sS'block_loop.thisTrialN'
p1651
I0
sg39
F1.8002240323598926
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x05:\x05\xe7\xb8'
tRp1652
sa(dp1653
S'trial_loop.thisTrialN'
p1654
I51
sg894
S'16-skips_prawn.png'
p1655
sS'block_loop.thisIndex'
p1656
g888
sg38
S'right'
p1657
sg58
g62
sS'trial_loop.thisN'
p1658
I51
sg33
S'16-skips_prawn.png'
p1659
sg63
g64
sS'trial_loop.thisIndex'
p1660
g59
(g98
S'3\x00\x00\x00'
tRp1661
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1662
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1663
sS'block_loop.thisRepN'
p1664
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1665
I0
sg908
S'42-mrkipling_lemon_slices.png'
p1666
sg55
g11
sS'block_loop.thisTrial'
p1667
Nsg69
Vy
sS'block_loop.thisTrialN'
p1668
I0
sg39
F3.5833750768706523
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x06\x05\x03[`'
tRp1669
sa(dp1670
S'trial_loop.thisTrialN'
p1671
I52
sg894
S'49-yorkie.png'
p1672
sS'block_loop.thisIndex'
p1673
g888
sg38
S'left'
p1674
sg58
g62
sS'trial_loop.thisN'
p1675
I52
sg33
S'35-raisins.png'
p1676
sg63
g64
sS'trial_loop.thisIndex'
p1677
g59
(g98
S'4\x00\x00\x00'
tRp1678
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1679
I0
sg903
S'35-raisins.png'
p1680
sS'block_loop.thisRepN'
p1681
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1682
I0
sg908
S'49-yorkie.png'
p1683
sg55
g11
sS'block_loop.thisTrial'
p1684
Nsg69
Vy
sS'block_loop.thisTrialN'
p1685
I0
sg39
F3.0501712174013846
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x06\r\x0c\xae\x18'
tRp1686
sa(dp1687
S'trial_loop.thisTrialN'
p1688
I53
sg894
g895
sS'block_loop.thisIndex'
p1689
g888
sg38
S'right'
p1690
sg58
g62
sS'trial_loop.thisN'
p1691
I53
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1692
g59
(g98
S'5\x00\x00\x00'
tRp1693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1694
I0
sg903
g904
sS'block_loop.thisRepN'
p1695
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1696
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1697
Nsg69
Vy
sS'block_loop.thisTrialN'
p1698
I0
sg39
F4.666835256387003
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x06\x15\r\xea\x80'
tRp1699
sa(dp1700
S'trial_loop.thisTrialN'
p1701
I54
sg894
g1640
sS'block_loop.thisIndex'
p1702
g888
sg38
S'right'
p1703
sg58
g62
sS'trial_loop.thisN'
p1704
I54
sg33
g1453
sg63
g64
sS'trial_loop.thisIndex'
p1705
g59
(g98
S'6\x00\x00\x00'
tRp1706
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1707
I0
sg903
g1647
sS'block_loop.thisRepN'
p1708
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1709
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p1710
Nsg69
Vy
sS'block_loop.thisTrialN'
p1711
I0
sg39
F1.3505855546741259
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x06\x1f\tbX'
tRp1712
sa(dp1713
S'trial_loop.thisTrialN'
p1714
I55
sg894
g915
sS'block_loop.thisIndex'
p1715
g888
sg38
S'right'
p1716
sg58
g62
sS'trial_loop.thisN'
p1717
I55
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1718
g59
(g98
S'7\x00\x00\x00'
tRp1719
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1720
I0
sg903
g923
sS'block_loop.thisRepN'
p1721
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1722
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1723
Nsg69
Vy
sS'block_loop.thisTrialN'
p1724
I0
sg39
F2.816759604838353
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x06%\x0f2\xa0'
tRp1725
sa(dp1726
S'trial_loop.thisTrialN'
p1727
I56
sg894
S'46-pistachios.png'
p1728
sS'block_loop.thisIndex'
p1729
g888
sg38
S'left'
p1730
sg58
g62
sS'trial_loop.thisN'
p1731
I56
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p1732
g59
(g98
S'8\x00\x00\x00'
tRp1733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1734
I0
sg903
S'29-beans.png'
p1735
sS'block_loop.thisRepN'
p1736
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1737
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p1738
Nsg69
Vy
sS'block_loop.thisTrialN'
p1739
I0
sg39
F2.2668493973965269
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x06-\x0c\xdc\xf8'
tRp1740
sa(dp1741
S'trial_loop.thisTrialN'
p1742
I57
sg894
S'20-fruit_pastilles.png'
p1743
sS'block_loop.thisIndex'
p1744
g888
sg38
S'right'
p1745
sg58
g62
sS'trial_loop.thisN'
p1746
I57
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p1747
g59
(g98
S'9\x00\x00\x00'
tRp1748
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1749
I0
sg903
S'2-steamed_puddings.png'
p1750
sS'block_loop.thisRepN'
p1751
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1752
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p1753
Nsg69
Vy
sS'block_loop.thisTrialN'
p1754
I0
sg39
F1.7668027833838096
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x065\x02.\x98'
tRp1755
sa(dp1756
S'trial_loop.thisTrialN'
p1757
I58
sg894
g1625
sS'block_loop.thisIndex'
p1758
g888
sg38
S'left'
p1759
sg58
g62
sS'trial_loop.thisN'
p1760
I58
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1761
g59
(g98
S':\x00\x00\x00'
tRp1762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1763
I0
sg903
g1632
sS'block_loop.thisRepN'
p1764
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1765
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1766
Nsg69
Vy
sS'block_loop.thisTrialN'
p1767
I0
sg39
F8.4171358241087546
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x06;\x0ekh'
tRp1768
sa(dp1769
S'trial_loop.thisTrialN'
p1770
I59
sg894
g1442
sS'block_loop.thisIndex'
p1771
g888
sg38
S'left'
p1772
sg58
g62
sS'trial_loop.thisN'
p1773
I59
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p1774
g59
(g98
S';\x00\x00\x00'
tRp1775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1776
I0
sg903
g1450
sS'block_loop.thisRepN'
p1777
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1778
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p1779
Nsg69
Vy
sS'block_loop.thisTrialN'
p1780
I0
sg39
F1.6167564117076836
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x07\r\x05\xfb@'
tRp1781
sa(dp1782
S'trial_loop.thisTrialN'
p1783
I60
sg894
S'31-hobnobs.png'
p1784
sS'block_loop.thisIndex'
p1785
g888
sg38
S'left'
p1786
sg58
g62
sS'trial_loop.thisN'
p1787
I60
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1788
g59
(g98
S'<\x00\x00\x00'
tRp1789
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1790
I0
sg903
S'25-kitkat.png'
p1791
sS'block_loop.thisRepN'
p1792
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1793
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1794
Nsg69
Vy
sS'block_loop.thisTrialN'
p1795
I0
sg39
F3.6502036048741502
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x07\x14\x00\xd2\xf0'
tRp1796
sa(dp1797
S'trial_loop.thisTrialN'
p1798
I61
sg894
g983
sS'block_loop.thisIndex'
p1799
g888
sg38
S'left'
p1800
sg58
g62
sS'trial_loop.thisN'
p1801
I61
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p1802
g59
(g98
S'=\x00\x00\x00'
tRp1803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1804
I0
sg903
g991
sS'block_loop.thisRepN'
p1805
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1806
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p1807
Nsg69
Vy
sS'block_loop.thisTrialN'
p1808
I0
sg39
F2.133434677232799
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x07\x1c\x0b\x17\xd8'
tRp1809
sa(dp1810
S'trial_loop.thisTrialN'
p1811
I62
sg894
S'50-polo.png'
p1812
sS'block_loop.thisIndex'
p1813
g888
sg38
S'right'
p1814
sg58
g62
sS'trial_loop.thisN'
p1815
I62
sg33
S'48-twix.png'
p1816
sg63
g64
sS'trial_loop.thisIndex'
p1817
g59
(g98
S'>\x00\x00\x00'
tRp1818
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1819
I0
sg903
S'48-twix.png'
p1820
sS'block_loop.thisRepN'
p1821
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1822
I0
sg908
S'50-polo.png'
p1823
sg55
g11
sS'block_loop.thisTrial'
p1824
Nsg69
Vy
sS'block_loop.thisTrialN'
p1825
I0
sg39
F2.2834807638082566
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x07#\r\xc7X'
tRp1826
sa(dp1827
S'trial_loop.thisTrialN'
p1828
I63
sg894
g1242
sS'block_loop.thisIndex'
p1829
g888
sg38
S'right'
p1830
sg58
g62
sS'trial_loop.thisN'
p1831
I63
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p1832
g59
(g98
S'?\x00\x00\x00'
tRp1833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1834
I0
sg903
g1250
sS'block_loop.thisRepN'
p1835
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1836
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p1837
Nsg69
Vy
sS'block_loop.thisTrialN'
p1838
I0
sg39
F2.6835279195120165
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x07+\x03[`'
tRp1839
sa(dp1840
S'trial_loop.thisTrialN'
p1841
I64
sg894
g1812
sS'block_loop.thisIndex'
p1842
g888
sg38
S'right'
p1843
sg58
g62
sS'trial_loop.thisN'
p1844
I64
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p1845
g59
(g98
S'@\x00\x00\x00'
tRp1846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1847
I0
sg903
g1820
sS'block_loop.thisRepN'
p1848
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1849
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p1850
Nsg69
Vy
sS'block_loop.thisTrialN'
p1851
I0
sg39
F2.2168520916011403
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x072\x0e!0'
tRp1852
sa(dp1853
S'trial_loop.thisTrialN'
p1854
I65
sg894
g1515
sS'block_loop.thisIndex'
p1855
g888
sg38
S'right'
p1856
sg58
g62
sS'trial_loop.thisN'
p1857
I65
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p1858
g59
(g98
S'A\x00\x00\x00'
tRp1859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1860
I0
sg903
g1522
sS'block_loop.thisRepN'
p1861
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1862
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p1863
Nsg69
Vy
sS'block_loop.thisTrialN'
p1864
I0
sg39
F2.6501585589167007
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x07:\x02\xbf '
tRp1865
sa(dp1866
S'trial_loop.thisTrialN'
p1867
I66
sg894
g983
sS'block_loop.thisIndex'
p1868
g888
sg38
S'left'
p1869
sg58
g62
sS'trial_loop.thisN'
p1870
I66
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p1871
g59
(g98
S'B\x00\x00\x00'
tRp1872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1873
I0
sg903
g991
sS'block_loop.thisRepN'
p1874
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1875
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p1876
Nsg69
Vy
sS'block_loop.thisTrialN'
p1877
I0
sg39
F2.9001898487513245
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x08\x05\r\x0b\xd8'
tRp1878
sa(dp1879
S'trial_loop.thisTrialN'
p1880
I67
sg894
g1459
sS'block_loop.thisIndex'
p1881
g888
sg38
S'left'
p1882
sg58
g62
sS'trial_loop.thisN'
p1883
I67
sg33
g1133
sg63
g64
sS'trial_loop.thisIndex'
p1884
g59
(g98
S'C\x00\x00\x00'
tRp1885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1886
I0
sg903
g1466
sS'block_loop.thisRepN'
p1887
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1888
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p1889
Nsg69
Vy
sS'block_loop.thisTrialN'
p1890
I0
sg39
F2.2338746165751218
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x08\r\x0c%`'
tRp1891
sa(dp1892
S'trial_loop.thisTrialN'
p1893
I68
sg894
S'42-mrkipling_lemon_slices.png'
p1894
sS'block_loop.thisIndex'
p1895
g888
sg38
S'right'
p1896
sg58
g62
sS'trial_loop.thisN'
p1897
I68
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p1898
g59
(g98
S'D\x00\x00\x00'
tRp1899
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1900
I0
sg903
S'16-skips_prawn.png'
p1901
sS'block_loop.thisRepN'
p1902
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1903
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p1904
Nsg69
Vy
sS'block_loop.thisTrialN'
p1905
I0
sg39
F3.1999641342954419
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x08\x15\x00\xfd\xe8'
tRp1906
sa(dp1907
S'trial_loop.thisTrialN'
p1908
I69
sg894
g949
sS'block_loop.thisIndex'
p1909
g888
sg38
S'right'
p1910
sg58
g62
sS'trial_loop.thisN'
p1911
I69
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1912
g59
(g98
S'E\x00\x00\x00'
tRp1913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1914
I0
sg903
g957
sS'block_loop.thisRepN'
p1915
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1916
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1917
Nsg69
Vy
sS'block_loop.thisTrialN'
p1918
I0
sg39
F2.8001889649376608
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x08\x1d\x04\x9b\xb0'
tRp1919
sa(dp1920
S'trial_loop.thisTrialN'
p1921
I70
sg894
g1242
sS'block_loop.thisIndex'
p1922
g888
sg38
S'left'
p1923
sg58
g62
sS'trial_loop.thisN'
p1924
I70
sg33
g1253
sg63
g64
sS'trial_loop.thisIndex'
p1925
g59
(g98
S'F\x00\x00\x00'
tRp1926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1927
I0
sg903
g1250
sS'block_loop.thisRepN'
p1928
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1929
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p1930
Nsg69
Vy
sS'block_loop.thisTrialN'
p1931
I0
sg39
F4.2833949484092955
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x08%\x02\x07\x88'
tRp1932
sa(dp1933
S'trial_loop.thisTrialN'
p1934
I71
sg894
g1894
sS'block_loop.thisIndex'
p1935
g888
sg38
S'right'
p1936
sg58
g62
sS'trial_loop.thisN'
p1937
I71
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p1938
g59
(g98
S'G\x00\x00\x00'
tRp1939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1940
I0
sg903
g1901
sS'block_loop.thisRepN'
p1941
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1942
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p1943
Nsg69
Vy
sS'block_loop.thisTrialN'
p1944
I0
sg39
F3.3667370961147753
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x08.\x06\xce0'
tRp1945
sa(dp1946
S'trial_loop.thisTrialN'
p1947
I72
sg894
g1032
sS'block_loop.thisIndex'
p1948
g888
sg38
S'left'
p1949
sg58
g62
sS'trial_loop.thisN'
p1950
I72
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1951
g59
(g98
S'H\x00\x00\x00'
tRp1952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1953
I0
sg903
g1040
sS'block_loop.thisRepN'
p1954
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1955
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1956
Nsg69
Vy
sS'block_loop.thisTrialN'
p1957
I0
sg39
F6.5667137748532696
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x086\x0c\xcdX'
tRp1958
sa(dp1959
S'trial_loop.thisTrialN'
p1960
I73
sg894
g1285
sS'block_loop.thisIndex'
p1961
g888
sg38
S'left'
p1962
sg58
g62
sS'trial_loop.thisN'
p1963
I73
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1964
g59
(g98
S'I\x00\x00\x00'
tRp1965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1966
I0
sg903
g1292
sS'block_loop.thisRepN'
p1967
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1968
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1969
Nsg69
Vy
sS'block_loop.thisTrialN'
p1970
I0
sg39
F4.5667206172774968
sg34
g752
(S'\x07\xdf\t\x1e\x0b\t\x06\x06\xce0'
tRp1971
sa(dp1972
S'trial_loop.thisTrialN'
p1973
I74
sg894
g1784
sS'block_loop.thisIndex'
p1974
g888
sg38
S'left'
p1975
sg58
g62
sS'trial_loop.thisN'
p1976
I74
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p1977
g59
(g98
S'J\x00\x00\x00'
tRp1978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1979
I0
sg903
g1791
sS'block_loop.thisRepN'
p1980
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1981
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p1982
Nsg69
Vy
sS'block_loop.thisTrialN'
p1983
I0
sg39
F2.6000725867124856
sg34
g752
(S'\x07\xdf\t\x1e\x0b\t\x10\x00\x9c@'
tRp1984
sa(dp1985
S'trial_loop.thisTrialN'
p1986
I75
sg894
g1017
sS'block_loop.thisIndex'
p1987
g888
sg38
S'left'
p1988
sg58
g62
sS'trial_loop.thisN'
p1989
I75
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1990
g59
(g98
S'K\x00\x00\x00'
tRp1991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1992
I0
sg903
g1024
sS'block_loop.thisRepN'
p1993
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1994
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1995
Nsg69
Vy
sS'block_loop.thisTrialN'
p1996
I0
sg39
F3.3338660920553593
sg34
g752
(S'\x07\xdf\t\x1e\x0b\t\x17\no\xe0'
tRp1997
sa(dp1998
S'trial_loop.thisTrialN'
p1999
I76
sg894
g1655
sS'block_loop.thisIndex'
p2000
g888
sg38
S'left'
p2001
sg58
g62
sS'trial_loop.thisN'
p2002
I76
sg33
g1666
sg63
g64
sS'trial_loop.thisIndex'
p2003
g59
(g98
S'L\x00\x00\x00'
tRp2004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2005
I0
sg903
g1663
sS'block_loop.thisRepN'
p2006
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2007
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p2008
Nsg69
Vy
sS'block_loop.thisTrialN'
p2009
I0
sg39
F2.2167240812550517
sg34
g752
(S'\x07\xdf\t\x1e\x0b\t \x00\xaf\xc8'
tRp2010
sa(dp2011
S'trial_loop.thisTrialN'
p2012
I77
sg894
g1122
sS'block_loop.thisIndex'
p2013
g888
sg38
S'right'
p2014
sg58
g62
sS'trial_loop.thisN'
p2015
I77
sg33
g1126
sg63
g64
sS'trial_loop.thisIndex'
p2016
g59
(g98
S'M\x00\x00\x00'
tRp2017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2018
I0
sg903
g1130
sS'block_loop.thisRepN'
p2019
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2020
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p2021
Nsg69
Vy
sS'block_loop.thisTrialN'
p2022
I0
sg39
F2.4500729715982743
sg34
g752
(S"\x07\xdf\t\x1e\x0b\t'\x04\x8f\xf8"
tRp2023
sa(dp2024
S'trial_loop.thisTrialN'
p2025
I78
sg894
g1188
sS'block_loop.thisIndex'
p2026
g888
sg38
S'left'
p2027
sg58
g62
sS'trial_loop.thisN'
p2028
I78
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p2029
g59
(g98
S'N\x00\x00\x00'
tRp2030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2031
I0
sg903
g1195
sS'block_loop.thisRepN'
p2032
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2033
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p2034
Nsg69
Vy
sS'block_loop.thisTrialN'
p2035
I0
sg39
F2.5164664354870183
sg34
g752
(S'\x07\xdf\t\x1e\x0b\t.\x0b\xc7\xa0'
tRp2036
sa(dp2037
S'trial_loop.thisTrialN'
p2038
I79
sg894
S'5-pineapple.png'
p2039
sS'block_loop.thisIndex'
p2040
g888
sg38
S'left'
p2041
sg58
g62
sS'trial_loop.thisN'
p2042
I79
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2043
g59
(g98
S'O\x00\x00\x00'
tRp2044
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2045
I0
sg903
S'40-sardines.png'
p2046
sS'block_loop.thisRepN'
p2047
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2048
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p2049
Nsg69
Vy
sS'block_loop.thisTrialN'
p2050
I0
sg39
F2.8005493325927091
sg34
g752
(S'\x07\xdf\t\x1e\x0b\t6\x04\xe9\xd0'
tRp2051
sa(dp2052
S'trial_loop.thisTrialN'
p2053
I80
sg894
g932
sS'block_loop.thisIndex'
p2054
g888
sg38
S'right'
p2055
sg58
g62
sS'trial_loop.thisN'
p2056
I80
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2057
g59
(g98
S'P\x00\x00\x00'
tRp2058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2059
I0
sg903
g940
sS'block_loop.thisRepN'
p2060
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2061
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2062
Nsg69
Vy
sS'block_loop.thisTrialN'
p2063
I0
sg39
F3.8001732843831633
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n\x02\x02U\xa8'
tRp2064
sa(dp2065
S'trial_loop.thisTrialN'
p2066
I81
sg894
g1425
sS'block_loop.thisIndex'
p2067
g888
sg38
S'left'
p2068
sg58
g62
sS'trial_loop.thisN'
p2069
I81
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p2070
g59
(g98
S'Q\x00\x00\x00'
tRp2071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2072
I0
sg903
g1433
sS'block_loop.thisRepN'
p2073
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2074
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vy
sS'block_loop.thisTrialN'
p2076
I0
sg39
F1.2334828878110784
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n\n\x0f>X'
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
g1487
sS'block_loop.thisIndex'
p2080
g888
sg38
S'left'
p2081
sg58
g62
sS'trial_loop.thisN'
p2082
I82
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2083
g59
(g98
S'R\x00\x00\x00'
tRp2084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2085
I0
sg903
g1494
sS'block_loop.thisRepN'
p2086
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2087
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2088
Nsg69
Vy
sS'block_loop.thisTrialN'
p2089
I0
sg39
F2.316762883499905
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n\x11\x03\xe00'
tRp2090
sa(dp2091
S'trial_loop.thisTrialN'
p2092
I83
sg894
g1812
sS'block_loop.thisIndex'
p2093
g888
sg38
S'right'
p2094
sg58
g62
sS'trial_loop.thisN'
p2095
I83
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p2096
g59
(g98
S'S\x00\x00\x00'
tRp2097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2098
I0
sg903
g1820
sS'block_loop.thisRepN'
p2099
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2100
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p2101
Nsg69
Vy
sS'block_loop.thisTrialN'
p2102
I0
sg39
F2.1667815148502996
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n\x18\tj('
tRp2103
sa(dp2104
S'trial_loop.thisTrialN'
p2105
I84
sg894
g1171
sS'block_loop.thisIndex'
p2106
g888
sg38
S'left'
p2107
sg58
g62
sS'trial_loop.thisN'
p2108
I84
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p2109
g59
(g98
S'T\x00\x00\x00'
tRp2110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2111
I0
sg903
g1179
sS'block_loop.thisRepN'
p2112
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2113
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vy
sS'block_loop.thisTrialN'
p2115
I0
sg39
F4.2505652839936374
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n\x1f\x0cX('
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g1743
sS'block_loop.thisIndex'
p2119
g888
sg38
S'right'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g1750
sS'block_loop.thisRepN'
p2125
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2126
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vy
sS'block_loop.thisTrialN'
p2128
I0
sg39
F1.2001446032236345
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n)\x01cx'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g1672
sS'block_loop.thisIndex'
p2132
g888
sg38
S'right'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g1676
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g1680
sS'block_loop.thisRepN'
p2138
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2139
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vy
sS'block_loop.thisTrialN'
p2141
I0
sg39
F2.6333797952920577
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n/\x05\x0c\xf8'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g915
sS'block_loop.thisIndex'
p2145
g888
sg38
S'right'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g923
sS'block_loop.thisRepN'
p2151
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2152
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vy
sS'block_loop.thisTrialN'
p2154
I0
sg39
F1.8001202555988129
sg34
g752
(S'\x07\xdf\t\x1e\x0b\n6\x0f\x1f\x18'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g1569
sS'block_loop.thisIndex'
p2158
g888
sg38
S'right'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g1577
sS'block_loop.thisRepN'
p2164
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2165
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vy
sS'block_loop.thisTrialN'
p2167
I0
sg39
F1.7335229444997822
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b\x01\x0c\x92\xc0'
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g1672
sS'block_loop.thisIndex'
p2171
g888
sg38
S'right'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g1676
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g1680
sS'block_loop.thisRepN'
p2177
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vy
sS'block_loop.thisTrialN'
p2180
I0
sg39
F1.5172533142276734
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b\x08\t\x10P'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1743
sS'block_loop.thisIndex'
p2184
g888
sg38
S'right'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1750
sS'block_loop.thisRepN'
p2190
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vy
sS'block_loop.thisTrialN'
p2193
I0
sg39
F1.1334620469278889
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b\x0f\x02:P'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
S'48-twix.png'
p2197
sS'block_loop.thisIndex'
p2198
g888
sg38
S'left'
p2199
sg58
g62
sS'trial_loop.thisN'
p2200
I91
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p2201
g59
(g98
S'[\x00\x00\x00'
tRp2202
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2203
I0
sg903
S'50-polo.png'
p2204
sS'block_loop.thisRepN'
p2205
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2206
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p2207
Nsg69
Vy
sS'block_loop.thisTrialN'
p2208
I0
sg39
F3.1833766734353048
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b\x15\x04\xb3 '
tRp2209
sa(dp2210
S'trial_loop.thisTrialN'
p2211
I92
sg894
g1105
sS'block_loop.thisIndex'
p2212
g888
sg38
S'right'
p2213
sg58
g62
sS'trial_loop.thisN'
p2214
I92
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p2215
g59
(g98
S'\\\x00\x00\x00'
tRp2216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2217
I0
sg903
g1113
sS'block_loop.thisRepN'
p2218
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2219
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p2220
Nsg69
Vy
sS'block_loop.thisTrialN'
p2221
I0
sg39
F2.6668381073968703
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b\x1d\x08\x12h'
tRp2222
sa(dp2223
S'trial_loop.thisTrialN'
p2224
I93
sg894
g1188
sS'block_loop.thisIndex'
p2225
g888
sg38
S'right'
p2226
sg58
g62
sS'trial_loop.thisN'
p2227
I93
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p2228
g59
(g98
S']\x00\x00\x00'
tRp2229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2230
I0
sg903
g1195
sS'block_loop.thisRepN'
p2231
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2232
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vy
sS'block_loop.thisTrialN'
p2234
I0
sg39
F1.4665224435775599
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b%\x03[`'
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g1515
sS'block_loop.thisIndex'
p2238
g888
sg38
S'right'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g1522
sS'block_loop.thisRepN'
p2244
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2245
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vy
sS'block_loop.thisTrialN'
p2247
I0
sg39
F1.7003902177284544
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b+\x0b\x10\x08'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1655
sS'block_loop.thisIndex'
p2251
g888
sg38
S'left'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1663
sS'block_loop.thisRepN'
p2257
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2258
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vy
sS'block_loop.thisTrialN'
p2260
I0
sg39
F2.7000181609328138
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b2\x07\x14\x80'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g1154
sS'block_loop.thisIndex'
p2264
g888
sg38
S'right'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g1165
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g1162
sS'block_loop.thisRepN'
p2270
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2271
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vy
sS'block_loop.thisTrialN'
p2273
I0
sg39
F2.1167403035015013
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0b:\x02\xd6\x90'
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
g1285
sS'block_loop.thisIndex'
p2277
g888
sg38
S'right'
p2278
sg58
g62
sS'trial_loop.thisN'
p2279
I97
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2280
g59
(g98
S'a\x00\x00\x00'
tRp2281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2282
I0
sg903
g1292
sS'block_loop.thisRepN'
p2283
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2284
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vy
sS'block_loop.thisTrialN'
p2286
I0
sg39
F2.9165951300756205
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c\x05\x05Kx'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1640
sS'block_loop.thisIndex'
p2290
g888
sg38
S'right'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1647
sS'block_loop.thisRepN'
p2296
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2297
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vy
sS'block_loop.thisTrialN'
p2299
I0
sg39
F2.0502005828038818
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c\r\x04a\x18'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
g2197
sS'block_loop.thisIndex'
p2303
g888
sg38
S'left'
p2304
sg58
g62
sS'trial_loop.thisN'
p2305
I99
sg33
g1823
sg63
g64
sS'trial_loop.thisIndex'
p2306
g59
(g98
S'c\x00\x00\x00'
tRp2307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2308
I0
sg903
g2204
sS'block_loop.thisRepN'
p2309
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2310
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vy
sS'block_loop.thisTrialN'
p2312
I0
sg39
F2.6338698838981145
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c\x14\x05\xa5P'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
g1313
sS'block_loop.thisIndex'
p2316
g888
sg38
S'right'
p2317
sg58
g62
sS'trial_loop.thisN'
p2318
I100
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p2319
g59
(g98
S'd\x00\x00\x00'
tRp2320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2321
I0
sg903
g1320
sS'block_loop.thisRepN'
p2322
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2323
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2324
Nsg69
Vy
sS'block_loop.thisTrialN'
p2325
I0
sg39
F4.4668007021473386
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c\x1c\x00\xaf\xc8'
tRp2326
sa(dp2327
S'trial_loop.thisTrialN'
p2328
I101
sg894
g1784
sS'block_loop.thisIndex'
p2329
g888
sg38
S'left'
p2330
sg58
g62
sS'trial_loop.thisN'
p2331
I101
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p2332
g59
(g98
S'e\x00\x00\x00'
tRp2333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2334
I0
sg903
g1791
sS'block_loop.thisRepN'
p2335
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2336
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p2337
Nsg69
Vy
sS'block_loop.thisTrialN'
p2338
I0
sg39
F2.2667293698777939
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c%\x08P\xe8'
tRp2339
sa(dp2340
S'trial_loop.thisTrialN'
p2341
I102
sg894
g1459
sS'block_loop.thisIndex'
p2342
g888
sg38
S'left'
p2343
sg58
g62
sS'trial_loop.thisN'
p2344
I102
sg33
g1126
sg63
g64
sS'trial_loop.thisIndex'
p2345
g59
(g98
S'f\x00\x00\x00'
tRp2346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2347
I0
sg903
g1466
sS'block_loop.thisRepN'
p2348
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2349
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p2350
Nsg69
Vy
sS'block_loop.thisTrialN'
p2351
I0
sg39
F1.9500705482405465
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c,\x0c\xe8\xb0'
tRp2352
sa(dp2353
S'trial_loop.thisTrialN'
p2354
I103
sg894
g1077
sS'block_loop.thisIndex'
p2355
g888
sg38
S'left'
p2356
sg58
g62
sS'trial_loop.thisN'
p2357
I103
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2358
g59
(g98
S'g\x00\x00\x00'
tRp2359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2360
I0
sg903
g1084
sS'block_loop.thisRepN'
p2361
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2362
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2363
Nsg69
Vy
sS'block_loop.thisTrialN'
p2364
I0
sg39
F3.0339124779866324
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c3\x0c\x7f8'
tRp2365
sa(dp2366
S'trial_loop.thisTrialN'
p2367
I104
sg894
g1328
sS'block_loop.thisIndex'
p2368
g888
sg38
S'left'
p2369
sg58
g62
sS'trial_loop.thisN'
p2370
I104
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2371
g59
(g98
S'h\x00\x00\x00'
tRp2372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2373
I0
sg903
g1335
sS'block_loop.thisRepN'
p2374
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vy
sS'block_loop.thisTrialN'
p2377
I0
sg39
F5.8001749949889927
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0c;\r\xbb\xa0'
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g932
sS'block_loop.thisIndex'
p2381
g888
sg38
S'left'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g940
sS'block_loop.thisRepN'
p2387
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2388
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vy
sS'block_loop.thisTrialN'
p2390
I0
sg39
F1.6334379558938963
sg34
g752
(S'\x07\xdf\t\x1e\x0b\r\n\x0b\x17\xd8'
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
g1017
sS'block_loop.thisIndex'
p2394
g888
sg38
S'right'
p2395
sg58
g62
sS'trial_loop.thisN'
p2396
I106
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2397
g59
(g98
S'j\x00\x00\x00'
tRp2398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2399
I0
sg903
g1024
sS'block_loop.thisRepN'
p2400
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2401
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2402
Nsg69
Vy
sS'block_loop.thisTrialN'
p2403
I0
sg39
F2.2834870360302375
sg34
g752
(S'\x07\xdf\t\x1e\x0b\r\x11\x05\xeb\xa0'
tRp2404
sa(dp2405
S'trial_loop.thisTrialN'
p2406
I107
sg894
g1894
sS'block_loop.thisIndex'
p2407
g888
sg38
S'right'
p2408
sg58
g62
sS'trial_loop.thisN'
p2409
I107
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p2410
g59
(g98
S'k\x00\x00\x00'
tRp2411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2412
I0
sg903
g1901
sS'block_loop.thisRepN'
p2413
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2414
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p2415
Nsg69
Vy
sS'block_loop.thisTrialN'
p2416
I0
sg39
F1.5501009400059047
sg34
g752
(S'\x07\xdf\t\x1e\x0b\r\x18\n\xbe\x00'
tRp2417
sa(dp2418
S'trial_loop.thisTrialN'
p2419
I108
sg894
g2039
sS'block_loop.thisIndex'
p2420
g888
sg38
S'right'
p2421
sg58
g62
sS'trial_loop.thisN'
p2422
I108
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2423
g59
(g98
S'l\x00\x00\x00'
tRp2424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2425
I0
sg903
g2046
sS'block_loop.thisRepN'
p2426
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2427
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p2428
Nsg69
Vy
sS'block_loop.thisTrialN'
p2429
I0
sg39
F6.5834189824226996
sg34
g752
(S'\x07\xdf\t\x1e\x0b\r\x1f\x04a\x18'
tRp2430
sa(dp2431
S'trial_loop.thisTrialN'
p2432
I109
sg894
g1154
sS'block_loop.thisIndex'
p2433
g888
sg38
S'right'
p2434
sg58
g62
sS'trial_loop.thisN'
p2435
I109
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2436
g59
(g98
S'm\x00\x00\x00'
tRp2437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2438
I0
sg903
g1162
sS'block_loop.thisRepN'
p2439
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2440
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2441
Nsg69
Vy
sS'block_loop.thisTrialN'
p2442
I0
sg39
F7.1167514224407569
sg34
g752
(S'\x07\xdf\t\x1e\x0b\r*\r\xde\xc8'
tRp2443
sa(dp2444
S'trial_loop.thisTrialN'
p2445
I110
sg894
g1171
sS'block_loop.thisIndex'
p2446
g888
sg38
S'left'
p2447
sg58
g62
sS'trial_loop.thisN'
p2448
I110
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p2449
g59
(g98
S'n\x00\x00\x00'
tRp2450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2451
I0
sg903
g1179
sS'block_loop.thisRepN'
p2452
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2453
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p2454
Nsg69
Vy
sS'block_loop.thisTrialN'
p2455
I0
sg39
F3.1671176489198842
sg34
g752
(S'\x07\xdf\t\x1e\x0b\r7\x00\xf20'
tRp2456
sa(dp2457
S'trial_loop.thisTrialN'
p2458
I111
sg894
g1188
sS'block_loop.thisIndex'
p2459
g888
sg38
S'right'
p2460
sg58
g62
sS'trial_loop.thisN'
p2461
I111
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p2462
g59
(g98
S'o\x00\x00\x00'
tRp2463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2464
I0
sg903
g1195
sS'block_loop.thisRepN'
p2465
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2466
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p2467
Nsg69
Vy
sS'block_loop.thisTrialN'
p2468
I0
sg39
F3.6497976210603156
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e\x03\x03\xd8`'
tRp2469
sa(dp2470
S'trial_loop.thisTrialN'
p2471
I112
sg894
g1017
sS'block_loop.thisIndex'
p2472
g888
sg38
S'right'
p2473
sg58
g62
sS'trial_loop.thisN'
p2474
I112
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2475
g59
(g98
S'p\x00\x00\x00'
tRp2476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2477
I0
sg903
g1024
sS'block_loop.thisRepN'
p2478
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2479
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2480
Nsg69
Vy
sS'block_loop.thisTrialN'
p2481
I0
sg39
F1.7499436212783621
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e\x0b\x0e[\xc8'
tRp2482
sa(dp2483
S'trial_loop.thisTrialN'
p2484
I113
sg894
g1640
sS'block_loop.thisIndex'
p2485
g888
sg38
S'right'
p2486
sg58
g62
sS'trial_loop.thisN'
p2487
I113
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p2488
g59
(g98
S'q\x00\x00\x00'
tRp2489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2490
I0
sg903
g1647
sS'block_loop.thisRepN'
p2491
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2492
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p2493
Nsg69
Vy
sS'block_loop.thisTrialN'
p2494
I0
sg39
F2.0002038472102868
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e\x12\x0b\x17\xd8'
tRp2495
sa(dp2496
S'trial_loop.thisTrialN'
p2497
I114
sg894
g1049
sS'block_loop.thisIndex'
p2498
g888
sg38
S'right'
p2499
sg58
g62
sS'trial_loop.thisN'
p2500
I114
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p2501
g59
(g98
S'r\x00\x00\x00'
tRp2502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2503
I0
sg903
g1056
sS'block_loop.thisRepN'
p2504
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2505
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p2506
Nsg69
Vy
sS'block_loop.thisTrialN'
p2507
I0
sg39
F3.4001794425648768
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e\x19\x0b\xa4x'
tRp2508
sa(dp2509
S'trial_loop.thisTrialN'
p2510
I115
sg894
g1812
sS'block_loop.thisIndex'
p2511
g888
sg38
S'right'
p2512
sg58
g62
sS'trial_loop.thisN'
p2513
I115
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p2514
g59
(g98
S's\x00\x00\x00'
tRp2515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2516
I0
sg903
g1820
sS'block_loop.thisRepN'
p2517
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2518
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p2519
Nsg69
Vy
sS'block_loop.thisTrialN'
p2520
I0
sg39
F2.2335131085155808
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e"\x02\xdax'
tRp2521
sa(dp2522
S'trial_loop.thisTrialN'
p2523
I116
sg894
g1425
sS'block_loop.thisIndex'
p2524
g888
sg38
S'left'
p2525
sg58
g62
sS'trial_loop.thisN'
p2526
I116
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p2527
g59
(g98
S't\x00\x00\x00'
tRp2528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2529
I0
sg903
g1433
sS'block_loop.thisRepN'
p2530
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2531
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p2532
Nsg69
Vy
sS'block_loop.thisTrialN'
p2533
I0
sg39
F1.4002051016541373
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e)\x06\xf5@'
tRp2534
sa(dp2535
S'trial_loop.thisTrialN'
p2536
I117
sg894
g1188
sS'block_loop.thisIndex'
p2537
g888
sg38
S'right'
p2538
sg58
g62
sS'trial_loop.thisN'
p2539
I117
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p2540
g59
(g98
S'u\x00\x00\x00'
tRp2541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2542
I0
sg903
g1195
sS'block_loop.thisRepN'
p2543
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2544
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p2545
Nsg69
Vy
sS'block_loop.thisTrialN'
p2546
I0
sg39
F2.1332522125976539
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e/\r\xb7\xb8'
tRp2547
sa(dp2548
S'trial_loop.thisTrialN'
p2549
I118
sg894
g1459
sS'block_loop.thisIndex'
p2550
g888
sg38
S'right'
p2551
sg58
g62
sS'trial_loop.thisN'
p2552
I118
sg33
g1126
sg63
g64
sS'trial_loop.thisIndex'
p2553
g59
(g98
S'v\x00\x00\x00'
tRp2554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2555
I0
sg903
g1466
sS'block_loop.thisRepN'
p2556
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2557
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p2558
Nsg69
Vy
sS'block_loop.thisTrialN'
p2559
I0
sg39
F3.3834770860057688
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0e7\x00\xea`'
tRp2560
sa(dp2561
S'trial_loop.thisTrialN'
p2562
I119
sg894
g1569
sS'block_loop.thisIndex'
p2563
g888
sg38
S'right'
p2564
sg58
g62
sS'trial_loop.thisN'
p2565
I119
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p2566
g59
(g98
S'w\x00\x00\x00'
tRp2567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2568
I0
sg903
g1577
sS'block_loop.thisRepN'
p2569
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2570
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p2571
Nsg69
Vy
sS'block_loop.thisTrialN'
p2572
I0
sg39
F1.7005059687317043
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f\x03\x07$ '
tRp2573
sa(dp2574
S'trial_loop.thisTrialN'
p2575
I120
sg894
g1784
sS'block_loop.thisIndex'
p2576
g888
sg38
S'left'
p2577
sg58
g62
sS'trial_loop.thisN'
p2578
I120
sg33
g1116
sg63
g64
sS'trial_loop.thisIndex'
p2579
g59
(g98
S'x\x00\x00\x00'
tRp2580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2581
I0
sg903
g1791
sS'block_loop.thisRepN'
p2582
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2583
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p2584
Nsg69
Vy
sS'block_loop.thisTrialN'
p2585
I0
sg39
F1.5001064852212949
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f\n\x03(\x98'
tRp2586
sa(dp2587
S'trial_loop.thisTrialN'
p2588
I121
sg894
g1122
sS'block_loop.thisIndex'
p2589
g888
sg38
S'left'
p2590
sg58
g62
sS'trial_loop.thisN'
p2591
I121
sg33
g1126
sg63
g64
sS'trial_loop.thisIndex'
p2592
g59
(g98
S'y\x00\x00\x00'
tRp2593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2594
I0
sg903
g1130
sS'block_loop.thisRepN'
p2595
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2596
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p2597
Nsg69
Vy
sS'block_loop.thisTrialN'
p2598
I0
sg39
F2.9335047550566742
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f\x10\x0bZ@'
tRp2599
sa(dp2600
S'trial_loop.thisTrialN'
p2601
I122
sg894
g1569
sS'block_loop.thisIndex'
p2602
g888
sg38
S'right'
p2603
sg58
g62
sS'trial_loop.thisN'
p2604
I122
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p2605
g59
(g98
S'z\x00\x00\x00'
tRp2606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2607
I0
sg903
g1577
sS'block_loop.thisRepN'
p2608
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2609
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p2610
Nsg69
Vy
sS'block_loop.thisTrialN'
p2611
I0
sg39
F1.4668135316906046
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f\x18\n\xe8\xf8'
tRp2612
sa(dp2613
S'trial_loop.thisTrialN'
p2614
I123
sg894
g1077
sS'block_loop.thisIndex'
p2615
g888
sg38
S'left'
p2616
sg58
g62
sS'trial_loop.thisN'
p2617
I123
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2618
g59
(g98
S'{\x00\x00\x00'
tRp2619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2620
I0
sg903
g1084
sS'block_loop.thisRepN'
p2621
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2622
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2623
Nsg69
Vy
sS'block_loop.thisTrialN'
p2624
I0
sg39
F3.350191545101552
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f\x1f\x03 \xc8'
tRp2625
sa(dp2626
S'trial_loop.thisTrialN'
p2627
I124
sg894
g1285
sS'block_loop.thisIndex'
p2628
g888
sg38
S'right'
p2629
sg58
g62
sS'trial_loop.thisN'
p2630
I124
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2631
g59
(g98
S'|\x00\x00\x00'
tRp2632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2633
I0
sg903
g1292
sS'block_loop.thisRepN'
p2634
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2635
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2636
Nsg69
Vy
sS'block_loop.thisTrialN'
p2637
I0
sg39
F1.3838790784056982
sg34
g752
(S"\x07\xdf\t\x1e\x0b\x0f'\t\x1f\xf0"
tRp2638
sa(dp2639
S'trial_loop.thisTrialN'
p2640
I125
sg894
g1640
sS'block_loop.thisIndex'
p2641
g888
sg38
S'right'
p2642
sg58
g62
sS'trial_loop.thisN'
p2643
I125
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p2644
g59
(g98
S'}\x00\x00\x00'
tRp2645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2646
I0
sg903
g1647
sS'block_loop.thisRepN'
p2647
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2648
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p2649
Nsg69
Vy
sS'block_loop.thisTrialN'
p2650
I0
sg39
F1.3501157082382633
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f.\x00#('
tRp2651
sa(dp2652
S'trial_loop.thisTrialN'
p2653
I126
sg894
g2039
sS'block_loop.thisIndex'
p2654
g888
sg38
S'right'
p2655
sg58
g62
sS'trial_loop.thisN'
p2656
I126
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2657
g59
(g98
S'~\x00\x00\x00'
tRp2658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2659
I0
sg903
g2046
sS'block_loop.thisRepN'
p2660
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2661
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p2662
Nsg69
Vy
sS'block_loop.thisTrialN'
p2663
I0
sg39
F1.6668192907318371
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f4\x05\xf3p'
tRp2664
sa(dp2665
S'trial_loop.thisTrialN'
p2666
I127
sg894
g1728
sS'block_loop.thisIndex'
p2667
g888
sg38
S'left'
p2668
sg58
g62
sS'trial_loop.thisN'
p2669
I127
sg33
g1580
sg63
g64
sS'trial_loop.thisIndex'
p2670
g59
(g98
S'\x7f\x00\x00\x00'
tRp2671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2672
I0
sg903
g1735
sS'block_loop.thisRepN'
p2673
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2674
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p2675
Nsg69
Vy
sS'block_loop.thisTrialN'
p2676
I0
sg39
F1.5168684278878573
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x0f;\x01~\xd0'
tRp2677
sa(dp2678
S'trial_loop.thisTrialN'
p2679
I128
sg894
g983
sS'block_loop.thisIndex'
p2680
g888
sg38
S'right'
p2681
sg58
g62
sS'trial_loop.thisN'
p2682
I128
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p2683
g59
(g98
S'\x80\x00\x00\x00'
tRp2684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2685
I0
sg903
g991
sS'block_loop.thisRepN'
p2686
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2687
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p2688
Nsg69
Vy
sS'block_loop.thisTrialN'
p2689
I0
sg39
F5.6836439556172991
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x10\x05\t\xac\x90'
tRp2690
sa(dp2691
S'trial_loop.thisTrialN'
p2692
I129
sg894
g1672
sS'block_loop.thisIndex'
p2693
g888
sg38
S'right'
p2694
sg58
g62
sS'trial_loop.thisN'
p2695
I129
sg33
g1676
sg63
g64
sS'trial_loop.thisIndex'
p2696
g59
(g98
S'\x81\x00\x00\x00'
tRp2697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2698
I0
sg903
g1680
sS'block_loop.thisRepN'
p2699
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2700
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p2701
Nsg69
Vy
sS'block_loop.thisTrialN'
p2702
I0
sg39
F1.9169267025299632
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x10\x10\x05[\x18'
tRp2703
sa(dp2704
S'trial_loop.thisTrialN'
p2705
I130
sg894
g1728
sS'block_loop.thisIndex'
p2706
g888
sg38
S'left'
p2707
sg58
g62
sS'trial_loop.thisN'
p2708
I130
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p2709
g59
(g98
S'\x82\x00\x00\x00'
tRp2710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2711
I0
sg903
g1735
sS'block_loop.thisRepN'
p2712
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2713
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p2714
Nsg69
Vy
sS'block_loop.thisTrialN'
p2715
I0
sg39
F1.2668844648187587
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x10\x17\x04\xb7\x08'
tRp2716
sa(dp2717
S'trial_loop.thisTrialN'
p2718
I131
sg894
g1395
sS'block_loop.thisIndex'
p2719
g888
sg38
S'left'
p2720
sg58
g62
sS'trial_loop.thisN'
p2721
I131
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p2722
g59
(g98
S'\x83\x00\x00\x00'
tRp2723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2724
I0
sg903
g1403
sS'block_loop.thisRepN'
p2725
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2726
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p2727
Nsg69
Vy
sS'block_loop.thisTrialN'
p2728
I0
sg39
F1.9167604886515619
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x10\x1d\tR\xb8'
tRp2729
sa(dp2730
S'trial_loop.thisTrialN'
p2731
I132
sg894
g1625
sS'block_loop.thisIndex'
p2732
g888
sg38
S'left'
p2733
sg58
g62
sS'trial_loop.thisN'
p2734
I132
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2735
g59
(g98
S'\x84\x00\x00\x00'
tRp2736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2737
I0
sg903
g1632
sS'block_loop.thisRepN'
p2738
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2739
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2740
Nsg69
Vy
sS'block_loop.thisTrialN'
p2741
I0
sg39
F2.9167425272889886
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x10$\x08p('
tRp2742
sa(dp2743
S'trial_loop.thisTrialN'
p2744
I133
sg894
g1105
sS'block_loop.thisIndex'
p2745
g888
sg38
S'right'
p2746
sg58
g62
sS'trial_loop.thisN'
p2747
I133
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p2748
g59
(g98
S'\x85\x00\x00\x00'
tRp2749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2750
I0
sg903
g1113
sS'block_loop.thisRepN'
p2751
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2752
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p2753
Nsg69
Vy
sS'block_loop.thisTrialN'
p2754
I0
sg39
F2.4839788922627122
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x10,\x07\xc4H'
tRp2755
sa(dp2756
S'trial_loop.thisTrialN'
p2757
I134
sg894
g1728
sS'block_loop.thisIndex'
p2758
g888
sg38
S'left'
p2759
sg58
g62
sS'trial_loop.thisN'
p2760
I134
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p2761
g59
(g98
S'\x86\x00\x00\x00'
tRp2762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2763
I0
sg903
g1735
sS'block_loop.thisRepN'
p2764
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2765
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p2766
Nsg69
Vy
sS'block_loop.thisTrialN'
p2767
I0
sg39
F1.4835364155214847
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x104\x00qH'
tRp2768
sa(dp2769
S'trial_loop.thisTrialN'
p2770
I135
sg894
g1139
sS'block_loop.thisIndex'
p2771
g888
sg38
S'left'
p2772
sg58
g62
sS'trial_loop.thisN'
p2773
I135
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2774
g59
(g98
S'\x87\x00\x00\x00'
tRp2775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2776
I0
sg903
g1146
sS'block_loop.thisRepN'
p2777
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2778
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2779
Nsg69
Vy
sS'block_loop.thisTrialN'
p2780
I0
sg39
F3.650152571795843
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x10:\x08%\xf0'
tRp2781
sa(dp2782
S'trial_loop.thisTrialN'
p2783
I136
sg894
g983
sS'block_loop.thisIndex'
p2784
g888
sg38
S'right'
p2785
sg58
g62
sS'trial_loop.thisN'
p2786
I136
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p2787
g59
(g98
S'\x88\x00\x00\x00'
tRp2788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2789
I0
sg903
g991
sS'block_loop.thisRepN'
p2790
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2791
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p2792
Nsg69
Vy
sS'block_loop.thisTrialN'
p2793
I0
sg39
F1.3834941920649726
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x11\x07\x03g\x18'
tRp2794
sa(dp2795
S'trial_loop.thisTrialN'
p2796
I137
sg894
g1328
sS'block_loop.thisIndex'
p2797
g888
sg38
S'right'
p2798
sg58
g62
sS'trial_loop.thisN'
p2799
I137
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2800
g59
(g98
S'\x89\x00\x00\x00'
tRp2801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2802
I0
sg903
g1335
sS'block_loop.thisRepN'
p2803
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2804
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p2805
Nsg69
Vy
sS'block_loop.thisTrialN'
p2806
I0
sg39
F7.1001394428949425
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x11\r\t\xb0x'
tRp2807
sa(dp2808
S'trial_loop.thisTrialN'
p2809
I138
sg894
g1395
sS'block_loop.thisIndex'
p2810
g888
sg38
S'left'
p2811
sg58
g62
sS'trial_loop.thisN'
p2812
I138
sg33
g1399
sg63
g64
sS'trial_loop.thisIndex'
p2813
g59
(g98
S'\x8a\x00\x00\x00'
tRp2814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2815
I0
sg903
g1403
sS'block_loop.thisRepN'
p2816
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2817
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p2818
Nsg69
Vy
sS'block_loop.thisTrialN'
p2819
I0
sg39
F1.7668894540856854
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x11\x19\x0b\xc3\xb8'
tRp2820
sa(dp2821
S'trial_loop.thisTrialN'
p2822
I139
sg894
g1285
sS'block_loop.thisIndex'
p2823
g888
sg38
S'right'
p2824
sg58
g62
sS'trial_loop.thisN'
p2825
I139
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2826
g59
(g98
S'\x8b\x00\x00\x00'
tRp2827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2828
I0
sg903
g1292
sS'block_loop.thisRepN'
p2829
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2830
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2831
Nsg69
Vy
sS'block_loop.thisTrialN'
p2832
I0
sg39
F1.7835151184781353
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x11 \x08\xbeH'
tRp2833
sa(dp2834
S'trial_loop.thisTrialN'
p2835
I140
sg894
g966
sS'block_loop.thisIndex'
p2836
g888
sg38
S'right'
p2837
sg58
g62
sS'trial_loop.thisN'
p2838
I140
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p2839
g59
(g98
S'\x8c\x00\x00\x00'
tRp2840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2841
I0
sg903
g974
sS'block_loop.thisRepN'
p2842
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2843
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2844
Nsg69
Vy
sS'block_loop.thisTrialN'
p2845
I0
sg39
F2.5001617948128114
sg34
g752
(S"\x07\xdf\t\x1e\x0b\x11'\x05\xf3p"
tRp2846
sa(dp2847
S'trial_loop.thisTrialN'
p2848
I141
sg894
g949
sS'block_loop.thisIndex'
p2849
g888
sg38
S'left'
p2850
sg58
g62
sS'trial_loop.thisN'
p2851
I141
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2852
g59
(g98
S'\x8d\x00\x00\x00'
tRp2853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2854
I0
sg903
g957
sS'block_loop.thisRepN'
p2855
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2856
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2857
Nsg69
Vy
sS'block_loop.thisTrialN'
p2858
I0
sg39
F1.7500918737950997
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x11.\x0e\x1dH'
tRp2859
sa(dp2860
S'trial_loop.thisTrialN'
p2861
I142
sg894
g2039
sS'block_loop.thisIndex'
p2862
g888
sg38
S'right'
p2863
sg58
g62
sS'trial_loop.thisN'
p2864
I142
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p2865
g59
(g98
S'\x8e\x00\x00\x00'
tRp2866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2867
I0
sg903
g2046
sS'block_loop.thisRepN'
p2868
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2869
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p2870
Nsg69
Vy
sS'block_loop.thisTrialN'
p2871
I0
sg39
F1.8505731527802709
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x115\n\xd9X'
tRp2872
sa(dp2873
S'trial_loop.thisTrialN'
p2874
I143
sg894
g1425
sS'block_loop.thisIndex'
p2875
g888
sg38
S'left'
p2876
sg58
g62
sS'trial_loop.thisN'
p2877
I143
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p2878
g59
(g98
S'\x8f\x00\x00\x00'
tRp2879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2880
I0
sg903
g1433
sS'block_loop.thisRepN'
p2881
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2882
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p2883
Nsg69
Vy
sS'block_loop.thisTrialN'
p2884
I0
sg39
F1.1834556464109482
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x12\x00\t\x04\x98'
tRp2885
sa(dp2886
S'trial_loop.thisTrialN'
p2887
I144
sg894
g1000
sS'block_loop.thisIndex'
p2888
g888
sg38
S'left'
p2889
sg58
g62
sS'trial_loop.thisN'
p2890
I144
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p2891
g59
(g98
S'\x90\x00\x00\x00'
tRp2892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2893
I0
sg903
g1008
sS'block_loop.thisRepN'
p2894
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2895
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p2896
Nsg69
Vy
sS'block_loop.thisTrialN'
p2897
I0
sg39
F5.1165244820504086
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x12\x06\x0c1\x18'
tRp2898
sa(dp2899
S'trial_loop.thisTrialN'
p2900
I145
sg894
g1743
sS'block_loop.thisIndex'
p2901
g888
sg38
S'right'
p2902
sg58
g62
sS'trial_loop.thisN'
p2903
I145
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p2904
g59
(g98
S'\x91\x00\x00\x00'
tRp2905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2906
I0
sg903
g1750
sS'block_loop.thisRepN'
p2907
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2908
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p2909
Nsg69
Vy
sS'block_loop.thisTrialN'
p2910
I0
sg39
F1.2001349097899947
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x12\x10\x0e\x92x'
tRp2911
sa(dp2912
S'trial_loop.thisTrialN'
p2913
I146
sg894
g2197
sS'block_loop.thisIndex'
p2914
g888
sg38
S'left'
p2915
sg58
g62
sS'trial_loop.thisN'
p2916
I146
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p2917
g59
(g98
S'\x92\x00\x00\x00'
tRp2918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2919
I0
sg903
g2204
sS'block_loop.thisRepN'
p2920
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2921
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p2922
Nsg69
Vy
sS'block_loop.thisTrialN'
p2923
I0
sg39
F2.0167941590789269
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x12\x17\x02\xf9\xb8'
tRp2924
sa(dp2925
S'trial_loop.thisTrialN'
p2926
I147
sg894
g1569
sS'block_loop.thisIndex'
p2927
g888
sg38
S'right'
p2928
sg58
g62
sS'trial_loop.thisN'
p2929
I147
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p2930
g59
(g98
S'\x93\x00\x00\x00'
tRp2931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2932
I0
sg903
g1577
sS'block_loop.thisRepN'
p2933
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2934
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p2935
Nsg69
Vy
sS'block_loop.thisTrialN'
p2936
I0
sg39
F1.6505294753087583
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x12\x1e\x03\xc0\xf0'
tRp2937
sa(dp2938
S'trial_loop.thisTrialN'
p2939
I148
sg894
g1487
sS'block_loop.thisIndex'
p2940
g888
sg38
S'left'
p2941
sg58
g62
sS'trial_loop.thisN'
p2942
I148
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2943
g59
(g98
S'\x94\x00\x00\x00'
tRp2944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2945
I0
sg903
g1494
sS'block_loop.thisRepN'
p2946
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2947
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2948
Nsg69
Vy
sS'block_loop.thisTrialN'
p2949
I0
sg39
F1.7335161020764644
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x12$\x0e\x15x'
tRp2950
sa(dp2951
S'trial_loop.thisTrialN'
p2952
I149
sg894
g1894
sS'block_loop.thisIndex'
p2953
g888
sg38
S'right'
p2954
sg58
g62
sS'trial_loop.thisN'
p2955
I149
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p2956
g59
(g98
S'\x95\x00\x00\x00'
tRp2957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2958
I0
sg903
g1901
sS'block_loop.thisRepN'
p2959
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2960
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p2961
Nsg69
Vy
sS'block_loop.thisTrialN'
p2962
I0
sg39
F1.7499618677420585
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x12+\n\x96\xf0'
tRp2963
sa(dp2964
S'trial_loop.thisTrialN'
p2965
I150
sg894
S'35-raisins.png'
p2966
sS'block_loop.thisIndex'
p2967
g888
sg38
S'left'
p2968
sg58
g62
sS'trial_loop.thisN'
p2969
I150
sg33
g1683
sg63
g64
sS'trial_loop.thisIndex'
p2970
g59
(g98
S'\x96\x00\x00\x00'
tRp2971
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2972
I0
sg903
S'49-yorkie.png'
p2973
sS'block_loop.thisRepN'
p2974
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vy
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.6334878485677109
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x122\x07S\x00'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1459
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1126
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1466
sS'block_loop.thisRepN'
p2987
I0
sg906
g1126
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1133
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vy
sS'block_loop.thisTrialN'
p2990
I0
sg39
F4.0167582363537804
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x129\x02&\xc8'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1625
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1632
sS'block_loop.thisRepN'
p3000
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vy
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.2505641435891448
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x13\x06\x02\xe2H'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1077
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1084
sS'block_loop.thisRepN'
p3013
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vy
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.6335314690195446
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x13\x0c\x07C`'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1425
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1429
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1433
sS'block_loop.thisRepN'
p3026
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vy
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.3502106468686179
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x13\x13\x02\x17('
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1139
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1146
sS'block_loop.thisRepN'
p3039
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vy
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.933497057329987
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x13\x19\x07\xe3\x88'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1242
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1250
sS'block_loop.thisRepN'
p3052
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vy
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.633501818516379
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x13 \x07z\x10'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g966
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g974
sS'block_loop.thisRepN'
p3065
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vy
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.1835488744354734
sg34
g752
(S"\x07\xdf\t\x1e\x0b\x13'\x02Q\xc0"
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1000
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1010
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1008
sS'block_loop.thisRepN'
p3078
I0
sg906
g1010
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1004
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vy
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.5666000195578818
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x13-\x05\xbc\xc0'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1442
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1450
sS'block_loop.thisRepN'
p3091
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vy
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.6002082947852614
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x133\x0e\xe0\x98'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1743
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1436
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1750
sS'block_loop.thisRepN'
p3104
I0
sg906
g1429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1436
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vy
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.300103862292417
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x13:\t;H'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1395
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1403
sS'block_loop.thisRepN'
p3117
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vy
sS'block_loop.thisTrialN'
p3120
I0
sg39
F2.0835573989552358
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x14\x04\x0eP\x10'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g2039
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1246
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g2046
sS'block_loop.thisRepN'
p3130
I0
sg906
g1246
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1253
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vy
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.7835886745342577
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x14\x0c\x00\xcb '
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1017
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1024
sS'block_loop.thisRepN'
p3143
I0
sg906
g953
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vy
sS'block_loop.thisTrialN'
p3146
I0
sg39
F1.7002006255688684
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x14\x12\rB\x88'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1655
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1663
sS'block_loop.thisRepN'
p3156
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vy
sS'block_loop.thisTrialN'
p3159
I0
sg39
F2.2000653451468679
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x14\x19\tG\x00'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g2966
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1676
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g2973
sS'block_loop.thisRepN'
p3169
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vy
sS'block_loop.thisTrialN'
p3172
I0
sg39
F3.3667596190944096
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x14 \x0c\xae\x18'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1395
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1403
sS'block_loop.thisRepN'
p3182
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vy
sS'block_loop.thisTrialN'
p3185
I0
sg39
F1.5001903049133034
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x14)\x03\xa9\x80'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1328
sS'block_loop.thisIndex'
p3189
g888
sg38
S'left'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1335
sS'block_loop.thisRepN'
p3195
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vy
sS'block_loop.thisTrialN'
p3198
I0
sg39
F5.1171394448911087
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x14/\x0b\xd7@'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1784
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1791
sS'block_loop.thisRepN'
p3208
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vy
sS'block_loop.thisTrialN'
p3211
I0
sg39
F1.4835751892569533
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x149\r\xfa '
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1655
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1663
sS'block_loop.thisRepN'
p3221
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vy
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.2833906718942671
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x15\x04\x06\xab\x08'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1154
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1162
sS'block_loop.thisRepN'
p3234
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vy
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.3167865468822129
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x15\n\x0b\x858'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1049
sS'block_loop.thisIndex'
p3241
g888
sg38
S'left'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1056
sS'block_loop.thisRepN'
p3247
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vy
sS'block_loop.thisTrialN'
p3250
I0
sg39
F2.6834244278516053
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x15\x11\x01\x96@'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1328
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1335
sS'block_loop.thisRepN'
p3260
I0
sg906
g1158
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1165
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vy
sS'block_loop.thisTrialN'
p3263
I0
sg39
F2.0669163391094116
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x15\x18\x0c\x9a\x90'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g895
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g904
sS'block_loop.thisRepN'
p3273
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vy
sS'block_loop.thisTrialN'
p3276
I0
sg39
F2.1668525049972231
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x15\x1f\x0e\x19`'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1442
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1450
sS'block_loop.thisRepN'
p3286
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vy
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.4669543715817781
sg34
g752
(S"\x07\xdf\t\x1e\x0b\x15'\x01\xc5 "
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1105
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1113
sS'block_loop.thisRepN'
p3299
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vy
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.2001537264550279
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x15-\ty\xc8'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1487
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1494
sS'block_loop.thisRepN'
p3312
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vy
sS'block_loop.thisTrialN'
p3315
I0
sg39
F1.3668408728763097
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x153\r#H'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g2197
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g2204
sS'block_loop.thisRepN'
p3325
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vy
sS'block_loop.thisTrialN'
p3328
I0
sg39
F2.5335331511159893
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x15:\x03\xeb\xe8'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1139
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1146
sS'block_loop.thisRepN'
p3338
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vy
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.6333330387287788
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16\x05\x0c\x8e\xd8'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1894
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1659
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1901
sS'block_loop.thisRepN'
p3351
I0
sg906
g1659
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1666
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vy
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.316765734510227
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16\x0c\x07b\xa0'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1442
sS'block_loop.thisIndex'
p3358
g888
sg38
S'left'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1446
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1450
sS'block_loop.thisRepN'
p3364
I0
sg906
g1446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1453
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vy
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.6001589723127836
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16\x12\x0c\xb5\xe8'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1487
sS'block_loop.thisIndex'
p3371
g888
sg38
S'left'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1494
sS'block_loop.thisRepN'
p3377
I0
sg906
g970
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vy
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.7334314270819959
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16\x19\x07\x14\x80'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g932
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g940
sS'block_loop.thisRepN'
p3390
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vy
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.3172013688263178
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16 \x03\x92\x10'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1171
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1175
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1179
sS'block_loop.thisRepN'
p3403
I0
sg906
g1175
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1182
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vy
sS'block_loop.thisTrialN'
p3406
I0
sg39
F2.3835118683264227
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16&\x08\xe5X'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1728
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1573
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1735
sS'block_loop.thisRepN'
p3416
I0
sg906
g1573
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1580
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vy
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.3668685276734323
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16.\x00#('
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g2966
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1676
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g2973
sS'block_loop.thisRepN'
p3429
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vy
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.8668581214869846
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x164\x06.\x08'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1515
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1405
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1522
sS'block_loop.thisRepN'
p3442
I0
sg906
g1405
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1399
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vy
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.4335396799278897
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x16;\x04\x93\xe0'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1672
sS'block_loop.thisIndex'
p3449
g888
sg38
S'right'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1683
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1680
sS'block_loop.thisRepN'
p3455
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vy
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.5504903879627818
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x17\x05\x0b\xcfp'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1049
sS'block_loop.thisIndex'
p3462
g888
sg38
S'left'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1056
sS'block_loop.thisRepN'
p3468
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vy
sS'block_loop.thisTrialN'
p3471
I0
sg39
F2.3667969673242624
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x17\x0c\x05r\x88'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1032
sS'block_loop.thisIndex'
p3475
g888
sg38
S'left'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1040
sS'block_loop.thisRepN'
p3481
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vy
sS'block_loop.thisTrialN'
p3484
I0
sg39
F5.8667848505310758
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x17\x13\x0by\x80'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g2197
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g2204
sS'block_loop.thisRepN'
p3494
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vy
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.2001143825182226
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x17\x1e\n\x02\x80'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g2966
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1676
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g2973
sS'block_loop.thisRepN'
p3507
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vy
sS'block_loop.thisTrialN'
p3510
I0
sg39
F2.1335951890923752
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x17$\rm\x80'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1625
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1632
sS'block_loop.thisRepN'
p3520
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vy
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.2835480476423982
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x17,\x00\xda\xc0'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g2966
sS'block_loop.thisIndex'
p3527
g888
sg38
S'left'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1676
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g2973
sS'block_loop.thisRepN'
p3533
I0
sg906
g1676
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1683
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vy
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.266865648152816
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x172\x05\xb4\xf0'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1049
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g993
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1056
sS'block_loop.thisRepN'
p3546
I0
sg906
g993
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g987
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vy
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.5001917304180097
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x178\nT\x88'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g932
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g940
sS'block_loop.thisRepN'
p3559
I0
sg906
g936
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vy
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.3501912600004289
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x18\x03\x03\x05p'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g915
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g923
sS'block_loop.thisRepN'
p3572
I0
sg906
g919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vy
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.483905051106376
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x18\t\t\x10P'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g895
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g904
sS'block_loop.thisRepN'
p3585
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vy
sS'block_loop.thisTrialN'
p3588
I0
sg39
F2.2168298537235387
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x18\x10\x01\x82\xb8'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1105
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1109
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1113
sS'block_loop.thisRepN'
p3598
I0
sg906
g1109
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1116
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vy
sS'block_loop.thisTrialN'
p3601
I0
sg39
F1.1501179320257506
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x18\x17\x05b\xe8'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1812
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1816
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1820
sS'block_loop.thisRepN'
p3611
I0
sg906
g1816
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1823
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vy
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.2501139691212302
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x18\x1d\x08\x1a8'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F114.48167042952446
sg56
Vl
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vy
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vl
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vy
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'45-chewy_nougat_redo.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'41-peanuts_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'41-peanuts_redo.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'45-chewy_nougat_redo.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vy
sS'block_loop.thisTrialN'
p3649
I0
sg39
F5.0000464714621558
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1a#\x05C\xa8'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'10-bounty_redo.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'4-corn.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'4-corn.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'10-bounty_redo.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vy
sS'block_loop.thisTrialN'
p3666
I0
sg39
F2.1001998843057663
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1a-\x05\xbc\xc0'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'41-peanuts_redo.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3674
g59
(g98
S'\x02\x00\x00\x00'
tRp3675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3676
I0
sg3641
S'45-chewy_nougat_redo.png'
p3677
sS'block_loop.thisRepN'
p3678
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3679
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3680
Nsg69
Vy
sS'block_loop.thisTrialN'
p3681
I0
sg39
F4.5167258773917638
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1a4\x07\xb4\xa8'
tRp3682
sa(dp3683
S'trial_loop.thisTrialN'
p3684
I3
sg3632
S'3-ellas_strawberries_apples.png'
p3685
sS'block_loop.thisIndex'
p3686
g3626
sg38
S'left'
p3687
sg58
g62
sS'trial_loop.thisN'
p3688
I3
sg33
S'3-ellas_strawberries_apples.png'
p3689
sg63
g64
sS'trial_loop.thisIndex'
p3690
g59
(g98
S'\x03\x00\x00\x00'
tRp3691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3692
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3693
sS'block_loop.thisRepN'
p3694
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3695
I1
sg3646
S'13-mccoys_steak_crisps.png'
p3696
sg55
g11
sS'block_loop.thisTrial'
p3697
Nsg69
Vy
sS'block_loop.thisTrialN'
p3698
I0
sg39
F1.5340007167433214
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b\x02\x00\xcb '
tRp3699
sa(dp3700
S'trial_loop.thisTrialN'
p3701
I4
sg3632
S'51-mars.png'
p3702
sS'block_loop.thisIndex'
p3703
g3626
sg38
S'right'
p3704
sg58
g62
sS'trial_loop.thisN'
p3705
I4
sg33
S'27-hartleys_raspberries_jelly.png'
p3706
sg63
g64
sS'trial_loop.thisIndex'
p3707
g59
(g98
S'\x04\x00\x00\x00'
tRp3708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3709
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p3710
sS'block_loop.thisRepN'
p3711
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3712
I1
sg3646
S'51-mars.png'
p3713
sg55
g11
sS'block_loop.thisTrial'
p3714
Nsg69
Vy
sS'block_loop.thisTrialN'
p3715
I0
sg39
F1.4666019867545401
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b\x08\tu\xe0'
tRp3716
sa(dp3717
S'trial_loop.thisTrialN'
p3718
I5
sg3632
S'33-ambrosia_rice.png'
p3719
sS'block_loop.thisIndex'
p3720
g3626
sg38
S'right'
p3721
sg58
g62
sS'trial_loop.thisN'
p3722
I5
sg33
S'23-crunchie_redo.png'
p3723
sg63
g64
sS'trial_loop.thisIndex'
p3724
g59
(g98
S'\x05\x00\x00\x00'
tRp3725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3726
I0
sg3641
S'23-crunchie_redo.png'
p3727
sS'block_loop.thisRepN'
p3728
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3729
I1
sg3646
S'33-ambrosia_rice.png'
p3730
sg55
g11
sS'block_loop.thisTrial'
p3731
Nsg69
Vy
sS'block_loop.thisTrialN'
p3732
I0
sg39
F1.8000820520655907
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b\x0f\x01\xe8H'
tRp3733
sa(dp3734
S'trial_loop.thisTrialN'
p3735
I6
sg3632
S'40-sardines.png'
p3736
sS'block_loop.thisIndex'
p3737
g3626
sg38
S'left'
p3738
sg58
g62
sS'trial_loop.thisN'
p3739
I6
sg33
S'40-sardines.png'
p3740
sg63
g64
sS'trial_loop.thisIndex'
p3741
g59
(g98
S'\x06\x00\x00\x00'
tRp3742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3743
I0
sg3641
S'5-pineapple.png'
p3744
sS'block_loop.thisRepN'
p3745
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3746
I1
sg3646
S'5-pineapple.png'
p3747
sg55
g11
sS'block_loop.thisTrial'
p3748
Nsg69
Vy
sS'block_loop.thisTrialN'
p3749
I0
sg39
F4.983410828534943
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b\x15\x0e\x9e0'
tRp3750
sa(dp3751
S'trial_loop.thisTrialN'
p3752
I7
sg3632
S'48-twix.png'
p3753
sS'block_loop.thisIndex'
p3754
g3626
sg38
S'left'
p3755
sg58
g62
sS'trial_loop.thisN'
p3756
I7
sg33
S'48-twix.png'
p3757
sg63
g64
sS'trial_loop.thisIndex'
p3758
g59
(g98
S'\x07\x00\x00\x00'
tRp3759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3760
I0
sg3641
S'50-polo.png'
p3761
sS'block_loop.thisRepN'
p3762
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3763
I1
sg3646
S'50-polo.png'
p3764
sg55
g11
sS'block_loop.thisTrial'
p3765
Nsg69
Vy
sS'block_loop.thisTrialN'
p3766
I0
sg39
F1.2334332802383869
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b\x1f\x0e\xd8\xc8'
tRp3767
sa(dp3768
S'trial_loop.thisTrialN'
p3769
I8
sg3632
S'30-spaghetti_hoops.png'
p3770
sS'block_loop.thisIndex'
p3771
g3626
sg38
S'left'
p3772
sg58
g62
sS'trial_loop.thisN'
p3773
I8
sg33
S'30-spaghetti_hoops.png'
p3774
sg63
g64
sS'trial_loop.thisIndex'
p3775
g59
(g98
S'\x08\x00\x00\x00'
tRp3776
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3777
I0
sg3641
S'19-caramello_redo.png'
p3778
sS'block_loop.thisRepN'
p3779
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3780
I1
sg3646
S'19-caramello_redo.png'
p3781
sg55
g11
sS'block_loop.thisTrial'
p3782
Nsg69
Vy
sS'block_loop.thisTrialN'
p3783
I0
sg39
F1.5837970263401075
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b&\x03z\xa0'
tRp3784
sa(dp3785
S'trial_loop.thisTrialN'
p3786
I9
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3787
sS'block_loop.thisIndex'
p3788
g3626
sg38
S'left'
p3789
sg58
g62
sS'trial_loop.thisN'
p3790
I9
sg33
S'43-mrporky_pork_crackles_redo.png'
p3791
sg63
g64
sS'trial_loop.thisIndex'
p3792
g59
(g98
S'\t\x00\x00\x00'
tRp3793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3794
I0
sg3641
S'18-mms.png'
p3795
sS'block_loop.thisRepN'
p3796
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3797
I1
sg3646
S'18-mms.png'
p3798
sg55
g11
sS'block_loop.thisTrial'
p3799
Nsg69
Vy
sS'block_loop.thisTrialN'
p3800
I0
sg39
F2.2834930231510953
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b,\r\x17\x90'
tRp3801
sa(dp3802
S'trial_loop.thisTrialN'
p3803
I10
sg3632
S'1-treacle_cookies.png'
p3804
sS'block_loop.thisIndex'
p3805
g3626
sg38
S'left'
p3806
sg58
g62
sS'trial_loop.thisN'
p3807
I10
sg33
S'1-treacle_cookies.png'
p3808
sg63
g64
sS'trial_loop.thisIndex'
p3809
g59
(g98
S'\n\x00\x00\x00'
tRp3810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3811
I0
sg3641
S'21-nakd_banana_crunch.png'
p3812
sS'block_loop.thisRepN'
p3813
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3814
I1
sg3646
S'21-nakd_banana_crunch.png'
p3815
sg55
g11
sS'block_loop.thisTrial'
p3816
Nsg69
Vy
sS'block_loop.thisTrialN'
p3817
I0
sg39
F1.0002112598349413
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b4\x02\xab\x98'
tRp3818
sa(dp3819
S'trial_loop.thisTrialN'
p3820
I11
sg3632
S'29-beans.png'
p3821
sS'block_loop.thisIndex'
p3822
g3626
sg38
S'right'
p3823
sg58
g62
sS'trial_loop.thisN'
p3824
I11
sg33
S'46-pistachios.png'
p3825
sg63
g64
sS'trial_loop.thisIndex'
p3826
g59
(g98
S'\x0b\x00\x00\x00'
tRp3827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3828
I0
sg3641
S'46-pistachios.png'
p3829
sS'block_loop.thisRepN'
p3830
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3831
I1
sg3646
S'29-beans.png'
p3832
sg55
g11
sS'block_loop.thisTrial'
p3833
Nsg69
Vy
sS'block_loop.thisTrialN'
p3834
I0
sg39
F1.6667711086638519
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1b:\x02\xfd\xa0'
tRp3835
sa(dp3836
S'trial_loop.thisTrialN'
p3837
I12
sg3632
S'44-crunch.png'
p3838
sS'block_loop.thisIndex'
p3839
g3626
sg38
S'right'
p3840
sg58
g62
sS'trial_loop.thisN'
p3841
I12
sg33
S'44-crunch.png'
p3842
sg63
g64
sS'trial_loop.thisIndex'
p3843
g59
(g98
S'\x0c\x00\x00\x00'
tRp3844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3845
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3846
sS'block_loop.thisRepN'
p3847
I1
sg3644
S'26-walkers_smoky_bacon.png'
p3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3849
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p3850
Nsg69
Vy
sS'block_loop.thisTrialN'
p3851
I0
sg39
F1.0168680002361725
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c\x04\r\xcf('
tRp3852
sa(dp3853
S'trial_loop.thisTrialN'
p3854
I13
sg3632
g3702
sS'block_loop.thisIndex'
p3855
g3626
sg38
S'right'
p3856
sg58
g62
sS'trial_loop.thisN'
p3857
I13
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p3858
g59
(g98
S'\r\x00\x00\x00'
tRp3859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3860
I0
sg3641
g3710
sS'block_loop.thisRepN'
p3861
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3862
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p3863
Nsg69
Vy
sS'block_loop.thisTrialN'
p3864
I0
sg39
F0.88392369671055349
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c\n\x0e\x9aH'
tRp3865
sa(dp3866
S'trial_loop.thisTrialN'
p3867
I14
sg3632
g3670
sS'block_loop.thisIndex'
p3868
g3626
sg38
S'left'
p3869
sg58
g62
sS'trial_loop.thisN'
p3870
I14
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p3871
g59
(g98
S'\x0e\x00\x00\x00'
tRp3872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3873
I0
sg3641
g3677
sS'block_loop.thisRepN'
p3874
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3875
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3876
Nsg69
Vy
sS'block_loop.thisTrialN'
p3877
I0
sg39
F1.8668002459853597
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c\x10\rFp'
tRp3878
sa(dp3879
S'trial_loop.thisTrialN'
p3880
I15
sg3632
g3787
sS'block_loop.thisIndex'
p3881
g3626
sg38
S'left'
p3882
sg58
g62
sS'trial_loop.thisN'
p3883
I15
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p3884
g59
(g98
S'\x0f\x00\x00\x00'
tRp3885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3886
I0
sg3641
g3795
sS'block_loop.thisRepN'
p3887
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3888
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p3889
Nsg69
Vy
sS'block_loop.thisTrialN'
p3890
I0
sg39
F1.5001991430435737
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c\x17\x0b\xacH'
tRp3891
sa(dp3892
S'trial_loop.thisTrialN'
p3893
I16
sg3632
S'35-raisins.png'
p3894
sS'block_loop.thisIndex'
p3895
g3626
sg38
S'left'
p3896
sg58
g62
sS'trial_loop.thisN'
p3897
I16
sg33
S'35-raisins.png'
p3898
sg63
g64
sS'trial_loop.thisIndex'
p3899
g59
(g98
S'\x10\x00\x00\x00'
tRp3900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3901
I0
sg3641
S'49-yorkie.png'
p3902
sS'block_loop.thisRepN'
p3903
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3904
I1
sg3646
S'49-yorkie.png'
p3905
sg55
g11
sS'block_loop.thisTrial'
p3906
Nsg69
Vy
sS'block_loop.thisTrialN'
p3907
I0
sg39
F1.0501338691710771
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c\x1e\x04\x97\xc8'
tRp3908
sa(dp3909
S'trial_loop.thisTrialN'
p3910
I17
sg3632
g3753
sS'block_loop.thisIndex'
p3911
g3626
sg38
S'left'
p3912
sg58
g62
sS'trial_loop.thisN'
p3913
I17
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p3914
g59
(g98
S'\x11\x00\x00\x00'
tRp3915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3916
I0
sg3641
g3761
sS'block_loop.thisRepN'
p3917
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3918
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p3919
Nsg69
Vy
sS'block_loop.thisTrialN'
p3920
I0
sg39
F1.1001123583009758
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c$\x05\xdf\xe8'
tRp3921
sa(dp3922
S'trial_loop.thisTrialN'
p3923
I18
sg3632
S'16-skips_prawn.png'
p3924
sS'block_loop.thisIndex'
p3925
g3626
sg38
S'left'
p3926
sg58
g62
sS'trial_loop.thisN'
p3927
I18
sg33
S'16-skips_prawn.png'
p3928
sg63
g64
sS'trial_loop.thisIndex'
p3929
g59
(g98
S'\x12\x00\x00\x00'
tRp3930
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3931
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3932
sS'block_loop.thisRepN'
p3933
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3934
I1
sg3646
S'42-mrkipling_lemon_slices.png'
p3935
sg55
g11
sS'block_loop.thisTrial'
p3936
Nsg69
Vy
sS'block_loop.thisTrialN'
p3937
I0
sg39
F1.0001841752409746
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c*\x07\xdf\xa0'
tRp3938
sa(dp3939
S'trial_loop.thisTrialN'
p3940
I19
sg3632
g3821
sS'block_loop.thisIndex'
p3941
g3626
sg38
S'right'
p3942
sg58
g62
sS'trial_loop.thisN'
p3943
I19
sg33
g3832
sg63
g64
sS'trial_loop.thisIndex'
p3944
g59
(g98
S'\x13\x00\x00\x00'
tRp3945
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3946
I0
sg3641
g3829
sS'block_loop.thisRepN'
p3947
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3948
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p3949
Nsg69
Vy
sS'block_loop.thisTrialN'
p3950
I0
sg39
F0.85008021316389204
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c0\x08p('
tRp3951
sa(dp3952
S'trial_loop.thisTrialN'
p3953
I20
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3954
sS'block_loop.thisIndex'
p3955
g3626
sg38
S'left'
p3956
sg58
g62
sS'trial_loop.thisN'
p3957
I20
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3958
sg63
g64
sS'trial_loop.thisIndex'
p3959
g59
(g98
S'\x14\x00\x00\x00'
tRp3960
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3961
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3962
sS'block_loop.thisRepN'
p3963
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3964
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p3965
sg55
g11
sS'block_loop.thisTrial'
p3966
Nsg69
Vy
sS'block_loop.thisTrialN'
p3967
I0
sg39
F2.4501086092232072
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1c6\x06\xa38'
tRp3968
sa(dp3969
S'trial_loop.thisTrialN'
p3970
I21
sg3632
S'5-pineapple.png'
p3971
sS'block_loop.thisIndex'
p3972
g3626
sg38
S'right'
p3973
sg58
g62
sS'trial_loop.thisN'
p3974
I21
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p3975
g59
(g98
S'\x15\x00\x00\x00'
tRp3976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3977
I0
sg3641
S'40-sardines.png'
p3978
sS'block_loop.thisRepN'
p3979
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3980
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p3981
Nsg69
Vy
sS'block_loop.thisTrialN'
p3982
I0
sg39
F2.5667508379829087
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d\x01\x0e\x15x'
tRp3983
sa(dp3984
S'trial_loop.thisTrialN'
p3985
I22
sg3632
S'8-liquorice_catherine_wheels.png'
p3986
sS'block_loop.thisIndex'
p3987
g3626
sg38
S'right'
p3988
sg58
g62
sS'trial_loop.thisN'
p3989
I22
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p3990
g59
(g98
S'\x16\x00\x00\x00'
tRp3991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3992
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p3993
sS'block_loop.thisRepN'
p3994
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3995
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p3996
Nsg69
Vy
sS'block_loop.thisTrialN'
p3997
I0
sg39
F2.7335058384405784
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d\t\x07\xef@'
tRp3998
sa(dp3999
S'trial_loop.thisTrialN'
p4000
I23
sg3632
g3804
sS'block_loop.thisIndex'
p4001
g3626
sg38
S'left'
p4002
sg58
g62
sS'trial_loop.thisN'
p4003
I23
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4004
g59
(g98
S'\x17\x00\x00\x00'
tRp4005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4006
I0
sg3641
g3812
sS'block_loop.thisRepN'
p4007
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4008
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4009
Nsg69
Vy
sS'block_loop.thisTrialN'
p4010
I0
sg39
F0.85023701871068624
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d\x11\x04h\xe8'
tRp4011
sa(dp4012
S'trial_loop.thisTrialN'
p4013
I24
sg3632
g3838
sS'block_loop.thisIndex'
p4014
g3626
sg38
S'right'
p4015
sg58
g62
sS'trial_loop.thisN'
p4016
I24
sg33
g3848
sg63
g64
sS'trial_loop.thisIndex'
p4017
g59
(g98
S'\x18\x00\x00\x00'
tRp4018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4019
I0
sg3641
g3846
sS'block_loop.thisRepN'
p4020
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4021
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p4022
Nsg69
Vy
sS'block_loop.thisTrialN'
p4023
I0
sg39
F0.98347583156100882
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d\x17\x02\x98\x10'
tRp4024
sa(dp4025
S'trial_loop.thisTrialN'
p4026
I25
sg3632
g3986
sS'block_loop.thisIndex'
p4027
g3626
sg38
S'right'
p4028
sg58
g62
sS'trial_loop.thisN'
p4029
I25
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4030
g59
(g98
S'\x19\x00\x00\x00'
tRp4031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4032
I0
sg3641
g3993
sS'block_loop.thisRepN'
p4033
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4034
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4035
Nsg69
Vy
sS'block_loop.thisTrialN'
p4036
I0
sg39
F1.5834654538848554
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d\x1d\x02\xaf\x80'
tRp4037
sa(dp4038
S'trial_loop.thisTrialN'
p4039
I26
sg3632
S'36-fig_rolls.png'
p4040
sS'block_loop.thisIndex'
p4041
g3626
sg38
S'right'
p4042
sg58
g62
sS'trial_loop.thisN'
p4043
I26
sg33
S'36-fig_rolls.png'
p4044
sg63
g64
sS'trial_loop.thisIndex'
p4045
g59
(g98
S'\x1a\x00\x00\x00'
tRp4046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4047
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4048
sS'block_loop.thisRepN'
p4049
I1
sg3644
S'34-hula_hoops_bbq_beef_redo.png'
p4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4051
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4052
Nsg69
Vy
sS'block_loop.thisTrialN'
p4053
I0
sg39
F1.6501833627035012
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d#\x0cLp'
tRp4054
sa(dp4055
S'trial_loop.thisTrialN'
p4056
I27
sg3632
S'26-walkers_smoky_bacon.png'
p4057
sS'block_loop.thisIndex'
p4058
g3626
sg38
S'left'
p4059
sg58
g62
sS'trial_loop.thisN'
p4060
I27
sg33
g3848
sg63
g64
sS'trial_loop.thisIndex'
p4061
g59
(g98
S'\x1b\x00\x00\x00'
tRp4062
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4063
I0
sg3641
S'44-crunch.png'
p4064
sS'block_loop.thisRepN'
p4065
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4066
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p4067
Nsg69
Vy
sS'block_loop.thisTrialN'
p4068
I0
sg39
F0.96672244192359358
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d*\x07^\xb8'
tRp4069
sa(dp4070
S'trial_loop.thisTrialN'
p4071
I28
sg3632
g3653
sS'block_loop.thisIndex'
p4072
g3626
sg38
S'right'
p4073
sg58
g62
sS'trial_loop.thisN'
p4074
I28
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4075
g59
(g98
S'\x1c\x00\x00\x00'
tRp4076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4077
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4078
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4079
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4080
Nsg69
Vy
sS'block_loop.thisTrialN'
p4081
I0
sg39
F1.3505929673001447
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d0\x07v('
tRp4082
sa(dp4083
S'trial_loop.thisTrialN'
p4084
I29
sg3632
S'49-yorkie.png'
p4085
sS'block_loop.thisIndex'
p4086
g3626
sg38
S'right'
p4087
sg58
g62
sS'trial_loop.thisN'
p4088
I29
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p4089
g59
(g98
S'\x1d\x00\x00\x00'
tRp4090
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4091
I0
sg3641
S'35-raisins.png'
p4092
sS'block_loop.thisRepN'
p4093
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4094
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p4095
Nsg69
Vy
sS'block_loop.thisTrialN'
p4096
I0
sg39
F1.1834436721692327
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1d6\rB\x88'
tRp4097
sa(dp4098
S'trial_loop.thisTrialN'
p4099
I30
sg3632
g3670
sS'block_loop.thisIndex'
p4100
g3626
sg38
S'left'
p4101
sg58
g62
sS'trial_loop.thisN'
p4102
I30
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4103
g59
(g98
S'\x1e\x00\x00\x00'
tRp4104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4105
I0
sg3641
g3677
sS'block_loop.thisRepN'
p4106
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4107
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4108
Nsg69
Vy
sS'block_loop.thisTrialN'
p4109
I0
sg39
F2.1335176416223476
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e\x01\x010\xb0'
tRp4110
sa(dp4111
S'trial_loop.thisTrialN'
p4112
I31
sg3632
g3770
sS'block_loop.thisIndex'
p4113
g3626
sg38
S'left'
p4114
sg58
g62
sS'trial_loop.thisN'
p4115
I31
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4116
g59
(g98
S'\x1f\x00\x00\x00'
tRp4117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4118
I0
sg3641
g3778
sS'block_loop.thisRepN'
p4119
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4120
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4121
Nsg69
Vy
sS'block_loop.thisTrialN'
p4122
I0
sg39
F1.7001920725388118
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e\x08\x03\xe00'
tRp4123
sa(dp4124
S'trial_loop.thisTrialN'
p4125
I32
sg3632
g3838
sS'block_loop.thisIndex'
p4126
g3626
sg38
S'right'
p4127
sg58
g62
sS'trial_loop.thisN'
p4128
I32
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4129
g59
(g98
S' \x00\x00\x00'
tRp4130
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4131
I0
sg3641
g3846
sS'block_loop.thisRepN'
p4132
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4133
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p4134
Nsg69
Vy
sS'block_loop.thisTrialN'
p4135
I0
sg39
F0.90020438890223886
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e\x0e\x0e\xecP'
tRp4136
sa(dp4137
S'trial_loop.thisTrialN'
p4138
I33
sg3632
g3804
sS'block_loop.thisIndex'
p4139
g3626
sg38
S'left'
p4140
sg58
g62
sS'trial_loop.thisN'
p4141
I33
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4142
g59
(g98
S'!\x00\x00\x00'
tRp4143
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4144
I0
sg3641
g3812
sS'block_loop.thisRepN'
p4145
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4146
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4147
Nsg69
Vy
sS'block_loop.thisTrialN'
p4148
I0
sg39
F0.88388235706679552
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e\x14\x0e\r\xa8'
tRp4149
sa(dp4150
S'trial_loop.thisTrialN'
p4151
I34
sg3632
g3633
sS'block_loop.thisIndex'
p4152
g3626
sg38
S'right'
p4153
sg58
g62
sS'trial_loop.thisN'
p4154
I34
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4155
g59
(g98
S'"\x00\x00\x00'
tRp4156
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4157
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4158
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4159
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4160
Nsg69
Vy
sS'block_loop.thisTrialN'
p4161
I0
sg39
F0.91686141440277424
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e\x1a\x0c\xb9\xd0'
tRp4162
sa(dp4163
S'trial_loop.thisTrialN'
p4164
I35
sg3632
S'4-corn.png'
p4165
sS'block_loop.thisIndex'
p4166
g3626
sg38
S'left'
p4167
sg58
g62
sS'trial_loop.thisN'
p4168
I35
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4169
g59
(g98
S'#\x00\x00\x00'
tRp4170
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4171
I0
sg3641
S'10-bounty_redo.png'
p4172
sS'block_loop.thisRepN'
p4173
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4174
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg69
Vy
sS'block_loop.thisTrialN'
p4176
I0
sg39
F1.0335486891199253
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e \x0b\xdb('
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I36
sg3632
S'46-pistachios.png'
p4180
sS'block_loop.thisIndex'
p4181
g3626
sg38
S'left'
p4182
sg58
g62
sS'trial_loop.thisN'
p4183
I36
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4184
g59
(g98
S'$\x00\x00\x00'
tRp4185
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4186
I0
sg3641
S'29-beans.png'
p4187
sS'block_loop.thisRepN'
p4188
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4189
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4190
Nsg69
Vy
sS'block_loop.thisTrialN'
p4191
I0
sg39
F0.83359225255117053
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e&\x0c\xe8\xb0'
tRp4192
sa(dp4193
S'trial_loop.thisTrialN'
p4194
I37
sg3632
S'27-hartleys_raspberries_jelly.png'
p4195
sS'block_loop.thisIndex'
p4196
g3626
sg38
S'left'
p4197
sg58
g62
sS'trial_loop.thisN'
p4198
I37
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p4199
g59
(g98
S'%\x00\x00\x00'
tRp4200
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4201
I0
sg3641
S'51-mars.png'
p4202
sS'block_loop.thisRepN'
p4203
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4204
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p4205
Nsg69
Vy
sS'block_loop.thisTrialN'
p4206
I0
sg39
F0.86689746542378998
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e,\n\xd9X'
tRp4207
sa(dp4208
S'trial_loop.thisTrialN'
p4209
I38
sg3632
S'25-kitkat.png'
p4210
sS'block_loop.thisIndex'
p4211
g3626
sg38
S'right'
p4212
sg58
g62
sS'trial_loop.thisN'
p4213
I38
sg33
S'31-hobnobs.png'
p4214
sg63
g64
sS'trial_loop.thisIndex'
p4215
g59
(g98
S'&\x00\x00\x00'
tRp4216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4217
I0
sg3641
S'31-hobnobs.png'
p4218
sS'block_loop.thisRepN'
p4219
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4220
I1
sg3646
S'25-kitkat.png'
p4221
sg55
g11
sS'block_loop.thisTrial'
p4222
Nsg69
Vy
sS'block_loop.thisTrialN'
p4223
I0
sg39
F0.95013640656998177
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e2\t\x85\x80'
tRp4224
sa(dp4225
S'trial_loop.thisTrialN'
p4226
I39
sg3632
g4057
sS'block_loop.thisIndex'
p4227
g3626
sg38
S'right'
p4228
sg58
g62
sS'trial_loop.thisN'
p4229
I39
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4230
g59
(g98
S"'\x00\x00\x00"
tRp4231
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4232
I0
sg3641
g4064
sS'block_loop.thisRepN'
p4233
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4234
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p4235
Nsg69
Vy
sS'block_loop.thisTrialN'
p4236
I0
sg39
F1.5002076960736304
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1e8\t\x1f\xf0'
tRp4237
sa(dp4238
S'trial_loop.thisTrialN'
p4239
I40
sg3632
S'7-olives.png'
p4240
sS'block_loop.thisIndex'
p4241
g3626
sg38
S'left'
p4242
sg58
g62
sS'trial_loop.thisN'
p4243
I40
sg33
S'7-olives.png'
p4244
sg63
g64
sS'trial_loop.thisIndex'
p4245
g59
(g98
S'(\x00\x00\x00'
tRp4246
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4247
I0
sg3641
S'22-daim.png'
p4248
sS'block_loop.thisRepN'
p4249
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4250
I1
sg3646
S'22-daim.png'
p4251
sg55
g11
sS'block_loop.thisTrial'
p4252
Nsg69
Vy
sS'block_loop.thisTrialN'
p4253
I0
sg39
F0.78340820560606517
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f\x03\x02\x0fX'
tRp4254
sa(dp4255
S'trial_loop.thisTrialN'
p4256
I41
sg3632
g3924
sS'block_loop.thisIndex'
p4257
g3626
sg38
S'left'
p4258
sg58
g62
sS'trial_loop.thisN'
p4259
I41
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4260
g59
(g98
S')\x00\x00\x00'
tRp4261
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4262
I0
sg3641
g3932
sS'block_loop.thisRepN'
p4263
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4264
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4265
Nsg69
Vy
sS'block_loop.thisTrialN'
p4266
I0
sg39
F0.95010076894595841
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f\x08\x0e\x8e\x90'
tRp4267
sa(dp4268
S'trial_loop.thisTrialN'
p4269
I42
sg3632
S'21-nakd_banana_crunch.png'
p4270
sS'block_loop.thisIndex'
p4271
g3626
sg38
S'right'
p4272
sg58
g62
sS'trial_loop.thisN'
p4273
I42
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4274
g59
(g98
S'*\x00\x00\x00'
tRp4275
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4276
I0
sg3641
S'1-treacle_cookies.png'
p4277
sS'block_loop.thisRepN'
p4278
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4279
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4280
Nsg69
Vy
sS'block_loop.thisTrialN'
p4281
I0
sg39
F1.6335377412415255
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f\x0e\x0e)\x00'
tRp4282
sa(dp4283
S'trial_loop.thisTrialN'
p4284
I43
sg3632
S'42-mrkipling_lemon_slices.png'
p4285
sS'block_loop.thisIndex'
p4286
g3626
sg38
S'right'
p4287
sg58
g62
sS'trial_loop.thisN'
p4288
I43
sg33
g3935
sg63
g64
sS'trial_loop.thisIndex'
p4289
g59
(g98
S'+\x00\x00\x00'
tRp4290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4291
I0
sg3641
S'16-skips_prawn.png'
p4292
sS'block_loop.thisRepN'
p4293
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4294
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4295
Nsg69
Vy
sS'block_loop.thisTrialN'
p4296
I0
sg39
F0.9334331947075043
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f\x15\t;H'
tRp4297
sa(dp4298
S'trial_loop.thisTrialN'
p4299
I44
sg3632
g3986
sS'block_loop.thisIndex'
p4300
g3626
sg38
S'right'
p4301
sg58
g62
sS'trial_loop.thisN'
p4302
I44
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4303
g59
(g98
S',\x00\x00\x00'
tRp4304
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4305
I0
sg3641
g3993
sS'block_loop.thisRepN'
p4306
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4307
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4308
Nsg69
Vy
sS'block_loop.thisTrialN'
p4309
I0
sg39
F1.717214027310547
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f\x1b\x08\x9b '
tRp4310
sa(dp4311
S'trial_loop.thisTrialN'
p4312
I45
sg3632
g4040
sS'block_loop.thisIndex'
p4313
g3626
sg38
S'left'
p4314
sg58
g62
sS'trial_loop.thisN'
p4315
I45
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p4316
g59
(g98
S'-\x00\x00\x00'
tRp4317
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4318
I0
sg3641
g4048
sS'block_loop.thisRepN'
p4319
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4320
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4321
Nsg69
Vy
sS'block_loop.thisTrialN'
p4322
I0
sg39
F4.2668268744182569
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f"\x04\xde\x18'
tRp4323
sa(dp4324
S'trial_loop.thisTrialN'
p4325
I46
sg3632
S'18-mms.png'
p4326
sS'block_loop.thisIndex'
p4327
g3626
sg38
S'right'
p4328
sg58
g62
sS'trial_loop.thisN'
p4329
I46
sg33
g3798
sg63
g64
sS'trial_loop.thisIndex'
p4330
g59
(g98
S'.\x00\x00\x00'
tRp4331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4332
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4333
sS'block_loop.thisRepN'
p4334
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4335
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4336
Nsg69
Vy
sS'block_loop.thisTrialN'
p4337
I0
sg39
F1.2001599986770088
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f+\tj('
tRp4338
sa(dp4339
S'trial_loop.thisTrialN'
p4340
I47
sg3632
g3986
sS'block_loop.thisIndex'
p4341
g3626
sg38
S'right'
p4342
sg58
g62
sS'trial_loop.thisN'
p4343
I47
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4344
g59
(g98
S'/\x00\x00\x00'
tRp4345
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4346
I0
sg3641
g3993
sS'block_loop.thisRepN'
p4347
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4348
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4349
Nsg69
Vy
sS'block_loop.thisTrialN'
p4350
I0
sg39
F0.95010419015761727
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f1\x0c\xd5('
tRp4351
sa(dp4352
S'trial_loop.thisTrialN'
p4353
I48
sg3632
g4085
sS'block_loop.thisIndex'
p4354
g3626
sg38
S'right'
p4355
sg58
g62
sS'trial_loop.thisN'
p4356
I48
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p4357
g59
(g98
S'0\x00\x00\x00'
tRp4358
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4359
I0
sg3641
g4092
sS'block_loop.thisRepN'
p4360
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4361
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p4362
Nsg69
Vy
sS'block_loop.thisTrialN'
p4363
I0
sg39
F1.0000687093388478
sg34
g752
(S'\x07\xdf\t\x1e\x0b\x1f7\x0c\xb2\x00'
tRp4364
sa(dp4365
S'trial_loop.thisTrialN'
p4366
I49
sg3632
g3670
sS'block_loop.thisIndex'
p4367
g3626
sg38
S'left'
p4368
sg58
g62
sS'trial_loop.thisN'
p4369
I49
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4370
g59
(g98
S'1\x00\x00\x00'
tRp4371
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4372
I0
sg3641
g3677
sS'block_loop.thisRepN'
p4373
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4374
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4375
Nsg69
Vy
sS'block_loop.thisTrialN'
p4376
I0
sg39
F1.2505017064713684
sg34
g752
(S'\x07\xdf\t\x1e\x0b \x01\rB\x88'
tRp4377
sa(dp4378
S'trial_loop.thisTrialN'
p4379
I50
sg3632
S'50-polo.png'
p4380
sS'block_loop.thisIndex'
p4381
g3626
sg38
S'right'
p4382
sg58
g62
sS'trial_loop.thisN'
p4383
I50
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4384
g59
(g98
S'2\x00\x00\x00'
tRp4385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4386
I0
sg3641
S'48-twix.png'
p4387
sS'block_loop.thisRepN'
p4388
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4389
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4390
Nsg69
Vy
sS'block_loop.thisTrialN'
p4391
I0
sg39
F1.5501140546521128
sg34
g752
(S'\x07\xdf\t\x1e\x0b \x08\x02a`'
tRp4392
sa(dp4393
S'trial_loop.thisTrialN'
p4394
I51
sg3632
g4057
sS'block_loop.thisIndex'
p4395
g3626
sg38
S'right'
p4396
sg58
g62
sS'trial_loop.thisN'
p4397
I51
sg33
g3848
sg63
g64
sS'trial_loop.thisIndex'
p4398
g59
(g98
S'3\x00\x00\x00'
tRp4399
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4400
I0
sg3641
g4064
sS'block_loop.thisRepN'
p4401
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4402
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p4403
Nsg69
Vy
sS'block_loop.thisTrialN'
p4404
I0
sg39
F4.8001419232741682
sg34
g752
(S'\x07\xdf\t\x1e\x0b \x0e\x0bF\xb8'
tRp4405
sa(dp4406
S'trial_loop.thisTrialN'
p4407
I52
sg3632
S'22-daim.png'
p4408
sS'block_loop.thisIndex'
p4409
g3626
sg38
S'right'
p4410
sg58
g62
sS'trial_loop.thisN'
p4411
I52
sg33
g4244
sg63
g64
sS'trial_loop.thisIndex'
p4412
g59
(g98
S'4\x00\x00\x00'
tRp4413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4414
I0
sg3641
S'7-olives.png'
p4415
sS'block_loop.thisRepN'
p4416
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4417
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p4418
Nsg69
Vy
sS'block_loop.thisTrialN'
p4419
I0
sg39
F1.5001036342109728
sg34
g752
(S'\x07\xdf\t\x1e\x0b \x18\x08\xa6\xd8'
tRp4420
sa(dp4421
S'trial_loop.thisTrialN'
p4422
I53
sg3632
g4195
sS'block_loop.thisIndex'
p4423
g3626
sg38
S'left'
p4424
sg58
g62
sS'trial_loop.thisN'
p4425
I53
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p4426
g59
(g98
S'5\x00\x00\x00'
tRp4427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4428
I0
sg3641
g4202
sS'block_loop.thisRepN'
p4429
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4430
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p4431
Nsg69
Vy
sS'block_loop.thisTrialN'
p4432
I0
sg39
F1.0335338638687972
sg34
g752
(S'\x07\xdf\t\x1e\x0b \x1f\x01\x92X'
tRp4433
sa(dp4434
S'trial_loop.thisTrialN'
p4435
I54
sg3632
S'38-maltesers.png'
p4436
sS'block_loop.thisIndex'
p4437
g3626
sg38
S'left'
p4438
sg58
g62
sS'trial_loop.thisN'
p4439
I54
sg33
S'38-maltesers.png'
p4440
sg63
g64
sS'trial_loop.thisIndex'
p4441
g59
(g98
S'6\x00\x00\x00'
tRp4442
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4443
I0
sg3641
S'6-sour_patch_kids.png'
p4444
sS'block_loop.thisRepN'
p4445
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4446
I1
sg3646
S'6-sour_patch_kids.png'
p4447
sg55
g11
sS'block_loop.thisTrial'
p4448
Nsg69
Vy
sS'block_loop.thisTrialN'
p4449
I0
sg39
F2.1503206388315448
sg34
g752
(S'\x07\xdf\t\x1e\x0b %\x02\x9f\xe0'
tRp4450
sa(dp4451
S'trial_loop.thisTrialN'
p4452
I55
sg3632
g4240
sS'block_loop.thisIndex'
p4453
g3626
sg38
S'left'
p4454
sg58
g62
sS'trial_loop.thisN'
p4455
I55
sg33
g4244
sg63
g64
sS'trial_loop.thisIndex'
p4456
g59
(g98
S'7\x00\x00\x00'
tRp4457
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4458
I0
sg3641
g4248
sS'block_loop.thisRepN'
p4459
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4460
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p4461
Nsg69
Vy
sS'block_loop.thisTrialN'
p4462
I0
sg39
F1.0668992330502078
sg34
g752
(S'\x07\xdf\t\x1e\x0b ,\x05O`'
tRp4463
sa(dp4464
S'trial_loop.thisTrialN'
p4465
I56
sg3632
g3685
sS'block_loop.thisIndex'
p4466
g3626
sg38
S'left'
p4467
sg58
g62
sS'trial_loop.thisN'
p4468
I56
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p4469
g59
(g98
S'8\x00\x00\x00'
tRp4470
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4471
I0
sg3641
g3693
sS'block_loop.thisRepN'
p4472
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4473
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p4474
Nsg69
Vy
sS'block_loop.thisTrialN'
p4475
I0
sg39
F2.250183533764357
sg34
g752
(S'\x07\xdf\t\x1e\x0b 2\x06\xd2\x18'
tRp4476
sa(dp4477
S'trial_loop.thisTrialN'
p4478
I57
sg3632
S'31-hobnobs.png'
p4479
sS'block_loop.thisIndex'
p4480
g3626
sg38
S'left'
p4481
sg58
g62
sS'trial_loop.thisN'
p4482
I57
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p4483
g59
(g98
S'9\x00\x00\x00'
tRp4484
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4485
I0
sg3641
S'25-kitkat.png'
p4486
sS'block_loop.thisRepN'
p4487
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4488
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p4489
Nsg69
Vy
sS'block_loop.thisTrialN'
p4490
I0
sg39
F1.3168509797060324
sg34
g752
(S'\x07\xdf\t\x1e\x0b 9\x0b/H'
tRp4491
sa(dp4492
S'trial_loop.thisTrialN'
p4493
I58
sg3632
S'2-steamed_puddings.png'
p4494
sS'block_loop.thisIndex'
p4495
g3626
sg38
S'left'
p4496
sg58
g62
sS'trial_loop.thisN'
p4497
I58
sg33
S'2-steamed_puddings.png'
p4498
sg63
g64
sS'trial_loop.thisIndex'
p4499
g59
(g98
S':\x00\x00\x00'
tRp4500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4501
I0
sg3641
S'20-fruit_pastilles.png'
p4502
sS'block_loop.thisRepN'
p4503
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4504
I1
sg3646
S'20-fruit_pastilles.png'
p4505
sg55
g11
sS'block_loop.thisTrial'
p4506
Nsg69
Vy
sS'block_loop.thisTrialN'
p4507
I0
sg39
F0.88349804092831619
sg34
g752
(S'\x07\xdf\t\x1e\x0b!\x04\x01@P'
tRp4508
sa(dp4509
S'trial_loop.thisTrialN'
p4510
I59
sg3632
g3702
sS'block_loop.thisIndex'
p4511
g3626
sg38
S'right'
p4512
sg58
g62
sS'trial_loop.thisN'
p4513
I59
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p4514
g59
(g98
S';\x00\x00\x00'
tRp4515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4516
I0
sg3641
g3710
sS'block_loop.thisRepN'
p4517
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4518
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p4519
Nsg69
Vy
sS'block_loop.thisTrialN'
p4520
I0
sg39
F1.1002127138508513
sg34
g752
(S'\x07\xdf\t\x1e\x0b!\t\x0f*\xd0'
tRp4521
sa(dp4522
S'trial_loop.thisTrialN'
p4523
I60
sg3632
S'19-caramello_redo.png'
p4524
sS'block_loop.thisIndex'
p4525
g3626
sg38
S'right'
p4526
sg58
g62
sS'trial_loop.thisN'
p4527
I60
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4528
g59
(g98
S'<\x00\x00\x00'
tRp4529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4530
I0
sg3641
S'30-spaghetti_hoops.png'
p4531
sS'block_loop.thisRepN'
p4532
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4533
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4534
Nsg69
Vy
sS'block_loop.thisTrialN'
p4535
I0
sg39
F2.8501725858859572
sg34
g752
(S'\x07\xdf\t\x1e\x0b!\x10\x01\xe8H'
tRp4536
sa(dp4537
S'trial_loop.thisTrialN'
p4538
I61
sg3632
g3971
sS'block_loop.thisIndex'
p4539
g3626
sg38
S'right'
p4540
sg58
g62
sS'trial_loop.thisN'
p4541
I61
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4542
g59
(g98
S'=\x00\x00\x00'
tRp4543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4544
I0
sg3641
g3978
sS'block_loop.thisRepN'
p4545
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4546
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4547
Nsg69
Vy
sS'block_loop.thisTrialN'
p4548
I0
sg39
F1.6335557026040988
sg34
g752
(S'\x07\xdf\t\x1e\x0b!\x18\x00J8'
tRp4549
sa(dp4550
S'trial_loop.thisTrialN'
p4551
I62
sg3632
g4380
sS'block_loop.thisIndex'
p4552
g3626
sg38
S'right'
p4553
sg58
g62
sS'trial_loop.thisN'
p4554
I62
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p4555
g59
(g98
S'>\x00\x00\x00'
tRp4556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4557
I0
sg3641
g4387
sS'block_loop.thisRepN'
p4558
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4559
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4560
Nsg69
Vy
sS'block_loop.thisTrialN'
p4561
I0
sg39
F1.4167543589810521
sg34
g752
(S'\x07\xdf\t\x1e\x0b!\x1e\n`@'
tRp4562
sa(dp4563
S'trial_loop.thisTrialN'
p4564
I63
sg3632
g3894
sS'block_loop.thisIndex'
p4565
g3626
sg38
S'left'
p4566
sg58
g62
sS'trial_loop.thisN'
p4567
I63
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p4568
g59
(g98
S'?\x00\x00\x00'
tRp4569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4570
I0
sg3641
g3902
sS'block_loop.thisRepN'
p4571
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4572
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p4573
Nsg69
Vy
sS'block_loop.thisTrialN'
p4574
I0
sg39
F0.83345112756069284
sg34
g752
(S'\x07\xdf\t\x1e\x0b!%\x02\x1b\x10'
tRp4575
sa(dp4576
S'trial_loop.thisTrialN'
p4577
I64
sg3632
g4436
sS'block_loop.thisIndex'
p4578
g3626
sg38
S'left'
p4579
sg58
g62
sS'trial_loop.thisN'
p4580
I64
sg33
g4447
sg63
g64
sS'trial_loop.thisIndex'
p4581
g59
(g98
S'@\x00\x00\x00'
tRp4582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4583
I0
sg3641
g4444
sS'block_loop.thisRepN'
p4584
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4585
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p4586
Nsg69
Vy
sS'block_loop.thisTrialN'
p4587
I0
sg39
F0.83329061570202612
sg34
g752
(S'\x07\xdf\t\x1e\x0b!+\x00\x0f\xa0'
tRp4588
sa(dp4589
S'trial_loop.thisTrialN'
p4590
I65
sg3632
g3633
sS'block_loop.thisIndex'
p4591
g3626
sg38
S'right'
p4592
sg58
g62
sS'trial_loop.thisN'
p4593
I65
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4594
g59
(g98
S'A\x00\x00\x00'
tRp4595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4596
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4597
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4598
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4599
Nsg69
Vy
sS'block_loop.thisTrialN'
p4600
I0
sg39
F1.5668611720675472
sg34
g752
(S'\x07\xdf\t\x1e\x0b!0\rFp'
tRp4601
sa(dp4602
S'trial_loop.thisTrialN'
p4603
I66
sg3632
g4494
sS'block_loop.thisIndex'
p4604
g3626
sg38
S'left'
p4605
sg58
g62
sS'trial_loop.thisN'
p4606
I66
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p4607
g59
(g98
S'B\x00\x00\x00'
tRp4608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4609
I0
sg3641
g4502
sS'block_loop.thisRepN'
p4610
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4611
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p4612
Nsg69
Vy
sS'block_loop.thisTrialN'
p4613
I0
sg39
F0.85021364042859204
sg34
g752
(S'\x07\xdf\t\x1e\x0b!7\x07$ '
tRp4614
sa(dp4615
S'trial_loop.thisTrialN'
p4616
I67
sg3632
S'23-crunchie_redo.png'
p4617
sS'block_loop.thisIndex'
p4618
g3626
sg38
S'left'
p4619
sg58
g62
sS'trial_loop.thisN'
p4620
I67
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p4621
g59
(g98
S'C\x00\x00\x00'
tRp4622
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4623
I0
sg3641
S'33-ambrosia_rice.png'
p4624
sS'block_loop.thisRepN'
p4625
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4626
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p4627
Nsg69
Vy
sS'block_loop.thisTrialN'
p4628
I0
sg39
F2.8334993096277685
sg34
g752
(S'\x07\xdf\t\x1e\x0b"\x01\x05W0'
tRp4629
sa(dp4630
S'trial_loop.thisTrialN'
p4631
I68
sg3632
g3736
sS'block_loop.thisIndex'
p4632
g3626
sg38
S'left'
p4633
sg58
g62
sS'trial_loop.thisN'
p4634
I68
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4635
g59
(g98
S'D\x00\x00\x00'
tRp4636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4637
I0
sg3641
g3744
sS'block_loop.thisRepN'
p4638
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4639
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4640
Nsg69
Vy
sS'block_loop.thisTrialN'
p4641
I0
sg39
F5.0004994969385734
sg34
g752
(S'\x07\xdf\t\x1e\x0b"\t\x03< '
tRp4642
sa(dp4643
S'trial_loop.thisTrialN'
p4644
I69
sg3632
g4085
sS'block_loop.thisIndex'
p4645
g3626
sg38
S'right'
p4646
sg58
g62
sS'trial_loop.thisN'
p4647
I69
sg33
g3905
sg63
g64
sS'trial_loop.thisIndex'
p4648
g59
(g98
S'E\x00\x00\x00'
tRp4649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4650
I0
sg3641
g4092
sS'block_loop.thisRepN'
p4651
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4652
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p4653
Nsg69
Vy
sS'block_loop.thisTrialN'
p4654
I0
sg39
F1.0168084141287181
sg34
g752
(S'\x07\xdf\t\x1e\x0b"\x13\x03\xb58'
tRp4655
sa(dp4656
S'trial_loop.thisTrialN'
p4657
I70
sg3632
g4240
sS'block_loop.thisIndex'
p4658
g3626
sg38
S'left'
p4659
sg58
g62
sS'trial_loop.thisN'
p4660
I70
sg33
g4251
sg63
g64
sS'trial_loop.thisIndex'
p4661
g59
(g98
S'F\x00\x00\x00'
tRp4662
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4663
I0
sg3641
g4248
sS'block_loop.thisRepN'
p4664
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4665
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p4666
Nsg69
Vy
sS'block_loop.thisTrialN'
p4667
I0
sg39
F0.98353826867787575
sg34
g752
(S'\x07\xdf\t\x1e\x0b"\x19\x04\x84@'
tRp4668
sa(dp4669
S'trial_loop.thisTrialN'
p4670
I71
sg3632
g3753
sS'block_loop.thisIndex'
p4671
g3626
sg38
S'left'
p4672
sg58
g62
sS'trial_loop.thisN'
p4673
I71
sg33
g3764
sg63
g64
sS'trial_loop.thisIndex'
p4674
g59
(g98
S'G\x00\x00\x00'
tRp4675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4676
I0
sg3641
g3761
sS'block_loop.thisRepN'
p4677
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4678
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p4679
Nsg69
Vy
sS'block_loop.thisTrialN'
p4680
I0
sg39
F0.98345958080426499
sg34
g752
(S'\x07\xdf\t\x1e\x0b"\x1f\x04\xd6H'
tRp4681
sa(dp4682
S'trial_loop.thisTrialN'
p4683
I72
sg3632
g3653
sS'block_loop.thisIndex'
p4684
g3626
sg38
S'right'
p4685
sg58
g62
sS'trial_loop.thisN'
p4686
I72
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4687
g59
(g98
S'H\x00\x00\x00'
tRp4688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4689
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4690
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4691
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4692
Nsg69
Vy
sS'block_loop.thisTrialN'
p4693
I0
sg39
F0.88345014396145416
sg34
g752
(S'\x07\xdf\t\x1e\x0b"%\x04\xed\xb8'
tRp4694
sa(dp4695
S'trial_loop.thisTrialN'
p4696
I73
sg3632
g3954
sS'block_loop.thisIndex'
p4697
g3626
sg38
S'left'
p4698
sg58
g62
sS'trial_loop.thisN'
p4699
I73
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p4700
g59
(g98
S'I\x00\x00\x00'
tRp4701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4702
I0
sg3641
g3962
sS'block_loop.thisRepN'
p4703
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4704
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p4705
Nsg69
Vy
sS'block_loop.thisTrialN'
p4706
I0
sg39
F2.5672363649737235
sg34
g752
(S'\x07\xdf\t\x1e\x0b"+\x03\xd4x'
tRp4707
sa(dp4708
S'trial_loop.thisTrialN'
p4709
I74
sg3632
g4436
sS'block_loop.thisIndex'
p4710
g3626
sg38
S'left'
p4711
sg58
g62
sS'trial_loop.thisN'
p4712
I74
sg33
g4440
sg63
g64
sS'trial_loop.thisIndex'
p4713
g59
(g98
S'J\x00\x00\x00'
tRp4714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4715
I0
sg3641
g4444
sS'block_loop.thisRepN'
p4716
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4717
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p4718
Nsg69
Vy
sS'block_loop.thisTrialN'
p4719
I0
sg39
F1.5333207508756459
sg34
g752
(S'\x07\xdf\t\x1e\x0b"2\x0c\xf0\x80'
tRp4720
sa(dp4721
S'trial_loop.thisTrialN'
p4722
I75
sg3632
g4479
sS'block_loop.thisIndex'
p4723
g3626
sg38
S'left'
p4724
sg58
g62
sS'trial_loop.thisN'
p4725
I75
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p4726
g59
(g98
S'K\x00\x00\x00'
tRp4727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4728
I0
sg3641
g4486
sS'block_loop.thisRepN'
p4729
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4730
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p4731
Nsg69
Vy
sS'block_loop.thisTrialN'
p4732
I0
sg39
F0.88358157551920158
sg34
g752
(S'\x07\xdf\t\x1e\x0b"9\x06Y\x00'
tRp4733
sa(dp4734
S'trial_loop.thisTrialN'
p4735
I76
sg3632
g4524
sS'block_loop.thisIndex'
p4736
g3626
sg38
S'right'
p4737
sg58
g62
sS'trial_loop.thisN'
p4738
I76
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4739
g59
(g98
S'L\x00\x00\x00'
tRp4740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4741
I0
sg3641
g4531
sS'block_loop.thisRepN'
p4742
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4743
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4744
Nsg69
Vy
sS'block_loop.thisTrialN'
p4745
I0
sg39
F1.0500928146284423
sg34
g752
(S'\x07\xdf\t\x1e\x0b#\x03\x05\x01@'
tRp4746
sa(dp4747
S'trial_loop.thisTrialN'
p4748
I77
sg3632
S'6-sour_patch_kids.png'
p4749
sS'block_loop.thisIndex'
p4750
g3626
sg38
S'right'
p4751
sg58
g62
sS'trial_loop.thisN'
p4752
I77
sg33
g4447
sg63
g64
sS'trial_loop.thisIndex'
p4753
g59
(g98
S'M\x00\x00\x00'
tRp4754
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4755
I0
sg3641
S'38-maltesers.png'
p4756
sS'block_loop.thisRepN'
p4757
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4758
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p4759
Nsg69
Vy
sS'block_loop.thisTrialN'
p4760
I0
sg39
F1.683200338471579
sg34
g752
(S'\x07\xdf\t\x1e\x0b#\t\x06I`'
tRp4761
sa(dp4762
S'trial_loop.thisTrialN'
p4763
I78
sg3632
g4285
sS'block_loop.thisIndex'
p4764
g3626
sg38
S'right'
p4765
sg58
g62
sS'trial_loop.thisN'
p4766
I78
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4767
g59
(g98
S'N\x00\x00\x00'
tRp4768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4769
I0
sg3641
g4292
sS'block_loop.thisRepN'
p4770
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4771
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4772
Nsg69
Vy
sS'block_loop.thisTrialN'
p4773
I0
sg39
F1.0504121277399463
sg34
g752
(S'\x07\xdf\t\x1e\x0b#\x10\x02\x13@'
tRp4774
sa(dp4775
S'trial_loop.thisTrialN'
p4776
I79
sg3632
g3971
sS'block_loop.thisIndex'
p4777
g3626
sg38
S'right'
p4778
sg58
g62
sS'trial_loop.thisN'
p4779
I79
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4780
g59
(g98
S'O\x00\x00\x00'
tRp4781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4782
I0
sg3641
g3978
sS'block_loop.thisRepN'
p4783
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4784
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4785
Nsg69
Vy
sS'block_loop.thisTrialN'
p4786
I0
sg39
F0.93351102727865509
sg34
g752
(S'\x07\xdf\t\x1e\x0b#\x16\x03[`'
tRp4787
sa(dp4788
S'trial_loop.thisTrialN'
p4789
I80
sg3632
g4749
sS'block_loop.thisIndex'
p4790
g3626
sg38
S'left'
p4791
sg58
g62
sS'trial_loop.thisN'
p4792
I80
sg33
g4440
sg63
g64
sS'trial_loop.thisIndex'
p4793
g59
(g98
S'P\x00\x00\x00'
tRp4794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4795
I0
sg3641
g4756
sS'block_loop.thisRepN'
p4796
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vy
sS'block_loop.thisTrialN'
p4799
I0
sg39
F1.3499169928463743
sg34
g752
(S'\x07\xdf\t\x1e\x0b#\x1c\x02\xbb8'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
g4270
sS'block_loop.thisIndex'
p4803
g3626
sg38
S'right'
p4804
sg58
g62
sS'trial_loop.thisN'
p4805
I81
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4806
g59
(g98
S'Q\x00\x00\x00'
tRp4807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4808
I0
sg3641
g4277
sS'block_loop.thisRepN'
p4809
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4810
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4811
Nsg69
Vy
sS'block_loop.thisTrialN'
p4812
I0
sg39
F0.81680664650230028
sg34
g752
(S'\x07\xdf\t\x1e\x0b#"\x08\x8b\x80'
tRp4813
sa(dp4814
S'trial_loop.thisTrialN'
p4815
I82
sg3632
g3670
sS'block_loop.thisIndex'
p4816
g3626
sg38
S'left'
p4817
sg58
g62
sS'trial_loop.thisN'
p4818
I82
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4819
g59
(g98
S'R\x00\x00\x00'
tRp4820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4821
I0
sg3641
g3677
sS'block_loop.thisRepN'
p4822
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4823
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4824
Nsg69
Vy
sS'block_loop.thisTrialN'
p4825
I0
sg39
F1.9167949858710926
sg34
g752
(S'\x07\xdf\t\x1e\x0b#(\x06A\x90'
tRp4826
sa(dp4827
S'trial_loop.thisTrialN'
p4828
I83
sg3632
S'20-fruit_pastilles.png'
p4829
sS'block_loop.thisIndex'
p4830
g3626
sg38
S'right'
p4831
sg58
g62
sS'trial_loop.thisN'
p4832
I83
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p4833
g59
(g98
S'S\x00\x00\x00'
tRp4834
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4835
I0
sg3641
S'2-steamed_puddings.png'
p4836
sS'block_loop.thisRepN'
p4837
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4838
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p4839
Nsg69
Vy
sS'block_loop.thisTrialN'
p4840
I0
sg39
F0.717257362662167
sg34
g752
(S'\x07\xdf\t\x1e\x0b#/\x05\x99\x98'
tRp4841
sa(dp4842
S'trial_loop.thisTrialN'
p4843
I84
sg3632
g4617
sS'block_loop.thisIndex'
p4844
g3626
sg38
S'left'
p4845
sg58
g62
sS'trial_loop.thisN'
p4846
I84
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p4847
g59
(g98
S'T\x00\x00\x00'
tRp4848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4849
I0
sg3641
g4624
sS'block_loop.thisRepN'
p4850
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4851
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p4852
Nsg69
Vy
sS'block_loop.thisTrialN'
p4853
I0
sg39
F1.4667633539165763
sg34
g752
(S'\x07\xdf\t\x1e\x0b#5\x01\xa5\xe0'
tRp4854
sa(dp4855
S'trial_loop.thisTrialN'
p4856
I85
sg3632
g4326
sS'block_loop.thisIndex'
p4857
g3626
sg38
S'right'
p4858
sg58
g62
sS'trial_loop.thisN'
p4859
I85
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p4860
g59
(g98
S'U\x00\x00\x00'
tRp4861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4862
I0
sg3641
g4333
sS'block_loop.thisRepN'
p4863
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4864
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p4865
Nsg69
Vy
sS'block_loop.thisTrialN'
p4866
I0
sg39
F1.4502337685589737
sg34
g752
(S'\x07\xdf\t\x1e\x0b#;\tZ\x88'
tRp4867
sa(dp4868
S'trial_loop.thisTrialN'
p4869
I86
sg3632
S'13-mccoys_steak_crisps.png'
p4870
sS'block_loop.thisIndex'
p4871
g3626
sg38
S'right'
p4872
sg58
g62
sS'trial_loop.thisN'
p4873
I86
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p4874
g59
(g98
S'V\x00\x00\x00'
tRp4875
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4876
I0
sg3641
S'3-ellas_strawberries_apples.png'
p4877
sS'block_loop.thisRepN'
p4878
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4879
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vy
sS'block_loop.thisTrialN'
p4881
I0
sg39
F1.4168963392748992
sg34
g752
(S'\x07\xdf\t\x1e\x0b$\x06\x01\x92X'
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g4408
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'right'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g4244
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g4415
sS'block_loop.thisRepN'
p4891
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4892
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vy
sS'block_loop.thisTrialN'
p4894
I0
sg39
F1.983524013628994
sg34
g752
(S'\x07\xdf\t\x1e\x0b$\x0c\x08T\xd0'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g3736
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'left'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g3744
sS'block_loop.thisRepN'
p4904
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4905
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vy
sS'block_loop.thisTrialN'
p4907
I0
sg39
F1.2502160352769351
sg34
g752
(S'\x07\xdf\t\x1e\x0b$\x13\x08\xa2\xf0'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g3804
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'left'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g3812
sS'block_loop.thisRepN'
p4917
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4918
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vy
sS'block_loop.thisTrialN'
p4920
I0
sg39
F0.95013954268142697
sg34
g752
(S'\x07\xdf\t\x1e\x0b$\x19\r\x04\x08'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
g4494
sS'block_loop.thisIndex'
p4924
g3626
sg38
S'left'
p4925
sg58
g62
sS'trial_loop.thisN'
p4926
I90
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p4927
g59
(g98
S'Z\x00\x00\x00'
tRp4928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4929
I0
sg3641
g4502
sS'block_loop.thisRepN'
p4930
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4931
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p4932
Nsg69
Vy
sS'block_loop.thisTrialN'
p4933
I0
sg39
F0.76686151418834925
sg34
g752
(S'\x07\xdf\t\x1e\x0b$\x1f\x0c\x9ex'
tRp4934
sa(dp4935
S'trial_loop.thisTrialN'
p4936
I91
sg3632
g4870
sS'block_loop.thisIndex'
p4937
g3626
sg38
S'right'
p4938
sg58
g62
sS'trial_loop.thisN'
p4939
I91
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p4940
g59
(g98
S'[\x00\x00\x00'
tRp4941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4942
I0
sg3641
g4877
sS'block_loop.thisRepN'
p4943
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4944
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p4945
Nsg69
Vy
sS'block_loop.thisTrialN'
p4946
I0
sg39
F1.5668035816670454
sg34
g752
(S'\x07\xdf\t\x1e\x0b$%\t\xa0\xd8'
tRp4947
sa(dp4948
S'trial_loop.thisTrialN'
p4949
I92
sg3632
g4270
sS'block_loop.thisIndex'
p4950
g3626
sg38
S'right'
p4951
sg58
g62
sS'trial_loop.thisN'
p4952
I92
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p4953
g59
(g98
S'\\\x00\x00\x00'
tRp4954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4955
I0
sg3641
g4277
sS'block_loop.thisRepN'
p4956
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4957
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p4958
Nsg69
Vy
sS'block_loop.thisTrialN'
p4959
I0
sg39
F0.9834570148950661
sg34
g752
(S'\x07\xdf\t\x1e\x0b$,\x03~\x88'
tRp4960
sa(dp4961
S'trial_loop.thisTrialN'
p4962
I93
sg3632
g4285
sS'block_loop.thisIndex'
p4963
g3626
sg38
S'right'
p4964
sg58
g62
sS'trial_loop.thisN'
p4965
I93
sg33
g3935
sg63
g64
sS'trial_loop.thisIndex'
p4966
g59
(g98
S']\x00\x00\x00'
tRp4967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4968
I0
sg3641
g4292
sS'block_loop.thisRepN'
p4969
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4970
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vy
sS'block_loop.thisTrialN'
p4972
I0
sg39
F3.6503914864288163
sg34
g752
(S'\x07\xdf\t\x1e\x0b$2\x03\xd4x'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
g4180
sS'block_loop.thisIndex'
p4976
g3626
sg38
S'left'
p4977
sg58
g62
sS'trial_loop.thisN'
p4978
I94
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4979
g59
(g98
S'^\x00\x00\x00'
tRp4980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4981
I0
sg3641
g4187
sS'block_loop.thisRepN'
p4982
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4983
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p4984
Nsg69
Vy
sS'block_loop.thisTrialN'
p4985
I0
sg39
F1.1001137838065915
sg34
g752
(S'\x07\xdf\t\x1e\x0b$:\x0e\x1dH'
tRp4986
sa(dp4987
S'trial_loop.thisTrialN'
p4988
I95
sg3632
g4870
sS'block_loop.thisIndex'
p4989
g3626
sg38
S'right'
p4990
sg58
g62
sS'trial_loop.thisN'
p4991
I95
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p4992
g59
(g98
S'_\x00\x00\x00'
tRp4993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4994
I0
sg3641
g4877
sS'block_loop.thisRepN'
p4995
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4996
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p4997
Nsg69
Vy
sS'block_loop.thisTrialN'
p4998
I0
sg39
F1.0668861184039997
sg34
g752
(S'\x07\xdf\t\x1e\x0b%\x05\x00\xd6\xd8'
tRp4999
sa(dp5000
S'trial_loop.thisTrialN'
p5001
I96
sg3632
g3770
sS'block_loop.thisIndex'
p5002
g3626
sg38
S'left'
p5003
sg58
g62
sS'trial_loop.thisN'
p5004
I96
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5005
g59
(g98
S'`\x00\x00\x00'
tRp5006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5007
I0
sg3641
g3778
sS'block_loop.thisRepN'
p5008
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5009
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vy
sS'block_loop.thisTrialN'
p5011
I0
sg39
F1.6334767296293649
sg34
g752
(S'\x07\xdf\t\x1e\x0b%\x0b\x02]x'
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g4180
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'left'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g4187
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5022
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vy
sS'block_loop.thisTrialN'
p5024
I0
sg39
F0.90009833133262873
sg34
g752
(S'\x07\xdf\t\x1e\x0b%\x11\x0c\xb2\x00'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g3770
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'left'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g3778
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vy
sS'block_loop.thisTrialN'
p5037
I0
sg39
F1.6835438851685467
sg34
g752
(S'\x07\xdf\t\x1e\x0b%\x17\x0b\x98\xc0'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g3971
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'right'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g3978
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5048
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vy
sS'block_loop.thisTrialN'
p5050
I0
sg39
F1.4668582925478404
sg34
g752
(S'\x07\xdf\t\x1e\x0b%\x1e\x07^\xb8'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
g3821
sS'block_loop.thisIndex'
p5054
g3626
sg38
S'right'
p5055
sg58
g62
sS'trial_loop.thisN'
p5056
I100
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5057
g59
(g98
S'd\x00\x00\x00'
tRp5058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5059
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5060
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5061
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5062
Nsg69
Vy
sS'block_loop.thisTrialN'
p5063
I0
sg39
F0.96686185630915134
sg34
g752
(S'\x07\xdf\t\x1e\x0b%$\x0e\xd8\xc8'
tRp5064
sa(dp5065
S'trial_loop.thisTrialN'
p5066
I101
sg3632
g3736
sS'block_loop.thisIndex'
p5067
g3626
sg38
S'left'
p5068
sg58
g62
sS'trial_loop.thisN'
p5069
I101
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p5070
g59
(g98
S'e\x00\x00\x00'
tRp5071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5072
I0
sg3641
g3744
sS'block_loop.thisRepN'
p5073
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5074
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5075
Nsg69
Vy
sS'block_loop.thisTrialN'
p5076
I0
sg39
F1.5667571102048896
sg34
g752
(S'\x07\xdf\t\x1e\x0b%*\x0e\xf08'
tRp5077
sa(dp5078
S'trial_loop.thisTrialN'
p5079
I102
sg3632
g4326
sS'block_loop.thisIndex'
p5080
g3626
sg38
S'right'
p5081
sg58
g62
sS'trial_loop.thisN'
p5082
I102
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5083
g59
(g98
S'f\x00\x00\x00'
tRp5084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5085
I0
sg3641
g4333
sS'block_loop.thisRepN'
p5086
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5087
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vy
sS'block_loop.thisTrialN'
p5089
I0
sg39
F1.0002195277638748
sg34
g752
(S'\x07\xdf\t\x1e\x0b%1\x08\xd1\xd0'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g4436
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'left'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g4440
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g4444
sS'block_loop.thisRepN'
p5099
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5100
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vy
sS'block_loop.thisTrialN'
p5102
I0
sg39
F3.3003205390459698
sg34
g752
(S'\x07\xdf\t\x1e\x0b%7\tbX'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g4085
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'right'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g3905
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g4092
sS'block_loop.thisRepN'
p5112
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vy
sS'block_loop.thisTrialN'
p5115
I0
sg39
F0.98353997928461467
sg34
g752
(S'\x07\xdf\t\x1e\x0b&\x03\x0eoP'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g3685
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g3693
sS'block_loop.thisRepN'
p5125
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vy
sS'block_loop.thisTrialN'
p5128
I0
sg39
F1.0002563057923908
sg34
g752
(S'\x07\xdf\t\x1e\x0b&\t\x0e\xc1X'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g4494
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'left'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g4502
sS'block_loop.thisRepN'
p5138
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5139
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vy
sS'block_loop.thisTrialN'
p5141
I0
sg39
F0.80022859397558932
sg34
g752
(S'\x07\xdf\t\x1e\x0b&\x0f\x0f\x17H'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g3653
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'right'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5151
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5152
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vy
sS'block_loop.thisTrialN'
p5154
I0
sg39
F1.2668633673447403
sg34
g752
(S'\x07\xdf\t\x1e\x0b&\x15\x0c\x8e\xd8'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g4479
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'left'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g4486
sS'block_loop.thisRepN'
p5164
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vy
sS'block_loop.thisTrialN'
p5167
I0
sg39
F0.81726594420160836
sg34
g752
(S'\x07\xdf\t\x1e\x0b&\x1c\x01\xec0'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g4326
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'right'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g4333
sS'block_loop.thisRepN'
p5177
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5178
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vy
sS'block_loop.thisTrialN'
p5180
I0
sg39
F1.9667860194458626
sg34
g752
(S'\x07\xdf\t\x1e\x0b&!\x0e\xe4\x80'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g4210
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'right'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g4218
sS'block_loop.thisRepN'
p5190
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5191
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vy
sS'block_loop.thisTrialN'
p5193
I0
sg39
F1.1501165065201349
sg34
g752
(S'\x07\xdf\t\x1e\x0b&(\x0e\xf4 '
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g3633
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'right'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5203
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5204
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vy
sS'block_loop.thisTrialN'
p5206
I0
sg39
F1.9334106717287796
sg34
g752
(S'\x07\xdf\t\x1e\x0b&/\x02i0'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
g4195
sS'block_loop.thisIndex'
p5210
g3626
sg38
S'left'
p5211
sg58
g62
sS'trial_loop.thisN'
p5212
I112
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p5213
g59
(g98
S'p\x00\x00\x00'
tRp5214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5215
I0
sg3641
g4202
sS'block_loop.thisRepN'
p5216
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5217
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p5218
Nsg69
Vy
sS'block_loop.thisTrialN'
p5219
I0
sg39
F1.6168681712961188
sg34
g752
(S'\x07\xdf\t\x1e\x0b&6\x01\xff\xb8'
tRp5220
sa(dp5221
S'trial_loop.thisTrialN'
p5222
I113
sg3632
g3736
sS'block_loop.thisIndex'
p5223
g3626
sg38
S'left'
p5224
sg58
g62
sS'trial_loop.thisN'
p5225
I113
sg33
g3740
sg63
g64
sS'trial_loop.thisIndex'
p5226
g59
(g98
S'q\x00\x00\x00'
tRp5227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5228
I0
sg3641
g3744
sS'block_loop.thisRepN'
p5229
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5230
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5231
Nsg69
Vy
sS'block_loop.thisTrialN'
p5232
I0
sg39
F1.9669148850935017
sg34
g752
(S"\x07\xdf\t\x1e\x0b'\x00\x0b\xd7@"
tRp5233
sa(dp5234
S'trial_loop.thisTrialN'
p5235
I114
sg3632
g4195
sS'block_loop.thisIndex'
p5236
g3626
sg38
S'left'
p5237
sg58
g62
sS'trial_loop.thisN'
p5238
I114
sg33
g3713
sg63
g64
sS'trial_loop.thisIndex'
p5239
g59
(g98
S'r\x00\x00\x00'
tRp5240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5241
I0
sg3641
g4202
sS'block_loop.thisRepN'
p5242
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5243
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p5244
Nsg69
Vy
sS'block_loop.thisTrialN'
p5245
I0
sg39
F1.9002052442046988
sg34
g752
(S"\x07\xdf\t\x1e\x0b'\x07\x0b\xea\xc8"
tRp5246
sa(dp5247
S'trial_loop.thisTrialN'
p5248
I115
sg3632
g3838
sS'block_loop.thisIndex'
p5249
g3626
sg38
S'left'
p5250
sg58
g62
sS'trial_loop.thisN'
p5251
I115
sg33
g3848
sg63
g64
sS'trial_loop.thisIndex'
p5252
g59
(g98
S's\x00\x00\x00'
tRp5253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5254
I0
sg3641
g3846
sS'block_loop.thisRepN'
p5255
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5256
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p5257
Nsg69
Vy
sS'block_loop.thisTrialN'
p5258
I0
sg39
F2.5334487612217345
sg34
g752
(S"\x07\xdf\t\x1e\x0b'\x0e\n\xc9\xb8"
tRp5259
sa(dp5260
S'trial_loop.thisTrialN'
p5261
I116
sg3632
g3986
sS'block_loop.thisIndex'
p5262
g3626
sg38
S'right'
p5263
sg58
g62
sS'trial_loop.thisN'
p5264
I116
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p5265
g59
(g98
S't\x00\x00\x00'
tRp5266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5267
I0
sg3641
g3993
sS'block_loop.thisRepN'
p5268
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5269
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5270
Nsg69
Vy
sS'block_loop.thisTrialN'
p5271
I0
sg39
F1.0001052022662407
sg34
g752
(S"\x07\xdf\t\x1e\x0b'\x16\x04*h"
tRp5272
sa(dp5273
S'trial_loop.thisTrialN'
p5274
I117
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p5275
sS'block_loop.thisIndex'
p5276
g3626
sg38
S'left'
p5277
sg58
g62
sS'trial_loop.thisN'
p5278
I117
sg33
g4044
sg63
g64
sS'trial_loop.thisIndex'
p5279
g59
(g98
S'u\x00\x00\x00'
tRp5280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5281
I0
sg3641
S'36-fig_rolls.png'
p5282
sS'block_loop.thisRepN'
p5283
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vy
sS'block_loop.thisTrialN'
p5286
I0
sg39
F2.3334258961222076
sg34
g752
(S"\x07\xdf\t\x1e\x0b'\x1c\x04\xbe\xd8"
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g3719
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g3727
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vy
sS'block_loop.thisTrialN'
p5299
I0
sg39
F1.0334842562961057
sg34
g752
(S"\x07\xdf\t\x1e\x0b'#\nH\xd0"
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4040
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'right'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4048
sS'block_loop.thisRepN'
p5309
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vy
sS'block_loop.thisTrialN'
p5312
I0
sg39
F1.616843652611351
sg34
g752
(S"\x07\xdf\t\x1e\x0b')\x0bRp"
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4210
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'right'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4218
sS'block_loop.thisRepN'
p5322
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vy
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.86705313056609157
sg34
g752
(S"\x07\xdf\t\x1e\x0b'0\x05\xeb\xa0"
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4057
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'right'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3848
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4064
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vy
sS'block_loop.thisTrialN'
p5338
I0
sg39
F2.2501108330106945
sg34
g752
(S"\x07\xdf\t\x1e\x0b'6\x04\x93\xe0"
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4326
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4333
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vy
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.78353992226402625
sg34
g752
(S'\x07\xdf\t\x1e\x0b(\x01\x08\xb2\x90'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4829
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4836
sS'block_loop.thisRepN'
p5361
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vy
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.78396415254155727
sg34
g752
(S'\x07\xdf\t\x1e\x0b(\x07\x05\xef\x88'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4195
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4202
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vy
sS'block_loop.thisTrialN'
p5377
I0
sg39
F0.8001901053421534
sg34
g752
(S'\x07\xdf\t\x1e\x0b(\r\x03(\x98'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g3633
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'right'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vy
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.91679669647783157
sg34
g752
(S'\x07\xdf\t\x1e\x0b(\x13\x00\xa4\x10'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4408
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g4251
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4415
sS'block_loop.thisRepN'
p5400
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vy
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.95024845125954016
sg34
g752
(S'\x07\xdf\t\x1e\x0b(\x19\x00\x03\xe8'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g4285
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'right'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g4292
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vy
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.81677414498881262
sg34
g752
(S'\x07\xdf\t\x1e\x0b(\x1e\x0e\xe4\x80'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3770
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3781
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3778
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vy
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.88345270987065305
sg34
g752
(S'\x07\xdf\t\x1e\x0b($\x0c\x9a\x90'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g3954
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'left'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g3962
sS'block_loop.thisRepN'
p5439
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vy
sS'block_loop.thisTrialN'
p5442
I0
sg39
F1.3672303208331869
sg34
g752
(S'\x07\xdf\t\x1e\x0b(*\x0bB\xd0'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g4285
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g4292
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vy
sS'block_loop.thisTrialN'
p5455
I0
sg39
F0.81669631241857132
sg34
g752
(S'\x07\xdf\t\x1e\x0b(1\x02I\xf0'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g4829
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'right'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g4836
sS'block_loop.thisRepN'
p5465
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vy
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.75020078237412235
sg34
g752
(S'\x07\xdf\t\x1e\x0b(7\x00\x00\x00'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3894
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'left'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3902
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vy
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.83342404296581662
sg34
g752
(S'\x07\xdf\t\x1e\x0b)\x00\x0b\xc7\xa0'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g3787
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'left'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g3795
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vy
sS'block_loop.thisTrialN'
p5494
I0
sg39
F1.0001029214581649
sg34
g752
(S'\x07\xdf\t\x1e\x0b)\x06\t\xb8H'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g3702
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'right'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g3713
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g3710
sS'block_loop.thisRepN'
p5504
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vy
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.76688859878322546
sg34
g752
(S'\x07\xdf\t\x1e\x0b)\x0c\nL\xb8'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4870
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'right'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3696
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4877
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vy
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.78353507554766111
sg34
g752
(S'\x07\xdf\t\x1e\x0b)\x12\x07K0'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g3653
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vy
sS'block_loop.thisTrialN'
p5533
I0
sg39
F1.0169461179084465
sg34
g752
(S'\x07\xdf\t\x1e\x0b)\x18\x04\x88('
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g3954
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g3962
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vy
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.0001151808010036
sg34
g752
(S'\x07\xdf\t\x1e\x0b)\x1e\x05W0'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g4210
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g4221
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g4218
sS'block_loop.thisRepN'
p5556
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vy
sS'block_loop.thisTrialN'
p5559
I0
sg39
F0.96678088762746484
sg34
g752
(S'\x07\xdf\t\x1e\x0b)$\x05\xa98'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3924
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'left'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3935
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3932
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vy
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.80001505333257228
sg34
g752
(S'\x07\xdf\t\x1e\x0b)*\x05\xc0\xa8'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4240
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g4244
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4248
sS'block_loop.thisRepN'
p5582
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vy
sS'block_loop.thisTrialN'
p5585
I0
sg39
F1.7002231485466837
sg34
g752
(S'\x07\xdf\t\x1e\x0b)0\x03< '
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3894
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3905
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3902
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vy
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.90015193031922536
sg34
g752
(S'\x07\xdf\t\x1e\x0b)6\x0eDX'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3821
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vy
sS'block_loop.thisTrialN'
p5611
I0
sg39
F1.0333026469625111
sg34
g752
(S'\x07\xdf\t\x1e\x0b*\x00\ri\x98'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4408
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g4244
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4415
sS'block_loop.thisRepN'
p5621
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vy
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.9167604886515619
sg34
g752
(S'\x07\xdf\t\x1e\x0b*\x06\x0es8'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g4829
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g4836
sS'block_loop.thisRepN'
p5634
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vy
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.85026980532438756
sg34
g752
(S'\x07\xdf\t\x1e\x0b*\x0c\r\x98x'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4165
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4172
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vy
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.1503106602967819
sg34
g752
(S'\x07\xdf\t\x1e\x0b*\x12\x0b\xc7\xa0'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g4270
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g4277
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vy
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.95020540100995277
sg34
g752
(S'\x07\xdf\t\x1e\x0b*\x18\x0e\xb9\x88'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4617
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4624
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vy
sS'block_loop.thisTrialN'
p5676
I0
sg39
F2.0667652355832615
sg34
g752
(S'\x07\xdf\t\x1e\x0b*\x1e\x0eW\xe0'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g4180
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g4187
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vy
sS'block_loop.thisTrialN'
p5689
I0
sg39
F1.0000926578231883
sg34
g752
(S'\x07\xdf\t\x1e\x0b*&\x00\x94p'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3685
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'left'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3693
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vy
sS'block_loop.thisTrialN'
p5702
I0
sg39
F1.2002141678649423
sg34
g752
(S'\x07\xdf\t\x1e\x0b*,\x01$\xf8'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4479
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4486
sS'block_loop.thisRepN'
p5712
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vy
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.86727066262392327
sg34
g752
(S'\x07\xdf\t\x1e\x0b*2\x04\xcex'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4494
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4502
sS'block_loop.thisRepN'
p5725
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vy
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.71686192758443212
sg34
g752
(S'\x07\xdf\t\x1e\x0b*8\x03< '
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4057
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3848
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4064
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vy
sS'block_loop.thisTrialN'
p5741
I0
sg39
F1.7335243700053979
sg34
g752
(S'\x07\xdf\t\x1e\x0b+\x01\x0e\x8a\xa8'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g5275
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g5282
sS'block_loop.thisRepN'
p5751
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vy
sS'block_loop.thisTrialN'
p5754
I0
sg39
F1.3668679574711859
sg34
g752
(S'\x07\xdf\t\x1e\x0b+\x08\x0b\x088'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g4749
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g4440
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g4756
sS'block_loop.thisRepN'
p5764
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vy
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.98326457172515802
sg34
g752
(S'\x07\xdf\t\x1e\x0b+\x0f\x01\xd0\xd8'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3804
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3812
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vy
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.81718297981296928
sg34
g752
(S'\x07\xdf\t\x1e\x0b+\x15\x02&\xc8'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3702
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3706
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3710
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3706
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3713
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vy
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.250218601186134
sg34
g752
(S'\x07\xdf\t\x1e\x0b+\x1a\x0f\x1f\x18'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3838
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3846
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3848
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3842
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vy
sS'block_loop.thisTrialN'
p5806
I0
sg39
F1.150047797181287
sg34
g752
(S'\x07\xdf\t\x1e\x0b+!\x04=\xf0'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g3753
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g3761
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vy
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.83351898159617122
sg34
g752
(S"\x07\xdf\t\x1e\x0b+'\x06\xf1X"
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4165
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'left'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4172
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vy
sS'block_loop.thisTrialN'
p5832
I0
sg39
F2.3501738688401019
sg34
g752
(S'\x07\xdf\t\x1e\x0b+-\x04\xe5\xe8'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4524
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4531
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vy
sS'block_loop.thisTrialN'
p5845
I0
sg39
F1.1502174322722567
sg34
g752
(S'\x07\xdf\t\x1e\x0b+4\n\xe8\xf8'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3971
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3747
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3978
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3740
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3747
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vy
sS'block_loop.thisTrialN'
p5858
I0
sg39
F1.4834246559330495
sg34
g752
(S'\x07\xdf\t\x1e\x0b+:\r\xa0H'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3719
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3727
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vy
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.2168483852874488
sg34
g752
(S'\x07\xdf\t\x1e\x0b,\x05\x06Q0'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g3787
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'left'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g3795
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vy
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.98356535327275196
sg34
g752
(S'\x07\xdf\t\x1e\x0b,\x0b\t\xfa\xb0'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4040
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4048
sS'block_loop.thisRepN'
p5894
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vy
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.3501895493945995
sg34
g752
(S'\x07\xdf\t\x1e\x0b,\x11\nL\xb8'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3753
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3761
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vy
sS'block_loop.thisTrialN'
p5910
I0
sg39
F1.0335495444232947
sg34
g752
(S'\x07\xdf\t\x1e\x0b,\x18\x00\xda\xc0'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4617
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4624
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vy
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.2834565302237024
sg34
g752
(S'\x07\xdf\t\x1e\x0b,\x1e\x01\xe4`'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g3821
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vy
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.85011471038433228
sg34
g752
(S'\x07\xdf\t\x1e\x0b,$\x06\xbe\x90'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g5275
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g5282
sS'block_loop.thisRepN'
p5946
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vy
sS'block_loop.thisTrialN'
p5949
I0
sg39
F1.6335328945251604
sg34
g752
(S'\x07\xdf\t\x1e\x0b,*\x04\xed\xb8'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4380
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'right'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4387
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vy
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.73346563920040353
sg34
g752
(S'\x07\xdf\t\x1e\x0b,0\x0f\x07\xa8'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g5275
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g5282
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vy
sS'block_loop.thisTrialN'
p5975
I0
sg39
F1.9672592870938388
sg34
g752
(S'\x07\xdf\t\x1e\x0b,6\x0b\x8d\x08'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4408
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4244
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4415
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vy
sS'block_loop.thisTrialN'
p5988
I0
sg39
F1.7501970760604308
sg34
g752
(S'\x07\xdf\t\x1e\x0b-\x01\x0b\x9c\xa8'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g4749
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g4440
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g4756
sS'block_loop.thisRepN'
p5998
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vy
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.94993940178392222
sg34
g752
(S'\x07\xdf\t\x1e\x0b-\x08\x08X\xb8'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3719
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3730
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3727
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vy
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.3168572519280133
sg34
g752
(S'\x07\xdf\t\x1e\x0b-\x0e\x07\xf7\x10'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4085
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3898
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4092
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vy
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.1501016812690068
sg34
g752
(S'\x07\xdf\t\x1e\x0b-\x14\rJX'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4380
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'right'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4387
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vy
sS'block_loop.thisTrialN'
p6040
I0
sg39
F2.0001952941802301
sg34
g752
(S'\x07\xdf\t\x1e\x0b-\x1b\x00\xfa\x00'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3719
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'right'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3727
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vy
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.8001025793373628
sg34
g752
(S'\x07\xdf\t\x1e\x0b-"\x01H '
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g3924
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g3932
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vy
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.2000610686327491
sg34
g752
(S'\x07\xdf\t\x1e\x0b-(\r\xfe\x08'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4270
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4277
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3808
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3815
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vy
sS'block_loop.thisTrialN'
p6079
I0
sg39
F5.783521960901453
sg34
g752
(S'\x07\xdf\t\x1e\x0b-/\x02eH'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g4870
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'right'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3689
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g4877
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vy
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.75019793136380031
sg34
g752
(S'\x07\xdf\t\x1e\x0b-9\x0e\xc5@'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4829
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g4498
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4836
sS'block_loop.thisRepN'
p6102
I1
sg3644
g4498
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g4505
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vy
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.7002285654662046
sg34
g752
(S'\x07\xdf\t\x1e\x0b.\x03\x0b\x89 '
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4524
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4531
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vy
sS'block_loop.thisTrialN'
p6118
I0
sg39
F1.0001958643815669
sg34
g752
(S'\x07\xdf\t\x1e\x0b.\t\x07\x91\x80'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g4436
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g4440
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g4444
sS'block_loop.thisRepN'
p6128
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vy
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.1499377481977717
sg34
g752
(S'\x07\xdf\t\x1e\x0b.\x0f\x07\xe7p'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4040
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4048
sS'block_loop.thisRepN'
p6141
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vy
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.9334939212185418
sg34
g752
(S'\x07\xdf\t\x1e\x0b.\x15\n\xd9X'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4210
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4218
sS'block_loop.thisRepN'
p6154
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vy
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.7501705616696199
sg34
g752
(S'\x07\xdf\t\x1e\x0b.\x1b\n90'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g4240
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g4244
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g4248
sS'block_loop.thisRepN'
p6167
I1
sg3644
g4244
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g4251
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vy
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.76726350658827869
sg34
g752
(S'\x07\xdf\t\x1e\x0b."\x06\xf5@'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g5275
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g4050
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g5282
sS'block_loop.thisRepN'
p6180
I1
sg3644
g4050
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vy
sS'block_loop.thisTrialN'
p6183
I0
sg39
F1.8167829831199924
sg34
g752
(S'\x07\xdf\t\x1e\x0b.(\x03\xf7\xa0'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g3954
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3958
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g3962
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3958
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3965
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vy
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.80020293488632888
sg34
g752
(S'\x07\xdf\t\x1e\x0b./\x01\xa5\xe0'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4165
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4172
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vy
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.2834454112844469
sg34
g752
(S'\x07\xdf\t\x1e\x0b.4\x0e_\xb0'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g3924
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g3932
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3928
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vy
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.9667153143991527
sg34
g752
(S'\x07\xdf\t\x1e\x0b.;\x03\xf7\xa0'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4180
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4187
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3825
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3832
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vy
sS'block_loop.thisTrialN'
p6235
I0
sg39
F1.0339506815198547
sg34
g752
(S'\x07\xdf\t\x1e\x0b/\x05\x03\xd4x'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4380
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3757
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4387
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3757
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g3764
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vy
sS'block_loop.thisTrialN'
p6248
I0
sg39
F1.4335311268987425
sg34
g752
(S'\x07\xdf\t\x1e\x0b/\x0b\x04\xde\x18'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4524
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4531
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vy
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.4835392665318068
sg34
g752
(S'\x07\xdf\t\x1e\x0b/\x11\x0c\x19\xa8'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4165
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4172
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3657
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vy
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.4334416051869994
sg34
g752
(S'\x07\xdf\t\x1e\x0b/\x18\x04\x8f\xf8'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3685
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3696
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3693
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3689
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3696
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vy
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.8500987447296211
sg34
g752
(S'\x07\xdf\t\x1e\x0b/\x1e\x0b\xcb\x88'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3894
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3905
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3902
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3898
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3905
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vy
sS'block_loop.thisTrialN'
p6300
I0
sg39
F1.3338621006414542
sg34
g752
(S'\x07\xdf\t\x1e\x0b/$\t\xfa\xb0'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4617
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3723
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4624
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3723
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3730
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vy
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.6001934695341333
sg34
g752
(S'\x07\xdf\t\x1e\x0b/+\x00J8'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4749
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'right'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g4440
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4756
sS'block_loop.thisRepN'
p6323
I1
sg3644
g4440
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g4447
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vy
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.2998529734186377
sg34
g752
(S'\x07\xdf\t\x1e\x0b/1\t\xe7('
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g3787
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3791
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g3795
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3791
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3798
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vy
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.2668713501725506
sg34
g752
(S'\x07\xdf\t\x1e\x0b/7\x0e\xfb\xf0'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4479
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g4214
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4486
sS'block_loop.thisRepN'
p6349
I1
sg3644
g4214
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g4221
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vy
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.4167840094833082
sg34
g752
(S'\x07\xdf\t\x1e\x0b0\x02\x04YH'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F105.39852043988776
sg56
Vl
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vy
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vl
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vy
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'22-daim.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'right'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'7-olives.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'7-olives.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'22-daim.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vy
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.8668678149206244
sg34
g752
(S'\x07\xdf\t\x1e\x0b1;\x02\xaf\x80'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'3-ellas_strawberries_apples.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'3-ellas_strawberries_apples.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'13-mccoys_steak_crisps.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vy
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.80020578589665092
sg34
g752
(S'\x07\xdf\t\x1e\x0b2\x06\x01\x15X'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'21-nakd_banana_crunch.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'1-treacle_cookies.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'1-treacle_cookies.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6384
S'21-nakd_banana_crunch.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vy
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.71678323971082136
sg34
g752
(S'\x07\xdf\t\x1e\x0b2\x0b\r\xcf('
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'40-sardines.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'40-sardines.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'5-pineapple.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'5-pineapple.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vy
sS'block_loop.thisTrialN'
p6438
I0
sg39
F1.9001077396651453
sg34
g752
(S'\x07\xdf\t\x1e\x0b2\x11\n\x19\xf0'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'51-mars.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'51-mars.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
S'27-hartleys_raspberries_jelly.png'
p6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6453
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vy
sS'block_loop.thisTrialN'
p6455
I0
sg39
F1.1338962557401828
sg34
g752
(S'\x07\xdf\t\x1e\x0b2\x18\x08\xf8\xe0'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
g6425
sS'block_loop.thisIndex'
p6459
g6364
sg38
S'left'
p6460
sg58
g62
sS'trial_loop.thisN'
p6461
I5
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6462
g59
(g98
S'\x05\x00\x00\x00'
tRp6463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6464
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6465
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6466
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6467
Nsg69
Vy
sS'block_loop.thisTrialN'
p6468
I0
sg39
F2.0000926578231883
sg34
g752
(S'\x07\xdf\t\x1e\x0b2\x1e\x0bq\xb0'
tRp6469
sa(dp6470
S'trial_loop.thisTrialN'
p6471
I6
sg6370
g6442
sS'block_loop.thisIndex'
p6472
g6364
sg38
S'right'
p6473
sg58
g62
sS'trial_loop.thisN'
p6474
I6
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p6475
g59
(g98
S'\x06\x00\x00\x00'
tRp6476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6477
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6478
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6479
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6480
Nsg69
Vy
sS'block_loop.thisTrialN'
p6481
I0
sg39
F1.1001884802662971
sg34
g752
(S'\x07\xdf\t\x1e\x0b2%\x0b\xfeP'
tRp6482
sa(dp6483
S'trial_loop.thisTrialN'
p6484
I7
sg6370
S'45-chewy_nougat_redo.png'
p6485
sS'block_loop.thisIndex'
p6486
g6364
sg38
S'right'
p6487
sg58
g62
sS'trial_loop.thisN'
p6488
I7
sg33
S'41-peanuts_redo.png'
p6489
sg63
g64
sS'trial_loop.thisIndex'
p6490
g59
(g98
S'\x07\x00\x00\x00'
tRp6491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6492
I0
sg6379
S'41-peanuts_redo.png'
p6493
sS'block_loop.thisRepN'
p6494
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6495
I2
sg6384
S'45-chewy_nougat_redo.png'
p6496
sg55
g11
sS'block_loop.thisTrial'
p6497
Nsg69
Vy
sS'block_loop.thisTrialN'
p6498
I0
sg39
F2.3167509092581895
sg34
g752
(S'\x07\xdf\t\x1e\x0b2+\r\xfa '
tRp6499
sa(dp6500
S'trial_loop.thisTrialN'
p6501
I8
sg6370
S'35-raisins.png'
p6502
sS'block_loop.thisIndex'
p6503
g6364
sg38
S'left'
p6504
sg58
g62
sS'trial_loop.thisN'
p6505
I8
sg33
S'35-raisins.png'
p6506
sg63
g64
sS'trial_loop.thisIndex'
p6507
g59
(g98
S'\x08\x00\x00\x00'
tRp6508
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6509
I0
sg6379
S'49-yorkie.png'
p6510
sS'block_loop.thisRepN'
p6511
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6512
I2
sg6384
S'49-yorkie.png'
p6513
sg55
g11
sS'block_loop.thisTrial'
p6514
Nsg69
Vy
sS'block_loop.thisTrialN'
p6515
I0
sg39
F1.4501602125028512
sg34
g752
(S'\x07\xdf\t\x1e\x0b23\x04\x07@'
tRp6516
sa(dp6517
S'trial_loop.thisTrialN'
p6518
I9
sg6370
S'8-liquorice_catherine_wheels.png'
p6519
sS'block_loop.thisIndex'
p6520
g6364
sg38
S'right'
p6521
sg58
g62
sS'trial_loop.thisN'
p6522
I9
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6523
sg63
g64
sS'trial_loop.thisIndex'
p6524
g59
(g98
S'\t\x00\x00\x00'
tRp6525
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6526
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p6527
sS'block_loop.thisRepN'
p6528
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6529
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6530
sg55
g11
sS'block_loop.thisTrial'
p6531
Nsg69
Vy
sS'block_loop.thisTrialN'
p6532
I0
sg39
F1.3171323743872563
sg34
g752
(S'\x07\xdf\t\x1e\x0b29\x0b\x81P'
tRp6533
sa(dp6534
S'trial_loop.thisTrialN'
p6535
I10
sg6370
S'42-mrkipling_lemon_slices.png'
p6536
sS'block_loop.thisIndex'
p6537
g6364
sg38
S'right'
p6538
sg58
g62
sS'trial_loop.thisN'
p6539
I10
sg33
S'16-skips_prawn.png'
p6540
sg63
g64
sS'trial_loop.thisIndex'
p6541
g59
(g98
S'\n\x00\x00\x00'
tRp6542
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6543
I0
sg6379
S'16-skips_prawn.png'
p6544
sS'block_loop.thisRepN'
p6545
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6546
I2
sg6384
S'42-mrkipling_lemon_slices.png'
p6547
sg55
g11
sS'block_loop.thisTrial'
p6548
Nsg69
Vy
sS'block_loop.thisTrialN'
p6549
I0
sg39
F0.91664131643665314
sg34
g752
(S'\x07\xdf\t\x1e\x0b3\x04\x01\x92X'
tRp6550
sa(dp6551
S'trial_loop.thisTrialN'
p6552
I11
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6553
sS'block_loop.thisIndex'
p6554
g6364
sg38
S'left'
p6555
sg58
g62
sS'trial_loop.thisN'
p6556
I11
sg33
S'18-mms.png'
p6557
sg63
g64
sS'trial_loop.thisIndex'
p6558
g59
(g98
S'\x0b\x00\x00\x00'
tRp6559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6560
I0
sg6379
S'18-mms.png'
p6561
sS'block_loop.thisRepN'
p6562
I2
sg6382
S'43-mrporky_pork_crackles_redo.png'
p6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6564
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p6565
Nsg69
Vy
sS'block_loop.thisTrialN'
p6566
I0
sg39
F0.80023201518815767
sg34
g752
(S'\x07\xdf\t\x1e\x0b3\n\x00\xb7\x98'
tRp6567
sa(dp6568
S'trial_loop.thisTrialN'
p6569
I12
sg6370
g6391
sS'block_loop.thisIndex'
p6570
g6364
sg38
S'left'
p6571
sg58
g62
sS'trial_loop.thisN'
p6572
I12
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6573
g59
(g98
S'\x0c\x00\x00\x00'
tRp6574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6575
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6576
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6577
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6578
Nsg69
Vy
sS'block_loop.thisTrialN'
p6579
I0
sg39
F1.5000523160315424
sg34
g752
(S'\x07\xdf\t\x1e\x0b3\x0f\rqh'
tRp6580
sa(dp6581
S'trial_loop.thisTrialN'
p6582
I13
sg6370
S'31-hobnobs.png'
p6583
sS'block_loop.thisIndex'
p6584
g6364
sg38
S'left'
p6585
sg58
g62
sS'trial_loop.thisN'
p6586
I13
sg33
S'25-kitkat.png'
p6587
sg63
g64
sS'trial_loop.thisIndex'
p6588
g59
(g98
S'\r\x00\x00\x00'
tRp6589
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6590
I0
sg6379
S'25-kitkat.png'
p6591
sS'block_loop.thisRepN'
p6592
I2
sg6382
S'31-hobnobs.png'
p6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6594
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p6595
Nsg69
Vy
sS'block_loop.thisTrialN'
p6596
I0
sg39
F0.83348562478022359
sg34
g752
(S'\x07\xdf\t\x1e\x0b3\x16\x06\\\xe8'
tRp6597
sa(dp6598
S'trial_loop.thisTrialN'
p6599
I14
sg6370
S'48-twix.png'
p6600
sS'block_loop.thisIndex'
p6601
g6364
sg38
S'left'
p6602
sg58
g62
sS'trial_loop.thisN'
p6603
I14
sg33
S'48-twix.png'
p6604
sg63
g64
sS'trial_loop.thisIndex'
p6605
g59
(g98
S'\x0e\x00\x00\x00'
tRp6606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6607
I0
sg6379
S'50-polo.png'
p6608
sS'block_loop.thisRepN'
p6609
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6610
I2
sg6384
S'50-polo.png'
p6611
sg55
g11
sS'block_loop.thisTrial'
p6612
Nsg69
Vy
sS'block_loop.thisTrialN'
p6613
I0
sg39
F1.0334614482162578
sg34
g752
(S'\x07\xdf\t\x1e\x0b3\x1c\x04Qx'
tRp6614
sa(dp6615
S'trial_loop.thisTrialN'
p6616
I15
sg6370
S'13-mccoys_steak_crisps.png'
p6617
sS'block_loop.thisIndex'
p6618
g6364
sg38
S'right'
p6619
sg58
g62
sS'trial_loop.thisN'
p6620
I15
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p6621
g59
(g98
S'\x0f\x00\x00\x00'
tRp6622
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6623
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6624
sS'block_loop.thisRepN'
p6625
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6626
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6627
Nsg69
Vy
sS'block_loop.thisTrialN'
p6628
I0
sg39
F2.2834485473968016
sg34
g752
(S'\x07\xdf\t\x1e\x0b3"\x05[\x18'
tRp6629
sa(dp6630
S'trial_loop.thisTrialN'
p6631
I16
sg6370
g6485
sS'block_loop.thisIndex'
p6632
g6364
sg38
S'right'
p6633
sg58
g62
sS'trial_loop.thisN'
p6634
I16
sg33
g6489
sg63
g64
sS'trial_loop.thisIndex'
p6635
g59
(g98
S'\x10\x00\x00\x00'
tRp6636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6637
I0
sg6379
g6493
sS'block_loop.thisRepN'
p6638
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6639
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p6640
Nsg69
Vy
sS'block_loop.thisTrialN'
p6641
I0
sg39
F1.0000989300442598
sg34
g752
(S'\x07\xdf\t\x1e\x0b3)\n1`'
tRp6642
sa(dp6643
S'trial_loop.thisTrialN'
p6644
I17
sg6370
S'30-spaghetti_hoops.png'
p6645
sS'block_loop.thisIndex'
p6646
g6364
sg38
S'left'
p6647
sg58
g62
sS'trial_loop.thisN'
p6648
I17
sg33
S'30-spaghetti_hoops.png'
p6649
sg63
g64
sS'trial_loop.thisIndex'
p6650
g59
(g98
S'\x11\x00\x00\x00'
tRp6651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6652
I0
sg6379
S'19-caramello_redo.png'
p6653
sS'block_loop.thisRepN'
p6654
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6655
I2
sg6384
S'19-caramello_redo.png'
p6656
sg55
g11
sS'block_loop.thisTrial'
p6657
Nsg69
Vy
sS'block_loop.thisTrialN'
p6658
I0
sg39
F1.850185130329919
sg34
g752
(S'\x07\xdf\t\x1e\x0b3/\n\xc1\xe8'
tRp6659
sa(dp6660
S'trial_loop.thisTrialN'
p6661
I18
sg6370
g6408
sS'block_loop.thisIndex'
p6662
g6364
sg38
S'right'
p6663
sg58
g62
sS'trial_loop.thisN'
p6664
I18
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6665
g59
(g98
S'\x12\x00\x00\x00'
tRp6666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6667
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6668
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6669
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p6670
Nsg69
Vy
sS'block_loop.thisTrialN'
p6671
I0
sg39
F1.9835388388810316
sg34
g752
(S'\x07\xdf\t\x1e\x0b36\x08\xed('
tRp6672
sa(dp6673
S'trial_loop.thisTrialN'
p6674
I19
sg6370
S'26-walkers_smoky_bacon.png'
p6675
sS'block_loop.thisIndex'
p6676
g6364
sg38
S'left'
p6677
sg58
g62
sS'trial_loop.thisN'
p6678
I19
sg33
S'26-walkers_smoky_bacon.png'
p6679
sg63
g64
sS'trial_loop.thisIndex'
p6680
g59
(g98
S'\x13\x00\x00\x00'
tRp6681
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6682
I0
sg6379
S'44-crunch.png'
p6683
sS'block_loop.thisRepN'
p6684
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6685
I2
sg6384
S'44-crunch.png'
p6686
sg55
g11
sS'block_loop.thisTrial'
p6687
Nsg69
Vy
sS'block_loop.thisTrialN'
p6688
I0
sg39
F1.3168960256643913
sg34
g752
(S'\x07\xdf\t\x1e\x0b4\x01\t;H'
tRp6689
sa(dp6690
S'trial_loop.thisTrialN'
p6691
I20
sg6370
g6391
sS'block_loop.thisIndex'
p6692
g6364
sg38
S'left'
p6693
sg58
g62
sS'trial_loop.thisN'
p6694
I20
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6695
g59
(g98
S'\x14\x00\x00\x00'
tRp6696
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6697
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6698
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6699
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6700
Nsg69
Vy
sS'block_loop.thisTrialN'
p6701
I0
sg39
F1.1168757264731539
sg34
g752
(S'\x07\xdf\t\x1e\x0b4\x07\x0e\x8e\x90'
tRp6702
sa(dp6703
S'trial_loop.thisTrialN'
p6704
I21
sg6370
g6553
sS'block_loop.thisIndex'
p6705
g6364
sg38
S'left'
p6706
sg58
g62
sS'trial_loop.thisN'
p6707
I21
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p6708
g59
(g98
S'\x15\x00\x00\x00'
tRp6709
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6710
I0
sg6379
g6561
sS'block_loop.thisRepN'
p6711
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6712
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p6713
Nsg69
Vy
sS'block_loop.thisTrialN'
p6714
I0
sg39
F2.1501356082872007
sg34
g752
(S'\x07\xdf\t\x1e\x0b4\x0e\x01\x86\xa0'
tRp6715
sa(dp6716
S'trial_loop.thisTrialN'
p6717
I22
sg6370
S'7-olives.png'
p6718
sS'block_loop.thisIndex'
p6719
g6364
sg38
S'left'
p6720
sg58
g62
sS'trial_loop.thisN'
p6721
I22
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6722
g59
(g98
S'\x16\x00\x00\x00'
tRp6723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6724
I0
sg6379
S'22-daim.png'
p6725
sS'block_loop.thisRepN'
p6726
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6727
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p6728
Nsg69
Vy
sS'block_loop.thisTrialN'
p6729
I0
sg39
F0.90013767526943411
sg34
g752
(S'\x07\xdf\t\x1e\x0b4\x15\x04t\xa0'
tRp6730
sa(dp6731
S'trial_loop.thisTrialN'
p6732
I23
sg6370
S'36-fig_rolls.png'
p6733
sS'block_loop.thisIndex'
p6734
g6364
sg38
S'right'
p6735
sg58
g62
sS'trial_loop.thisN'
p6736
I23
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6737
sg63
g64
sS'trial_loop.thisIndex'
p6738
g59
(g98
S'\x17\x00\x00\x00'
tRp6739
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6740
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6741
sS'block_loop.thisRepN'
p6742
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6743
I2
sg6384
S'36-fig_rolls.png'
p6744
sg55
g11
sS'block_loop.thisTrial'
p6745
Nsg69
Vy
sS'block_loop.thisTrialN'
p6746
I0
sg39
F1.2668094832570205
sg34
g752
(S'\x07\xdf\t\x1e\x0b4\x1b\x03[`'
tRp6747
sa(dp6748
S'trial_loop.thisTrialN'
p6749
I24
sg6370
g6536
sS'block_loop.thisIndex'
p6750
g6364
sg38
S'right'
p6751
sg58
g62
sS'trial_loop.thisN'
p6752
I24
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p6753
g59
(g98
S'\x18\x00\x00\x00'
tRp6754
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6755
I0
sg6379
g6544
sS'block_loop.thisRepN'
p6756
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6757
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p6758
Nsg69
Vy
sS'block_loop.thisTrialN'
p6759
I0
sg39
F1.0504494759707086
sg34
g752
(S'\x07\xdf\t\x1e\x0b4!\x07\xf7\x10'
tRp6760
sa(dp6761
S'trial_loop.thisTrialN'
p6762
I25
sg6370
S'49-yorkie.png'
p6763
sS'block_loop.thisIndex'
p6764
g6364
sg38
S'right'
p6765
sg58
g62
sS'trial_loop.thisN'
p6766
I25
sg33
g6506
sg63
g64
sS'trial_loop.thisIndex'
p6767
g59
(g98
S'\x19\x00\x00\x00'
tRp6768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6769
I0
sg6379
S'35-raisins.png'
p6770
sS'block_loop.thisRepN'
p6771
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6772
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p6773
Nsg69
Vy
sS'block_loop.thisTrialN'
p6774
I0
sg39
F1.3501208400557516
sg34
g752
(S"\x07\xdf\t\x1e\x0b4'\t?0"
tRp6775
sa(dp6776
S'trial_loop.thisTrialN'
p6777
I26
sg6370
S'18-mms.png'
p6778
sS'block_loop.thisIndex'
p6779
g6364
sg38
S'right'
p6780
sg58
g62
sS'trial_loop.thisN'
p6781
I26
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p6782
g59
(g98
S'\x1a\x00\x00\x00'
tRp6783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6784
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6785
sS'block_loop.thisRepN'
p6786
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6787
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p6788
Nsg69
Vy
sS'block_loop.thisTrialN'
p6789
I0
sg39
F1.0334577419034758
sg34
g752
(S'\x07\xdf\t\x1e\x0b4-\x0f\x0fx'
tRp6790
sa(dp6791
S'trial_loop.thisTrialN'
p6792
I27
sg6370
S'25-kitkat.png'
p6793
sS'block_loop.thisIndex'
p6794
g6364
sg38
S'right'
p6795
sg58
g62
sS'trial_loop.thisN'
p6796
I27
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p6797
g59
(g98
S'\x1b\x00\x00\x00'
tRp6798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6799
I0
sg6379
S'31-hobnobs.png'
p6800
sS'block_loop.thisRepN'
p6801
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6802
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p6803
Nsg69
Vy
sS'block_loop.thisTrialN'
p6804
I0
sg39
F0.98345787019934505
sg34
g752
(S'\x07\xdf\t\x1e\x0b44\x00\xd6\xd8'
tRp6805
sa(dp6806
S'trial_loop.thisTrialN'
p6807
I28
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6808
sS'block_loop.thisIndex'
p6809
g6364
sg38
S'left'
p6810
sg58
g62
sS'trial_loop.thisN'
p6811
I28
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p6812
g59
(g98
S'\x1c\x00\x00\x00'
tRp6813
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6814
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6815
sS'block_loop.thisRepN'
p6816
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6817
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p6818
Nsg69
Vy
sS'block_loop.thisTrialN'
p6819
I0
sg39
F1.1835340491843453
sg34
g752
(S'\x07\xdf\t\x1e\x0b4:\x01,\xc8'
tRp6820
sa(dp6821
S'trial_loop.thisTrialN'
p6822
I29
sg6370
S'16-skips_prawn.png'
p6823
sS'block_loop.thisIndex'
p6824
g6364
sg38
S'left'
p6825
sg58
g62
sS'trial_loop.thisN'
p6826
I29
sg33
g6547
sg63
g64
sS'trial_loop.thisIndex'
p6827
g59
(g98
S'\x1d\x00\x00\x00'
tRp6828
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6829
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6830
sS'block_loop.thisRepN'
p6831
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6832
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p6833
Nsg69
Vy
sS'block_loop.thisTrialN'
p6834
I0
sg39
F0.93378301362554339
sg34
g752
(S'\x07\xdf\t\x1e\x0b5\x04\x04]0'
tRp6835
sa(dp6836
S'trial_loop.thisTrialN'
p6837
I30
sg6370
S'41-peanuts_redo.png'
p6838
sS'block_loop.thisIndex'
p6839
g6364
sg38
S'left'
p6840
sg58
g62
sS'trial_loop.thisN'
p6841
I30
sg33
g6496
sg63
g64
sS'trial_loop.thisIndex'
p6842
g59
(g98
S'\x1e\x00\x00\x00'
tRp6843
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6844
I0
sg6379
S'45-chewy_nougat_redo.png'
p6845
sS'block_loop.thisRepN'
p6846
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6847
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p6848
Nsg69
Vy
sS'block_loop.thisTrialN'
p6849
I0
sg39
F0.80020122428049945
sg34
g752
(S'\x07\xdf\t\x1e\x0b5\n\x03\xf7\xa0'
tRp6850
sa(dp6851
S'trial_loop.thisTrialN'
p6852
I31
sg6370
g6763
sS'block_loop.thisIndex'
p6853
g6364
sg38
S'right'
p6854
sg58
g62
sS'trial_loop.thisN'
p6855
I31
sg33
g6506
sg63
g64
sS'trial_loop.thisIndex'
p6856
g59
(g98
S'\x1f\x00\x00\x00'
tRp6857
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6858
I0
sg6379
g6770
sS'block_loop.thisRepN'
p6859
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6860
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p6861
Nsg69
Vy
sS'block_loop.thisTrialN'
p6862
I0
sg39
F0.96686641792530281
sg34
g752
(S'\x07\xdf\t\x1e\x0b5\x10\x014\x98'
tRp6863
sa(dp6864
S'trial_loop.thisTrialN'
p6865
I32
sg6370
S'23-crunchie_redo.png'
p6866
sS'block_loop.thisIndex'
p6867
g6364
sg38
S'left'
p6868
sg58
g62
sS'trial_loop.thisN'
p6869
I32
sg33
S'23-crunchie_redo.png'
p6870
sg63
g64
sS'trial_loop.thisIndex'
p6871
g59
(g98
S' \x00\x00\x00'
tRp6872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6873
I0
sg6379
S'33-ambrosia_rice.png'
p6874
sS'block_loop.thisRepN'
p6875
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6876
I2
sg6384
S'33-ambrosia_rice.png'
p6877
sg55
g11
sS'block_loop.thisTrial'
p6878
Nsg69
Vy
sS'block_loop.thisTrialN'
p6879
I0
sg39
F1.250248821891546
sg34
g752
(S'\x07\xdf\t\x1e\x0b5\x16\x01L\x08'
tRp6880
sa(dp6881
S'trial_loop.thisTrialN'
p6882
I33
sg6370
g6823
sS'block_loop.thisIndex'
p6883
g6364
sg38
S'left'
p6884
sg58
g62
sS'trial_loop.thisN'
p6885
I33
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p6886
g59
(g98
S'!\x00\x00\x00'
tRp6887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6888
I0
sg6379
g6830
sS'block_loop.thisRepN'
p6889
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6890
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p6891
Nsg69
Vy
sS'block_loop.thisTrialN'
p6892
I0
sg39
F0.63343966649972572
sg34
g752
(S'\x07\xdf\t\x1e\x0b5\x1c\x05\xad '
tRp6893
sa(dp6894
S'trial_loop.thisTrialN'
p6895
I34
sg6370
S'46-pistachios.png'
p6896
sS'block_loop.thisIndex'
p6897
g6364
sg38
S'left'
p6898
sg58
g62
sS'trial_loop.thisN'
p6899
I34
sg33
S'46-pistachios.png'
p6900
sg63
g64
sS'trial_loop.thisIndex'
p6901
g59
(g98
S'"\x00\x00\x00'
tRp6902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6903
I0
sg6379
S'29-beans.png'
p6904
sS'block_loop.thisRepN'
p6905
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6906
I2
sg6384
S'29-beans.png'
p6907
sg55
g11
sS'block_loop.thisTrial'
p6908
Nsg69
Vy
sS'block_loop.thisTrialN'
p6909
I0
sg39
F1.1667755277285323
sg34
g752
(S'\x07\xdf\t\x1e\x0b5"\x00\x88\xb8'
tRp6910
sa(dp6911
S'trial_loop.thisTrialN'
p6912
I35
sg6370
S'20-fruit_pastilles.png'
p6913
sS'block_loop.thisIndex'
p6914
g6364
sg38
S'right'
p6915
sg58
g62
sS'trial_loop.thisN'
p6916
I35
sg33
S'2-steamed_puddings.png'
p6917
sg63
g64
sS'trial_loop.thisIndex'
p6918
g59
(g98
S'#\x00\x00\x00'
tRp6919
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6920
I0
sg6379
S'2-steamed_puddings.png'
p6921
sS'block_loop.thisRepN'
p6922
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6923
I2
sg6384
S'20-fruit_pastilles.png'
p6924
sg55
g11
sS'block_loop.thisTrial'
p6925
Nsg69
Vy
sS'block_loop.thisTrialN'
p6926
I0
sg39
F1.0333921686751637
sg34
g752
(S'\x07\xdf\t\x1e\x0b5(\x03\xb9 '
tRp6927
sa(dp6928
S'trial_loop.thisTrialN'
p6929
I36
sg6370
g6617
sS'block_loop.thisIndex'
p6930
g6364
sg38
S'right'
p6931
sg58
g62
sS'trial_loop.thisN'
p6932
I36
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p6933
g59
(g98
S'$\x00\x00\x00'
tRp6934
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6935
I0
sg6379
g6624
sS'block_loop.thisRepN'
p6936
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6937
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6938
Nsg69
Vy
sS'block_loop.thisTrialN'
p6939
I0
sg39
F1.1667983358083802
sg34
g752
(S'\x07\xdf\t\x1e\x0b5.\x04\x84@'
tRp6940
sa(dp6941
S'trial_loop.thisTrialN'
p6942
I37
sg6370
g6778
sS'block_loop.thisIndex'
p6943
g6364
sg38
S'right'
p6944
sg58
g62
sS'trial_loop.thisN'
p6945
I37
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p6946
g59
(g98
S'%\x00\x00\x00'
tRp6947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6948
I0
sg6379
g6785
sS'block_loop.thisRepN'
p6949
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6950
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p6951
Nsg69
Vy
sS'block_loop.thisTrialN'
p6952
I0
sg39
F1.0502105613386448
sg34
g752
(S'\x07\xdf\t\x1e\x0b54\x07\xb4\xa8'
tRp6953
sa(dp6954
S'trial_loop.thisTrialN'
p6955
I38
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6956
sS'block_loop.thisIndex'
p6957
g6364
sg38
S'left'
p6958
sg58
g62
sS'trial_loop.thisN'
p6959
I38
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p6960
g59
(g98
S'&\x00\x00\x00'
tRp6961
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6962
I0
sg6379
S'36-fig_rolls.png'
p6963
sS'block_loop.thisRepN'
p6964
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6965
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p6966
Nsg69
Vy
sS'block_loop.thisTrialN'
p6967
I0
sg39
F1.4500906478606339
sg34
g752
(S'\x07\xdf\t\x1e\x0b5:\x08\xfc\xc8'
tRp6968
sa(dp6969
S'trial_loop.thisTrialN'
p6970
I39
sg6370
g6675
sS'block_loop.thisIndex'
p6971
g6364
sg38
S'left'
p6972
sg58
g62
sS'trial_loop.thisN'
p6973
I39
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p6974
g59
(g98
S"'\x00\x00\x00"
tRp6975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6976
I0
sg6379
g6683
sS'block_loop.thisRepN'
p6977
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6978
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p6979
Nsg69
Vy
sS'block_loop.thisTrialN'
p6980
I0
sg39
F1.3002196132947574
sg34
g752
(S'\x07\xdf\t\x1e\x0b6\x05\x00\xf6\x18'
tRp6981
sa(dp6982
S'trial_loop.thisTrialN'
p6983
I40
sg6370
S'6-sour_patch_kids.png'
p6984
sS'block_loop.thisIndex'
p6985
g6364
sg38
S'right'
p6986
sg58
g62
sS'trial_loop.thisN'
p6987
I40
sg33
S'38-maltesers.png'
p6988
sg63
g64
sS'trial_loop.thisIndex'
p6989
g59
(g98
S'(\x00\x00\x00'
tRp6990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6991
I0
sg6379
S'38-maltesers.png'
p6992
sS'block_loop.thisRepN'
p6993
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6994
I2
sg6384
S'6-sour_patch_kids.png'
p6995
sg55
g11
sS'block_loop.thisTrial'
p6996
Nsg69
Vy
sS'block_loop.thisTrialN'
p6997
I0
sg39
F1.2999464865433765
sg34
g752
(S'\x07\xdf\t\x1e\x0b6\x0b\x06\x0e\xc8'
tRp6998
sa(dp6999
S'trial_loop.thisTrialN'
p7000
I41
sg6370
g6808
sS'block_loop.thisIndex'
p7001
g6364
sg38
S'left'
p7002
sg58
g62
sS'trial_loop.thisN'
p7003
I41
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p7004
g59
(g98
S')\x00\x00\x00'
tRp7005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7006
I0
sg6379
g6815
sS'block_loop.thisRepN'
p7007
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7008
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p7009
Nsg69
Vy
sS'block_loop.thisTrialN'
p7010
I0
sg39
F1.1168677436453436
sg34
g752
(S'\x07\xdf\t\x1e\x0b6\x11\x0b#\x90'
tRp7011
sa(dp7012
S'trial_loop.thisTrialN'
p7013
I42
sg6370
g6485
sS'block_loop.thisIndex'
p7014
g6364
sg38
S'right'
p7015
sg58
g62
sS'trial_loop.thisN'
p7016
I42
sg33
g6489
sg63
g64
sS'trial_loop.thisIndex'
p7017
g59
(g98
S'*\x00\x00\x00'
tRp7018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7019
I0
sg6379
g6493
sS'block_loop.thisRepN'
p7020
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7021
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p7022
Nsg69
Vy
sS'block_loop.thisTrialN'
p7023
I0
sg39
F1.033530727757352
sg34
g752
(S'\x07\xdf\t\x1e\x0b6\x17\r\x9c`'
tRp7024
sa(dp7025
S'trial_loop.thisTrialN'
p7026
I43
sg6370
g6645
sS'block_loop.thisIndex'
p7027
g6364
sg38
S'left'
p7028
sg58
g62
sS'trial_loop.thisN'
p7029
I43
sg33
g6656
sg63
g64
sS'trial_loop.thisIndex'
p7030
g59
(g98
S'+\x00\x00\x00'
tRp7031
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7032
I0
sg6379
g6653
sS'block_loop.thisRepN'
p7033
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7034
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7035
Nsg69
Vy
sS'block_loop.thisTrialN'
p7036
I0
sg39
F1.4001797276650905
sg34
g752
(S'\x07\xdf\t\x1e\x0b6\x1d\x0ekh'
tRp7037
sa(dp7038
S'trial_loop.thisTrialN'
p7039
I44
sg6370
S'1-treacle_cookies.png'
p7040
sS'block_loop.thisIndex'
p7041
g6364
sg38
S'left'
p7042
sg58
g62
sS'trial_loop.thisN'
p7043
I44
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7044
g59
(g98
S',\x00\x00\x00'
tRp7045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7046
I0
sg6379
S'21-nakd_banana_crunch.png'
p7047
sS'block_loop.thisRepN'
p7048
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7049
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7050
Nsg69
Vy
sS'block_loop.thisTrialN'
p7051
I0
sg39
F0.81726309319219581
sg34
g752
(S'\x07\xdf\t\x1e\x0b6$\x05\xeb\xa0'
tRp7052
sa(dp7053
S'trial_loop.thisTrialN'
p7054
I45
sg6370
g6733
sS'block_loop.thisIndex'
p7055
g6364
sg38
S'right'
p7056
sg58
g62
sS'trial_loop.thisN'
p7057
I45
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p7058
g59
(g98
S'-\x00\x00\x00'
tRp7059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7060
I0
sg6379
g6741
sS'block_loop.thisRepN'
p7061
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7062
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p7063
Nsg69
Vy
sS'block_loop.thisTrialN'
p7064
I0
sg39
F1.0168642939233905
sg34
g752
(S'\x07\xdf\t\x1e\x0b6*\x03\xa1\xb0'
tRp7065
sa(dp7066
S'trial_loop.thisTrialN'
p7067
I46
sg6370
g6866
sS'block_loop.thisIndex'
p7068
g6364
sg38
S'left'
p7069
sg58
g62
sS'trial_loop.thisN'
p7070
I46
sg33
g6877
sg63
g64
sS'trial_loop.thisIndex'
p7071
g59
(g98
S'.\x00\x00\x00'
tRp7072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7073
I0
sg6379
g6874
sS'block_loop.thisRepN'
p7074
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7075
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p7076
Nsg69
Vy
sS'block_loop.thisTrialN'
p7077
I0
sg39
F1.1501273403582672
sg34
g752
(S'\x07\xdf\t\x1e\x0b60\x04p\xb8'
tRp7078
sa(dp7079
S'trial_loop.thisTrialN'
p7080
I47
sg6370
g7040
sS'block_loop.thisIndex'
p7081
g6364
sg38
S'left'
p7082
sg58
g62
sS'trial_loop.thisN'
p7083
I47
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7084
g59
(g98
S'/\x00\x00\x00'
tRp7085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7086
I0
sg6379
g7047
sS'block_loop.thisRepN'
p7087
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7088
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7089
Nsg69
Vy
sS'block_loop.thisTrialN'
p7090
I0
sg39
F1.7835188247909173
sg34
g752
(S'\x07\xdf\t\x1e\x0b66\x07(\x08'
tRp7091
sa(dp7092
S'trial_loop.thisTrialN'
p7093
I48
sg6370
g6645
sS'block_loop.thisIndex'
p7094
g6364
sg38
S'left'
p7095
sg58
g62
sS'trial_loop.thisN'
p7096
I48
sg33
g6649
sg63
g64
sS'trial_loop.thisIndex'
p7097
g59
(g98
S'0\x00\x00\x00'
tRp7098
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7099
I0
sg6379
g6653
sS'block_loop.thisRepN'
p7100
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7101
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7102
Nsg69
Vy
sS'block_loop.thisTrialN'
p7103
I0
sg39
F1.0001160361043731
sg34
g752
(S'\x07\xdf\t\x1e\x0b7\x01\x04]0'
tRp7104
sa(dp7105
S'trial_loop.thisTrialN'
p7106
I49
sg6370
g6896
sS'block_loop.thisIndex'
p7107
g6364
sg38
S'left'
p7108
sg58
g62
sS'trial_loop.thisN'
p7109
I49
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p7110
g59
(g98
S'1\x00\x00\x00'
tRp7111
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7112
I0
sg6379
g6904
sS'block_loop.thisRepN'
p7113
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7114
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p7115
Nsg69
Vy
sS'block_loop.thisTrialN'
p7116
I0
sg39
F0.95026156590574828
sg34
g752
(S'\x07\xdf\t\x1e\x0b7\x07\x04\xed\xb8'
tRp7117
sa(dp7118
S'trial_loop.thisTrialN'
p7119
I50
sg6370
g6866
sS'block_loop.thisIndex'
p7120
g6364
sg38
S'left'
p7121
sg58
g62
sS'trial_loop.thisN'
p7122
I50
sg33
g6877
sg63
g64
sS'trial_loop.thisIndex'
p7123
g59
(g98
S'2\x00\x00\x00'
tRp7124
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7125
I0
sg6379
g6874
sS'block_loop.thisRepN'
p7126
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7127
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p7128
Nsg69
Vy
sS'block_loop.thisTrialN'
p7129
I0
sg39
F1.1501418805091816
sg34
g752
(S'\x07\xdf\t\x1e\x0b7\r\x04\x8c\x10'
tRp7130
sa(dp7131
S'trial_loop.thisTrialN'
p7132
I51
sg6370
g6519
sS'block_loop.thisIndex'
p7133
g6364
sg38
S'right'
p7134
sg58
g62
sS'trial_loop.thisN'
p7135
I51
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p7136
g59
(g98
S'3\x00\x00\x00'
tRp7137
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7138
I0
sg6379
g6527
sS'block_loop.thisRepN'
p7139
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7140
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p7141
Nsg69
Vy
sS'block_loop.thisTrialN'
p7142
I0
sg39
F0.81677471519105893
sg34
g752
(S'\x07\xdf\t\x1e\x0b7\x13\x07}\xf8'
tRp7143
sa(dp7144
S'trial_loop.thisTrialN'
p7145
I52
sg6370
S'29-beans.png'
p7146
sS'block_loop.thisIndex'
p7147
g6364
sg38
S'right'
p7148
sg58
g62
sS'trial_loop.thisN'
p7149
I52
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p7150
g59
(g98
S'4\x00\x00\x00'
tRp7151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7152
I0
sg6379
S'46-pistachios.png'
p7153
sS'block_loop.thisRepN'
p7154
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7155
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p7156
Nsg69
Vy
sS'block_loop.thisTrialN'
p7157
I0
sg39
F1.0835787815303775
sg34
g752
(S'\x07\xdf\t\x1e\x0b7\x19\x054\x08'
tRp7158
sa(dp7159
S'trial_loop.thisTrialN'
p7160
I53
sg6370
S'27-hartleys_raspberries_jelly.png'
p7161
sS'block_loop.thisIndex'
p7162
g6364
sg38
S'left'
p7163
sg58
g62
sS'trial_loop.thisN'
p7164
I53
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7165
g59
(g98
S'5\x00\x00\x00'
tRp7166
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7167
I0
sg6379
S'51-mars.png'
p7168
sS'block_loop.thisRepN'
p7169
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7170
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7171
Nsg69
Vy
sS'block_loop.thisTrialN'
p7172
I0
sg39
F0.88343873992198496
sg34
g752
(S'\x07\xdf\t\x1e\x0b7\x1f\x06\xf5@'
tRp7173
sa(dp7174
S'trial_loop.thisTrialN'
p7175
I54
sg6370
g6956
sS'block_loop.thisIndex'
p7176
g6364
sg38
S'left'
p7177
sg58
g62
sS'trial_loop.thisN'
p7178
I54
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p7179
g59
(g98
S'6\x00\x00\x00'
tRp7180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7181
I0
sg6379
g6963
sS'block_loop.thisRepN'
p7182
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7183
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg69
Vy
sS'block_loop.thisTrialN'
p7185
I0
sg39
F1.0838852650967965
sg34
g752
(S'\x07\xdf\t\x1e\x0b7%\x05\xa1h'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I55
sg6370
S'19-caramello_redo.png'
p7189
sS'block_loop.thisIndex'
p7190
g6364
sg38
S'right'
p7191
sg58
g62
sS'trial_loop.thisN'
p7192
I55
sg33
g6649
sg63
g64
sS'trial_loop.thisIndex'
p7193
g59
(g98
S'7\x00\x00\x00'
tRp7194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7195
I0
sg6379
S'30-spaghetti_hoops.png'
p7196
sS'block_loop.thisRepN'
p7197
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7198
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7199
Nsg69
Vy
sS'block_loop.thisTrialN'
p7200
I0
sg39
F0.91684430834357045
sg34
g752
(S'\x07\xdf\t\x1e\x0b7+\x07b\xa0'
tRp7201
sa(dp7202
S'trial_loop.thisTrialN'
p7203
I56
sg6370
g6733
sS'block_loop.thisIndex'
p7204
g6364
sg38
S'right'
p7205
sg58
g62
sS'trial_loop.thisN'
p7206
I56
sg33
g6744
sg63
g64
sS'trial_loop.thisIndex'
p7207
g59
(g98
S'8\x00\x00\x00'
tRp7208
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7209
I0
sg6379
g6741
sS'block_loop.thisRepN'
p7210
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7211
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p7212
Nsg69
Vy
sS'block_loop.thisTrialN'
p7213
I0
sg39
F0.75011240106596233
sg34
g752
(S'\x07\xdf\t\x1e\x0b71\x06\x83\xf8'
tRp7214
sa(dp7215
S'trial_loop.thisTrialN'
p7216
I57
sg6370
g6718
sS'block_loop.thisIndex'
p7217
g6364
sg38
S'left'
p7218
sg58
g62
sS'trial_loop.thisN'
p7219
I57
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7220
g59
(g98
S'9\x00\x00\x00'
tRp7221
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7222
I0
sg6379
g6725
sS'block_loop.thisRepN'
p7223
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7224
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7225
Nsg69
Vy
sS'block_loop.thisTrialN'
p7226
I0
sg39
F0.85021535103533097
sg34
g752
(S'\x07\xdf\t\x1e\x0b77\x03G\xd8'
tRp7227
sa(dp7228
S'trial_loop.thisTrialN'
p7229
I58
sg6370
g7161
sS'block_loop.thisIndex'
p7230
g6364
sg38
S'left'
p7231
sg58
g62
sS'trial_loop.thisN'
p7232
I58
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7233
g59
(g98
S':\x00\x00\x00'
tRp7234
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7235
I0
sg6379
g7168
sS'block_loop.thisRepN'
p7236
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7237
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7238
Nsg69
Vy
sS'block_loop.thisTrialN'
p7239
I0
sg39
F0.7501771189918145
sg34
g752
(S'\x07\xdf\t\x1e\x0b8\x01\x01w\x00'
tRp7240
sa(dp7241
S'trial_loop.thisTrialN'
p7242
I59
sg6370
S'2-steamed_puddings.png'
p7243
sS'block_loop.thisIndex'
p7244
g6364
sg38
S'left'
p7245
sg58
g62
sS'trial_loop.thisN'
p7246
I59
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p7247
g59
(g98
S';\x00\x00\x00'
tRp7248
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7249
I0
sg6379
S'20-fruit_pastilles.png'
p7250
sS'block_loop.thisRepN'
p7251
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7252
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7253
Nsg69
Vy
sS'block_loop.thisTrialN'
p7254
I0
sg39
F0.76687434373252472
sg34
g752
(S'\x07\xdf\t\x1e\x0b8\x06\r} '
tRp7255
sa(dp7256
S'trial_loop.thisTrialN'
p7257
I60
sg6370
g7040
sS'block_loop.thisIndex'
p7258
g6364
sg38
S'left'
p7259
sg58
g62
sS'trial_loop.thisN'
p7260
I60
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7261
g59
(g98
S'<\x00\x00\x00'
tRp7262
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7263
I0
sg6379
g7047
sS'block_loop.thisRepN'
p7264
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7265
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7266
Nsg69
Vy
sS'block_loop.thisTrialN'
p7267
I0
sg39
F0.78390371113073343
sg34
g752
(S'\x07\xdf\t\x1e\x0b8\x0c\n{\x98'
tRp7268
sa(dp7269
S'trial_loop.thisTrialN'
p7270
I61
sg6370
g6617
sS'block_loop.thisIndex'
p7271
g6364
sg38
S'right'
p7272
sg58
g62
sS'trial_loop.thisN'
p7273
I61
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7274
g59
(g98
S'=\x00\x00\x00'
tRp7275
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7276
I0
sg6379
g6624
sS'block_loop.thisRepN'
p7277
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7278
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7279
Nsg69
Vy
sS'block_loop.thisTrialN'
p7280
I0
sg39
F1.5835281761028455
sg34
g752
(S'\x07\xdf\t\x1e\x0b8\x12\x07\xb8\x90'
tRp7281
sa(dp7282
S'trial_loop.thisTrialN'
p7283
I62
sg6370
g6502
sS'block_loop.thisIndex'
p7284
g6364
sg38
S'left'
p7285
sg58
g62
sS'trial_loop.thisN'
p7286
I62
sg33
g6513
sg63
g64
sS'trial_loop.thisIndex'
p7287
g59
(g98
S'>\x00\x00\x00'
tRp7288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7289
I0
sg6379
g6510
sS'block_loop.thisRepN'
p7290
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7291
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p7292
Nsg69
Vy
sS'block_loop.thisTrialN'
p7293
I0
sg39
F0.71693063692418946
sg34
g752
(S'\x07\xdf\t\x1e\x0b8\x19\x01\xd4\xc0'
tRp7294
sa(dp7295
S'trial_loop.thisTrialN'
p7296
I63
sg6370
g6913
sS'block_loop.thisIndex'
p7297
g6364
sg38
S'right'
p7298
sg58
g62
sS'trial_loop.thisN'
p7299
I63
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p7300
g59
(g98
S'?\x00\x00\x00'
tRp7301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7302
I0
sg6379
g6921
sS'block_loop.thisRepN'
p7303
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7304
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg69
Vy
sS'block_loop.thisTrialN'
p7306
I0
sg39
F0.83351812629371125
sg34
g752
(S'\x07\xdf\t\x1e\x0b8\x1e\r#H'
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I64
sg6370
g6645
sS'block_loop.thisIndex'
p7310
g6364
sg38
S'left'
p7311
sg58
g62
sS'trial_loop.thisN'
p7312
I64
sg33
g6649
sg63
g64
sS'trial_loop.thisIndex'
p7313
g59
(g98
S'@\x00\x00\x00'
tRp7314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7315
I0
sg6379
g6653
sS'block_loop.thisRepN'
p7316
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7317
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg69
Vy
sS'block_loop.thisTrialN'
p7319
I0
sg39
F1.9335124527833614
sg34
g752
(S'\x07\xdf\t\x1e\x0b8$\x0b\x17\xd8'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I65
sg6370
S'33-ambrosia_rice.png'
p7323
sS'block_loop.thisIndex'
p7324
g6364
sg38
S'right'
p7325
sg58
g62
sS'trial_loop.thisN'
p7326
I65
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p7327
g59
(g98
S'A\x00\x00\x00'
tRp7328
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7329
I0
sg6379
S'23-crunchie_redo.png'
p7330
sS'block_loop.thisRepN'
p7331
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7332
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p7333
Nsg69
Vy
sS'block_loop.thisTrialN'
p7334
I0
sg39
F2.033592309571759
sg34
g752
(S'\x07\xdf\t\x1e\x0b8+\n\xae`'
tRp7335
sa(dp7336
S'trial_loop.thisTrialN'
p7337
I66
sg6370
g6391
sS'block_loop.thisIndex'
p7338
g6364
sg38
S'right'
p7339
sg58
g62
sS'trial_loop.thisN'
p7340
I66
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7341
g59
(g98
S'B\x00\x00\x00'
tRp7342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7343
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7344
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7345
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7346
Nsg69
Vy
sS'block_loop.thisTrialN'
p7347
I0
sg39
F3.0168631535188979
sg34
g752
(S'\x07\xdf\t\x1e\x0b82\x0b\xb4\x18'
tRp7348
sa(dp7349
S'trial_loop.thisTrialN'
p7350
I67
sg6370
S'10-bounty_redo.png'
p7351
sS'block_loop.thisIndex'
p7352
g6364
sg38
S'right'
p7353
sg58
g62
sS'trial_loop.thisN'
p7354
I67
sg33
S'10-bounty_redo.png'
p7355
sg63
g64
sS'trial_loop.thisIndex'
p7356
g59
(g98
S'C\x00\x00\x00'
tRp7357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7358
I0
sg6379
S'4-corn.png'
p7359
sS'block_loop.thisRepN'
p7360
I2
sg6382
S'4-corn.png'
p7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7362
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p7363
Nsg69
Vy
sS'block_loop.thisTrialN'
p7364
I0
sg39
F1.016783325241704
sg34
g752
(S'\x07\xdf\t\x1e\x0b8:\x0cs\x80'
tRp7365
sa(dp7366
S'trial_loop.thisTrialN'
p7367
I68
sg6370
g6733
sS'block_loop.thisIndex'
p7368
g6364
sg38
S'right'
p7369
sg58
g62
sS'trial_loop.thisN'
p7370
I68
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p7371
g59
(g98
S'D\x00\x00\x00'
tRp7372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7373
I0
sg6379
g6741
sS'block_loop.thisRepN'
p7374
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7375
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p7376
Nsg69
Vy
sS'block_loop.thisTrialN'
p7377
I0
sg39
F1.6335548473016388
sg34
g752
(S'\x07\xdf\t\x1e\x0b9\x04\rB\x88'
tRp7378
sa(dp7379
S'trial_loop.thisTrialN'
p7380
I69
sg6370
g7040
sS'block_loop.thisIndex'
p7381
g6364
sg38
S'left'
p7382
sg58
g62
sS'trial_loop.thisN'
p7383
I69
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7384
g59
(g98
S'E\x00\x00\x00'
tRp7385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7386
I0
sg6379
g7047
sS'block_loop.thisRepN'
p7387
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7388
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7389
Nsg69
Vy
sS'block_loop.thisTrialN'
p7390
I0
sg39
F0.75018681242545426
sg34
g752
(S'\x07\xdf\t\x1e\x0b9\x0b\x08\x16P'
tRp7391
sa(dp7392
S'trial_loop.thisTrialN'
p7393
I70
sg6370
g6583
sS'block_loop.thisIndex'
p7394
g6364
sg38
S'left'
p7395
sg58
g62
sS'trial_loop.thisN'
p7396
I70
sg33
g6587
sg63
g64
sS'trial_loop.thisIndex'
p7397
g59
(g98
S'F\x00\x00\x00'
tRp7398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7399
I0
sg6379
g6591
sS'block_loop.thisRepN'
p7400
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7401
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p7402
Nsg69
Vy
sS'block_loop.thisTrialN'
p7403
I0
sg39
F0.88395477271933487
sg34
g752
(S'\x07\xdf\t\x1e\x0b9\x11\x04\xda0'
tRp7404
sa(dp7405
S'trial_loop.thisTrialN'
p7406
I71
sg6370
g6956
sS'block_loop.thisIndex'
p7407
g6364
sg38
S'left'
p7408
sg58
g62
sS'trial_loop.thisN'
p7409
I71
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p7410
g59
(g98
S'G\x00\x00\x00'
tRp7411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7412
I0
sg6379
g6963
sS'block_loop.thisRepN'
p7413
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7414
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p7415
Nsg69
Vy
sS'block_loop.thisTrialN'
p7416
I0
sg39
F1.5500992294000753
sg34
g752
(S'\x07\xdf\t\x1e\x0b9\x17\x03\x82p'
tRp7417
sa(dp7418
S'trial_loop.thisTrialN'
p7419
I72
sg6370
g6536
sS'block_loop.thisIndex'
p7420
g6364
sg38
S'right'
p7421
sg58
g62
sS'trial_loop.thisN'
p7422
I72
sg33
g6547
sg63
g64
sS'trial_loop.thisIndex'
p7423
g59
(g98
S'H\x00\x00\x00'
tRp7424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7425
I0
sg6379
g6544
sS'block_loop.thisRepN'
p7426
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7427
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p7428
Nsg69
Vy
sS'block_loop.thisTrialN'
p7429
I0
sg39
F0.90010830986648216
sg34
g752
(S'\x07\xdf\t\x1e\x0b9\x1d\x0ck\xb0'
tRp7430
sa(dp7431
S'trial_loop.thisTrialN'
p7432
I73
sg6370
g7161
sS'block_loop.thisIndex'
p7433
g6364
sg38
S'left'
p7434
sg58
g62
sS'trial_loop.thisN'
p7435
I73
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7436
g59
(g98
S'I\x00\x00\x00'
tRp7437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7438
I0
sg6379
g7168
sS'block_loop.thisRepN'
p7439
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7440
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7441
Nsg69
Vy
sS'block_loop.thisTrialN'
p7442
I0
sg39
F0.95020568611107592
sg34
g752
(S'\x07\xdf\t\x1e\x0b9#\x0b\x8d\x08'
tRp7443
sa(dp7444
S'trial_loop.thisTrialN'
p7445
I74
sg6370
g6425
sS'block_loop.thisIndex'
p7446
g6364
sg38
S'left'
p7447
sg58
g62
sS'trial_loop.thisN'
p7448
I74
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7449
g59
(g98
S'J\x00\x00\x00'
tRp7450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7451
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7452
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7453
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7454
Nsg69
Vy
sS'block_loop.thisTrialN'
p7455
I0
sg39
F1.1002589002118839
sg34
g752
(S'\x07\xdf\t\x1e\x0b9)\x0b+`'
tRp7456
sa(dp7457
S'trial_loop.thisTrialN'
p7458
I75
sg6370
g6763
sS'block_loop.thisIndex'
p7459
g6364
sg38
S'right'
p7460
sg58
g62
sS'trial_loop.thisN'
p7461
I75
sg33
g6506
sg63
g64
sS'trial_loop.thisIndex'
p7462
g59
(g98
S'K\x00\x00\x00'
tRp7463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7464
I0
sg6379
g6770
sS'block_loop.thisRepN'
p7465
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7466
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p7467
Nsg69
Vy
sS'block_loop.thisTrialN'
p7468
I0
sg39
F1.7338448235213946
sg34
g752
(S'\x07\xdf\t\x1e\x0b9/\r+\x18'
tRp7469
sa(dp7470
S'trial_loop.thisTrialN'
p7471
I76
sg6370
g6442
sS'block_loop.thisIndex'
p7472
g6364
sg38
S'right'
p7473
sg58
g62
sS'trial_loop.thisN'
p7474
I76
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7475
g59
(g98
S'L\x00\x00\x00'
tRp7476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7477
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7478
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7479
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7480
Nsg69
Vy
sS'block_loop.thisTrialN'
p7481
I0
sg39
F1.1335159310156087
sg34
g752
(S'\x07\xdf\t\x1e\x0b96\t\xa8\xa8'
tRp7482
sa(dp7483
S'trial_loop.thisTrialN'
p7484
I77
sg6370
g7243
sS'block_loop.thisIndex'
p7485
g6364
sg38
S'left'
p7486
sg58
g62
sS'trial_loop.thisN'
p7487
I77
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p7488
g59
(g98
S'M\x00\x00\x00'
tRp7489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7490
I0
sg6379
g7250
sS'block_loop.thisRepN'
p7491
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7492
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7493
Nsg69
Vy
sS'block_loop.thisTrialN'
p7494
I0
sg39
F0.88350431315029709
sg34
g752
(S'\x07\xdf\t\x1e\x0b:\x00\x0c!x'
tRp7495
sa(dp7496
S'trial_loop.thisTrialN'
p7497
I78
sg6370
S'44-crunch.png'
p7498
sS'block_loop.thisIndex'
p7499
g6364
sg38
S'right'
p7500
sg58
g62
sS'trial_loop.thisN'
p7501
I78
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p7502
g59
(g98
S'N\x00\x00\x00'
tRp7503
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7504
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7505
sS'block_loop.thisRepN'
p7506
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7507
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p7508
Nsg69
Vy
sS'block_loop.thisTrialN'
p7509
I0
sg39
F2.3835118683264227
sg34
g752
(S'\x07\xdf\t\x1e\x0b:\x06\x0b\x088'
tRp7510
sa(dp7511
S'trial_loop.thisTrialN'
p7512
I79
sg6370
g6391
sS'block_loop.thisIndex'
p7513
g6364
sg38
S'left'
p7514
sg58
g62
sS'trial_loop.thisN'
p7515
I79
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7516
g59
(g98
S'O\x00\x00\x00'
tRp7517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7518
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7519
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7520
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7521
Nsg69
Vy
sS'block_loop.thisTrialN'
p7522
I0
sg39
F0.98343021540313202
sg34
g752
(S'\x07\xdf\t\x1e\x0b:\x0e\x02\x07\x88'
tRp7523
sa(dp7524
S'trial_loop.thisTrialN'
p7525
I80
sg6370
S'4-corn.png'
p7526
sS'block_loop.thisIndex'
p7527
g6364
sg38
S'left'
p7528
sg58
g62
sS'trial_loop.thisN'
p7529
I80
sg33
g7361
sg63
g64
sS'trial_loop.thisIndex'
p7530
g59
(g98
S'P\x00\x00\x00'
tRp7531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7532
I0
sg6379
S'10-bounty_redo.png'
p7533
sS'block_loop.thisRepN'
p7534
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7535
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p7536
Nsg69
Vy
sS'block_loop.thisTrialN'
p7537
I0
sg39
F0.93389192220456607
sg34
g752
(S'\x07\xdf\t\x1e\x0b:\x14\x02]x'
tRp7538
sa(dp7539
S'trial_loop.thisTrialN'
p7540
I81
sg6370
g6600
sS'block_loop.thisIndex'
p7541
g6364
sg38
S'left'
p7542
sg58
g62
sS'trial_loop.thisN'
p7543
I81
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p7544
g59
(g98
S'Q\x00\x00\x00'
tRp7545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7546
I0
sg6379
g6608
sS'block_loop.thisRepN'
p7547
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7548
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p7549
Nsg69
Vy
sS'block_loop.thisTrialN'
p7550
I0
sg39
F0.71688701647235575
sg34
g752
(S'\x07\xdf\t\x1e\x0b:\x1a\x01\xbdP'
tRp7551
sa(dp7552
S'trial_loop.thisTrialN'
p7553
I82
sg6370
S'38-maltesers.png'
p7554
sS'block_loop.thisIndex'
p7555
g6364
sg38
S'left'
p7556
sg58
g62
sS'trial_loop.thisN'
p7557
I82
sg33
g6988
sg63
g64
sS'trial_loop.thisIndex'
p7558
g59
(g98
S'R\x00\x00\x00'
tRp7559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7560
I0
sg6379
S'6-sour_patch_kids.png'
p7561
sS'block_loop.thisRepN'
p7562
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7563
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p7564
Nsg69
Vy
sS'block_loop.thisTrialN'
p7565
I0
sg39
F1.983143118703083
sg34
g752
(S'\x07\xdf\t\x1e\x0b:\x1f\rJX'
tRp7566
sa(dp7567
S'trial_loop.thisTrialN'
p7568
I83
sg6370
g6733
sS'block_loop.thisIndex'
p7569
g6364
sg38
S'right'
p7570
sg58
g62
sS'trial_loop.thisN'
p7571
I83
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p7572
g59
(g98
S'S\x00\x00\x00'
tRp7573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7574
I0
sg6379
g6741
sS'block_loop.thisRepN'
p7575
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7576
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p7577
Nsg69
Vy
sS'block_loop.thisTrialN'
p7578
I0
sg39
F1.4334142354919095
sg34
g752
(S'\x07\xdf\t\x1e\x0b:&\r\x98x'
tRp7579
sa(dp7580
S'trial_loop.thisTrialN'
p7581
I84
sg6370
g7498
sS'block_loop.thisIndex'
p7582
g6364
sg38
S'right'
p7583
sg58
g62
sS'trial_loop.thisN'
p7584
I84
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p7585
g59
(g98
S'T\x00\x00\x00'
tRp7586
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7587
I0
sg6379
g7505
sS'block_loop.thisRepN'
p7588
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7589
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p7590
Nsg69
Vy
sS'block_loop.thisTrialN'
p7591
I0
sg39
F1.2168885845276236
sg34
g752
(S'\x07\xdf\t\x1e\x0b:-\x05SH'
tRp7592
sa(dp7593
S'trial_loop.thisTrialN'
p7594
I85
sg6370
g7146
sS'block_loop.thisIndex'
p7595
g6364
sg38
S'right'
p7596
sg58
g62
sS'trial_loop.thisN'
p7597
I85
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p7598
g59
(g98
S'U\x00\x00\x00'
tRp7599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7600
I0
sg6379
g7153
sS'block_loop.thisRepN'
p7601
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7602
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p7603
Nsg69
Vy
sS'block_loop.thisTrialN'
p7604
I0
sg39
F0.81716986516676116
sg34
g752
(S'\x07\xdf\t\x1e\x0b:3\t;H'
tRp7605
sa(dp7606
S'trial_loop.thisTrialN'
p7607
I86
sg6370
g7189
sS'block_loop.thisIndex'
p7608
g6364
sg38
S'right'
p7609
sg58
g62
sS'trial_loop.thisN'
p7610
I86
sg33
g6649
sg63
g64
sS'trial_loop.thisIndex'
p7611
g59
(g98
S'V\x00\x00\x00'
tRp7612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7613
I0
sg6379
g7196
sS'block_loop.thisRepN'
p7614
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7615
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7616
Nsg69
Vy
sS'block_loop.thisTrialN'
p7617
I0
sg39
F1.250105416092083
sg34
g752
(S'\x07\xdf\t\x1e\x0b:9\x06\xf1X'
tRp7618
sa(dp7619
S'trial_loop.thisTrialN'
p7620
I87
sg6370
g6718
sS'block_loop.thisIndex'
p7621
g6364
sg38
S'left'
p7622
sg58
g62
sS'trial_loop.thisN'
p7623
I87
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7624
g59
(g98
S'W\x00\x00\x00'
tRp7625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7626
I0
sg6379
g6725
sS'block_loop.thisRepN'
p7627
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7628
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7629
Nsg69
Vy
sS'block_loop.thisTrialN'
p7630
I0
sg39
F0.71686477859475417
sg34
g752
(S'\x07\xdf\t\x1e\x0b;\x03\x0b\x13\xf0'
tRp7631
sa(dp7632
S'trial_loop.thisTrialN'
p7633
I88
sg6370
S'5-pineapple.png'
p7634
sS'block_loop.thisIndex'
p7635
g6364
sg38
S'right'
p7636
sg58
g62
sS'trial_loop.thisN'
p7637
I88
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7638
g59
(g98
S'X\x00\x00\x00'
tRp7639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7640
I0
sg6379
S'40-sardines.png'
p7641
sS'block_loop.thisRepN'
p7642
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vy
sS'block_loop.thisTrialN'
p7645
I0
sg39
F1.283495303959171
sg34
g752
(S'\x07\xdf\t\x1e\x0b;\t\x07Z\xd0'
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g6371
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'right'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vy
sS'block_loop.thisTrialN'
p7658
I0
sg39
F1.0168657194280968
sg34
g752
(S'\x07\xdf\t\x1e\x0b;\x0f\x0c5\x00'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g6519
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'right'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g6527
sS'block_loop.thisRepN'
p7668
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vy
sS'block_loop.thisTrialN'
p7671
I0
sg39
F0.83387820884763642
sg34
g752
(S'\x07\xdf\t\x1e\x0b;\x15\r\x04\x08'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g6778
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'right'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g6785
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vy
sS'block_loop.thisTrialN'
p7684
I0
sg39
F0.93345970910013421
sg34
g752
(S'\x07\xdf\t\x1e\x0b;\x1b\n\xf8\x98'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g7323
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'right'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g7330
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vy
sS'block_loop.thisTrialN'
p7697
I0
sg39
F1.1501909178805363
sg34
g752
(S'\x07\xdf\t\x1e\x0b;!\nXp'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g7040
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'left'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g7047
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vy
sS'block_loop.thisTrialN'
p7710
I0
sg39
F0.70011623567461356
sg34
g752
(S"\x07\xdf\t\x1e\x0b;'\rJX"
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g7554
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'left'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6988
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g7561
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vy
sS'block_loop.thisTrialN'
p7723
I0
sg39
F0.8998765227597687
sg34
g752
(S'\x07\xdf\t\x1e\x0b;-\t\x18 '
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
S'50-polo.png'
p7727
sS'block_loop.thisIndex'
p7728
g6364
sg38
S'right'
p7729
sg58
g62
sS'trial_loop.thisN'
p7730
I95
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p7731
g59
(g98
S'_\x00\x00\x00'
tRp7732
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7733
I0
sg6379
S'48-twix.png'
p7734
sS'block_loop.thisRepN'
p7735
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7736
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p7737
Nsg69
Vy
sS'block_loop.thisTrialN'
p7738
I0
sg39
F0.76688574777290341
sg34
g752
(S'\x07\xdf\t\x1e\x0b;3\x08=`'
tRp7739
sa(dp7740
S'trial_loop.thisTrialN'
p7741
I96
sg6370
g6718
sS'block_loop.thisIndex'
p7742
g6364
sg38
S'left'
p7743
sg58
g62
sS'trial_loop.thisN'
p7744
I96
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7745
g59
(g98
S'`\x00\x00\x00'
tRp7746
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7747
I0
sg6379
g6725
sS'block_loop.thisRepN'
p7748
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7749
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7750
Nsg69
Vy
sS'block_loop.thisTrialN'
p7751
I0
sg39
F1.7502070545961033
sg34
g752
(S'\x07\xdf\t\x1e\x0b;9\x04\xfdX'
tRp7752
sa(dp7753
S'trial_loop.thisTrialN'
p7754
I97
sg6370
g6485
sS'block_loop.thisIndex'
p7755
g6364
sg38
S'right'
p7756
sg58
g62
sS'trial_loop.thisN'
p7757
I97
sg33
g6489
sg63
g64
sS'trial_loop.thisIndex'
p7758
g59
(g98
S'a\x00\x00\x00'
tRp7759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7760
I0
sg6379
g6493
sS'block_loop.thisRepN'
p7761
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7762
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p7763
Nsg69
Vy
sS'block_loop.thisTrialN'
p7764
I0
sg39
F1.4167951284216542
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00\x04\x01\xb9h'
tRp7765
sa(dp7766
S'trial_loop.thisTrialN'
p7767
I98
sg6370
g6823
sS'block_loop.thisIndex'
p7768
g6364
sg38
S'left'
p7769
sg58
g62
sS'trial_loop.thisN'
p7770
I98
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p7771
g59
(g98
S'b\x00\x00\x00'
tRp7772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7773
I0
sg6379
g6830
sS'block_loop.thisRepN'
p7774
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7775
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p7776
Nsg69
Vy
sS'block_loop.thisTrialN'
p7777
I0
sg39
F0.78330842025843594
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00\n\x08\xba`'
tRp7778
sa(dp7779
S'trial_loop.thisTrialN'
p7780
I99
sg6370
g7351
sS'block_loop.thisIndex'
p7781
g6364
sg38
S'right'
p7782
sg58
g62
sS'trial_loop.thisN'
p7783
I99
sg33
g7361
sg63
g64
sS'trial_loop.thisIndex'
p7784
g59
(g98
S'c\x00\x00\x00'
tRp7785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7786
I0
sg6379
g7359
sS'block_loop.thisRepN'
p7787
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7788
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p7789
Nsg69
Vy
sS'block_loop.thisTrialN'
p7790
I0
sg39
F1.2168375514493164
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00\x10\x05\xb8\xd8'
tRp7791
sa(dp7792
S'trial_loop.thisTrialN'
p7793
I100
sg6370
g7189
sS'block_loop.thisIndex'
p7794
g6364
sg38
S'right'
p7795
sg58
g62
sS'trial_loop.thisN'
p7796
I100
sg33
g6649
sg63
g64
sS'trial_loop.thisIndex'
p7797
g59
(g98
S'd\x00\x00\x00'
tRp7798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7799
I0
sg6379
g7196
sS'block_loop.thisRepN'
p7800
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7801
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7802
Nsg69
Vy
sS'block_loop.thisTrialN'
p7803
I0
sg39
F1.7501808253045965
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00\x16\t\xa0\xd8'
tRp7804
sa(dp7805
S'trial_loop.thisTrialN'
p7806
I101
sg6370
g7526
sS'block_loop.thisIndex'
p7807
g6364
sg38
S'left'
p7808
sg58
g62
sS'trial_loop.thisN'
p7809
I101
sg33
g7361
sg63
g64
sS'trial_loop.thisIndex'
p7810
g59
(g98
S'e\x00\x00\x00'
tRp7811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7812
I0
sg6379
g7533
sS'block_loop.thisRepN'
p7813
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7814
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p7815
Nsg69
Vy
sS'block_loop.thisTrialN'
p7816
I0
sg39
F0.98394681840090925
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00\x1d\x06\\\xe8'
tRp7817
sa(dp7818
S'trial_loop.thisTrialN'
p7819
I102
sg6370
g6913
sS'block_loop.thisIndex'
p7820
g6364
sg38
S'right'
p7821
sg58
g62
sS'trial_loop.thisN'
p7822
I102
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p7823
g59
(g98
S'f\x00\x00\x00'
tRp7824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7825
I0
sg6379
g6921
sS'block_loop.thisRepN'
p7826
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7827
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p7828
Nsg69
Vy
sS'block_loop.thisTrialN'
p7829
I0
sg39
F0.91686854192721512
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00#\x06\xae\xf0'
tRp7830
sa(dp7831
S'trial_loop.thisTrialN'
p7832
I103
sg6370
g7727
sS'block_loop.thisIndex'
p7833
g6364
sg38
S'right'
p7834
sg58
g62
sS'trial_loop.thisN'
p7835
I103
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p7836
g59
(g98
S'g\x00\x00\x00'
tRp7837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7838
I0
sg6379
g7734
sS'block_loop.thisRepN'
p7839
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7840
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p7841
Nsg69
Vy
sS'block_loop.thisTrialN'
p7842
I0
sg39
F0.61688157104345009
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00)\x05\xd40'
tRp7843
sa(dp7844
S'trial_loop.thisTrialN'
p7845
I104
sg6370
g6823
sS'block_loop.thisIndex'
p7846
g6364
sg38
S'left'
p7847
sg58
g62
sS'trial_loop.thisN'
p7848
I104
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p7849
g59
(g98
S'h\x00\x00\x00'
tRp7850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7851
I0
sg6379
g6830
sS'block_loop.thisRepN'
p7852
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7853
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p7854
Nsg69
Vy
sS'block_loop.thisTrialN'
p7855
I0
sg39
F0.96675522853820439
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00/\x00qH'
tRp7856
sa(dp7857
S'trial_loop.thisTrialN'
p7858
I105
sg6370
g6866
sS'block_loop.thisIndex'
p7859
g6364
sg38
S'left'
p7860
sg58
g62
sS'trial_loop.thisN'
p7861
I105
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p7862
g59
(g98
S'i\x00\x00\x00'
tRp7863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7864
I0
sg6379
g6874
sS'block_loop.thisRepN'
p7865
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7866
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p7867
Nsg69
Vy
sS'block_loop.thisTrialN'
p7868
I0
sg39
F1.5167828975891098
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x005\x00\x88\xb8'
tRp7869
sa(dp7870
S'trial_loop.thisTrialN'
p7871
I106
sg6370
g6408
sS'block_loop.thisIndex'
p7872
g6364
sg38
S'right'
p7873
sg58
g62
sS'trial_loop.thisN'
p7874
I106
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7875
g59
(g98
S'j\x00\x00\x00'
tRp7876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7877
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7878
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7879
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p7880
Nsg69
Vy
sS'block_loop.thisTrialN'
p7881
I0
sg39
F0.88395163660788967
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x00;\x08\xf4\xf8'
tRp7882
sa(dp7883
S'trial_loop.thisTrialN'
p7884
I107
sg6370
g6675
sS'block_loop.thisIndex'
p7885
g6364
sg38
S'left'
p7886
sg58
g62
sS'trial_loop.thisN'
p7887
I107
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p7888
g59
(g98
S'k\x00\x00\x00'
tRp7889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7890
I0
sg6379
g6683
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7892
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vy
sS'block_loop.thisTrialN'
p7894
I0
sg39
F0.93357431969889149
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01\x05\x07\xa1 '
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g6808
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'left'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6530
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g6815
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7905
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vy
sS'block_loop.thisTrialN'
p7907
I0
sg39
F0.80020635609889723
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01\x0b\x07\x00\xf8'
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g6645
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'left'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6649
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g6653
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7918
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vy
sS'block_loop.thisTrialN'
p7920
I0
sg39
F0.78352110559899302
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01\x11\x04x\x88'
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g7634
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'right'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g7641
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7931
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vy
sS'block_loop.thisTrialN'
p7933
I0
sg39
F1.100054767900474
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01\x17\x01\xb5\x80'
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g6583
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'left'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g6591
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7944
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vy
sS'block_loop.thisTrialN'
p7946
I0
sg39
F0.98340313080734632
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01\x1d\x03\xb58'
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g7189
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'right'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g6656
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g7196
sS'block_loop.thisRepN'
p7956
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7957
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vy
sS'block_loop.thisTrialN'
p7959
I0
sg39
F0.73361075560569589
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01#\x04\x07@'
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g7526
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'left'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g7355
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g7533
sS'block_loop.thisRepN'
p7969
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7970
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vy
sS'block_loop.thisTrialN'
p7972
I0
sg39
F2.0001801838270694
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01)\x00\x8c\xa0'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g7634
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'right'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g7641
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vy
sS'block_loop.thisTrialN'
p7985
I0
sg39
F0.76687462883455737
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x010\x01\x19@'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g6502
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'left'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6506
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g6510
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vy
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.78346009398683236
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x015\r\x1f`'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g7634
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'right'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g7641
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vy
sS'block_loop.thisTrialN'
p8011
I0
sg39
F0.73355345030722674
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x01;\nXp'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6371
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'right'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vy
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.98385216487167781
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02\x05\x06\xdd\xd0'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g7554
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'left'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6988
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g7561
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vy
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.96653170935951493
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02\x0b\x073\xc0'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g6913
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'right'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g6921
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vy
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.71678095890274562
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02\x11\x07\x10\x98'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g6553
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g6561
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vy
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.66688628946485551
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02\x17\x03Wx'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6793
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'right'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6800
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vy
sS'block_loop.thisTrialN'
p8076
I0
sg39
F1.2667621564924048
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02\x1c\r\xeeh'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g6896
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'left'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g6904
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vy
sS'block_loop.thisTrialN'
p8089
I0
sg39
F1.3335308132873251
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02#\x03G\xd8'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6778
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'right'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6785
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vy
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.71689899071407126
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02)\x08\xd9\xa0'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6718
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'left'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6725
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vy
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.83355632982602401
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02/\x05$h'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6778
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6785
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vy
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.90019498056881275
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x025\x03\x15\x10'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6442
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vy
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.90021921415336692
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x02;\x01\xfb\xd0'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g7554
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6995
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g7561
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vy
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.81659880787810835
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03\x05\x00\xe2\x90'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g7243
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'left'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g7250
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vy
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.70025935637295333
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03\n\r\xda\xe0'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g7146
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g7153
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vy
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.93358771944531327
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03\x10\t\xe7('
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6793
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6800
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vy
sS'block_loop.thisTrialN'
p8193
I0
sg39
F1.0335170429098071
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03\x16\tG\x00'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g7498
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6686
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g7505
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vy
sS'block_loop.thisTrialN'
p8206
I0
sg39
F1.4834571574456277
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03\x1c\nT\x88'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6617
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6624
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vy
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.88352712122923549
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03#\x03\x01\x88'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6519
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6527
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vy
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.0506179706562762
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03)\x01\xad\xb0'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6600
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6608
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vy
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.91676704597375647
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03/\x02\xf5\xd0'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g7146
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g7153
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vy
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.95012728333767882
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x035\x02U\xa8'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g7243
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g7250
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vy
sS'block_loop.thisTrialN'
p8271
I0
sg39
F1.0002711310444283
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x03;\x01\xf4\x00'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6519
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6527
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vy
sS'block_loop.thisTrialN'
p8284
I0
sg39
F1.0834356608311282
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x04\x05\x02\x84\x88'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6553
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6561
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vy
sS'block_loop.thisTrialN'
p8297
I0
sg39
F1.2172423948595679
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x04\x0b\x04E\xc0'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6984
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'right'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6995
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6992
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vy
sS'block_loop.thisTrialN'
p8310
I0
sg39
F2.7331905167429795
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x04\x11\x08-\xc0'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g7161
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7168
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vy
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.88351001517003169
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x04\x19\x04h\xe8'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g6984
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6988
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g6992
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vy
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.86661749624818185
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x04\x1f\x03O\xa8'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g7727
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'right'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6611
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g7734
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vy
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.90016162375286513
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x04%\x01\xbdP'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6913
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6921
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vy
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.73394232806094806
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x04+\x00\xa4\x10'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7554
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6988
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7561
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vy
sS'block_loop.thisTrialN'
p8375
I0
sg39
F0.99991503990440833
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x040\x0ck\xb0'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6502
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'left'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6506
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6510
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vy
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.78354305837547145
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x046\x0c\xfc8'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6838
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6496
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6845
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vy
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.81684456493439939
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05\x00\n90'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6896
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6904
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vy
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.76682188515042071
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05\x06\x07\xef@'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6793
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6800
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vy
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.83360707780320809
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05\x0c\x04\xb3 '
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g6371
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vy
sS'block_loop.thisTrialN'
p8440
I0
sg39
F1.1335786532335987
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05\x12\x02\xa3\xc8'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6675
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6683
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vy
sS'block_loop.thisTrialN'
p8453
I0
sg39
F1.5667745013661261
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05\x18\x05[\x18'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6763
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6506
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6770
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vy
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.83354264497938857
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05\x1e\x0e~\xf0'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6408
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vy
sS'block_loop.thisTrialN'
p8479
I0
sg39
F0.7168753273317634
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05$\x0co\x98'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g7323
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6877
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g7330
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vy
sS'block_loop.thisTrialN'
p8492
I0
sg39
F1.0167958696847563
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x05*\x08{\xe0'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g7526
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g7361
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g7533
sS'block_loop.thisRepN'
p8502
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vy
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.85061306691932259
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x050\tJ\xe8'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6808
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6815
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vy
sS'block_loop.thisTrialN'
p8518
I0
sg39
F1.2169102522029789
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x056\x07z\x10'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6793
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6800
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vy
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.91687167803956982
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06\x00\x0bb\x10'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g7727
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g7734
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vy
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.83353437704954558
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06\x06\n\x83h'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6485
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6489
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6493
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vy
sS'block_loop.thisTrialN'
p8557
I0
sg39
F1.033485681800812
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06\x0c\x08w\xf8'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g7243
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'left'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6917
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g7250
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6917
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6924
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vy
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.75011411167179176
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06\x12\t\x81\x98'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6838
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6489
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6845
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vy
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.80014249347550503
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06\x18\x06Ex'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6600
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6608
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vy
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.76678311141495215
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06\x1e\x03\xbd\x08'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6838
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6489
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6845
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vy
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.7168622126855553
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06$\x00\xbfh'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g7351
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g7361
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g7359
sS'block_loop.thisRepN'
p8619
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vy
sS'block_loop.thisTrialN'
p8622
I0
sg39
F1.7001932129433044
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x06*\x0c\x06 '
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6600
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6604
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6608
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vy
sS'block_loop.thisTrialN'
p8635
I0
sg39
F1.8839197052966483
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x061\x08\n\x98'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6553
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'left'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6561
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6563
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6557
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vy
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.76686379499642499
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x068\x06\xae\xf0'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6866
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6874
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vy
sS'block_loop.thisTrialN'
p8661
I0
sg39
F1.9334873638963472
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07\x02\x03\xadh'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6984
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6988
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6992
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vy
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.91661109573124122
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07\t\x03C\xf0'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6823
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6547
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6830
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vy
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.81674649019350909
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07\x0f\x02i0'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7351
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g7361
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7359
sS'block_loop.thisRepN'
p8697
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vy
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.78356957276719186
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07\x15\x00\x1f@'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6984
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6988
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6992
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6988
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6995
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vy
sS'block_loop.thisTrialN'
p8713
I0
sg39
F1.0997767944327279
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07\x1a\x0c\x9ex'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g7727
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6611
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g7734
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6604
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6611
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vy
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.78345667277426401
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07 \x0e\x9aH'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6808
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6523
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6815
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6523
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6530
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vy
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.86686239800201292
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07&\x0b\xd7@'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7323
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6877
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7330
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vy
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.88344871845674788
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x07,\nD\xe8'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6956
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6963
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vy
sS'block_loop.thisTrialN'
p8765
I0
sg39
F1.5672186887122734
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x072\t+\xa8'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6583
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6591
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vy
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.66679933366231126
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x079\x03\r@'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6675
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6683
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vy
sS'block_loop.thisTrialN'
p8791
I0
sg39
F1.1168717350583393
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08\x02\r\xa40'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g7323
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6870
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g7330
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6870
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6877
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vy
sS'block_loop.thisTrialN'
p8804
I0
sg39
F1.4333934231190142
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08\t\x00\x9c@'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6536
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6544
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vy
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.98331817071266414
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08\x0f\x07\xd7\xd0'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6838
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6489
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6845
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6489
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6496
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vy
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.86724186742321763
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08\x15\x07\xef@'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6502
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6506
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6510
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vy
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.78340307378857688
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08\x1b\x06\x9bh'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7634
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7641
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vy
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.98353769847653894
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08!\x03\xd8`'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6763
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6513
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6770
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6506
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6513
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vy
sS'block_loop.thisTrialN'
p8869
I0
sg39
F1.1168024555181546
sg34
g752
(S"\x07\xdf\t\x1e\x0c\x08'\x03\xef\xd0"
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7526
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g7361
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7533
sS'block_loop.thisRepN'
p8879
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vy
sS'block_loop.thisTrialN'
p8882
I0
sg39
F1.3833812920720447
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08-\x06* '
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7498
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7505
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vy
sS'block_loop.thisTrialN'
p8895
I0
sg39
F1.750192799546312
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x083\x0c\xae\x18'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6896
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'left'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6904
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vy
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.1168571949083343
sg34
g752
(S'\x07\xdf\t\x1e\x0c\x08:\tj('
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6425
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vy
sS'block_loop.thisTrialN'
p8921
I0
sg39
F1.5500997996023216
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t\x04\x0b\xa8`'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6536
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6544
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6540
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6547
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vy
sS'block_loop.thisTrialN'
p8934
I0
sg39
F1.1666443812719081
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t\x0b\x05Kx'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6425
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vy
sS'block_loop.thisTrialN'
p8947
I0
sg39
F2.216769697413838
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t\x11\x08=`'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6583
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6587
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6591
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6593
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6587
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vy
sS'block_loop.thisTrialN'
p8960
I0
sg39
F1.1336100143435033
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t\x18\x0c\x1d\x90'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7161
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7168
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vy
sS'block_loop.thisTrialN'
p8973
I0
sg39
F1.2335153893236566
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t\x1e\x0e\x96`'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g7498
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g7505
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6679
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6686
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vy
sS'block_loop.thisTrialN'
p8986
I0
sg39
F1.4835101862308875
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t%\x03v\xb8'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6617
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6624
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vy
sS'block_loop.thisTrialN'
p8999
I0
sg39
F1.9168038240031819
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t+\x0bi\xe0'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6371
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6380
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6375
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vy
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.633432824076408
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t2\n\x87P'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6442
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6450
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6452
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vy
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.0835767858225154
sg34
g752
(S'\x07\xdf\t\x1e\x0c\t9\x05\x99\x98'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7189
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'right'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6649
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7196
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6649
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6656
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vy
sS'block_loop.thisTrialN'
p9038
I0
sg39
F1.2502111885596605
sg34
g752
(S'\x07\xdf\t\x1e\x0c\n\x03\x07Z\xd0'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6408
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6416
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6419
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vy
sS'block_loop.thisTrialN'
p9051
I0
sg39
F1.0168417709455753
sg34
g752
(S'\x07\xdf\t\x1e\x0c\n\t\x0b}h'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g7146
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6900
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g7153
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6900
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6907
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vy
sS'block_loop.thisTrialN'
p9064
I0
sg39
F1.4835421175421288
sg34
g752
(S'\x07\xdf\t\x1e\x0c\n\x0f\x0cLp'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6956
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6737
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6963
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6737
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6744
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vy
sS'block_loop.thisTrialN'
p9077
I0
sg39
F2.3667889844955425
sg34
g752
(S'\x07\xdf\t\x1e\x0c\n\x16\x04\xfdX'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7351
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g7355
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7359
sS'block_loop.thisRepN'
p9087
I2
sg6382
g7361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g7355
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vy
sS'block_loop.thisTrialN'
p9090
I0
sg39
F6.6165420157612971
sg34
g752
(S'\x07\xdf\t\x1e\x0c\n\x1d\x0b\x00h'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vl
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vy
sa(dp9098
g63
g64
sg43
I47
sg56
Vl
sg57
Vn
sg42
I553
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vy
sa(dp9099
g63
g64
sg43
I47
sg55
g11
sg56
Vl
sg45
F0.97999999999999998
sg42
I553
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I01
sg48
I25
sg47
g569
sg51
F29.550000000000001
sg46
F1.0199999999999991
sg65
g66
sg67
g68
sg50
I0
sg69
Vy
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I83362640
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\xb8\x1e\x85?\xd7\xa3p?)\\\x0f>\xaeGa>\\\x8f\xc2>\xcd\xccL?\xaeGa?\x9a\x99\x99>R\xb8\x1e?{\x14.?\n\xd7#>\x8f\xc2u?)\\\x0f?\x14\xaeG?\xecQ8>fff?\x9a\x99\x19?=\n\xd7>R\xb8\x1e?\xb8\x1e\x05?{\x14\xae>\xecQ8>\xcd\xcc\xcc=\\\x8f\x82?\xb8\x1e\x05?\xf6(\\?\n\xd7#>\xaeGa>q=\x8a?\xaeGa>\xb8\x1e\x05?\\\x8f\x82?\x8f\xc2\xf5=\x8f\xc2u>\x8f\xc2u>\xcd\xcc\x8c?=\nW?\xecQ\xb8>\n\xd7\xa3=\x8f\xc2\xf5>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'D\x8bTAw\xbe\xd3@\xbaI\x8c@D\x8b\x98@\x98n\x9e@w\xbe\x07A\x10X\xe5@d;\xa3@\x0e-r@\xfe\xd4\x94@\xcb\xa1\xe9@\xc9v&@T\xe3\xc5@\xa2E(A\xdd$\xe2@\xa2ETA\xcb\xa1\xd1@^\xba\x03AB`U@\xee|\xef@\xa2E\x10A\xbaI\xe4@\x98n\xbe@b\x10\xa0@\x87\x16\xf9@\xa8\xc6+@\xcb\xa1\x89@\xaa\xf1\x8e@o\x12\x11A\xdd$\xb2@D\x8b\x88@\x08\xac\x88A\xe9&q@\x08\xac\x02A!\xb0\xc2@\xee|\xf7@\xfe\xd4\x9c@T\xe3\xbd@\x19\x04\x18A\xcb\xa1\x81@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xa8A\x00\x00\xa0A\x00\x00\xc0A\x00\x00\xf0A\x00\x00\x88A\x00\x00\x00@\x00\x00\x00B\x00\x00\x90A\x00\x00\x1cB\x00\x00 A\x00\x00\x80A\x00\x00\xc8A\x00\x00\x10A\x00\x00\x08B\x00\x00\xd0A\x00\x00\x14B\x00\x00`A\x00\x00\xb0A\x00\x00\xe8A\x00\x00\xa0@\x00\x00\x98A\x00\x00\x18B\x00\x00\x10B\x00\x00\xb8A\x00\x00\x80@\x00\x00\x0cB\x00\x00\x00A\x00\x00@A\x00\x00\x80?\x00\x00\xe0A\x00\x00\x04B\x00\x00\x00\x00\x00\x00\xd8A\x00\x00\xc0@\x00\x00\xe0@\x00\x00@@\x00\x000A\x00\x00PA\x00\x00pA\x00\x00\xf8A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0?ff\xe6?ff\xa6?33\xf3?\x00\x00\x00@ff\xa6?ff\xa6?\xcd\xcc\xcc?33\xb3?ff\xa6?\x00\x00\x00@ff\xa6?\xcd\xcc\x8c?\x9a\x99\xd9?\xcd\xcc\x8c?\xcd\xcc\xcc?33\xb3?\x00\x00\xc0?\x9a\x99\xd9?\x00\x00\xc0?\x00\x00\xc0?\xcd\xcc\xcc?ff\xa6?33\xf3?33\xf3?33\xb3?\xcd\xcc\x8c?\x9a\x99\x99?\xcd\xcc\x8c?ff\xe6?\xcd\xcc\x8c?\x9a\x99\xd9?\x9a\x99\xd9?ff\xa6?33\xb3?\xcd\xcc\xcc?\xcd\xcc\xcc?ff\xe6?\x9a\x99\x99?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x1f\x00\x00\x00\x1c\x00\x00\x00\x05\x00\x00\x00#\x00\x00\x00\x18\x00\x00\x00\x13\x00\x00\x00!\x00\x00\x00"\x00\x00\x00\x1a\x00\x00\x00\x0c\x00\x00\x00\t\x00\x00\x00$\x00\x00\x00\x1b\x00\x00\x00%\x00\x00\x00\x10\x00\x00\x00&\x00\x00\x00\n\x00\x00\x00\x04\x00\x00\x00\x07\x00\x00\x00\x14\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x0e\x00\x00\x00 \x00\x00\x00\x1d\x00\x00\x00\x12\x00\x00\x00\x03\x00\x00\x00\'\x00\x00\x00\x06\x00\x00\x00\x1e\x00\x00\x00\r\x00\x00\x00\x19\x00\x00\x00\x16\x00\x00\x00\x0f\x00\x00\x00\x15\x00\x00\x00\x08\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g249
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g242
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g270
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g312
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g221
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g116
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g326
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g228
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g375
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g172
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g214
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g277
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g165
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g340
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g284
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g361
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g200
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g256
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g305
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g137
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g235
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g368
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g354
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g263
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g130
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g347
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g158
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g186
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g109
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g298
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g333
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g102
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g291
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g144
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g151
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g123
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g179
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g193
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g207
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g319
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I83362640
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0@ff\xa6@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@33\x83@\x00\x00\x90@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\x90@\xcd\xcc\xac@\x00\x00\xb0@\x00\x00\xc0@\x9a\x99\xb9@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@33\xb3@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@33\xb3@33\xb3@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'h\x13\x11@d\xf0\x9e@\x7f\xb8[@\x15~7@r\xdf\xdd?M\x141@\x91\x9d\xf9?XZ\xd5?Q\x00\x14A[\x12\x91@\xdf\x9f\xf9?t\xf5\xae?\x06\x8b\xa8?\x1c\x03\xa0?#\xcf\x8c?\x9di\xbe@u\xf3\x8e?y\x89x@\xb1\x88h@\x95i\x16@N\x01\xa0?1zG@\xa8%\x82?\xf7f\xd5?\x12\x9e9@Y\xcf,@X\xe1\xbd?D\xd3\x8c?\xa6\x9f\xf9?$\xc2\xdb?\x9aw\xd7?\xbc\xd2\xec?V\xe1\xbd?\xf6\xc4{?\x06\x15\x91?*\xad\xea?G9\xb3?\xb9\x06\xa0?\xfd\xef\x96@u\x9d\xd9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'33s@ff\x86@fff@\x9a\x999@\x9a\x999@33\x83@33S@fff@33\x83@\xcd\xccl@\xcd\xccL@\xcd\xccL@ffF@\x00\x00@@33S@fff@fff@333@\x00\x00@@33s@\x9a\x999@fff@\x00\x00`@333@fff@\x00\x00@@\x9a\x99y@33S@\xcd\xccl@\x00\x00`@\x9a\x99\x89@\x00\x00\x80@\x00\x00\x80@\x00\x00`@\x9a\x999@\x9a\x999@ffF@\x00\x00\x80@\x00\x00@@\xcd\xccL@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80lk\x04@\x02j\x04\xe0\x01j\x04\xc0\x8d\x08\x0e\xc0e\n\x0e`\x8c\x08\x0e\xc0c\n\x0e\xc0f\n\x0e\x00f\n\x0e g\n\x0e\x80`\n\x0e\xa0e\n\x0e\xa0\x8c\x08\x0e\xe01l\x04@1l\x04\x002l\x04 0l\x04`2l\x04\x003l\x04 3l\x04@3l\x04 \x87\x08\x0e@\x8f\x08\x0e\xa0W\xdc\r\xe0\x89\x08\x0e\x801l\x04\xa00l\x04 1l\x04 2l\x04\x800l\x04@2l\x04\xc02l\x04\xe02l\x04\x805l\x04\xa01l\x04@[\xdc\r\x802l\x04\xa02l\x04\xe00l\x04`0l\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xdd$\xd2@\xa8\xc6+@\xc9vf@\xa8\xc6K@/\xdd,@\xe9&\xf1?\x96C#@\xfc\xa9I@\xa8\xc6K@\x87\x161@\xa8\xc6+@\xa8\xc6[@\xa8\xc6;@T\xe3-@\xbaI\x14@\xc5 \xe0?\xee|7@P\x8dg@B`\x85@\xee|\x87@B`\x15@\xc9v6@/\xdd\x1c@\xbaI\x14@\x0e-\x02@\xee|\x17@^\xba\xf9?T\xe3\x1d@\x0e-\x02@T\xe3\r@B`\x05@B`\xf5?\x83\xc0\xca?\xa8\xc6;@\xa8\xc6\x0b@\x0e-\x12@T\xe3\r@\xdb\xf9\xce?T\xe3M@\xdd$\x82@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I83362640
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\xb0fH\x0e\x80\xe6k\x04\xd8fH\x0e\x00gH\x0e(gH\x0eP\xe6k\x04\xf0\xe5k\x04\xa0gH\x0e\xc0\xe5k\x04PgH\x0e\x80\xe6k\x04\xb0fH\x0ePgH\x0e\x00gH\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'h\xc9G\x02\xe8j\xd2\x04\xf8f\xd2\x040e\xd2\x04\xb8g\xd2\x04\xb8\x84\xd1\x04\xd8\x82\xd1\x04\xf0\x85\xd1\x04(\x84\xd1\x04h\x86\xd1\x04X\x81\xd1\x04\x80\x89\xd1\x04P\x89\xd1\x048\x83\xd1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g799
sg82
g800
sg83
g804
sg84
g805
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g788
sg82
g810
sg83
g793
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g766
sg82
g819
sg83
g771
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g799
sg82
g828
sg83
g804
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g837
sg82
g838
sg83
g842
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g755
sg82
g848
sg83
g760
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g743
sg82
g857
sg83
g748
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g837
sg82
g866
sg83
g842
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g777
sg82
g875
sg83
g782
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I83362640
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I83362640
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'x\x976\x0e\xd0EJ\x0e\xe0\xb06\x0e\x10\xb16\x0e\x08FJ\x0e\xe8FJ\x0e0\xb26\x0e\x10\xb16\x0e@\xb16\x0e@FJ\x0ex\x976\x0e\xd0EJ\x0e\x08FJ\x0e\xc8\x976\x0e\xf0\x976\x0e`\xb26\x0exFJ\x0e\x00\xe7i\x04\xa0\x976\x0e@\xb16\x0exFJ\x0e\xd0EJ\x0e\x18\x986\x0e\xa0\x976\x0e\xf0\x976\x0e\xe0\xb06\x0e0\xb26\x0e\x00\xe7i\x04xFJ\x0e\x10\xb16\x0e\xd0EJ\x0e\x08FJ\x0eX\x996\x0e\x80\x996\x0e\x00\xe7i\x04\xa0\xb16\x0e\xb0FJ\x0e\x90\xb26\x0e@\xb16\x0e\x08FJ\x0e\x00\xe7i\x04p\xb16\x0e@\xb16\x0e\xf0\x976\x0e\x00\xe7i\x04@\x986\x0e0\x996\x0e\x00\xb26\x0ep\xb16\x0e\xe0\xe9i\x04\xb0FJ\x0eh\x986\x0e\x90\x986\x0ex\x976\x0e\xf0\xb26\x0e\xd0EJ\x0e@\x986\x0e\xa0\xb16\x0e\xe0\xe9i\x04\xb0FJ\x0e\xc8\x976\x0e@FJ\x0e\x80\xe8i\x04\x18\x986\x0e\x80\xe8i\x04p\xb16\x0e@FJ\x0e\x90\xb26\x0eh\x986\x0e\x10\xb16\x0eX\x996\x0eh\x986\x0e@\xb16\x0e\xe0\xb06\x0e\xc8\x976\x0e\x10\xb16\x0e GJ\x0e\xf0\x976\x0e\xa0\x976\x0e\x18\x986\x0e\xd0\xb16\x0e\xa0\xb16\x0e\x08FJ\x0e\x80\xe8i\x04\x00\xe7i\x04\xa0\xb16\x0e\x90\x986\x0e`1l\x04@\x986\x0e\x90\x986\x0e\xa0\xb16\x0e\x80\xe8i\x04\xc8\x976\x0e\xa0\x976\x0ep\xb16\x0eh\x986\x0e\x08\x996\x0e\xe0\xb06\x0e\xb0FJ\x0e\xc01l\x04\x00\xe7i\x04\xc8\x976\x0e\xf0\x976\x0e\xd0EJ\x0exFJ\x0e\xe0\xb06\x0e\x00\xb26\x0eh\x986\x0e\x18\x986\x0exFJ\x0e\x00\xe7i\x04\xa0\x976\x0e\x10\xb16\x0e\xb0FJ\x0e@FJ\x0e\x80\xe8i\x04\xa0\xb16\x0e\xa0\x976\x0e\xf0\x976\x0e@\x986\x0e\xe0\x986\x0e\xf0\x976\x0e@\x986\x0e\xd0EJ\x0e\xe0\xb06\x0e\xb0FJ\x0e\x18\x986\x0e\xa8\x996\x0e@FJ\x0e\x90\x986\x0e@\x986\x0ep\xb16\x0ex\x976\x0e\xc8\x976\x0e@\x986\x0e@\xb16\x0e@FJ\x0exFJ\x0e\x80\x996\x0e\xe0\xb06\x0e\xc00l\x04\x10\xb16\x0e\x18\x986\x0e\xa0\xb16\x0e\xa0\x976\x0e\xa0\xb16\x0e\x80\xe8i\x04@\x986\x0e\x08FJ\x0eh\x986\x0e\xd0\x996\x0e\xf0\x976\x0ex\x976\x0e\xd0EJ\x0e\xa0\xb16\x0e@\xb16\x0e\x18\x986\x0e\x08FJ\x0e\xa0\x976\x0e\xb0FJ\x0e\xc0\xb26\x0ep\xb16\x0e\x18\x986\x0e\x10\xb16\x0eh\x986\x0e\x90\x986\x0ep\xb16\x0exFJ\x0e\xc8\x976\x0eh\x986\x0exFJ\x0e@FJ\x0exFJ\x0ex\x976\x0e\xb0FJ\x0e\xc8\x976\x0e\x08FJ\x0e\x80\xe8i\x04@\xb16\x0eh\x986\x0e\xb0FJ\x0e\xc00l\x04\xe0\xb06\x0e\x00\xe7i\x04@\x986\x0e\x90\x986\x0ep\xb16\x0e\xd0\x996\x0e@FJ\x0e@\xb16\x0e\x80\xe8i\x04\x90\x986\x0ex\x976\x0e\x90\x986\x0e@FJ\x0e\xe0\xb06\x0e\xd0EJ\x0e\xe0\xe9i\x04\xc8\x976\x0e\x80\xe8i\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\x00\xe9i\x04\x80\xec\xe0\r`\xec\xe0\r\x00\xec\xe0\r\xc0\xc0\xdb\r@\xb8\n\x0e`\xc1\xdb\r\x001l\x04\x80\xc1\xdb\r\x80\xc0\xdb\r\x00\xeb\xe0\r\x80\xeb\xe0\r\xc0\xe7\xe0\r\xa0\xec\xe0\r\xa0\xe2\xe0\r`\xed\xe0\r\x80\xe7\xe0\r\xe0\xef\xe0\r@\xed\xe0\r@\xe0\xe0\r \xe7\xe0\r\x80\xe9i\x04\xc0\xfa\xdd\r\xc0\xf2\xdd\r`\xf1\xdd\r\x80\xf9\xdd\r\xa0\xf4\xdd\r@\xf2\xdd\r\x80\xf3\xdd\r\xe0\xf3\xdd\r\xa0\xfa\xdd\r\x00\xf3\xdd\r \xf3\xdd\r\xe0\xfa\xdd\r\x00\xfb\xdd\r`\xc0\xdb\r\x00\xf5\xdd\r\xc0\xfb\xdd\r\xe0\x9dj\x04 \x9ej\x04\xa0\x9ej\x04`\x9bj\x04`\x9ej\x04\xa0\x9fj\x04\xe0\x9fj\x04\xe0\x9cj\x04\x80\x9dj\x04\xe0\x9ej\x04\xc0\x9dj\x04\x80\x9bj\x04\x00\x92j\x04\xc0\x9cj\x04\x00\x9bj\x04@\x9ej\x04 \x9fj\x04\x00\x9fj\x04@\x9cj\x04`\x9dj\x04`\x9fj\x04@\x9bj\x04\x00\x9ej\x04\xc0\x99j\x04\xe0\x99j\x04\x80\x9cj\x04\xc0\x9ej\x04`\x9cj\x04\x00\x99j\x04\xe0\x9bj\x04\xa0\x99j\x04\xe0\x9aj\x04\xa0\x9cj\x04\x80\x95j\x04@\x9dj\x04\xa0\x9dj\x04 \x9cj\x04 \x9dj\x04 \x9bj\x04\x00\x9cj\x04\x00\x9dj\x04\xa0"\x0b\x0e\xe0\xb9\n\x0e\xe0>\xdb\r\x80:\xdb\r\x00>\xdb\r\xa0\x9bj\x04\xe0?\xdb\r ?\xdb\r`?\xdb\r`3\xa3\x04\x802\xa3\x04`1\xa3\x04\xe00\xa3\x04\xc01\xa3\x04@1\xa3\x04 3\xa3\x04`2\xa3\x04`5\xa3\x04\x80\x9fj\x04\x801\xa3\x04\x803\xa3\x04\xe05\xa3\x04\xa02\xa3\x04@5\xa3\x04\xa0>\xa3\x04@2\xa3\x04\x005\xa3\x04\xa04\xa3\x04 2\xa3\x04\xe01\xa3\x04\x002\xa3\x04\xa01\xa3\x04\x804\xa3\x04\x00"\x0b\x0e@3\xa3\x04\x004\xa3\x04\xe03\xa3\x04\xe06\xa3\x04\xc05\xa3\x04 6\xa3\x04\xe02\xa3\x04\xc07\xa3\x04 1\xa3\x04 4\xa3\x04\xc06\xa3\x04\x805\xa3\x04\xa00\xa3\x04\xc00\xa3\x04@4\xa3\x04\xa03\xa3\x04\xa08\xa3\x04\x009\xa3\x04\xc02\xa3\x04\xc04\xa3\x04`6\xa3\x04\xa07\xa3\x04\xa06\xa3\x04`8\xa3\x04\x809\xa3\x04\xe04\xa3\x04\xa05\xa3\x04\xc03\xa3\x04\x001\xa3\x04\x00:\xa3\x04 5\xa3\x04\x003\xa3\x04\x807\xa3\x04 7\xa3\x04`9\xa3\x04\xc09\xa3\x04\xa0;\xa3\x04@;\xa3\x04 9\xa3\x04\x808\xa3\x04`:\xa3\x04`7\xa3\x04@8\xa3\x04`4\xa3\x04@6\xa3\x04\x006\xa3\x04\x80;\xa3\x04\x00;\xa3\x04@<\xa3\x04\xc0:\xa3\x04\xe0=\xa3\x04@7\xa3\x04\x806\xa3\x04\xc0;\xa3\x04 =\xa3\x04`<\xa3\x04 ;\xa3\x04`>\xa3\x04\x007\xa3\x04\xe07\xa3\x04`;\xa3\x04\xc08\xa3\x04 :\xa3\x04`=\xa3\x04\xe09\xa3\x04\xc0<\xa3\x04\x80<\xa3\x04\x80:\xa3\x04 8\xa3\x04\x00?\xa3\x04\xe0?\xa3\x04\x00>\xa3\x04 >\xa3\x04\xe0<\xa3\x04\xe0;\xa3\x04\x80=\xa3\x04`?\xa3\x04@>\xa3\x04\x00<\xa3\x04\xa0:\xa3\x04\xa0=\xa3\x04\x80>\xa3\x04\x00=\xa3\x04@?\xa3\x04@9\xa3\x04\xa09\xa3\x04@=\xa3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'<6\x13@5\x8a\x08@\x8a\xf1\x0e@\xe5x\x07@\'\xb1\xca?\\\xa0\xd9?O\x1d\xc2?k\xf2\xae?\xa9\xcdL@\x19\x91\x18@l%B@8\xac:@#\x9c\xd9?p\xd0<@\x11\x12a@\xe7\xaaZ@w\xca\x0c@(\xd6\x1c@a1c@\xea\xab\n@\x9fyG@\x93)\xc2?B\xe0}@\x99\xfe\x8f@\xa0\xcd\x84@\xeeDD@e\x0b\xd1?-\xf0\x86@4`\xd5?\xae\x9c\t@9\xdf\x1d@"WE@3"\x02A\xaf\xbe+@\xd8Y\x85@e{\x07@?&\xe2?k\x010@\x8fE\x8c@!\x8d\xe8?\x08\xce\x84@\xa1\x01\x10@\xed:\x13@ah\x16@hi\xe6?q\x01P@d\x9c)@zEt@-%\xc2?\xe8\xcd<@\xbem\xe6?\x04Ve@\x016C@\xb7V\x95@\xfd\xdf\xac?\xcaE4@\x0f\x14\x11@\x98&\xe2?\x97\xac\x06A\xe0\xf1\xce?\xf0\x9ci@2\x8a\x08@\x8d$\x12@\xec\xbe+@\xe8\xe0\r@3\x9c)@\xb6\x9c9@\xcd\xf7\x0e@6\xccL@L63@\x92\x11\x89@\x9fxW@\x85"\xd2@\x93"\x92@\x97g&@\x10^U@\xcf\xde\r@\xff\xcd\x1c@\xc9\r!@3<3@\n6s@\xc4\xe2\x9d?\xd8E\x14@\x8c\xac\n@\xa1\x04\x88@W\x9e\x99?K\x89(@Wj\xe6?\x14\xe4\xdd?[5\xc2?I\x15\x91?r\xbcK@z\xad*@\x02\xb7\xbb?c\xa6\xd9?\x19\xcd,@\xacx\x07@\x7f\xa9:@}6\x03@S\x91(@\x08\xf0\x8e@\x18\x12\x11@\xe9\x9b\xf9?\x9f+B@\t\x9b\xb9@\x7f\x14\xd1?\xa7$\x12@\xb5i\xc6?^\xab\xd2@m\xbc\xe3@\x0e\xb2J@I\x96i@\'\xfe\xdf?W\x03\x00@\x8a\x9cY@\xe1\xf1\x0e@\xec9\xb3?4\x87\x08@\xe3\x8aX@.\xaa\xd9?}\x03\xc0?\x8b\xbe;@\x8c\xc0\xbb?\x8aiV@\xf3"\xb1?\x97\xd0\xac?VZ\xd5?\xbf(\xc2?i\xe0\xb5@\xdb]\xf5?E)\xa2?hX\xf5?\xe9\xab:@\x83\xf9\x1e@\x85\xe4\xbd?\x1a\x9ci@V\x16\xb1?X4\xe3@o)\xe2?9J\xe4?\xa7\x02 @\x03\x03\xe0?\x95\xdf\xec?z{\x97?\x92\xba\xa3@\x05\x9e\x99?(\x13\x01@\x8dD\xd3?\xdb\xe3\xdd?\xc0\xfe\xdf?!\x16\xd1?I\x89\x80@|\x12\xa0?\x8f\x17\xd1?\xb4\xd3\xac?\xd5|\xf7?\x96\x16\xd1?\x88~\x97?Y\x86\xc8?\xa0\xd3\xcc?\xcei\xa6?\x01Y\x05@\xa2L\xe4?-\xa0\xd9?\xdf\xcd\x0c@\xfdxW@<\x06\xc0?\x9b\xbf\xa3@\xcb\xe5\xbd?%F\xa4?v\x8c\xa8?:\xbd+@[H\x04@\xb6\xad\n@)\xc5\xbb?\xa3\x9e\x99?\xa4\xf4\xae?h%"@\x0f\x11\xd1?\xc8\x8b\xa8?\x02\xd2\xcc?\x15\xe1\xdd?\x0e\x9a\xa8?u\x8b\x18@\x8c\xf5\xae?5\xf5\xee?:~\xb7?xv\xc6?\x9ay\x17@\xb4\xbc\xbb@Y\x9d\x99?\xd3\x8c\x08@MK\xa4?\xa7(\xa2?H\x06\xc0?\x11\xd3\xac?\x9a\xf0\xbd?\x8a\xe0\r@\x107\x93?\xbc\x03\xa0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\xf0\x82\xd1\x04\xd0\x87\xd1\x04\xe0 \x9b\x04\xb8\'\x9b\x04\x98&\x9b\x048 \x9b\x04\xe0&\x9b\x04\xe0/\x9b\x04\xa0*\x9b\x04`"\x9b\x04@\'\x9b\x04($\x9b\x04\xd0\'\x9b\x04\xd0*\x9b\x04P,\x9b\x04@$\x9b\x048/\x9b\x04\xd8(\x9b\x04\x18%\x9b\x04 ,\x9b\x04\xb0 \x9b\x04\x10*\x9b\x04\x10!\x9b\x04 )\x9b\x04x"\x9b\x04P)\x9b\x04\x80&\x9b\x04\xc0"\x9b\x04\xa0!\x9b\x04`+\x9b\x04(-\x9b\x04\xe8$\x9b\x04\xc8/\x9b\x04\x00.\x9b\x04\x88*\x9b\x04\xb0/\x9b\x04\xe0#\x9b\x04\xc8 \x9b\x04\x08#\x9b\x04\x18.\x9b\x04(*\x9b\x04@*\x9b\x04\xc8)\x9b\x04h&\x9b\x04\x00+\x9b\x04X*\x9b\x04h \x9b\x04\xb8*\x9b\x04\x98 \x9b\x04\xb8!\x9b\x04\x90(\x9b\x04h,\x9b\x04\x88\'\x9b\x04\x88-\x9b\x04\xc0+\x9b\x040(\x9b\x040+\x9b\x04X!\x9b\x04\xb8-\x9b\x04(!\x9b\x048#\x9b\x04\xe0)\x9b\x04\x00(\x9b\x04H%\x9b\x04\xc8&\x9b\x04\x80 \x9b\x04x.\x9b\x04\xc8#\x9b\x04h)\x9b\x04`.\x9b\x04\xb8$\x9b\x04p\'\x9b\x04\xb0,\x9b\x04\x98/\x9b\x040.\x9b\x040%\x9b\x04\xd8.\x9b\x04\x90"\x9b\x04\x90+\x9b\x04X$\x9b\x04\xb0)\x9b\x04 /\x9b\x048,\x9b\x04\x18+\x9b\x04\x10$\x9b\x04\xf8&\x9b\x048&\x9b\x04\xa8.\x9b\x04X\'\x9b\x04@-\x9b\x04\xf0"\x9b\x04 #\x9b\x04\xa0\'\x9b\x04\xc0.\x9b\x04P&\x9b\x04x+\x9b\x04x(\x9b\x04\x08)\x9b\x04\xc8,\x9b\x04\xf8,\x9b\x04\xd0$\x9b\x04\x80,\x9b\x04p*\x9b\x04\x18"\x9b\x04\xf0+\x9b\x04\xa8(\x9b\x04\xf0(\x9b\x04\x98#\x9b\x04p-\x9b\x04\x90.\x9b\x04\x88!\x9b\x04h#\x9b\x04\x08,\x9b\x04\xe0,\x9b\x04\xd8+\x9b\x04\xd0!\x9b\x04H.\x9b\x04\xe8\'\x9b\x04\xa8+\x9b\x04P/\x9b\x04P \x9b\x04h/\x9b\x04\x80)\x9b\x04H"\x9b\x04\x98,\x9b\x04\xc0(\x9b\x04X-\x9b\x04\xa0-\x9b\x04\xf8 \x9b\x04\x00%\x9b\x04H(\x9b\x04(\'\x9b\x04P#\x9b\x04\xd8"\x9b\x04\x80/\x9b\x04\xf8#\x9b\x04`(\x9b\x04\xf0.\x9b\x04\xf8)\x9b\x04\x10\xbd\x9b\x04\xf8\xa0\xd1\x04\xb0\xaf\xd1\x04P\xa9\xd1\x04@\xa7\xd1\x040\xae\xd1\x04\x08\xa9\xd1\x040\xa2\xd1\x04\x80\xaf\xd1\x048\xa9\xd1\x04h\xa6\xd1\x04\xd0\xa4\xd1\x04\xc0\xae\xd1\x04X\xa7\xd1\x04\x18\xae\xd1\x04\xc8\xa3\xd1\x04P\xaf\xd1\x04 \xa9\xd1\x04\xe0\xa3\xd1\x04 \xaf\xd1\x04\xf0\xa2\xd1\x04\x10\xa4\xd1\x04\xa0\xa1\xd1\x04\xc0\xa8\xd1\x04P\xa6\xd1\x04\x98\xa6\xd1\x04@\xaa\xd1\x04(\xad\xd1\x04`\xab\xd1\x04x\xa5\xd1\x04\x88\xaa\xd1\x04h\xaf\xd1\x04X\xaa\xd1\x04\xe8\xad\xd1\x048\xa0\xd1\x04\xa0\xaa\xd1\x04\xc0\xa2\xd1\x04p\xaa\xd1\x04\x98\xa9\xd1\x04\xb8\xa1\xd1\x04x\xae\xd1\x04 \xa0\xd1\x04\xc8\xaf\xd1\x04\x88\xa7\xd1\x04\xa8\xa8\xd1\x04\xd0\xa7\xd1\x040\xa5\xd1\x04\x80\xa0\xd1\x04X\xad\xd1\x04H\xa8\xd1\x04\xf8\xac\xd1\x04\x18\xa2\xd1\x04 \xa6\xd1\x04\xe8-\x9b\x040"\x9b\x04H+\x9b\x04p$\x9b\x04\x08/\x9b\x04\xe8!\x9b\x04\x00"\x9b\x04\xb0&\x9b\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g993
sg894
g983
sg908
g987
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1010
sg894
g1000
sg908
g1004
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g953
sg894
g1017
sg908
g960
sg903
g1024
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g993
sg894
g1049
sg908
g987
sg903
g1056
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g919
sg894
g1077
sg908
g926
sg903
g1084
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1126
sg894
g1122
sg908
g1133
sg903
g1130
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1036
sg894
g1139
sg908
g1043
sg903
g1146
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1010
sg894
g1188
sg908
g1004
sg903
g1195
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1246
sg894
g1242
sg908
g1253
sg903
g1250
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1010
sg894
g1000
sg908
g1004
sg903
g1008
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1126
sg894
g1122
sg908
g1133
sg903
g1130
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g936
sg894
g1285
sg908
g943
sg903
g1292
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1010
sg894
g1000
sg908
g1004
sg903
g1008
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1175
sg894
g1313
sg908
g1182
sg903
g1320
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1158
sg894
g1328
sg908
g1165
sg903
g1335
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g919
sg894
g1077
sg908
g926
sg903
g1084
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1246
sg894
g1242
sg908
g1253
sg903
g1250
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1405
sg894
g1395
sg908
g1399
sg903
g1403
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1429
sg894
g1425
sg908
g1436
sg903
g1433
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1446
sg894
g1442
sg908
g1453
sg903
g1450
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1126
sg894
g1459
sg908
g1133
sg903
g1466
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g970
sg894
g1487
sg908
g977
sg903
g1494
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1175
sg894
g1313
sg908
g1182
sg903
g1320
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1405
sg894
g1515
sg908
g1399
sg903
g1522
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1036
sg894
g1139
sg908
g1043
sg903
g1146
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1126
sg894
g1122
sg908
g1133
sg903
g1130
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g1175
sg894
g1313
sg908
g1182
sg903
g1320
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1573
sg894
g1569
sg908
g1580
sg903
g1577
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1175
sg894
g1313
sg908
g1182
sg903
g1320
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1405
sg894
g1515
sg908
g1399
sg903
g1522
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g899
sg894
g1625
sg908
g909
sg903
g1632
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1446
sg894
g1640
sg908
g1453
sg903
g1647
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1659
sg894
g1655
sg908
g1666
sg903
g1663
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1676
sg894
g1672
sg908
g1683
sg903
g1680
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1446
sg894
g1640
sg908
g1453
sg903
g1647
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1573
sg894
g1728
sg908
g1580
sg903
g1735
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1429
sg894
g1743
sg908
g1436
sg903
g1750
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g899
sg894
g1625
sg908
g909
sg903
g1632
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1446
sg894
g1442
sg908
g1453
sg903
g1450
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1109
sg894
g1784
sg908
g1116
sg903
g1791
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g993
sg894
g983
sg908
g987
sg903
g991
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1816
sg894
g1812
sg908
g1823
sg903
g1820
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1246
sg894
g1242
sg908
g1253
sg903
g1250
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1816
sg894
g1812
sg908
g1823
sg903
g1820
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1405
sg894
g1515
sg908
g1399
sg903
g1522
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g993
sg894
g983
sg908
g987
sg903
g991
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1126
sg894
g1459
sg908
g1133
sg903
g1466
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1659
sg894
g1894
sg908
g1666
sg903
g1901
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1246
sg894
g1242
sg908
g1253
sg903
g1250
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1659
sg894
g1894
sg908
g1666
sg903
g1901
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g936
sg894
g1285
sg908
g943
sg903
g1292
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1109
sg894
g1784
sg908
g1116
sg903
g1791
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g953
sg894
g1017
sg908
g960
sg903
g1024
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1659
sg894
g1655
sg908
g1666
sg903
g1663
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1126
sg894
g1122
sg908
g1133
sg903
g1130
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1010
sg894
g1188
sg908
g1004
sg903
g1195
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1246
sg894
g2039
sg908
g1253
sg903
g2046
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1429
sg894
g1425
sg908
g1436
sg903
g1433
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g970
sg894
g1487
sg908
g977
sg903
g1494
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1816
sg894
g1812
sg908
g1823
sg903
g1820
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1429
sg894
g1743
sg908
g1436
sg903
g1750
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1676
sg894
g1672
sg908
g1683
sg903
g1680
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1573
sg894
g1569
sg908
g1580
sg903
g1577
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1676
sg894
g1672
sg908
g1683
sg903
g1680
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1429
sg894
g1743
sg908
g1436
sg903
g1750
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1816
sg894
g2197
sg908
g1823
sg903
g2204
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1010
sg894
g1188
sg908
g1004
sg903
g1195
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1405
sg894
g1515
sg908
g1399
sg903
g1522
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1659
sg894
g1655
sg908
g1666
sg903
g1663
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g936
sg894
g1285
sg908
g943
sg903
g1292
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1446
sg894
g1640
sg908
g1453
sg903
g1647
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1816
sg894
g2197
sg908
g1823
sg903
g2204
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g1175
sg894
g1313
sg908
g1182
sg903
g1320
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1109
sg894
g1784
sg908
g1116
sg903
g1791
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1126
sg894
g1459
sg908
g1133
sg903
g1466
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g919
sg894
g1077
sg908
g926
sg903
g1084
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1158
sg894
g1328
sg908
g1165
sg903
g1335
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g953
sg894
g1017
sg908
g960
sg903
g1024
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1659
sg894
g1894
sg908
g1666
sg903
g1901
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1246
sg894
g2039
sg908
g1253
sg903
g2046
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1010
sg894
g1188
sg908
g1004
sg903
g1195
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g953
sg894
g1017
sg908
g960
sg903
g1024
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1446
sg894
g1640
sg908
g1453
sg903
g1647
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g993
sg894
g1049
sg908
g987
sg903
g1056
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1816
sg894
g1812
sg908
g1823
sg903
g1820
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1429
sg894
g1425
sg908
g1436
sg903
g1433
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1010
sg894
g1188
sg908
g1004
sg903
g1195
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1126
sg894
g1459
sg908
g1133
sg903
g1466
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1573
sg894
g1569
sg908
g1580
sg903
g1577
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1109
sg894
g1784
sg908
g1116
sg903
g1791
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1126
sg894
g1122
sg908
g1133
sg903
g1130
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1573
sg894
g1569
sg908
g1580
sg903
g1577
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g919
sg894
g1077
sg908
g926
sg903
g1084
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g936
sg894
g1285
sg908
g943
sg903
g1292
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1446
sg894
g1640
sg908
g1453
sg903
g1647
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1246
sg894
g2039
sg908
g1253
sg903
g2046
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1573
sg894
g1728
sg908
g1580
sg903
g1735
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g993
sg894
g983
sg908
g987
sg903
g991
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1676
sg894
g1672
sg908
g1683
sg903
g1680
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1573
sg894
g1728
sg908
g1580
sg903
g1735
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1405
sg894
g1395
sg908
g1399
sg903
g1403
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g899
sg894
g1625
sg908
g909
sg903
g1632
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1573
sg894
g1728
sg908
g1580
sg903
g1735
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1036
sg894
g1139
sg908
g1043
sg903
g1146
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g993
sg894
g983
sg908
g987
sg903
g991
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1158
sg894
g1328
sg908
g1165
sg903
g1335
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1405
sg894
g1395
sg908
g1399
sg903
g1403
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g936
sg894
g1285
sg908
g943
sg903
g1292
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1246
sg894
g2039
sg908
g1253
sg903
g2046
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1429
sg894
g1425
sg908
g1436
sg903
g1433
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1010
sg894
g1000
sg908
g1004
sg903
g1008
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1429
sg894
g1743
sg908
g1436
sg903
g1750
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1816
sg894
g2197
sg908
g1823
sg903
g2204
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1573
sg894
g1569
sg908
g1580
sg903
g1577
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g970
sg894
g1487
sg908
g977
sg903
g1494
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1659
sg894
g1894
sg908
g1666
sg903
g1901
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1676
sg894
g2966
sg908
g1683
sg903
g2973
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1126
sg894
g1459
sg908
g1133
sg903
g1466
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g899
sg894
g1625
sg908
g909
sg903
g1632
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g919
sg894
g1077
sg908
g926
sg903
g1084
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1429
sg894
g1425
sg908
g1436
sg903
g1433
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1036
sg894
g1139
sg908
g1043
sg903
g1146
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1246
sg894
g1242
sg908
g1253
sg903
g1250
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1010
sg894
g1000
sg908
g1004
sg903
g1008
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1446
sg894
g1442
sg908
g1453
sg903
g1450
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1429
sg894
g1743
sg908
g1436
sg903
g1750
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1405
sg894
g1395
sg908
g1399
sg903
g1403
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1246
sg894
g2039
sg908
g1253
sg903
g2046
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g953
sg894
g1017
sg908
g960
sg903
g1024
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1659
sg894
g1655
sg908
g1666
sg903
g1663
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1676
sg894
g2966
sg908
g1683
sg903
g2973
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1405
sg894
g1395
sg908
g1399
sg903
g1403
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1158
sg894
g1328
sg908
g1165
sg903
g1335
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1109
sg894
g1784
sg908
g1116
sg903
g1791
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1659
sg894
g1655
sg908
g1666
sg903
g1663
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1158
sg894
g1154
sg908
g1165
sg903
g1162
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g993
sg894
g1049
sg908
g987
sg903
g1056
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1158
sg894
g1328
sg908
g1165
sg903
g1335
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1446
sg894
g1442
sg908
g1453
sg903
g1450
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g970
sg894
g1487
sg908
g977
sg903
g1494
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1816
sg894
g2197
sg908
g1823
sg903
g2204
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1036
sg894
g1139
sg908
g1043
sg903
g1146
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1659
sg894
g1894
sg908
g1666
sg903
g1901
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1446
sg894
g1442
sg908
g1453
sg903
g1450
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g970
sg894
g1487
sg908
g977
sg903
g1494
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1175
sg894
g1171
sg908
g1182
sg903
g1179
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1573
sg894
g1728
sg908
g1580
sg903
g1735
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1676
sg894
g2966
sg908
g1683
sg903
g2973
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1405
sg894
g1515
sg908
g1399
sg903
g1522
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1676
sg894
g1672
sg908
g1683
sg903
g1680
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g993
sg894
g1049
sg908
g987
sg903
g1056
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1816
sg894
g2197
sg908
g1823
sg903
g2204
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1676
sg894
g2966
sg908
g1683
sg903
g2973
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g899
sg894
g1625
sg908
g909
sg903
g1632
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1676
sg894
g2966
sg908
g1683
sg903
g2973
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g993
sg894
g1049
sg908
g987
sg903
g1056
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1109
sg894
g1105
sg908
g1116
sg903
g1113
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1816
sg894
g1812
sg908
g1823
sg903
g1820
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I83362640
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'\x98*\x9d\x13\xa0\x82\x07\x0e\x98*\x9d\x13\xf0\xbb\x9c\x13(\xbc\x9c\x13p\xe7\x9c\x13\xc0*\x9d\x13@\x81\x07\x0e\xa0\xe7\x9c\x13`\xbc\x9c\x13\xd0\xe7\x9c\x13\xe8*\x9d\x13x,\x9d\x13(\xbc\x9c\x13`\xe8\x9c\x13`\xbc\x9c\x13\x10+\x9d\x13@\x81\x07\x0e8+\x9d\x13P,\x9d\x13\x98\xbc\x9c\x13\xc0*\x9d\x13\x98\xbc\x9c\x13\xd0\xe7\x9c\x13\x00\xe8\x9c\x13\x98\xbc\x9c\x13\xc8,\x9d\x13\x00\xe8\x9c\x13\xa0\x82\x07\x0e\x10+\x9d\x13\x98*\x9d\x13\xa0\xe7\x9c\x13x,\x9d\x13\xd0\xe7\x9c\x13\x98*\x9d\x13\xa0\x82\x07\x0e\xe8*\x9d\x13(\xbc\x9c\x13`+\x9d\x13x,\x9d\x13\x88+\x9d\x138+\x9d\x13\xd0\xe7\x9c\x13\x08\xbd\x9c\x13\x98\xbc\x9c\x13\xd0\xbc\x9c\x13 0\x9d\x13\x98\xbc\x9c\x13\x10+\x9d\x13\x98*\x9d\x13@\x81\x07\x0e\x00\xe8\x9c\x13\x88+\x9d\x13(\xbc\x9c\x13\xb0+\x9d\x13\x88+\x9d\x13\xf0\xbb\x9c\x13`+\x9d\x130\xe8\x9c\x13(\xbc\x9c\x13\xa0\xe7\x9c\x13\xc0*\x9d\x13@\x81\x07\x0e\x10+\x9d\x13P\xe9\x9c\x13\x98*\x9d\x130\xe8\x9c\x13p\xe7\x9c\x13\xc0*\x9d\x13\xa0,\x9d\x13@0\x9d\x13\xa0\x80\x07\x0e\x00,\x9d\x13\x98\xbc\x9c\x13\xb0+\x9d\x13`+\x9d\x13\xa0\xe7\x9c\x13P\xe9\x9c\x138+\x9d\x13\xc0*\x9d\x13\xb0+\x9d\x13\xd0\xe7\x9c\x13\x98*\x9d\x130\xe8\x9c\x13p\xe7\x9c\x13`\xbc\x9c\x13\xf0\xbb\x9c\x13\x88+\x9d\x13\xc0*\x9d\x13\xd0\xe7\x9c\x130\xe8\x9c\x13\xf0\xbb\x9c\x13\xd0\xe7\x9c\x13\x08\xbd\x9c\x13\xe8*\x9d\x13\xf0\xbb\x9c\x13\xa0\xe7\x9c\x13\xe8*\x9d\x13\xa0\xe7\x9c\x13(,\x9d\x13\xe8*\x9d\x13\xc0*\x9d\x13`\xbc\x9c\x13\xb0+\x9d\x13\xa0,\x9d\x13\xf0\xbb\x9c\x130\xe8\x9c\x13\xa0\x82\x07\x0e`+\x9d\x13`\xbc\x9c\x13`+\x9d\x13\x98*\x9d\x13(\xbc\x9c\x13\xc0*\x9d\x13@\x83\x07\x0e\x00\xe8\x9c\x13\x98\xbc\x9c\x13\xc8,\x9d\x13p\xe7\x9c\x13\xd0\xbc\x9c\x13`+\x9d\x13\x00\xe8\x9c\x13`\xbc\x9c\x130\xe8\x9c\x13(\xbc\x9c\x13\x98*\x9d\x13@0\x9d\x138+\x9d\x13\xf0\xe8\x9c\x13\x98\xbc\x9c\x138+\x9d\x130\xe8\x9c\x13\x10+\x9d\x13`\xbc\x9c\x13@\x83\x07\x0e\x90\xe8\x9c\x13\x00,\x9d\x13\x98\xbc\x9c\x13\xf0,\x9d\x13\x08\xbd\x9c\x13\x88+\x9d\x13\xa0,\x9d\x13\xe8*\x9d\x13\x88+\x9d\x130\xe8\x9c\x13\xa0\x82\x07\x0e\xd0\xe7\x9c\x13p\xe7\x9c\x13\xe8*\x9d\x13\xf0\xbb\x9c\x13`+\x9d\x130\xe8\x9c\x13\x00\xe8\x9c\x13\xd0\xbc\x9c\x13\xb0+\x9d\x13\xd0\xe7\x9c\x13(\xbc\x9c\x13x,\x9d\x13@\x81\x07\x0e\xa0\x82\x07\x0e\xa0\xe7\x9c\x13(,\x9d\x13p\xe7\x9c\x13`\xbc\x9c\x13\xd0\xbc\x9c\x13@\x81\x07\x0ep\xe7\x9c\x13\xe8*\x9d\x13\xd0\xbc\x9c\x13@\x81\x07\x0e\xd0\xbc\x9c\x13\x88+\x9d\x13\xb0+\x9d\x13\xc0\xe8\x9c\x13\x10+\x9d\x13@\x81\x07\x0ep\xe7\x9c\x138+\x9d\x13\xd0\xe7\x9c\x13\xf0\xbb\x9c\x130\xe8\x9c\x13\xa0\xe7\x9c\x13\xb0+\x9d\x13\xd0\xbc\x9c\x13`+\x9d\x13\x88+\x9d\x13\xd0\xbc\x9c\x13\x98\xbc\x9c\x13\xa0\x82\x07\x0e8+\x9d\x13\xe8*\x9d\x13@\x81\x07\x0e\xa0\xe7\x9c\x13\x00,\x9d\x13\x90\xe8\x9c\x13\xa0,\x9d\x13p\xe7\x9c\x13\xb0+\x9d\x13`\xbc\x9c\x13`+\x9d\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S' 2\x9d\x13\xa02\x9d\x13\x002\x9d\x13\xc02\x9d\x13\xe0\x00j\x04\xa0<\xa3\x04 \xed\xe0\r\xe01\x9d\x13\xe02\x9d\x13\x801\x9d\x13\xc00\x9d\x13`1\x9d\x13\xa03\x9d\x13\x803\x9d\x13\x001\x9d\x13\xe03\x9d\x13\xc03\x9d\x13\xe00\x9d\x13\x004\x9d\x13`4\x9d\x13\x804\x9d\x13\x003\x9d\x13\x802\x9d\x13\xe04\x9d\x13\xc04\x9d\x13@1\x9d\x13@5\x9d\x13`5\x9d\x13`0\x9d\x13@3\x9d\x13\xc05\x9d\x13\xe05\x9d\x13\x006\x9d\x13@2\x9d\x13@4\x9d\x13`6\x9d\x13\x806\x9d\x13\xa04\x9d\x13\xa00\x9d\x13\xe06\x9d\x13\xc06\x9d\x13\x800\x9d\x13@7\x9d\x13`7\x9d\x13 1\x9d\x13\xa07\x9d\x13\xc07\x9d\x13\xe07\x9d\x13\x008\x9d\x13 8\x9d\x13@8\x9d\x13 6\x9d\x13@6\x9d\x13`8\x9d\x13\x808\x9d\x13\xa08\x9d\x13`ok\x04\x80nk\x04\x80kk\x04`fk\x04 ok\x04\x80ok\x04@ok\x04 dk\x04\xc0mk\x04\xa0nk\x04\xe0ok\x04\xc0ok\x04\xa0dk\x04 jk\x04 fk\x04`hk\x04`dk\x04\xe0dk\x04@mk\x04\x00mk\x04\x80fk\x04\x00ik\x04\xc0ck\x04\xe0jk\x04\xc0hk\x04 mk\x04\x80ik\x04\xc0ek\x04@lk\x04@jk\x04`ik\x04@kk\x04\x00jk\x04\x80mk\x04\xe0hk\x04`jk\x04\x00kk\x04@\x9fj\x04 hk\x04`kk\x04\x80ck\x04\xc0jk\x04\xa0ok\x04\xc0ik\x04\xe0ik\x04\xe0lk\x04@ik\x04`mk\x04\x00ek\x04@ek\x04@ck\x04`\x01j\x04\xa0jk\x04\x00\xe7\xe0\r\x00\xe6\xe0\r@\xe3\xe0\r`\xe2\xe0\r\x80\xe6\xe0\r\xe0\xe6\xe0\r\x00\x0cj\x04\xa0\xe3\xe0\r`\xe6\xe0\r@\xe6\xe0\r\xa0\xe7\xe0\r\xe0\xe2\xe0\r \xe6\xe0\r\xe0\xeb\xe0\r`\xe7\xe0\r\x80\xe3\xe0\r\x00\xe3\xe0\r\xc0\xe2\xe0\r\xa0\xe6\xe0\r\x80\xe2\xe0\r@\xeb\xe0\r\xe0\xe7\xe0\r \xe2\xe0\r\xc0\xeb\xe0\r\x80\xed\xe0\r@\xe7\xe0\r \xeb\xe0\r\x80ek\x04\xc0U\xdd\r`]\xdd\r U\xdd\r\xa0T\xdd\r\x00V\xdd\r\x80\x00j\x04@[\xdd\r\x00[\xdd\r@U\xdd\r\xc0Y\xdd\r\x80T\xdd\r\x00T\xdd\r\x80\\\xdd\r\x80Z\xdd\r`T\xdd\r\xc0[\xdd\r`X\xdd\r\xe0U\xdd\r\xe0Z\xdd\r X\xdd\r@T\xdd\r\x00Z\xdd\r\x00U\xdd\r\xa0[\xdd\r\x00R\xdd\r`\xfe\xdd\r\xe0\xff\xdd\r\xa0\xf1\xdd\r\xe0\xf1\xdd\r\xc0\xf4\xdd\r\xe0\xf4\xdd\r \xfc\xdd\r\xe0\xf6\xdd\r\xa0\xfb\xdd\r\x00\xfc\xdd\r\x00\xf2\xdd\r\x00\xf1\xdd\r \xf1\xdd\r\x80\xf4\xdd\r\xc0\xf7\xdd\r\xe0\xef\xa0\x04`Z\xdd\r\xc0\x82\x07\x0e\x00\x87\x07\x0e`\x8a\x07\x0e\xa0\x8a\x07\x0e`\x81\x07\x0e@\x80\x07\x0e \x83\x07\x0e\xc0\x9fj\x04\x00g\n\x0e\xe0f\n\x0e\xa0f\n\x0e\xe0b\n\x0e o\n\x0e\xc0`\n\x0e``\n\x0e\x80b\n\x0e@`\n\x0e \xe0\xe0\r\xc0d\n\x0e`i\n\x0e \xbb\n\x0e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'a\x00\xa0@\xadi\x06@\x05\x89\x90@#Z\xc4?\x9d\xb9\xbb?\x17i\xe6?\x1ax\x9f@$\xe1\x9d?\xdc\xb9\xca?\xc0$\x12@\xec\x06\x80?\xc1X\xd5?\xbb(\x82?\xd3Hb?O\xf3\xee?\x87\x06\xc0?\xc9j\x86?{\xd0\x8c?\t\x06\x80?\xdb\x9eY?\x94\xce\x1c@\xa5E$@\xc2\xf1.@"\xa9Y?\x12\xc5{?\xff\xae\xca?59\xd3?\x1f{w?;\xe0\xac?\x15{\x97?\x8e\x8b\x08@\xe5\x9f\xd9?\xcbsf?\x1dFb?n\xb7j?SK\x84?MfU?\xfe\xec]?$<s?\xce\x06\xc0?q\x8dH?\xce9s?\xc4\x17\xd1?z\xf5n?\xab\xcd\xdb?\xd9\x89\x88@\xd8\x9e\x99?\x07:s?@\x02\x80?q\x10\xa0?#j\xc6?\xc3\x9a\x99@e\x03\xc0?\xd6J\x84?\xda\x9e\t@\'\x90\x88?\x02\x03\x10@\x93\x8e\xa8?\xed,b?\xc5\xd3\x8c?:i6@Z\x18\xd1?5X\xb5?\x0e]U?\x89RU?\xe8\x8e\xc8?\x9a\xa7Y?\rX5@\x18\x04\xa0@\xc7&\x82?*\xc9{?\x02\xc4{?\xca)b?\x9aM$@\xdbC\xc4?g2b?qi\x86?\x1cs\xd7?\xe8s\x86?\x94\xfan?\x14\xca\xac?>\x1aQ?\x8aY\xf5?.\x9e7?\xe7\xbe\xbb?C\xa1\xb9?\xdc\\\xb5?\x1d\xe4\xfd?\x14\x07\xa0?X<s?\tQD?\x05\x8d\xc8?\xd7\xc3{?\x04\xa0i@\x87\xd0\x8c?\xb9\x8f\x88?\xc4\x15\xd1?\xd8lf?^~\xd7?\x03\xc2\xbb?B\x84w?\x7f\x8b\xc8?2\x07\x80?t8S@G\xc9{?f\x08\x80?\xc8\xdbL?\x94(\xa2?W8Q?\xa5\xbf\xfb?\x057\x93?\x00z\xf7?\x89\xf5\xce?\xde\xc3\xfb?\xed9\xf3?\x06$"@s\x03\x80?\xdaV\x15@6I\x84?\xbc\xf4\xce?2\xf7]?\xd1\x01\x10@\x13\x96H?\xe0\xb1H?B\xd9L?0\xb3j?|Cs?\x1c\x18Q?\xf5)b?g\x01\xaf?\x02\x13Q?)\r@?G[U?_\x03\x80?\xd0RD?\xc1\x95H?J+\x82?\xc6\x03\x80?\xf4~w?\xc9\xcdL?\xea\xa0\xd9?[pf?CC\x84?\xd1\xb0j?H\xabY?a=\x93?\xa9@s?\xe2E\x04@\t\x03\x80?\x9e\xa0\x99?s\x05^?C\x847? \xe4\xdd?\x87\xf5\xae?:\xb7{?\xe72Q?*\x07\xa0?\xc44\x93?\x80aU?@i\x16@S:\x93?\xdc\xe0\xbd?\xb0\xc1\x9b?\xf0\xca{?\x03\xd3\xac?ZK\x84?NH\xa4?\x1e\xa1Y?\x9b\x17\xd1?g\xc4;?\'\xcf\xfb?u\x06\xe0?;/s?\xc7\x8e\xa8?\x886\x93?3\x03\x00@\xc3i\xe6?\x9a\x9b\x99?\x9d\x12\xb9@\xf9\x0c@?.B3?k\x06\x80?)1\x93?u\xf9n?\x97\x05\xe0?bkD?X\x8c\xe8?\x19\xdaL?\xf0G\xa4?\xa8zw?\x7fX\x84?\xf3}\xb7?\x9d\xe4\xbd?\x04{\xb7?\x12\xa0Y?\xfe\xbb\xaa?$\xd3\xcc?\x95a\xa6?\xd7(\xa2?.Y\xb5?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xd0\xbd\x9b\x04\xc8\xb9\x9b\x04\xe0\xf0\x94\x04\x00\xf2\x94\x04\xd8\xfe\x94\x04\x98\xf6\x94\x04(\xf7\x94\x04X\xf4\x94\x04`\xf8\x94\x04\x08\xf6\x94\x04\xc8\xff\x94\x04\xa0\xfd\x94\x04\x90\xf2\x94\x04h\xf3\x94\x04@\xf1\x94\x04@\xfa\x94\x04\xe8\xfd\x94\x04\xe8\xfa\x94\x04\xe0\xf6\x94\x04\xf0\xf5\x94\x04\xf0\xf8\x94\x04\x00\xf8\x94\x040\xfe\x94\x04\xd0\xf7\x94\x048\xf6\x94\x04x\xfb\x94\x04\x18\xf8\x94\x04\xf8\xf9\x94\x04`\xfe\x94\x04h\xf0\x94\x04X\xfa\x94\x04\xb0\xf6\x94\x04P\xf9\x94\x04 \xff\x94\x04\xf0\xfb\x94\x04\x90\xf8\x94\x048\xf0\x94\x04(\xfd\x94\x048\xfc\x94\x04\xa8\xfe\x94\x04\xa8\xf8\x94\x04H\xfe\x94\x04P\xf0\x94\x04\x98\xff\x94\x04\xe0\xff\x94\x04\x08\xfc\x94\x04\xe8\xf7\x94\x04\x18\xf2\x94\x048\xff\x94\x04\xe0\xfc\x94\x04h\xff\x94\x04\x88\xfd\x94\x04@\xf7\x94\x04\xd0\xf1\x94\x04@\xfd\x94\x04p\xfd\x94\x04@!\x9b\x04h\xf6\x94\x04P\xfc\x94\x04\x88\xfa\x94\x04\xc0\xfe\x94\x04\xb0\xfc\x94\x04\xb8\xfd\x94\x04\x80\xff\x94\x04\xd8\xf8\x94\x04\x80\xf0\x94\x04H\xfb\x94\x04\xf8\xfc\x94\x04p\xf1\x94\x04\x90\xfe\x94\x04P\xff\x94\x04\x18\xfe\x94\x04\xc8\xfc\x94\x04\xf0\xfe\x94\x04\x80\xf9\x94\x04\xe0\xf9\x94\x04\x00\xfe\x94\x04X\xfd\x94\x04\x08\xff\x94\x04\xb8\xfa\x94\x04\xd8\xfb\x94\x04P\xf3\x94\x04\xb0\xff\x94\x04\x80?\x98\x04H>\x98\x04X7\x98\x04 ?\x98\x04h9\x98\x04p7\x98\x04\xe09\x98\x04(=\x98\x04\x00>\x98\x04\xe87\x98\x04`;\x98\x04\xf8<\x98\x04\x089\x98\x04 9\x98\x04\x10=\x98\x04\x90;\x98\x04\xc8?\x98\x0408\x98\x04\x104\x98\x04\xf89\x98\x04x5\x98\x04\x884\x98\x04\xb0?\x98\x04\xe03\x98\x04\x98?\x98\x04`\x8b\xd1\x04\x08\x83\xd1\x04\x90\x8e\xd1\x04\xf8\x8c\xd1\x04\xb8\x8a\xd1\x04\x18\x82\xd1\x04\x18\x8e\xd1\x04\xd8\x8e\xd1\x04\xb8\x81\xd1\x048\x80\xd1\x04 \x89\xd1\x04\xe0\x83\xd1\x04\xc8\x8c\xd1\x04\x88\x87\xd1\x04\x10\x8a\xd1\x04X\x8a\xd1\x04\x90\x88\xd1\x04\xc0\x8e\xd1\x04\x10\x87\xd1\x04\xe8\x8d\xd1\x048\x89\xd1\x048\x8f\xd1\x04P\x80\xd1\x04x\x85\xd1\x04P\x83\xd1\x04\xe8\x87\xd1\x04`\xf2\x94\x048\xf9\x94\x04 \xf3\x94\x04\x10\xfa\x94\x04\xd0\xfa\x94\x04\xf8\xf6\x94\x04\x10\xf7\x94\x04\xb0\xf9\x94\x04\x98\xf0\x94\x04\xf8\xf0\x94\x04\x80\xfc\x94\x04\xc0\xf8\x94\x04\x08\xf9\x94\x04\x80\xf6\x94\x04\x98\xfc\x94\x04 \xfc\x94\x04\x88\xf7\x94\x04\xc8\xf3\x94\x04 \xf0\x94\x04\xe8\xf1\x94\x04\xd0\xfd\x94\x04 \xf9\x94\x04\x88\xf1\x94\x04(\xfa\x94\x04h\xf9\x94\x04X\xf7\x94\x040\xf8\x94\x04\x10\xfd\x94\x04\xb8\xf7\x94\x04\xb0\xf0\x94\x04x\xf5\x94\x04\xf8\xf3\x94\x04\xb8\xf1\x94\x04\xa8\xf5\x94\x04\x10\xf1\x94\x04P\xf6\x94\x04p\xfa\x94\x04\xc8\xf0\x94\x04\x98\xf9\x94\x04\x98\xf3\x94\x04p\xf7\x94\x04\x18\xfb\x94\x040\xfb\x94\x04\xb0\xf3\x94\x04\x90\xfb\x94\x04\xa0\xfa\x94\x04H\xf8\x94\x04\xc0\xf5\x94\x04x\xf8\x94\x04\xa0\xf7\x94\x048\xf3\x94\x040\xf2\x94\x04\x00\xfb\x94\x04(\xf1\x94\x04\xc8\xf9\x94\x04\x90\xf5\x94\x04\xc8\xf6\x94\x04\xd8\xf5\x94\x04\xa0\xf1\x94\x04\x08\xf3\x94\x04H\xf2\x94\x04\x80\xf3\x94\x04x\xfe\x94\x04X\xf1\x94\x04h\xfc\x94\x04\xa8\xfb\x94\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3637
sg3632
g3670
sg3646
g3647
sg3641
g3677
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3689
sg3632
g3685
sg3646
g3696
sg3641
g3693
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3706
sg3632
g3702
sg3646
g3713
sg3641
g3710
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3848
sg3632
g3838
sg3646
g3842
sg3641
g3846
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3706
sg3632
g3702
sg3646
g3713
sg3641
g3710
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3637
sg3632
g3670
sg3646
g3647
sg3641
g3677
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3740
sg3632
g3971
sg3646
g3747
sg3641
g3978
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3958
sg3632
g3986
sg3646
g3965
sg3641
g3993
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3848
sg3632
g3838
sg3646
g3842
sg3641
g3846
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3958
sg3632
g3986
sg3646
g3965
sg3641
g3993
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4050
sg3632
g4040
sg3646
g4044
sg3641
g4048
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3848
sg3632
g4057
sg3646
g3842
sg3641
g4064
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3898
sg3632
g4085
sg3646
g3905
sg3641
g4092
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3637
sg3632
g3670
sg3646
g3647
sg3641
g3677
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3848
sg3632
g3838
sg3646
g3842
sg3641
g3846
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3657
sg3632
g4165
sg3646
g3664
sg3641
g4172
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3825
sg3632
g4180
sg3646
g3832
sg3641
g4187
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3706
sg3632
g4195
sg3646
g3713
sg3641
g4202
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g4214
sg3632
g4210
sg3646
g4221
sg3641
g4218
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3848
sg3632
g4057
sg3646
g3842
sg3641
g4064
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g4244
sg3632
g4240
sg3646
g4251
sg3641
g4248
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3808
sg3632
g4270
sg3646
g3815
sg3641
g4277
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3928
sg3632
g4285
sg3646
g3935
sg3641
g4292
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3958
sg3632
g3986
sg3646
g3965
sg3641
g3993
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4050
sg3632
g4040
sg3646
g4044
sg3641
g4048
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3791
sg3632
g4326
sg3646
g3798
sg3641
g4333
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3958
sg3632
g3986
sg3646
g3965
sg3641
g3993
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3898
sg3632
g4085
sg3646
g3905
sg3641
g4092
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3637
sg3632
g3670
sg3646
g3647
sg3641
g3677
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3757
sg3632
g4380
sg3646
g3764
sg3641
g4387
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3848
sg3632
g4057
sg3646
g3842
sg3641
g4064
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4244
sg3632
g4408
sg3646
g4251
sg3641
g4415
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3706
sg3632
g4195
sg3646
g3713
sg3641
g4202
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4440
sg3632
g4436
sg3646
g4447
sg3641
g4444
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4244
sg3632
g4240
sg3646
g4251
sg3641
g4248
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3689
sg3632
g3685
sg3646
g3696
sg3641
g3693
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g4214
sg3632
g4479
sg3646
g4221
sg3641
g4486
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g4498
sg3632
g4494
sg3646
g4505
sg3641
g4502
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3706
sg3632
g3702
sg3646
g3713
sg3641
g3710
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3774
sg3632
g4524
sg3646
g3781
sg3641
g4531
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3740
sg3632
g3971
sg3646
g3747
sg3641
g3978
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3757
sg3632
g4380
sg3646
g3764
sg3641
g4387
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g4440
sg3632
g4436
sg3646
g4447
sg3641
g4444
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g4498
sg3632
g4494
sg3646
g4505
sg3641
g4502
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3723
sg3632
g4617
sg3646
g3730
sg3641
g4624
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3898
sg3632
g4085
sg3646
g3905
sg3641
g4092
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g4244
sg3632
g4240
sg3646
g4251
sg3641
g4248
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g4440
sg3632
g4436
sg3646
g4447
sg3641
g4444
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g4214
sg3632
g4479
sg3646
g4221
sg3641
g4486
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3774
sg3632
g4524
sg3646
g3781
sg3641
g4531
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g4440
sg3632
g4749
sg3646
g4447
sg3641
g4756
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3928
sg3632
g4285
sg3646
g3935
sg3641
g4292
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3740
sg3632
g3971
sg3646
g3747
sg3641
g3978
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4440
sg3632
g4749
sg3646
g4447
sg3641
g4756
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3808
sg3632
g4270
sg3646
g3815
sg3641
g4277
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3637
sg3632
g3670
sg3646
g3647
sg3641
g3677
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4498
sg3632
g4829
sg3646
g4505
sg3641
g4836
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3723
sg3632
g4617
sg3646
g3730
sg3641
g4624
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3791
sg3632
g4326
sg3646
g3798
sg3641
g4333
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3689
sg3632
g4870
sg3646
g3696
sg3641
g4877
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g4244
sg3632
g4408
sg3646
g4251
sg3641
g4415
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4498
sg3632
g4494
sg3646
g4505
sg3641
g4502
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3689
sg3632
g4870
sg3646
g3696
sg3641
g4877
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3808
sg3632
g4270
sg3646
g3815
sg3641
g4277
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3928
sg3632
g4285
sg3646
g3935
sg3641
g4292
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3825
sg3632
g4180
sg3646
g3832
sg3641
g4187
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3689
sg3632
g4870
sg3646
g3696
sg3641
g4877
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3825
sg3632
g4180
sg3646
g3832
sg3641
g4187
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3740
sg3632
g3971
sg3646
g3747
sg3641
g3978
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3791
sg3632
g4326
sg3646
g3798
sg3641
g4333
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g4440
sg3632
g4436
sg3646
g4447
sg3641
g4444
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3898
sg3632
g4085
sg3646
g3905
sg3641
g4092
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3689
sg3632
g3685
sg3646
g3696
sg3641
g3693
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g4498
sg3632
g4494
sg3646
g4505
sg3641
g4502
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g4214
sg3632
g4479
sg3646
g4221
sg3641
g4486
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3791
sg3632
g4326
sg3646
g3798
sg3641
g4333
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g4214
sg3632
g4210
sg3646
g4221
sg3641
g4218
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3706
sg3632
g4195
sg3646
g3713
sg3641
g4202
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3740
sg3632
g3736
sg3646
g3747
sg3641
g3744
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3706
sg3632
g4195
sg3646
g3713
sg3641
g4202
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3848
sg3632
g3838
sg3646
g3842
sg3641
g3846
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3958
sg3632
g3986
sg3646
g3965
sg3641
g3993
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g4050
sg3632
g5275
sg3646
g4044
sg3641
g5282
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g4050
sg3632
g4040
sg3646
g4044
sg3641
g4048
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g4214
sg3632
g4210
sg3646
g4221
sg3641
g4218
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3848
sg3632
g4057
sg3646
g3842
sg3641
g4064
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3791
sg3632
g4326
sg3646
g3798
sg3641
g4333
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g4498
sg3632
g4829
sg3646
g4505
sg3641
g4836
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3706
sg3632
g4195
sg3646
g3713
sg3641
g4202
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g4244
sg3632
g4408
sg3646
g4251
sg3641
g4415
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3928
sg3632
g4285
sg3646
g3935
sg3641
g4292
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3928
sg3632
g4285
sg3646
g3935
sg3641
g4292
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g4498
sg3632
g4829
sg3646
g4505
sg3641
g4836
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3706
sg3632
g3702
sg3646
g3713
sg3641
g3710
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3689
sg3632
g4870
sg3646
g3696
sg3641
g4877
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4214
sg3632
g4210
sg3646
g4221
sg3641
g4218
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g4244
sg3632
g4240
sg3646
g4251
sg3641
g4248
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g4244
sg3632
g4408
sg3646
g4251
sg3641
g4415
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g4498
sg3632
g4829
sg3646
g4505
sg3641
g4836
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3657
sg3632
g4165
sg3646
g3664
sg3641
g4172
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3808
sg3632
g4270
sg3646
g3815
sg3641
g4277
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3723
sg3632
g4617
sg3646
g3730
sg3641
g4624
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3825
sg3632
g4180
sg3646
g3832
sg3641
g4187
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3689
sg3632
g3685
sg3646
g3696
sg3641
g3693
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g4214
sg3632
g4479
sg3646
g4221
sg3641
g4486
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g4498
sg3632
g4494
sg3646
g4505
sg3641
g4502
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3848
sg3632
g4057
sg3646
g3842
sg3641
g4064
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g4050
sg3632
g5275
sg3646
g4044
sg3641
g5282
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g4440
sg3632
g4749
sg3646
g4447
sg3641
g4756
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3808
sg3632
g3804
sg3646
g3815
sg3641
g3812
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3706
sg3632
g3702
sg3646
g3713
sg3641
g3710
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3848
sg3632
g3838
sg3646
g3842
sg3641
g3846
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3657
sg3632
g4165
sg3646
g3664
sg3641
g4172
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3774
sg3632
g4524
sg3646
g3781
sg3641
g4531
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3740
sg3632
g3971
sg3646
g3747
sg3641
g3978
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g4050
sg3632
g4040
sg3646
g4044
sg3641
g4048
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3757
sg3632
g3753
sg3646
g3764
sg3641
g3761
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3723
sg3632
g4617
sg3646
g3730
sg3641
g4624
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3825
sg3632
g3821
sg3646
g3832
sg3641
g3829
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g4050
sg3632
g5275
sg3646
g4044
sg3641
g5282
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3757
sg3632
g4380
sg3646
g3764
sg3641
g4387
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4050
sg3632
g5275
sg3646
g4044
sg3641
g5282
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4244
sg3632
g4408
sg3646
g4251
sg3641
g4415
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g4440
sg3632
g4749
sg3646
g4447
sg3641
g4756
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3898
sg3632
g4085
sg3646
g3905
sg3641
g4092
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3757
sg3632
g4380
sg3646
g3764
sg3641
g4387
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3723
sg3632
g3719
sg3646
g3730
sg3641
g3727
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3808
sg3632
g4270
sg3646
g3815
sg3641
g4277
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3689
sg3632
g4870
sg3646
g3696
sg3641
g4877
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g4498
sg3632
g4829
sg3646
g4505
sg3641
g4836
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3774
sg3632
g4524
sg3646
g3781
sg3641
g4531
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g4440
sg3632
g4436
sg3646
g4447
sg3641
g4444
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g4050
sg3632
g4040
sg3646
g4044
sg3641
g4048
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g4214
sg3632
g4210
sg3646
g4221
sg3641
g4218
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g4244
sg3632
g4240
sg3646
g4251
sg3641
g4248
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g4050
sg3632
g5275
sg3646
g4044
sg3641
g5282
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3958
sg3632
g3954
sg3646
g3965
sg3641
g3962
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3657
sg3632
g4165
sg3646
g3664
sg3641
g4172
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3825
sg3632
g4180
sg3646
g3832
sg3641
g4187
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3757
sg3632
g4380
sg3646
g3764
sg3641
g4387
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3774
sg3632
g4524
sg3646
g3781
sg3641
g4531
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3657
sg3632
g4165
sg3646
g3664
sg3641
g4172
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3689
sg3632
g3685
sg3646
g3696
sg3641
g3693
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3898
sg3632
g3894
sg3646
g3905
sg3641
g3902
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3723
sg3632
g4617
sg3646
g3730
sg3641
g4624
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g4440
sg3632
g4749
sg3646
g4447
sg3641
g4756
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3791
sg3632
g3787
sg3646
g3798
sg3641
g3795
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g4214
sg3632
g4479
sg3646
g4221
sg3641
g4486
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I83362640
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'Pb\xdf\x13hC\xdf\x13 \\\xde\x13xb\xdf\x13\xa0-\x0b\x0exb\xdf\x13\xa0C\xdf\x13\xa0b\xdf\x13\xc8b\xdf\x13\xd8C\xdf\x13\xf0b\xdf\x13\xe0"\x0b\x0ehC\xdf\x13\x08d\xdf\x13\x80\xe1i\x04\x10]\xde\x13\xa0b\xdf\x13P\\\xde\x13 \\\xde\x13\x80\\\xde\x13hC\xdf\x13\xe0"\x0b\x0ePb\xdf\x13HD\xdf\x13\xf0b\xdf\x13\xc8b\xdf\x13\x10D\xdf\x13\x18c\xdf\x13\xd8C\xdf\x13\xb8D\xdf\x13p]\xde\x13\xc8b\xdf\x13\xb0\\\xde\x13\xf0b\xdf\x13@c\xdf\x13\xe0\\\xde\x13\x10]\xde\x13\x10D\xdf\x13HD\xdf\x13\x80\\\xde\x13hc\xdf\x13\xd8C\xdf\x13\xa0b\xdf\x13\xa0]\xde\x13 \\\xde\x13HD\xdf\x13\xd0]\xde\x13 \\\xde\x13P\\\xde\x13@c\xdf\x13\xd0]\xde\x13\xd8C\xdf\x13@c\xdf\x13\xa0C\xdf\x13HD\xdf\x13P\\\xde\x13Xd\xdf\x13\x00/\x0b\x0e\xa0C\xdf\x13\xe0\\\xde\x13 \\\xde\x13\x10]\xde\x13\xe0c\xdf\x13\xe0\\\xde\x13P\\\xde\x13\xb0\\\xde\x13hC\xdf\x13\xa8d\xdf\x13HD\xdf\x13 \\\xde\x13\x08d\xdf\x13HD\xdf\x13\xb8D\xdf\x13\xa0C\xdf\x13xb\xdf\x13\xc8b\xdf\x13\xa0C\xdf\x13\xe0\\\xde\x13\x80\\\xde\x13hC\xdf\x13`\xe7i\x04\x80\xe1i\x04hc\xdf\x13HD\xdf\x13\x80\\\xde\x13@c\xdf\x13P\\\xde\x13Pb\xdf\x13xb\xdf\x13Pb\xdf\x13\xd8C\xdf\x13\x10D\xdf\x13\xb0\\\xde\x13@]\xde\x13hc\xdf\x13\x80\xe1i\x04Pb\xdf\x13\xa0b\xdf\x13\xf0b\xdf\x13`\xe7i\x04P\\\xde\x13`\xe7i\x04\xe0\\\xde\x13\x80\xe1i\x04\xf0b\xdf\x13\xb0\\\xde\x13@]\xde\x130d\xdf\x13\x80D\xdf\x13P\\\xde\x13xb\xdf\x13\x18c\xdf\x13\xa0]\xde\x13\xa8d\xdf\x13xb\xdf\x13\xc8b\xdf\x13xb\xdf\x13\x00/\x0b\x0ehc\xdf\x13\xe0\\\xde\x13\x10D\xdf\x13\x18c\xdf\x13@c\xdf\x13\x10D\xdf\x13Pb\xdf\x13\x10D\xdf\x13\xa0-\x0b\x0e0^\xde\x13\xe0\\\xde\x13@c\xdf\x13\x18c\xdf\x130d\xdf\x13hC\xdf\x13\xd8C\xdf\x13\x80\xe1i\x04@c\xdf\x13\xe0\\\xde\x13\xd8C\xdf\x13\x10D\xdf\x130^\xde\x13\xa0C\xdf\x13hc\xdf\x13 "\x0b\x0e\xe0\\\xde\x13hc\xdf\x13\xc8b\xdf\x13p]\xde\x13@c\xdf\x13\x18c\xdf\x13Pb\xdf\x13\x80\\\xde\x13\xc8b\xdf\x13 \\\xde\x13\xd0]\xde\x13`\xe7i\x04\xd8C\xdf\x13\x18c\xdf\x13\x80\xe1i\x04\xa0b\xdf\x13\xe0\\\xde\x13\xa0b\xdf\x13\x80\xe1i\x04\xa0b\xdf\x13`\xe7i\x04\x80\xe1i\x04\xe0"\x0b\x0e\xb0\\\xde\x13hc\xdf\x13\xb8D\xdf\x13`\xe7i\x04hc\xdf\x13 "\x0b\x0e\xd8C\xdf\x13\xd0]\xde\x13HD\xdf\x13\x18c\xdf\x13\x80\\\xde\x13\xb0\\\xde\x13\xf0b\xdf\x13\xa0b\xdf\x13\xc8b\xdf\x13xb\xdf\x13\xe0c\xdf\x13`\xe7i\x04\x80\\\xde\x13@c\xdf\x13xb\xdf\x13\xf0b\xdf\x13\xb8c\xdf\x13\x08d\xdf\x13\xa0C\xdf\x13\x80\\\xde\x13hC\xdf\x13Pb\xdf\x13\xa0-\x0b\x0eP\\\xde\x13 \\\xde\x13@c\xdf\x13HD\xdf\x13\xa8d\xdf\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\xcb\xdf\x13\xa0\xca\xdf\x13`\xca\xdf\x13@\xcc\xdf\x13`\xcc\xdf\x13\x00\xcb\xdf\x13 \xcc\xdf\x13 \xcb\xdf\x13\x00\xcd\xdf\x13 \xcd\xdf\x13\xe0\xcb\xdf\x13@\xcb\xdf\x13\xe0\xcc\xdf\x13@\xcd\xdf\x13 \xca\xdf\x13\xa0\xcc\xdf\x13\xc0\xca\xdf\x13\x00\xce\xdf\x13`\xcd\xdf\x13\x00\xca\xdf\x13\xe0\xc9\xdf\x13\xa0\xce\xdf\x13\xc0\xcd\xdf\x13@\xca\xdf\x13\x00\xcf\xdf\x13 \xcf\xdf\x13\xa0\xcd\xdf\x13\xe0\xce\xdf\x13\x80\xcf\xdf\x13\xc0\xcf\xdf\x13@\xcf\xdf\x13`\xcb\xdf\x13\xe0\xcf\xdf\x13\xc0\xcb\xdf\x13\xa0\xcf\xdf\x13`\xcf\xdf\x13\xe0\xcd\xdf\x13`\xce\xdf\x13\xc0\xcc\xdf\x13\xc0\xce\xdf\x13@\xce\xdf\x13\xa0\xcb\xdf\x13 \xce\xdf\x13\xe0\xca\xdf\x13\x00\xcc\xdf\x13\x80\xcd\xdf\x13\x80\xca\xdf\x13\x80\xce\xdf\x13\xc0a\xf4\x13@b\xf4\x13\xa0a\xf4\x13`b\xf4\x13\x80b\xf4\x13\xc0b\xf4\x13\x00a\xf4\x13\xa0`\xf4\x13\xe0b\xf4\x13@c\xf4\x13 c\xf4\x13\xe0a\xf4\x13`c\xf4\x13\x80c\xf4\x13\xe0c\xf4\x13\xc0c\xf4\x13\x80`\xf4\x13@d\xf4\x13`d\xf4\x13 a\xf4\x13\xc0`\xf4\x13\xc0d\xf4\x13\xa0d\xf4\x13\x00c\xf4\x13\xe0d\xf4\x13\x00e\xf4\x13 e\xf4\x13@e\xf4\x13\xa0e\xf4\x13\x80e\xf4\x13 b\xf4\x13\xc0e\xf4\x13\xe0e\xf4\x13@f\xf4\x13 f\xf4\x13\x80d\xf4\x13\xa0f\xf4\x13\x80f\xf4\x13\xe0f\xf4\x13\xc0f\xf4\x13\xe0`\xf4\x13\x00g\xf4\x13 g\xf4\x13\x80g\xf4\x13\xa0g\xf4\x13\xc0g\xf4\x13\xa0b\xf4\x13\x00d\xf4\x13\xe0g\xf4\x13\x00h\xf4\x13`h\xf4\x13\x80h\xf4\x13`f\xf4\x13\x80a\xf4\x13\xe0h\xf4\x13\xc0h\xf4\x13 `\xf4\x13@i\xf4\x13`i\xf4\x13\x80i\xf4\x13`g\xf4\x13\x00b\xf4\x13\xe0i\xf4\x13\xc0i\xf4\x13 h\xf4\x13\x00j\xf4\x13`j\xf4\x13@j\xf4\x13\xa0h\xf4\x13\x80j\xf4\x13\xa0j\xf4\x13\xc0j\xf4\x13\xe0j\xf4\x13\x00k\xf4\x13`k\xf4\x13@k\xf4\x13\xa0k\xf4\x13\x80k\xf4\x13\xe0k\xf4\x13\xc0k\xf4\x13 d\xf4\x13\x00l\xf4\x13`l\xf4\x13\x80l\xf4\x13@`\xf4\x13\xc0l\xf4\x13\xe0l\xf4\x13`e\xf4\x13 m\xf4\x13\x00m\xf4\x13`m\xf4\x13@m\xf4\x13\xa0i\xf4\x13\x80m\xf4\x13\xa0m\xf4\x13\xc0m\xf4\x13\xe0m\xf4\x13\x00n\xf4\x13 n\xf4\x13\x80n\xf4\x13`n\xf4\x13\xc0n\xf4\x13\xa0n\xf4\x13@a\xf4\x13 o\xf4\x13@o\xf4\x13`o\xf4\x13\x80o\xf4\x13 j\xf4\x13\xe0o\xf4\x13\x00i\xf4\x13 k\xf4\x13`a\xf4\x13\xa0o\xf4\x13\xa0l\xf4\x13 l\xf4\x13\x00f\xf4\x13@n\xf4\x13\x00o\xf4\x13\xe0n\xf4\x13@h\xf4\x13\xc0o\xf4\x13@g\xf4\x13 i\xf4\x13``\xf4\x13\xa0\xb9\n\x0e`\xf3\xdd\r\x800\x1b\x14\xe01\x1b\x14@1\x1b\x14\xc02\x1b\x14`2\x1b\x14\xa02\x1b\x14\x802\x1b\x14 1\x1b\x14 3\x1b\x14@3\x1b\x14\xc00\x1b\x14`0\x1b\x14`3\x1b\x14\x803\x1b\x14\xa03\x1b\x14\xc03\x1b\x14\xe03\x1b\x14\x004\x1b\x14`4\x1b\x14@4\x1b\x14\xc01\x1b\x14\x804\x1b\x14\xe04\x1b\x14\x005\x1b\x14 4\x1b\x14'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\x86\xf5\xee?I\xdaL?\x1b\x7f7?\xbb6\xf3?\x83#\x91?\x85\x01\x00@\xfa\xd2\x8c?\xa6E\x14@\xda\x9e\xb9?\xcb\x97\xa8?\x01\xa9j?\x01\xdcL?\xb7\x01\xc0?P_U?wH\x84?\x05$\x12@>\x03\x80?\xde\xd2\xec?\x9a\xe4\xfd?\r\x90\xa8?\xc9\xf5\x8e?\xd2\x9b\t@lof?\xd0&\xa2?!u\x86?\xc2\xd0\xac?XH\x84?\xe5\xc3{?\x0b~\x97?g\x0co?\xfd\xd9L?\x8f\x84w?\'\x08\xa0?\x1a)"?\xe7X\x95?2F\x84?\xa6Y\x95?Mm\x86?\x92\x9c\xb9?\x99m\xa6?\xa5d\xa6?\x86\xf5\x8e?\xbcJ\x84?\x179\xb3?\'8Q?\x9c(\x82?_7\x93?XJ\xe4?\xcd\x03\x80?XDs?\xd97\x93?&\x18Q?\xb6\xb2\x8a?\x0b)b?\xc1\xbc\x8a?O\xb6j?^\x07@?\xb7\xa7Y?\x9c\x0b@?\xe1QD?\xea\xadH?\r\xb1\xca?\xc4\x887?raU?V}\xf7?`&\x02@I\x14A@\xf5%\x82?S\x18\xd1?>\x0c@?\xdcJb?\xa7i\xc6?\x80mf?\xae@s?I\xd5\x8c?\xa1\xee\xdd?\r\x17\x91?W-b?u\x8b\x18@\x15\xc2{?\x8a\x13o?\xe8\x857?\xa2\xd7\xfd?\x1ez\xb7?\x01\xc3\x9b?\x0b2Q?t\x03\xa0?s\x847?\x93I\xa4?\xa8(\x82?\x0byU?7\xf7n?u9\x93?\xd1:3?O^f?\xa0RD?\xc9\x06\xe0?\x8bY\xb5?\xe7\x86H?U\xc1\x9b?\xed\x05\xe0?\xf0\xe3{?\xe6\xb7j?\xf3\xeb\x1d?E}w?\xf1%\xc2?\xa8Jb?\xba\xfen?S\xdaL?\xd7\x94H?\x98\xce\x8c?O\xc0{?\xea\xcd;?\xf4\x02\x00@\xe5QD?\xd7\x90H?)\xca;?\xbc\xdd{?\x9fnw?\xf5~7?\x0f\xb9*?C%\xa2?#\xb1\xaa?\xb1\x867?\xf3cU?.sf?\xc4tf?\x9f\x0cQ?2D3?\x9b\xffn?IJ\x84?\xed\xe1\xbd?\xd5.b?\xa6z\x86??\xb1j?\x8b;s?\xe2\x08\x80?\x05\xae\x8a?\x99\xce\x9b?\x98\xec.@\xb6-b?\xa5\xda]?\xfepf?\xa5\xe3;?o\xfa\x7f?G\x96H?\xba\x1cQ?pND?FgU?\x1b\x19\x91?\x11\x8c\xc8?\rcU?$\x857?^&\x82?\xc7\xc1Y?\xb7\xc3\x9b?\x1a\xb8j?\x82bU?BI\x84?z\x07@?#\xd6L?\xe6KD?$\xc2\xdb?\xee\x9f\xd9?H$\xf1?0QD?\x84|\xf7?\x06\xa7j?L\x16Q?\x04\x98H?|\xc5\x8c?\x9e\x90H?\xb2\xea]?\xb2)b?\x9f\x9a\xc8?\\\xb3*?\xa7\xf5\x8e?py\xb7?\xbd\xba{?\x90\x03^?\x1b\x8dH? \xc9{?b\xf3\x8e?\xa3\x12\xb1?Q\x06\xe0?-\xf5\x8e?\xaci\xc6?\x9aT\x95?\x8e\xdf\r@"\x1a\x91?\xd5\xe3\x9d?\xa9\xe3\xbd?\xd4Y\xf5?T\x14\xd1?\xa5\xb2\x8a?\xec\x06\xa0?\xdf\'\x82?\xb5\xe4\xbd?yy\x17@\xb6\xba\xd3@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xf05\x98\x0483\x98\x04\xe0\xa0\x9a\x04X\xa1\x9a\x04\xc8\xaf\x9a\x04P\xac\x9a\x04\x90\xa8\x9a\x040\xa8\x9a\x04 \xaf\x9a\x04\xe8\xaa\x9a\x04\xe8\xad\x9a\x04\x98\xa9\x9a\x048\xa9\x9a\x04\x80\xa9\x9a\x04\xd8\xa2\x9a\x04@\xaa\x9a\x04\x80\xa3\x9a\x04\x18\xab\x9a\x048\xaf\x9a\x04H\xa8\x9a\x04\xd0\xa7\x9a\x04\x98\xac\x9a\x04`\xa5\x9a\x04`\xa8\x9a\x04@\xa7\x9a\x04p\xad\x9a\x04p\xa7\x9a\x04P\xa9\x9a\x04x\xae\x9a\x04\xf8\xa0\x9a\x04x\xa2\x9a\x040\xae\x9a\x04P\xa3\x9a\x04H\xae\x9a\x04h\xa0\x9a\x04\xc0\xae\x9a\x04\x18\xa8\x9a\x04\xb8\xa4\x9a\x04\x98\xaf\x9a\x04\x80\xa6\x9a\x04Pf\xd9\x04\xe0`\xd9\x04pm\xd9\x04\x18n\xd9\x04\x88d\xd9\x04\x98i\xd9\x04\xc8o\xd9\x04pd\xd9\x04\xe8d\xd9\x04\x08f\xd9\x04\x80o\xd9\x04 `\xd9\x04\x10a\xd9\x048f\xd9\x04\xa0d\xd9\x04\x00e\xd9\x04\xc0h\xd9\x04\x10j\xd9\x04\xe0l\xd9\x04`b\xd9\x04hi\xd9\x04\xb0l\xd9\x04\x98`\xd9\x04pa\xd9\x04\xb8a\xd9\x04He\xd9\x04@m\xd9\x04\xa8h\xd9\x04\xc0e\xd9\x04\xb8d\xd9\x048`\xd9\x04\x08i\xd9\x04h`\xd9\x04Xa\xd9\x04@a\xd9\x04xk\xd9\x04xh\xd9\x04Xg\xd9\x04xe\xd9\x04 f\xd9\x04\x00k\xd9\x04\x18b\xd9\x04\xf8`\xd9\x04\x18h\xd9\x04\x88g\xd9\x04\xa8e\xd9\x04\xd0a\xd9\x04\xf8c\xd9\x04 l\xd9\x04\xb8j\xd9\x04\x90b\xd9\x04\xe8g\xd9\x04\x08o\xd9\x04Pl\xd9\x04\x10g\xd9\x04xb\xd9\x04(a\xd9\x04\xb8g\xd9\x04`h\xd9\x04\x80`\xd9\x04\xf0k\xd9\x04\xc8f\xd9\x04\xd8k\xd9\x04\x08l\xd9\x04\xa0m\xd9\x04\xd0m\xd9\x04\x10m\xd9\x04@j\xd9\x04\xa0j\xd9\x04\x90h\xd9\x04pg\xd9\x04xn\xd9\x04\x18e\xd9\x04Hh\xd9\x04\xb0f\xd9\x04\xe0f\xd9\x04\xc0k\xd9\x04Po\xd9\x04\xf0h\xd9\x04\x18k\xd9\x04Xj\xd9\x04\x00n\xd9\x04@g\xd9\x04`k\xd9\x04\x00b\xd9\x04hl\xd9\x048o\xd9\x04\xb0o\xd9\x048l\xd9\x040n\xd9\x04\xc8l\xd9\x04\xa0a\xd9\x04\x88m\xd9\x04Hn\xd9\x04\x80l\xd9\x04\xd8e\xd9\x04\xa0g\xd9\x04\xd0j\xd9\x04ho\xd9\x048i\xd9\x04\xf8l\xd9\x04 i\xd9\x04\xf8i\xd9\x04\xe8m\xd9\x04\x88a\xd9\x04\xf0e\xd9\x040h\xd9\x04\x98o\xd9\x04\x90k\xd9\x04`e\xd9\x04\x80f\xd9\x04\xe8j\xd9\x04\xf0n\xd9\x04hf\xd9\x04\xd8n\xd9\x04(j\xd9\x04Xm\xd9\x04\xd8h\xd9\x04\xb0i\xd9\x04(m\xd9\x04\xc0n\xd9\x04\xf8f\xd9\x04\x80i\xd9\x04\x80c\xd9\x04\x10d\xd9\x04\xe0i\xd9\x04@d\xd9\x04(g\xd9\x04\xa8k\xd9\x04\x90n\xd9\x04\xd0d\xd9\x04 o\xd9\x04\xc8i\xd9\x04\x88j\xd9\x04\xb8m\xd9\x04\xe0o\xd9\x04\x00h\xd9\x04h\xa9\x9a\x04\x90\xa5\x9a\x04\x88\xad\x9a\x04\x00\xa2\x9a\x04\xf0\xa5\x9a\x04p\xa4\x9a\x04\xb0\xac\x9a\x04\x10\xa4\x9a\x04\x10\xad\x9a\x04\xe8\xa7\x9a\x04\x98\xa0\x9a\x04\xa8\xa2\x9a\x04\xa0\xa1\x9a\x04\xd0\xa1\x9a\x04\xc8\xa0\x9a\x04\xe0\xa6\x9a\x04(\xad\x9a\x04\xc0\xa2\x9a\x04X\xad\x9a\x04\x08\xaf\x9a\x04\xf8\xa6\x9a\x04h\xa6\x9a\x04\x10\xa7\x9a\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6489
sg6370
g6485
sg6384
g6496
sg6379
g6493
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6506
sg6370
g6502
sg6384
g6513
sg6379
g6510
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6540
sg6370
g6536
sg6384
g6547
sg6379
g6544
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6563
sg6370
g6553
sg6384
g6557
sg6379
g6561
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6593
sg6370
g6583
sg6384
g6587
sg6379
g6591
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6395
sg6370
g6617
sg6384
g6402
sg6379
g6624
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6489
sg6370
g6485
sg6384
g6496
sg6379
g6493
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6649
sg6370
g6645
sg6384
g6656
sg6379
g6653
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6679
sg6370
g6675
sg6384
g6686
sg6379
g6683
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6563
sg6370
g6553
sg6384
g6557
sg6379
g6561
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6375
sg6370
g6718
sg6384
g6385
sg6379
g6725
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6737
sg6370
g6733
sg6384
g6744
sg6379
g6741
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6540
sg6370
g6536
sg6384
g6547
sg6379
g6544
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6506
sg6370
g6763
sg6384
g6513
sg6379
g6770
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6563
sg6370
g6778
sg6384
g6557
sg6379
g6785
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6593
sg6370
g6793
sg6384
g6587
sg6379
g6800
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6523
sg6370
g6808
sg6384
g6530
sg6379
g6815
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6540
sg6370
g6823
sg6384
g6547
sg6379
g6830
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6489
sg6370
g6838
sg6384
g6496
sg6379
g6845
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6506
sg6370
g6763
sg6384
g6513
sg6379
g6770
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6870
sg6370
g6866
sg6384
g6877
sg6379
g6874
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6540
sg6370
g6823
sg6384
g6547
sg6379
g6830
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6900
sg6370
g6896
sg6384
g6907
sg6379
g6904
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6395
sg6370
g6617
sg6384
g6402
sg6379
g6624
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6563
sg6370
g6778
sg6384
g6557
sg6379
g6785
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6737
sg6370
g6956
sg6384
g6744
sg6379
g6963
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6679
sg6370
g6675
sg6384
g6686
sg6379
g6683
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6988
sg6370
g6984
sg6384
g6995
sg6379
g6992
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6523
sg6370
g6808
sg6384
g6530
sg6379
g6815
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6489
sg6370
g6485
sg6384
g6496
sg6379
g6493
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6649
sg6370
g6645
sg6384
g6656
sg6379
g6653
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6412
sg6370
g7040
sg6384
g6419
sg6379
g7047
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6737
sg6370
g6733
sg6384
g6744
sg6379
g6741
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6870
sg6370
g6866
sg6384
g6877
sg6379
g6874
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6412
sg6370
g7040
sg6384
g6419
sg6379
g7047
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6649
sg6370
g6645
sg6384
g6656
sg6379
g6653
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6900
sg6370
g6896
sg6384
g6907
sg6379
g6904
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6870
sg6370
g6866
sg6384
g6877
sg6379
g6874
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6900
sg6370
g7146
sg6384
g6907
sg6379
g7153
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6452
sg6370
g7161
sg6384
g6446
sg6379
g7168
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6737
sg6370
g6956
sg6384
g6744
sg6379
g6963
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6649
sg6370
g7189
sg6384
g6656
sg6379
g7196
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6737
sg6370
g6733
sg6384
g6744
sg6379
g6741
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6375
sg6370
g6718
sg6384
g6385
sg6379
g6725
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6452
sg6370
g7161
sg6384
g6446
sg6379
g7168
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6917
sg6370
g7243
sg6384
g6924
sg6379
g7250
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6412
sg6370
g7040
sg6384
g6419
sg6379
g7047
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6395
sg6370
g6617
sg6384
g6402
sg6379
g6624
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6506
sg6370
g6502
sg6384
g6513
sg6379
g6510
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6649
sg6370
g6645
sg6384
g6656
sg6379
g6653
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6870
sg6370
g7323
sg6384
g6877
sg6379
g7330
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g7361
sg6370
g7351
sg6384
g7355
sg6379
g7359
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6737
sg6370
g6733
sg6384
g6744
sg6379
g6741
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6412
sg6370
g7040
sg6384
g6419
sg6379
g7047
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6593
sg6370
g6583
sg6384
g6587
sg6379
g6591
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6737
sg6370
g6956
sg6384
g6744
sg6379
g6963
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6540
sg6370
g6536
sg6384
g6547
sg6379
g6544
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6452
sg6370
g7161
sg6384
g6446
sg6379
g7168
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6506
sg6370
g6763
sg6384
g6513
sg6379
g6770
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6917
sg6370
g7243
sg6384
g6924
sg6379
g7250
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6679
sg6370
g7498
sg6384
g6686
sg6379
g7505
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g7361
sg6370
g7526
sg6384
g7355
sg6379
g7533
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6988
sg6370
g7554
sg6384
g6995
sg6379
g7561
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6737
sg6370
g6733
sg6384
g6744
sg6379
g6741
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6679
sg6370
g7498
sg6384
g6686
sg6379
g7505
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6900
sg6370
g7146
sg6384
g6907
sg6379
g7153
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6649
sg6370
g7189
sg6384
g6656
sg6379
g7196
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6375
sg6370
g6718
sg6384
g6385
sg6379
g6725
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6429
sg6370
g7634
sg6384
g6436
sg6379
g7641
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6563
sg6370
g6778
sg6384
g6557
sg6379
g6785
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6870
sg6370
g7323
sg6384
g6877
sg6379
g7330
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6412
sg6370
g7040
sg6384
g6419
sg6379
g7047
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6988
sg6370
g7554
sg6384
g6995
sg6379
g7561
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6604
sg6370
g7727
sg6384
g6611
sg6379
g7734
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6375
sg6370
g6718
sg6384
g6385
sg6379
g6725
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6489
sg6370
g6485
sg6384
g6496
sg6379
g6493
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6540
sg6370
g6823
sg6384
g6547
sg6379
g6830
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g7361
sg6370
g7351
sg6384
g7355
sg6379
g7359
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6649
sg6370
g7189
sg6384
g6656
sg6379
g7196
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g7361
sg6370
g7526
sg6384
g7355
sg6379
g7533
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6604
sg6370
g7727
sg6384
g6611
sg6379
g7734
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6540
sg6370
g6823
sg6384
g6547
sg6379
g6830
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6870
sg6370
g6866
sg6384
g6877
sg6379
g6874
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6679
sg6370
g6675
sg6384
g6686
sg6379
g6683
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6523
sg6370
g6808
sg6384
g6530
sg6379
g6815
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6649
sg6370
g6645
sg6384
g6656
sg6379
g6653
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6429
sg6370
g7634
sg6384
g6436
sg6379
g7641
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6593
sg6370
g6583
sg6384
g6587
sg6379
g6591
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6649
sg6370
g7189
sg6384
g6656
sg6379
g7196
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g7361
sg6370
g7526
sg6384
g7355
sg6379
g7533
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6429
sg6370
g7634
sg6384
g6436
sg6379
g7641
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6506
sg6370
g6502
sg6384
g6513
sg6379
g6510
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6429
sg6370
g7634
sg6384
g6436
sg6379
g7641
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6988
sg6370
g7554
sg6384
g6995
sg6379
g7561
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6563
sg6370
g6553
sg6384
g6557
sg6379
g6561
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6593
sg6370
g6793
sg6384
g6587
sg6379
g6800
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6900
sg6370
g6896
sg6384
g6907
sg6379
g6904
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6563
sg6370
g6778
sg6384
g6557
sg6379
g6785
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6375
sg6370
g6718
sg6384
g6385
sg6379
g6725
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6563
sg6370
g6778
sg6384
g6557
sg6379
g6785
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6988
sg6370
g7554
sg6384
g6995
sg6379
g7561
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6917
sg6370
g7243
sg6384
g6924
sg6379
g7250
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6900
sg6370
g7146
sg6384
g6907
sg6379
g7153
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6593
sg6370
g6793
sg6384
g6587
sg6379
g6800
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6679
sg6370
g7498
sg6384
g6686
sg6379
g7505
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6395
sg6370
g6617
sg6384
g6402
sg6379
g6624
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6900
sg6370
g7146
sg6384
g6907
sg6379
g7153
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6917
sg6370
g7243
sg6384
g6924
sg6379
g7250
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6523
sg6370
g6519
sg6384
g6530
sg6379
g6527
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6563
sg6370
g6553
sg6384
g6557
sg6379
g6561
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6988
sg6370
g6984
sg6384
g6995
sg6379
g6992
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6452
sg6370
g7161
sg6384
g6446
sg6379
g7168
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6988
sg6370
g6984
sg6384
g6995
sg6379
g6992
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6604
sg6370
g7727
sg6384
g6611
sg6379
g7734
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6917
sg6370
g6913
sg6384
g6924
sg6379
g6921
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6988
sg6370
g7554
sg6384
g6995
sg6379
g7561
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6506
sg6370
g6502
sg6384
g6513
sg6379
g6510
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6489
sg6370
g6838
sg6384
g6496
sg6379
g6845
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6900
sg6370
g6896
sg6384
g6907
sg6379
g6904
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6593
sg6370
g6793
sg6384
g6587
sg6379
g6800
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6679
sg6370
g6675
sg6384
g6686
sg6379
g6683
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6506
sg6370
g6763
sg6384
g6513
sg6379
g6770
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6870
sg6370
g7323
sg6384
g6877
sg6379
g7330
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g7361
sg6370
g7526
sg6384
g7355
sg6379
g7533
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6523
sg6370
g6808
sg6384
g6530
sg6379
g6815
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6593
sg6370
g6793
sg6384
g6587
sg6379
g6800
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6604
sg6370
g7727
sg6384
g6611
sg6379
g7734
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6489
sg6370
g6485
sg6384
g6496
sg6379
g6493
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6917
sg6370
g7243
sg6384
g6924
sg6379
g7250
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6489
sg6370
g6838
sg6384
g6496
sg6379
g6845
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6489
sg6370
g6838
sg6384
g6496
sg6379
g6845
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g7361
sg6370
g7351
sg6384
g7355
sg6379
g7359
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6604
sg6370
g6600
sg6384
g6611
sg6379
g6608
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6563
sg6370
g6553
sg6384
g6557
sg6379
g6561
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6870
sg6370
g6866
sg6384
g6877
sg6379
g6874
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6988
sg6370
g6984
sg6384
g6995
sg6379
g6992
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6540
sg6370
g6823
sg6384
g6547
sg6379
g6830
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g7361
sg6370
g7351
sg6384
g7355
sg6379
g7359
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6988
sg6370
g6984
sg6384
g6995
sg6379
g6992
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6604
sg6370
g7727
sg6384
g6611
sg6379
g7734
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6523
sg6370
g6808
sg6384
g6530
sg6379
g6815
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6870
sg6370
g7323
sg6384
g6877
sg6379
g7330
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6737
sg6370
g6956
sg6384
g6744
sg6379
g6963
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6593
sg6370
g6583
sg6384
g6587
sg6379
g6591
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6679
sg6370
g6675
sg6384
g6686
sg6379
g6683
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6870
sg6370
g7323
sg6384
g6877
sg6379
g7330
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6540
sg6370
g6536
sg6384
g6547
sg6379
g6544
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6489
sg6370
g6838
sg6384
g6496
sg6379
g6845
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6506
sg6370
g6502
sg6384
g6513
sg6379
g6510
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6429
sg6370
g7634
sg6384
g6436
sg6379
g7641
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6506
sg6370
g6763
sg6384
g6513
sg6379
g6770
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g7361
sg6370
g7526
sg6384
g7355
sg6379
g7533
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6679
sg6370
g7498
sg6384
g6686
sg6379
g7505
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6900
sg6370
g6896
sg6384
g6907
sg6379
g6904
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6540
sg6370
g6536
sg6384
g6547
sg6379
g6544
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6593
sg6370
g6583
sg6384
g6587
sg6379
g6591
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6452
sg6370
g7161
sg6384
g6446
sg6379
g7168
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6679
sg6370
g7498
sg6384
g6686
sg6379
g7505
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6395
sg6370
g6617
sg6384
g6402
sg6379
g6624
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6649
sg6370
g7189
sg6384
g6656
sg6379
g7196
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6412
sg6370
g6408
sg6384
g6419
sg6379
g6416
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6900
sg6370
g7146
sg6384
g6907
sg6379
g7153
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6737
sg6370
g6956
sg6384
g6744
sg6379
g6963
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g7361
sg6370
g7351
sg6384
g7355
sg6379
g7359
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.