ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C14_infer_design1_no_eyetracking_2015_Oct_01_1020
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vy
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xb2\xdc\x19A^\x05N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_01_1020
p66
sVparticipant
p67
VC14
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F1.0501239042202997
sg14
S'space'
p88
sg58
g62
sg57
Vy
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vy
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F11.349990078539236
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P5\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F2.7839999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F1.8999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\n\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p102
sg21
F1.8999999999999999
sg69
Vn
sa(dp103
g63
g64
sg20
F10.016999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x1d\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V40-sardines.png
p109
sg21
F1.1000000000000001
sg69
Vn
sa(dp110
g63
g64
sg20
F2.734
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x05\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p116
sg21
F1.2
sg69
Vn
sa(dp117
g63
g64
sg20
F2.1509999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x19\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p123
sg21
F1.3999999999999999
sg69
Vn
sa(dp124
g63
g64
sg20
F1.7669999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x14\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p130
sg21
F1.1000000000000001
sg69
Vn
sa(dp131
g63
g64
sg20
F2.2010000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'"\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p137
sg21
F1.6000000000000001
sg69
Vn
sa(dp138
g63
g64
sg20
F6.9340000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'!\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V44-crunch.png
p144
sg21
F1.5
sg69
Vn
sa(dp145
g63
g64
sg20
F2.117
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'&\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V50-polo.png
p151
sg21
F1.2
sg69
Vn
sa(dp152
g63
g64
sg20
F2.984
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x1c\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p158
sg21
F2
sg69
Vn
sa(dp159
g63
g64
sg20
F2.6339999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x0e\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p165
sg21
F1.8
sg69
Vn
sa(dp166
g63
g64
sg20
F2.4169999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'#\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p172
sg21
F1.3
sg69
Vn
sa(dp173
g63
g64
sg20
F2.4340000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x15\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V29-beans.png
p179
sg21
F1.3999999999999999
sg69
Vn
sa(dp180
g63
g64
sg20
F2.1669999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x0f\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p186
sg21
F1.6000000000000001
sg69
Vn
sa(dp187
g63
g64
sg20
F2.351
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x13\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p193
sg21
F1.3999999999999999
sg69
Vn
sa(dp194
g63
g64
sg20
F2.4340000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x1f\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p200
sg21
F1.5
sg69
Vn
sa(dp201
g63
g64
sg20
F1.984
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x00\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p207
sg21
F1.2
sg69
Vn
sa(dp208
g63
g64
sg20
F2.1669999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x10\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V22-daim.png
p214
sg21
F1.3999999999999999
sg69
Vn
sa(dp215
g63
g64
sg20
F2.0670000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x11\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p221
sg21
F1.2
sg69
Vn
sa(dp222
g63
g64
sg20
F1.8839999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x0b\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p228
sg21
F1.3
sg69
Vn
sa(dp229
g63
g64
sg20
F2.5840000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S' \x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p235
sg21
F2
sg69
Vn
sa(dp236
g63
g64
sg20
F2.3340000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x08\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p242
sg21
F1.6000000000000001
sg69
Vn
sa(dp243
g63
g64
sg20
F2.7839999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x03\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V4-corn.png
p249
sg21
F1.8999999999999999
sg69
Vn
sa(dp250
g63
g64
sg20
F6.351
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.23999999999999846
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'$\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V48-twix.png
p256
sg21
F1.8999999999999999
sg69
Vn
sa(dp257
g63
g64
sg20
F2.8170000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x06\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V7-olives.png
p263
sg21
F2
sg69
Vn
sa(dp264
g63
g64
sg20
F1.8839999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x18\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p270
sg21
F1.3
sg69
Vn
sa(dp271
g63
g64
sg20
F1.851
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x02\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p277
sg21
F1.2
sg69
Vn
sa(dp278
g63
g64
sg20
F2.2010000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\t\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p284
sg21
F1.5
sg69
Vn
sa(dp285
g63
g64
sg20
F2.5179999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x07\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p291
sg21
F1.8999999999999999
sg69
Vn
sa(dp292
g63
g64
sg20
F1.782
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'%\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p298
sg21
F1.1000000000000001
sg69
Vn
sa(dp299
g63
g64
sg20
F2.367
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x01\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p305
sg21
F1.8
sg69
Vn
sa(dp306
g63
g64
sg20
F1.702
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x1e\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p312
sg21
F1.2
sg69
Vn
sa(dp313
g63
g64
sg20
F2.1840000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x04\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p319
sg21
F1.7
sg69
Vn
sa(dp320
g63
g64
sg20
F2.234
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x17\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p326
sg21
F1.7
sg69
Vn
sa(dp327
g63
g64
sg20
F2.1840000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1b\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p333
sg21
F1.3999999999999999
sg69
Vn
sa(dp334
g63
g64
sg20
F2.0169999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x12\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p340
sg21
F1
sg69
Vn
sa(dp341
g63
g64
sg20
F1.8009999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x16\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p347
sg21
F1.3
sg69
Vn
sa(dp348
g63
g64
sg20
F2.3839999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'\x1a\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V35-raisins.png
p354
sg21
F1.8999999999999999
sg69
Vn
sa(dp355
g63
g64
sg20
F5.1840000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.19999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x0c\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V18-mms.png
p361
sg21
F1.1000000000000001
sg69
Vn
sa(dp362
g63
g64
sg20
F3.4169999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.17999999999999849
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S"'\x00\x00\x00"
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V51-mars.png
p368
sg21
F1.8999999999999999
sg69
Vn
sa(dp369
g63
g64
sg20
F2.3010000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\r\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p375
sg21
F1.5
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F2.0334113745557261
sg57
Vy
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p380
sg26
F4.5000000000000009
sg28
F3.6000000000000001
sg58
g62
sg57
Vy
sg80
S'3-ellas_strawberries_apples.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F2.983328239556613
sg27
F4.7670000000000003
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p389
sg26
F4.8000000000000007
sg28
F3.6000000000000001
sg58
g62
sg57
Vy
sg80
S'44-crunch.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F2.2503110434981863
sg27
F1.7010000000000001
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'48-twix.png'
p398
sg26
F5.799999999999998
sg28
F3.3999999999999999
sg58
g62
sg57
Vy
sg80
S'50-polo.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'left'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.2334417091369687
sg27
F2.0670000000000002
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p407
sg26
F4.7000000000000011
sg28
F3.7000000000000002
sg58
g62
sg57
Vy
sg80
S'13-mccoys_steak_crisps.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F3.7501764765585222
sg27
F1.4670000000000001
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p416
sg26
F2.7999999999999994
sg28
F3.3999999999999999
sg58
g62
sg57
Vy
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F4.6500375761073656
sg27
F3.1509999999999998
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p425
sg26
F5.5999999999999988
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'18-mms.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F2.7834946235946063
sg27
F2.6509999999999998
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'49-yorkie.png'
p434
sg26
F4.3000000000000007
sg28
F2.7000000000000002
sg58
g62
sg57
Vy
sg80
S'35-raisins.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F2.3668220648727356
sg27
F2.4169999999999998
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'29-beans.png'
p443
sg26
F3.9000000000000008
sg28
F2.8999999999999999
sg58
g62
sg57
Vy
sg80
S'46-pistachios.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'left'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F3.3167221090061503
sg27
F3.9169999999999998
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p452
sg26
F3.3999999999999999
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'21-nakd_banana_crunch.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F3.6334784299460807
sg27
F4.3840000000000003
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'22-daim.png'
p461
sg26
F2.5999999999999992
sg28
F3.5
sg58
g62
sg57
Vy
sg80
S'7-olives.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F3.2000964776532328
sg27
F1.851
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'25-kitkat.png'
p470
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vy
sg80
S'31-hobnobs.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F2.1667369911972401
sg27
F1.6339999999999999
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'51-mars.png'
p479
sg26
F5.8999999999999977
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'27-hartleys_raspberries_jelly.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.5668045027466633
sg27
F2.468
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p488
sg26
F3.9000000000000008
sg28
F3
sg58
g62
sg57
Vy
sg80
S'42-mrkipling_lemon_slices.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F3.4500175051061888
sg27
F4.1840000000000002
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p497
sg26
F5.1000000000000014
sg28
F2.7999999999999998
sg58
g62
sg57
Vy
sg80
S'23-crunchie_redo.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.8166967351551193
sg27
F2.4340000000000002
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'44-crunch.png'
p506
sg26
F4.3000000000000007
sg28
F4.2000000000000002
sg58
g62
sg57
Vy
sg80
S'26-walkers_smoky_bacon.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F2.3166950245583848
sg27
F5.1509999999999998
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'4-corn.png'
p515
sg26
F4
sg28
F4
sg58
g62
sg57
Vy
sg80
S'10-bounty_redo.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.4167167491364125
sg27
F1.0509999999999999
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p524
sg26
F2.399999999999999
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'38-maltesers.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F4.8501987713354993
sg27
F2.117
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p533
sg26
F5.2000000000000002
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'33-ambrosia_rice.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'left'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.6002013372303736
sg27
F2.2170000000000001
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p542
sg26
F3.5999999999999996
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'2-steamed_puddings.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F4.000053883795772
sg27
F1.2170000000000001
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'7-olives.png'
p551
sg26
F4.6000000000000014
sg28
F3.3999999999999999
sg58
g62
sg57
Vy
sg80
S'22-daim.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.7667590008747993
sg27
F2.6840000000000002
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'40-sardines.png'
p560
sg26
F4.8000000000000016
sg28
F3.2000000000000002
sg58
g62
sg57
Vy
sg80
S'5-pineapple.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'right'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F5.1834677672266025
sg27
F3.0840000000000001
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p569
sg26
F4.5000000000000018
sg28
F2.7000000000000002
sg58
g62
sg57
Vy
sg80
S'19-caramello_redo.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F3.0500808542037703
sg27
F1.984
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p578
sg26
F5.5
sg28
F3
sg58
g62
sg57
Vy
sg80
S'41-peanuts_redo.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.8667536410050616
sg27
F2.601
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p587
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vy
sg80
S'51-mars.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.2335258134742162
sg27
F1.0169999999999999
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'5-pineapple.png'
p596
sg26
F4.4000000000000004
sg28
F3.3999999999999999
sg58
g62
sg57
Vy
sg80
S'40-sardines.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F2.450060270023414
sg27
F2.617
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'46-pistachios.png'
p605
sg26
F4.8000000000000016
sg28
F2.8999999999999999
sg58
g62
sg57
Vy
sg80
S'29-beans.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.833482250278621
sg27
F1.2669999999999999
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p614
sg26
F4.6000000000000014
sg28
F3.6000000000000001
sg58
g62
sg57
Vy
sg80
S'4-corn.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F1.4334403976795329
sg27
F2.2509999999999999
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'50-polo.png'
p623
sg26
F5.1000000000000005
sg28
F3.5
sg58
g62
sg57
Vy
sg80
S'48-twix.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'right'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.0335276951307151
sg27
F2.1669999999999998
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p632
sg26
F3.7000000000000002
sg28
F3.7000000000000002
sg58
g62
sg57
Vy
sg80
S'1-treacle_cookies.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.450183147885582
sg27
F0.61699999999999999
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p641
sg26
F4.6000000000000014
sg28
F2.7999999999999998
sg58
g62
sg57
Vy
sg80
S'8-liquorice_catherine_wheels.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F2.5168468115048199
sg27
F3.734
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p650
sg26
F4.8000000000000016
sg28
F2.8999999999999999
sg58
g62
sg57
Vy
sg80
S'16-skips_prawn.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F2.7165897658419453
sg27
F4.0670000000000002
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'38-maltesers.png'
p659
sg26
F3.8000000000000007
sg28
F2.7999999999999998
sg58
g62
sg57
Vy
sg80
S'6-sour_patch_kids.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.9664398035322392
sg27
F1.2010000000000001
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'35-raisins.png'
p668
sg26
F4.3999999999999986
sg28
F4.2999999999999998
sg58
g62
sg57
Vy
sg80
S'49-yorkie.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'right'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.4667613957101366
sg27
F1.8839999999999999
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'18-mms.png'
p677
sg26
F5.9999999999999973
sg28
F4
sg58
g62
sg57
Vy
sg80
S'43-mrporky_pork_crackles_redo.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F2.0334835047160595
sg27
F1.8839999999999999
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p686
sg26
F4.5000000000000018
sg28
F2.7999999999999998
sg58
g62
sg57
Vy
sg80
S'17-jacobs_mini_cheddars_redo.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F2.1005320525905518
sg27
F2.8010000000000002
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p695
sg26
F3.2999999999999998
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'36-fig_rolls.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'left'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F4.2834638328540677
sg27
F2.3010000000000002
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p704
sg26
F3.6000000000000005
sg28
F2.7000000000000002
sg58
g62
sg57
Vy
sg80
S'20-fruit_pastilles.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'left'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.6335388710290317
sg27
F3.2669999999999999
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p713
sg26
F4.8000000000000016
sg28
F3.2000000000000002
sg58
g62
sg57
Vy
sg80
S'30-spaghetti_hoops.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'left'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.616758772795265
sg27
F1.8839999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p722
sg26
F5.4000000000000004
sg28
F2.7000000000000002
sg58
g62
sg57
Vy
sg80
S'45-chewy_nougat_redo.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.3000851306953791
sg27
F1.3169999999999999
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'31-hobnobs.png'
p731
sg26
F5.2999999999999998
sg28
F3.7000000000000002
sg58
g62
sg57
Vy
sg80
S'25-kitkat.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F1.1501684367540292
sg27
F2.6669999999999998
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vy
sg58
g62
sg30
F279.59408509876403
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vy
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F3.0334584159647875
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p743
sg82
S'37-nakd_cashew_cookie.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'9-yu_mango_pieces.png'
p748
sg33
g748
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x01\n 5\x07\xb4\xa8'
tRp753
sa(dp754
g63
g64
sg81
S'15-walnut_whip.png'
p755
sg82
S'15-walnut_whip.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'28-maple_pecan.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x01\n ;\n\xa6\x90'
tRp764
sa(dp765
g63
g64
sg81
g743
sg82
S'9-yu_mango_pieces.png'
p766
sg56
Vr
sS'practice_loop.thisN'
p767
I2
sS'practice_loop.thisTrialN'
p768
I2
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p769
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p770
sS'practice_loop.thisIndex'
p771
g59
(g98
S'\x02\x00\x00\x00'
tRp772
sg34
g752
(S'\x07\xdf\n\x01\n!\x08\n\xaax'
tRp773
sa(dp774
g63
g64
sg81
S'53-cheestrings.png'
p775
sg82
S'53-cheestrings.png'
p776
sg56
Vr
sS'practice_loop.thisN'
p777
I3
sS'practice_loop.thisTrialN'
p778
I3
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p779
I0
sg83
S'47-picnic.png'
p780
sg33
g775
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p781
sS'practice_loop.thisIndex'
p782
g59
(g98
S'\x03\x00\x00\x00'
tRp783
sg34
g752
(S'\x07\xdf\n\x01\n!\x10\x0f:p'
tRp784
sa(dp785
g63
g64
sg81
S'12-topic.png'
p786
sg82
S'39-mackerel.png'
p787
sg56
Vr
sS'practice_loop.thisN'
p788
I4
sS'practice_loop.thisTrialN'
p789
I4
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p790
I0
sg83
S'39-mackerel.png'
p791
sg33
g786
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\n\x01\n!\x17\x08\xdd\x88'
tRp795
sa(dp796
g63
g64
sg81
S'32-hovis_crackers.png'
p797
sg82
S'24-food_doctor_apple_walnut_bar.png'
p798
sg56
Vr
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\n\x01\n!\x1d\x0e\xecP'
tRp806
sa(dp807
g63
g64
sg81
S'52-aero_mousse.png'
p808
sg82
S'52-aero_mousse.png'
p809
sg56
Vr
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p812
I0
sg83
S'14-discos_salt_vinegar.png'
p813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x01\n!$\x0bi\xe0'
tRp817
sa(dp818
g63
g64
sg81
g786
sg82
S'12-topic.png'
p819
sg56
Vr
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p822
I0
sg83
g791
sg33
g786
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x01\n!+\x06\xf5@'
tRp826
sa(dp827
g63
g64
sg81
S'11-snickers.png'
p828
sg82
S'11-snickers.png'
p829
sg56
Vr
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p832
I0
sg83
S'54-frubes_yogurt.png'
p833
sg33
g828
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\n\x01\n!2\x01O\xf0'
tRp837
sa(dp838
g63
g64
sg81
g808
sg82
S'14-discos_salt_vinegar.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g813
sg33
g813
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x01\n!8\x0e~\xf0'
tRp846
sa(dp847
g63
g64
sg81
g755
sg82
S'28-maple_pecan.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x01\n"\x03\x03\x9d\xc8'
tRp855
sa(dp856
g63
g64
sg81
g797
sg82
S'32-hovis_crackers.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x01\n"\t\n\x9a\xd8'
tRp864
sa(dp865
g63
g64
sg81
g828
sg82
S'54-frubes_yogurt.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g833
sg33
g828
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x01\n"\x10\n\xe8\xf8'
tRp873
sa(dp874
g63
g64
sg81
g775
sg82
S'47-picnic.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g780
sg33
g775
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x01\n"\x16\x0by\x80'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vy
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F5.9834565343082886
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'36-fig_rolls.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'34-hula_hoops_bbq_beef_redo.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
S'36-fig_rolls.png'
p907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
g899
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F2.6668190998384489
sg34
g752
(S'\x07\xdf\n\x01\n",\x07$ '
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'16-skips_prawn.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'16-skips_prawn.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'42-mrkipling_lemon_slices.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
S'42-mrkipling_lemon_slices.png'
p925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p926
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.8999739989303635
sg34
g752
(S'\x07\xdf\n\x01\n"4\x02\xa7\xb0'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'48-twix.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'48-twix.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'50-polo.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p942
I0
sg909
S'50-polo.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.2668756065490925
sg34
g752
(S'\x07\xdf\n\x01\n";\x01\x86\xa0'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'31-hobnobs.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'31-hobnobs.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'25-kitkat.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p959
I0
sg909
S'25-kitkat.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.3501391855506881
sg34
g752
(S'\x07\xdf\n\x01\n#\x05\x06&8'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'26-walkers_smoky_bacon.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'right'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'44-crunch.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'44-crunch.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p976
I0
sg909
S'26-walkers_smoky_bacon.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.266717661454777
sg34
g752
(S'\x07\xdf\n\x01\n#\x0b\x0b\xf2\x98'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'17-jacobs_mini_cheddars_redo.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'left'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'8-liquorice_catherine_wheels.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'8-liquorice_catherine_wheels.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p993
I0
sg909
S'17-jacobs_mini_cheddars_redo.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.3501845163630151
sg34
g752
(S'\x07\xdf\n\x01\n#\x12\x01O\xf0'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'3-ellas_strawberries_apples.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'right'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'13-mccoys_steak_crisps.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'13-mccoys_steak_crisps.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1010
I0
sg909
S'3-ellas_strawberries_apples.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.2668382585211475
sg34
g752
(S'\x07\xdf\n\x01\n#\x18\x07\x1cP'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'45-chewy_nougat_redo.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'right'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
S'45-chewy_nougat_redo.png'
p1021
sg63
g64
sS'trial_loop.thisIndex'
p1022
g59
(g98
S'\x07\x00\x00\x00'
tRp1023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1024
I0
sg903
S'41-peanuts_redo.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg906
S'41-peanuts_redo.png'
p1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1028
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p1029
Nsg69
Vn
sS'block_loop.thisTrialN'
p1030
I0
sg39
F1.2002233469079329
sg34
g752
(S'\x07\xdf\n\x01\n#\x1e\x0b\xbb\xe8'
tRp1031
sa(dp1032
S'trial_loop.thisTrialN'
p1033
I8
sg894
S'8-liquorice_catherine_wheels.png'
p1034
sS'block_loop.thisIndex'
p1035
g888
sg38
S'left'
p1036
sg58
g62
sS'trial_loop.thisN'
p1037
I8
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1038
g59
(g98
S'\x08\x00\x00\x00'
tRp1039
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1040
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1041
sS'block_loop.thisRepN'
p1042
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1043
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vn
sS'block_loop.thisTrialN'
p1045
I0
sg39
F1.5000350672321474
sg34
g752
(S'\x07\xdf\n\x01\n#$\x0f&\xe8'
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
S'10-bounty_redo.png'
p1049
sS'block_loop.thisIndex'
p1050
g888
sg38
S'left'
p1051
sg58
g62
sS'trial_loop.thisN'
p1052
I9
sg33
S'10-bounty_redo.png'
p1053
sg63
g64
sS'trial_loop.thisIndex'
p1054
g59
(g98
S'\t\x00\x00\x00'
tRp1055
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1056
I0
sg903
S'4-corn.png'
p1057
sS'block_loop.thisRepN'
p1058
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1059
I0
sg909
S'4-corn.png'
p1060
sg55
g11
sS'block_loop.thisTrial'
p1061
Nsg69
Vn
sS'block_loop.thisTrialN'
p1062
I0
sg39
F1.933527923210022
sg34
g752
(S'\x07\xdf\n\x01\n#+\x08\x12h'
tRp1063
sa(dp1064
S'trial_loop.thisTrialN'
p1065
I10
sg894
g1017
sS'block_loop.thisIndex'
p1066
g888
sg38
S'left'
p1067
sg58
g62
sS'trial_loop.thisN'
p1068
I10
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1069
g59
(g98
S'\n\x00\x00\x00'
tRp1070
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1071
I0
sg903
g1025
sS'block_loop.thisRepN'
p1072
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1073
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vn
sS'block_loop.thisTrialN'
p1075
I0
sg39
F1.5168490923003901
sg34
g752
(S'\x07\xdf\n\x01\n#2\x07\xac\xd8'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
S'51-mars.png'
p1079
sS'block_loop.thisIndex'
p1080
g888
sg38
S'left'
p1081
sg58
g62
sS'trial_loop.thisN'
p1082
I11
sg33
S'27-hartleys_raspberries_jelly.png'
p1083
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1087
sS'block_loop.thisRepN'
p1088
I0
sg906
S'51-mars.png'
p1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1090
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p1091
Nsg69
Vn
sS'block_loop.thisTrialN'
p1092
I0
sg39
F1.0335416650036677
sg34
g752
(S'\x07\xdf\n\x01\n#9\x00\xd6\xd8'
tRp1093
sa(dp1094
S'trial_loop.thisTrialN'
p1095
I12
sg894
S'25-kitkat.png'
p1096
sS'block_loop.thisIndex'
p1097
g888
sg38
S'right'
p1098
sg58
g62
sS'trial_loop.thisN'
p1099
I12
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1100
g59
(g98
S'\x0c\x00\x00\x00'
tRp1101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1102
I0
sg903
S'31-hobnobs.png'
p1103
sS'block_loop.thisRepN'
p1104
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1105
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1106
Nsg69
Vn
sS'block_loop.thisTrialN'
p1107
I0
sg39
F1.6339334486656298
sg34
g752
(S'\x07\xdf\n\x01\n$\x03\x01\xe0x'
tRp1108
sa(dp1109
S'trial_loop.thisTrialN'
p1110
I13
sg894
g983
sS'block_loop.thisIndex'
p1111
g888
sg38
S'right'
p1112
sg58
g62
sS'trial_loop.thisN'
p1113
I13
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1114
g59
(g98
S'\r\x00\x00\x00'
tRp1115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1116
I0
sg903
g991
sS'block_loop.thisRepN'
p1117
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1118
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1119
Nsg69
Vn
sS'block_loop.thisTrialN'
p1120
I0
sg39
F1.3834028785920509
sg34
g752
(S'\x07\xdf\n\x01\n$\t\x0b\xf6\x80'
tRp1121
sa(dp1122
S'trial_loop.thisTrialN'
p1123
I14
sg894
S'2-steamed_puddings.png'
p1124
sS'block_loop.thisIndex'
p1125
g888
sg38
S'left'
p1126
sg58
g62
sS'trial_loop.thisN'
p1127
I14
sg33
S'2-steamed_puddings.png'
p1128
sg63
g64
sS'trial_loop.thisIndex'
p1129
g59
(g98
S'\x0e\x00\x00\x00'
tRp1130
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1131
I0
sg903
S'20-fruit_pastilles.png'
p1132
sS'block_loop.thisRepN'
p1133
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1134
I0
sg909
S'20-fruit_pastilles.png'
p1135
sg55
g11
sS'block_loop.thisTrial'
p1136
Nsg69
Vn
sS'block_loop.thisTrialN'
p1137
I0
sg39
F1.2667721154493847
sg34
g752
(S'\x07\xdf\n\x01\n$\x10\x02\xfd\xa0'
tRp1138
sa(dp1139
S'trial_loop.thisTrialN'
p1140
I15
sg894
g1049
sS'block_loop.thisIndex'
p1141
g888
sg38
S'left'
p1142
sg58
g62
sS'trial_loop.thisN'
p1143
I15
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1144
g59
(g98
S'\x0f\x00\x00\x00'
tRp1145
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1146
I0
sg903
g1057
sS'block_loop.thisRepN'
p1147
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1148
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p1149
Nsg69
Vn
sS'block_loop.thisTrialN'
p1150
I0
sg39
F1.9500366067691175
sg34
g752
(S'\x07\xdf\n\x01\n$\x16\x07\x99P'
tRp1151
sa(dp1152
S'trial_loop.thisTrialN'
p1153
I16
sg894
S'33-ambrosia_rice.png'
p1154
sS'block_loop.thisIndex'
p1155
g888
sg38
S'right'
p1156
sg58
g62
sS'trial_loop.thisN'
p1157
I16
sg33
S'33-ambrosia_rice.png'
p1158
sg63
g64
sS'trial_loop.thisIndex'
p1159
g59
(g98
S'\x10\x00\x00\x00'
tRp1160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1161
I0
sg903
S'23-crunchie_redo.png'
p1162
sS'block_loop.thisRepN'
p1163
I0
sg906
S'23-crunchie_redo.png'
p1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1165
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p1166
Nsg69
Vn
sS'block_loop.thisTrialN'
p1167
I0
sg39
F1.6501607390689514
sg34
g752
(S'\x07\xdf\n\x01\n$\x1d\x07nX'
tRp1168
sa(dp1169
S'trial_loop.thisTrialN'
p1170
I17
sg894
S'27-hartleys_raspberries_jelly.png'
p1171
sS'block_loop.thisIndex'
p1172
g888
sg38
S'left'
p1173
sg58
g62
sS'trial_loop.thisN'
p1174
I17
sg33
g1089
sg63
g64
sS'trial_loop.thisIndex'
p1175
g59
(g98
S'\x11\x00\x00\x00'
tRp1176
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1177
I0
sg903
S'51-mars.png'
p1178
sS'block_loop.thisRepN'
p1179
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1180
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p1181
Nsg69
Vn
sS'block_loop.thisTrialN'
p1182
I0
sg39
F1.5835398403671661
sg34
g752
(S'\x07\xdf\n\x01\n$$\x02\x80\xa0'
tRp1183
sa(dp1184
S'trial_loop.thisTrialN'
p1185
I18
sg894
S'5-pineapple.png'
p1186
sS'block_loop.thisIndex'
p1187
g888
sg38
S'left'
p1188
sg58
g62
sS'trial_loop.thisN'
p1189
I18
sg33
S'40-sardines.png'
p1190
sg63
g64
sS'trial_loop.thisIndex'
p1191
g59
(g98
S'\x12\x00\x00\x00'
tRp1192
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1193
I0
sg903
S'40-sardines.png'
p1194
sS'block_loop.thisRepN'
p1195
I0
sg906
S'5-pineapple.png'
p1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1197
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p1198
Nsg69
Vn
sS'block_loop.thisTrialN'
p1199
I0
sg39
F1.6167550665022645
sg34
g752
(S'\x07\xdf\n\x01\n$*\x0b\xdf\x10'
tRp1200
sa(dp1201
S'trial_loop.thisTrialN'
p1202
I19
sg894
S'6-sour_patch_kids.png'
p1203
sS'block_loop.thisIndex'
p1204
g888
sg38
S'left'
p1205
sg58
g62
sS'trial_loop.thisN'
p1206
I19
sg33
S'38-maltesers.png'
p1207
sg63
g64
sS'trial_loop.thisIndex'
p1208
g59
(g98
S'\x13\x00\x00\x00'
tRp1209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1210
I0
sg903
S'38-maltesers.png'
p1211
sS'block_loop.thisRepN'
p1212
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1213
I0
sg909
S'6-sour_patch_kids.png'
p1214
sg55
g11
sS'block_loop.thisTrial'
p1215
Nsg69
Vn
sS'block_loop.thisTrialN'
p1216
I0
sg39
F1.3665982618056205
sg34
g752
(S'\x07\xdf\n\x01\n$1\x06\xb2\xd8'
tRp1217
sa(dp1218
S'trial_loop.thisTrialN'
p1219
I20
sg894
S'1-treacle_cookies.png'
p1220
sS'block_loop.thisIndex'
p1221
g888
sg38
S'left'
p1222
sg58
g62
sS'trial_loop.thisN'
p1223
I20
sg33
S'21-nakd_banana_crunch.png'
p1224
sg63
g64
sS'trial_loop.thisIndex'
p1225
g59
(g98
S'\x14\x00\x00\x00'
tRp1226
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1227
I0
sg903
S'21-nakd_banana_crunch.png'
p1228
sS'block_loop.thisRepN'
p1229
I0
sg906
S'1-treacle_cookies.png'
p1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1231
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1232
Nsg69
Vn
sS'block_loop.thisTrialN'
p1233
I0
sg39
F1.5168442456097182
sg34
g752
(S'\x07\xdf\n\x01\n$7\x0c\xbd\xb8'
tRp1234
sa(dp1235
S'trial_loop.thisTrialN'
p1236
I21
sg894
S'4-corn.png'
p1237
sS'block_loop.thisIndex'
p1238
g888
sg38
S'right'
p1239
sg58
g62
sS'trial_loop.thisN'
p1240
I21
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1241
g59
(g98
S'\x15\x00\x00\x00'
tRp1242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1243
I0
sg903
S'10-bounty_redo.png'
p1244
sS'block_loop.thisRepN'
p1245
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1246
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p1247
Nsg69
Vn
sS'block_loop.thisTrialN'
p1248
I0
sg39
F1.3834174186640666
sg34
g752
(S'\x07\xdf\n\x01\n%\x02\x05\xe7\xb8'
tRp1249
sa(dp1250
S'trial_loop.thisTrialN'
p1251
I22
sg894
S'20-fruit_pastilles.png'
p1252
sS'block_loop.thisIndex'
p1253
g888
sg38
S'right'
p1254
sg58
g62
sS'trial_loop.thisN'
p1255
I22
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p1256
g59
(g98
S'\x16\x00\x00\x00'
tRp1257
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1258
I0
sg903
S'2-steamed_puddings.png'
p1259
sS'block_loop.thisRepN'
p1260
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1261
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p1262
Nsg69
Vn
sS'block_loop.thisTrialN'
p1263
I0
sg39
F1.9835657273970355
sg34
g752
(S'\x07\xdf\n\x01\n%\x08\x0c1\x18'
tRp1264
sa(dp1265
S'trial_loop.thisTrialN'
p1266
I23
sg894
S'30-spaghetti_hoops.png'
p1267
sS'block_loop.thisIndex'
p1268
g888
sg38
S'left'
p1269
sg58
g62
sS'trial_loop.thisN'
p1270
I23
sg33
S'19-caramello_redo.png'
p1271
sg63
g64
sS'trial_loop.thisIndex'
p1272
g59
(g98
S'\x17\x00\x00\x00'
tRp1273
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1274
I0
sg903
S'19-caramello_redo.png'
p1275
sS'block_loop.thisRepN'
p1276
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1277
I0
sg909
S'30-spaghetti_hoops.png'
p1278
sg55
g11
sS'block_loop.thisTrial'
p1279
Nsg69
Vn
sS'block_loop.thisTrialN'
p1280
I0
sg39
F2.2834929129978718
sg34
g752
(S'\x07\xdf\n\x01\n%\x0f\x0c\x7f8'
tRp1281
sa(dp1282
S'trial_loop.thisTrialN'
p1283
I24
sg894
S'38-maltesers.png'
p1284
sS'block_loop.thisIndex'
p1285
g888
sg38
S'left'
p1286
sg58
g62
sS'trial_loop.thisN'
p1287
I24
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p1288
g59
(g98
S'\x18\x00\x00\x00'
tRp1289
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1290
I0
sg903
S'6-sour_patch_kids.png'
p1291
sS'block_loop.thisRepN'
p1292
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1293
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p1294
Nsg69
Vn
sS'block_loop.thisTrialN'
p1295
I0
sg39
F1.8165866867682325
sg34
g752
(S'\x07\xdf\n\x01\n%\x17\x02\x13@'
tRp1296
sa(dp1297
S'trial_loop.thisTrialN'
p1298
I25
sg894
S'40-sardines.png'
p1299
sS'block_loop.thisIndex'
p1300
g888
sg38
S'left'
p1301
sg58
g62
sS'trial_loop.thisN'
p1302
I25
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p1303
g59
(g98
S'\x19\x00\x00\x00'
tRp1304
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1305
I0
sg903
S'5-pineapple.png'
p1306
sS'block_loop.thisRepN'
p1307
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1308
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p1309
Nsg69
Vn
sS'block_loop.thisTrialN'
p1310
I0
sg39
F1.2001152942168574
sg34
g752
(S'\x07\xdf\n\x01\n%\x1d\x0f\x03\xc0'
tRp1311
sa(dp1312
S'trial_loop.thisTrialN'
p1313
I26
sg894
S'41-peanuts_redo.png'
p1314
sS'block_loop.thisIndex'
p1315
g888
sg38
S'right'
p1316
sg58
g62
sS'trial_loop.thisN'
p1317
I26
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p1318
g59
(g98
S'\x1a\x00\x00\x00'
tRp1319
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1320
I0
sg903
S'45-chewy_nougat_redo.png'
p1321
sS'block_loop.thisRepN'
p1322
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1323
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p1324
Nsg69
Vn
sS'block_loop.thisTrialN'
p1325
I0
sg39
F0.88350351869735277
sg34
g752
(S'\x07\xdf\n\x01\n%$\x03,\x80'
tRp1326
sa(dp1327
S'trial_loop.thisTrialN'
p1328
I27
sg894
g1096
sS'block_loop.thisIndex'
p1329
g888
sg38
S'right'
p1330
sg58
g62
sS'trial_loop.thisN'
p1331
I27
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1332
g59
(g98
S'\x1b\x00\x00\x00'
tRp1333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1334
I0
sg903
g1103
sS'block_loop.thisRepN'
p1335
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1336
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1337
Nsg69
Vn
sS'block_loop.thisTrialN'
p1338
I0
sg39
F1.3668864973478776
sg34
g752
(S'\x07\xdf\n\x01\n%*\x02\x13@'
tRp1339
sa(dp1340
S'trial_loop.thisTrialN'
p1341
I28
sg894
S'21-nakd_banana_crunch.png'
p1342
sS'block_loop.thisIndex'
p1343
g888
sg38
S'left'
p1344
sg58
g62
sS'trial_loop.thisN'
p1345
I28
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p1346
g59
(g98
S'\x1c\x00\x00\x00'
tRp1347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1348
I0
sg903
S'1-treacle_cookies.png'
p1349
sS'block_loop.thisRepN'
p1350
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1351
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1352
Nsg69
Vn
sS'block_loop.thisTrialN'
p1353
I0
sg39
F2.8834068699843556
sg34
g752
(S'\x07\xdf\n\x01\n%0\x08\x1e '
tRp1354
sa(dp1355
S'trial_loop.thisTrialN'
p1356
I29
sg894
g1252
sS'block_loop.thisIndex'
p1357
g888
sg38
S'left'
p1358
sg58
g62
sS'trial_loop.thisN'
p1359
I29
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p1360
g59
(g98
S'\x1d\x00\x00\x00'
tRp1361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1362
I0
sg903
g1259
sS'block_loop.thisRepN'
p1363
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1364
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vn
sS'block_loop.thisTrialN'
p1366
I0
sg39
F2.4833316607500819
sg34
g752
(S'\x07\xdf\n\x01\n%8\x06\xbe\x90'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
g1299
sS'block_loop.thisIndex'
p1370
g888
sg38
S'left'
p1371
sg58
g62
sS'trial_loop.thisN'
p1372
I30
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p1373
g59
(g98
S'\x1e\x00\x00\x00'
tRp1374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1375
I0
sg903
g1306
sS'block_loop.thisRepN'
p1376
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1377
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vn
sS'block_loop.thisTrialN'
p1379
I0
sg39
F1.1667543822636617
sg34
g752
(S'\x07\xdf\n\x01\n&\x03\x0e\xa9\xe8'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
g1171
sS'block_loop.thisIndex'
p1383
g888
sg38
S'left'
p1384
sg58
g62
sS'trial_loop.thisN'
p1385
I31
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1386
g59
(g98
S'\x1f\x00\x00\x00'
tRp1387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1388
I0
sg903
g1178
sS'block_loop.thisRepN'
p1389
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1390
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p1391
Nsg69
Vn
sS'block_loop.thisTrialN'
p1392
I0
sg39
F1.4834907462420688
sg34
g752
(S'\x07\xdf\n\x01\n&\n\x02\x98\x10'
tRp1393
sa(dp1394
S'trial_loop.thisTrialN'
p1395
I32
sg894
g1017
sS'block_loop.thisIndex'
p1396
g888
sg38
S'left'
p1397
sg58
g62
sS'trial_loop.thisN'
p1398
I32
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p1399
g59
(g98
S' \x00\x00\x00'
tRp1400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1401
I0
sg903
g1025
sS'block_loop.thisRepN'
p1402
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1403
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p1404
Nsg69
Vn
sS'block_loop.thisTrialN'
p1405
I0
sg39
F0.81723699860981469
sg34
g752
(S'\x07\xdf\n\x01\n&\x10\nL\xb8'
tRp1406
sa(dp1407
S'trial_loop.thisTrialN'
p1408
I33
sg894
g949
sS'block_loop.thisIndex'
p1409
g888
sg38
S'left'
p1410
sg58
g62
sS'trial_loop.thisN'
p1411
I33
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1412
g59
(g98
S'!\x00\x00\x00'
tRp1413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1414
I0
sg903
g957
sS'block_loop.thisRepN'
p1415
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1416
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1417
Nsg69
Vn
sS'block_loop.thisTrialN'
p1418
I0
sg39
F1.6000299924621686
sg34
g752
(S'\x07\xdf\n\x01\n&\x16\x08\x02\xc8'
tRp1419
sa(dp1420
S'trial_loop.thisTrialN'
p1421
I34
sg894
g1034
sS'block_loop.thisIndex'
p1422
g888
sg38
S'left'
p1423
sg58
g62
sS'trial_loop.thisN'
p1424
I34
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1425
g59
(g98
S'"\x00\x00\x00'
tRp1426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1427
I0
sg903
g1041
sS'block_loop.thisRepN'
p1428
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1429
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1430
Nsg69
Vn
sS'block_loop.thisTrialN'
p1431
I0
sg39
F0.9667990288371584
sg34
g752
(S'\x07\xdf\n\x01\n&\x1d\x02\x98\x10'
tRp1432
sa(dp1433
S'trial_loop.thisTrialN'
p1434
I35
sg894
S'19-caramello_redo.png'
p1435
sS'block_loop.thisIndex'
p1436
g888
sg38
S'left'
p1437
sg58
g62
sS'trial_loop.thisN'
p1438
I35
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p1439
g59
(g98
S'#\x00\x00\x00'
tRp1440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1441
I0
sg903
S'30-spaghetti_hoops.png'
p1442
sS'block_loop.thisRepN'
p1443
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1444
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p1445
Nsg69
Vn
sS'block_loop.thisTrialN'
p1446
I0
sg39
F1.9501281236921386
sg34
g752
(S'\x07\xdf\n\x01\n&#\x02t\xe8'
tRp1447
sa(dp1448
S'trial_loop.thisTrialN'
p1449
I36
sg894
g1220
sS'block_loop.thisIndex'
p1450
g888
sg38
S'left'
p1451
sg58
g62
sS'trial_loop.thisN'
p1452
I36
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p1453
g59
(g98
S'$\x00\x00\x00'
tRp1454
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1455
I0
sg903
g1228
sS'block_loop.thisRepN'
p1456
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1457
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1458
Nsg69
Vn
sS'block_loop.thisTrialN'
p1459
I0
sg39
F1.1168485791213243
sg34
g752
(S'\x07\xdf\n\x01\n&*\x02I\xf0'
tRp1460
sa(dp1461
S'trial_loop.thisTrialN'
p1462
I37
sg894
g1435
sS'block_loop.thisIndex'
p1463
g888
sg38
S'left'
p1464
sg58
g62
sS'trial_loop.thisN'
p1465
I37
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p1466
g59
(g98
S'%\x00\x00\x00'
tRp1467
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1468
I0
sg903
g1442
sS'block_loop.thisRepN'
p1469
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1470
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p1471
Nsg69
Vn
sS'block_loop.thisTrialN'
p1472
I0
sg39
F2.5835389850687989
sg34
g752
(S'\x07\xdf\n\x01\n&0\x04\x84@'
tRp1473
sa(dp1474
S'trial_loop.thisTrialN'
p1475
I38
sg894
g1124
sS'block_loop.thisIndex'
p1476
g888
sg38
S'left'
p1477
sg58
g62
sS'trial_loop.thisN'
p1478
I38
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p1479
g59
(g98
S'&\x00\x00\x00'
tRp1480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1481
I0
sg903
g1132
sS'block_loop.thisRepN'
p1482
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1483
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p1484
Nsg69
Vn
sS'block_loop.thisTrialN'
p1485
I0
sg39
F1.2501422646248557
sg34
g752
(S'\x07\xdf\n\x01\n&7\r\xde\xc8'
tRp1486
sa(dp1487
S'trial_loop.thisTrialN'
p1488
I39
sg894
S'44-crunch.png'
p1489
sS'block_loop.thisIndex'
p1490
g888
sg38
S'right'
p1491
sg58
g62
sS'trial_loop.thisN'
p1492
I39
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1493
g59
(g98
S"'\x00\x00\x00"
tRp1494
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1495
I0
sg903
S'26-walkers_smoky_bacon.png'
p1496
sS'block_loop.thisRepN'
p1497
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1498
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1499
Nsg69
Vn
sS'block_loop.thisTrialN'
p1500
I0
sg39
F2.7667233634435888
sg34
g752
(S"\x07\xdf\n\x01\n'\x02\x02\xfd\xa0"
tRp1501
sa(dp1502
S'trial_loop.thisTrialN'
p1503
I40
sg894
S'13-mccoys_steak_crisps.png'
p1504
sS'block_loop.thisIndex'
p1505
g888
sg38
S'left'
p1506
sg58
g62
sS'trial_loop.thisN'
p1507
I40
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p1508
g59
(g98
S'(\x00\x00\x00'
tRp1509
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1510
I0
sg903
S'3-ellas_strawberries_apples.png'
p1511
sS'block_loop.thisRepN'
p1512
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1513
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1514
Nsg69
Vn
sS'block_loop.thisTrialN'
p1515
I0
sg39
F2.3500773189703068
sg34
g752
(S"\x07\xdf\n\x01\n'\t\x0f2\xa0"
tRp1516
sa(dp1517
S'trial_loop.thisTrialN'
p1518
I41
sg894
S'18-mms.png'
p1519
sS'block_loop.thisIndex'
p1520
g888
sg38
S'left'
p1521
sg58
g62
sS'trial_loop.thisN'
p1522
I41
sg33
S'18-mms.png'
p1523
sg63
g64
sS'trial_loop.thisIndex'
p1524
g59
(g98
S')\x00\x00\x00'
tRp1525
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1526
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1527
sS'block_loop.thisRepN'
p1528
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1529
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1530
sg55
g11
sS'block_loop.thisTrial'
p1531
Nsg69
Vn
sS'block_loop.thisTrialN'
p1532
I0
sg39
F1.5668447017687868
sg34
g752
(S"\x07\xdf\n\x01\n'\x11\x05\xb8\xd8"
tRp1533
sa(dp1534
S'trial_loop.thisTrialN'
p1535
I42
sg894
S'50-polo.png'
p1536
sS'block_loop.thisIndex'
p1537
g888
sg38
S'right'
p1538
sg58
g62
sS'trial_loop.thisN'
p1539
I42
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1540
g59
(g98
S'*\x00\x00\x00'
tRp1541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1542
I0
sg903
S'48-twix.png'
p1543
sS'block_loop.thisRepN'
p1544
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1545
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1546
Nsg69
Vn
sS'block_loop.thisTrialN'
p1547
I0
sg39
F1.8838655949969052
sg34
g752
(S"\x07\xdf\n\x01\n'\x17\x0f\x17H"
tRp1548
sa(dp1549
S'trial_loop.thisTrialN'
p1550
I43
sg894
S'49-yorkie.png'
p1551
sS'block_loop.thisIndex'
p1552
g888
sg38
S'left'
p1553
sg58
g62
sS'trial_loop.thisN'
p1554
I43
sg33
S'35-raisins.png'
p1555
sg63
g64
sS'trial_loop.thisIndex'
p1556
g59
(g98
S'+\x00\x00\x00'
tRp1557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1558
I0
sg903
S'35-raisins.png'
p1559
sS'block_loop.thisRepN'
p1560
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1561
I0
sg909
S'49-yorkie.png'
p1562
sg55
g11
sS'block_loop.thisTrial'
p1563
Nsg69
Vn
sS'block_loop.thisTrialN'
p1564
I0
sg39
F1.3834436478132375
sg34
g752
(S"\x07\xdf\n\x01\n'\x1e\r\xbb\xa0"
tRp1565
sa(dp1566
S'trial_loop.thisTrialN'
p1567
I44
sg894
g966
sS'block_loop.thisIndex'
p1568
g888
sg38
S'right'
p1569
sg58
g62
sS'trial_loop.thisN'
p1570
I44
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1571
g59
(g98
S',\x00\x00\x00'
tRp1572
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1573
I0
sg903
g974
sS'block_loop.thisRepN'
p1574
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1575
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1576
Nsg69
Vn
sS'block_loop.thisTrialN'
p1577
I0
sg39
F3.3833823514319192
sg34
g752
(S"\x07\xdf\n\x01\n'%\x04\xbe\xd8"
tRp1578
sa(dp1579
S'trial_loop.thisTrialN'
p1580
I45
sg894
g1267
sS'block_loop.thisIndex'
p1581
g888
sg38
S'right'
p1582
sg58
g62
sS'trial_loop.thisN'
p1583
I45
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p1584
g59
(g98
S'-\x00\x00\x00'
tRp1585
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1586
I0
sg903
g1275
sS'block_loop.thisRepN'
p1587
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1588
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p1589
Nsg69
Vn
sS'block_loop.thisTrialN'
p1590
I0
sg39
F1.633411431575496
sg34
g752
(S"\x07\xdf\n\x01\n'-\x0b7\x18"
tRp1591
sa(dp1592
S'trial_loop.thisTrialN'
p1593
I46
sg894
g1342
sS'block_loop.thisIndex'
p1594
g888
sg38
S'right'
p1595
sg58
g62
sS'trial_loop.thisN'
p1596
I46
sg33
g1224
sg63
g64
sS'trial_loop.thisIndex'
p1597
g59
(g98
S'.\x00\x00\x00'
tRp1598
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1599
I0
sg903
g1349
sS'block_loop.thisRepN'
p1600
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1601
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p1602
Nsg69
Vn
sS'block_loop.thisTrialN'
p1603
I0
sg39
F1.3501967756392332
sg34
g752
(S"\x07\xdf\n\x01\n'4\x06\x0e\xc8"
tRp1604
sa(dp1605
S'trial_loop.thisTrialN'
p1606
I47
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1607
sS'block_loop.thisIndex'
p1608
g888
sg38
S'right'
p1609
sg58
g62
sS'trial_loop.thisN'
p1610
I47
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1611
g59
(g98
S'/\x00\x00\x00'
tRp1612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1613
I0
sg903
S'36-fig_rolls.png'
p1614
sS'block_loop.thisRepN'
p1615
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1616
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1617
Nsg69
Vn
sS'block_loop.thisTrialN'
p1618
I0
sg39
F3.6833759652042772
sg34
g752
(S"\x07\xdf\n\x01\n':\x0b\xdb("
tRp1619
sa(dp1620
S'trial_loop.thisTrialN'
p1621
I48
sg894
g1504
sS'block_loop.thisIndex'
p1622
g888
sg38
S'right'
p1623
sg58
g62
sS'trial_loop.thisN'
p1624
I48
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1625
g59
(g98
S'0\x00\x00\x00'
tRp1626
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1627
I0
sg903
g1511
sS'block_loop.thisRepN'
p1628
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1629
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1630
Nsg69
Vn
sS'block_loop.thisTrialN'
p1631
I0
sg39
F1.8335130410189322
sg34
g752
(S'\x07\xdf\n\x01\n(\x07\x07\x95h'
tRp1632
sa(dp1633
S'trial_loop.thisTrialN'
p1634
I49
sg894
g1049
sS'block_loop.thisIndex'
p1635
g888
sg38
S'left'
p1636
sg58
g62
sS'trial_loop.thisN'
p1637
I49
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1638
g59
(g98
S'1\x00\x00\x00'
tRp1639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1640
I0
sg903
g1057
sS'block_loop.thisRepN'
p1641
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1642
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p1643
Nsg69
Vn
sS'block_loop.thisTrialN'
p1644
I0
sg39
F2.1500384314058465
sg34
g752
(S'\x07\xdf\n\x01\n(\x0e\x05\x82('
tRp1645
sa(dp1646
S'trial_loop.thisTrialN'
p1647
I50
sg894
g1171
sS'block_loop.thisIndex'
p1648
g888
sg38
S'left'
p1649
sg58
g62
sS'trial_loop.thisN'
p1650
I50
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1651
g59
(g98
S'2\x00\x00\x00'
tRp1652
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1653
I0
sg903
g1178
sS'block_loop.thisRepN'
p1654
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1655
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p1656
Nsg69
Vn
sS'block_loop.thisTrialN'
p1657
I0
sg39
F1.4168011385731916
sg34
g752
(S'\x07\xdf\n\x01\n(\x15\x08p('
tRp1658
sa(dp1659
S'trial_loop.thisTrialN'
p1660
I51
sg894
g1000
sS'block_loop.thisIndex'
p1661
g888
sg38
S'left'
p1662
sg58
g62
sS'trial_loop.thisN'
p1663
I51
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p1664
g59
(g98
S'3\x00\x00\x00'
tRp1665
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1666
I0
sg903
g1008
sS'block_loop.thisRepN'
p1667
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1668
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1669
Nsg69
Vn
sS'block_loop.thisTrialN'
p1670
I0
sg39
F1.9168054150648004
sg34
g752
(S'\x07\xdf\n\x01\n(\x1b\x0f2\xa0'
tRp1671
sa(dp1672
S'trial_loop.thisTrialN'
p1673
I52
sg894
S'42-mrkipling_lemon_slices.png'
p1674
sS'block_loop.thisIndex'
p1675
g888
sg38
S'left'
p1676
sg58
g62
sS'trial_loop.thisN'
p1677
I52
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1678
g59
(g98
S'4\x00\x00\x00'
tRp1679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1680
I0
sg903
S'16-skips_prawn.png'
p1681
sS'block_loop.thisRepN'
p1682
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1683
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p1684
Nsg69
Vn
sS'block_loop.thisTrialN'
p1685
I0
sg39
F2.3171434859907549
sg34
g752
(S'\x07\xdf\n\x01\n("\x0e\x8a\xa8'
tRp1686
sa(dp1687
S'trial_loop.thisTrialN'
p1688
I53
sg894
S'29-beans.png'
p1689
sS'block_loop.thisIndex'
p1690
g888
sg38
S'left'
p1691
sg58
g62
sS'trial_loop.thisN'
p1692
I53
sg33
S'46-pistachios.png'
p1693
sg63
g64
sS'trial_loop.thisIndex'
p1694
g59
(g98
S'5\x00\x00\x00'
tRp1695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1696
I0
sg903
S'46-pistachios.png'
p1697
sS'block_loop.thisRepN'
p1698
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1699
I0
sg909
S'29-beans.png'
p1700
sg55
g11
sS'block_loop.thisTrial'
p1701
Nsg69
Vn
sS'block_loop.thisTrialN'
p1702
I0
sg39
F1.6667948663853167
sg34
g752
(S'\x07\xdf\n\x01\n(*\x04\x97\xc8'
tRp1703
sa(dp1704
S'trial_loop.thisTrialN'
p1705
I54
sg894
S'35-raisins.png'
p1706
sS'block_loop.thisIndex'
p1707
g888
sg38
S'left'
p1708
sg58
g62
sS'trial_loop.thisN'
p1709
I54
sg33
g1555
sg63
g64
sS'trial_loop.thisIndex'
p1710
g59
(g98
S'6\x00\x00\x00'
tRp1711
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1712
I0
sg903
S'49-yorkie.png'
p1713
sS'block_loop.thisRepN'
p1714
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1715
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p1716
Nsg69
Vn
sS'block_loop.thisTrialN'
p1717
I0
sg39
F1.43351994042564
sg34
g752
(S'\x07\xdf\n\x01\n(0\x0f&\xe8'
tRp1718
sa(dp1719
S'trial_loop.thisTrialN'
p1720
I55
sg894
g1203
sS'block_loop.thisIndex'
p1721
g888
sg38
S'left'
p1722
sg58
g62
sS'trial_loop.thisN'
p1723
I55
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p1724
g59
(g98
S'7\x00\x00\x00'
tRp1725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1726
I0
sg903
g1211
sS'block_loop.thisRepN'
p1727
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1728
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p1729
Nsg69
Vn
sS'block_loop.thisTrialN'
p1730
I0
sg39
F2.7164891257366435
sg34
g752
(S'\x07\xdf\n\x01\n(7\x07 8'
tRp1731
sa(dp1732
S'trial_loop.thisTrialN'
p1733
I56
sg894
g1267
sS'block_loop.thisIndex'
p1734
g888
sg38
S'right'
p1735
sg58
g62
sS'trial_loop.thisN'
p1736
I56
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p1737
g59
(g98
S'8\x00\x00\x00'
tRp1738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1739
I0
sg903
g1275
sS'block_loop.thisRepN'
p1740
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1741
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p1742
Nsg69
Vn
sS'block_loop.thisTrialN'
p1743
I0
sg39
F1.4500500064432345
sg34
g752
(S'\x07\xdf\n\x01\n)\x03\x03_H'
tRp1744
sa(dp1745
S'trial_loop.thisTrialN'
p1746
I57
sg894
g1607
sS'block_loop.thisIndex'
p1747
g888
sg38
S'right'
p1748
sg58
g62
sS'trial_loop.thisN'
p1749
I57
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1750
g59
(g98
S'9\x00\x00\x00'
tRp1751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1752
I0
sg903
g1614
sS'block_loop.thisRepN'
p1753
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1754
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1755
Nsg69
Vn
sS'block_loop.thisTrialN'
p1756
I0
sg39
F1.8335563761352205
sg34
g752
(S'\x07\xdf\n\x01\n)\t\n\x9a\xd8'
tRp1757
sa(dp1758
S'trial_loop.thisTrialN'
p1759
I58
sg894
g1171
sS'block_loop.thisIndex'
p1760
g888
sg38
S'left'
p1761
sg58
g62
sS'trial_loop.thisN'
p1762
I58
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1763
g59
(g98
S':\x00\x00\x00'
tRp1764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1765
I0
sg903
g1178
sS'block_loop.thisRepN'
p1766
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1767
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p1768
Nsg69
Vn
sS'block_loop.thisTrialN'
p1769
I0
sg39
F0.90015731787570985
sg34
g752
(S'\x07\xdf\n\x01\n)\x10\x08\x87\x98'
tRp1770
sa(dp1771
S'trial_loop.thisTrialN'
p1772
I59
sg894
g1000
sS'block_loop.thisIndex'
p1773
g888
sg38
S'left'
p1774
sg58
g62
sS'trial_loop.thisN'
p1775
I59
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1776
g59
(g98
S';\x00\x00\x00'
tRp1777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1778
I0
sg903
g1008
sS'block_loop.thisRepN'
p1779
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1780
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p1781
Nsg69
Vn
sS'block_loop.thisTrialN'
p1782
I0
sg39
F0.93343726158536811
sg34
g752
(S'\x07\xdf\n\x01\n)\x16\x07\xa8\xf0'
tRp1783
sa(dp1784
S'trial_loop.thisTrialN'
p1785
I60
sg894
g932
sS'block_loop.thisIndex'
p1786
g888
sg38
S'left'
p1787
sg58
g62
sS'trial_loop.thisN'
p1788
I60
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p1789
g59
(g98
S'<\x00\x00\x00'
tRp1790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1791
I0
sg903
g940
sS'block_loop.thisRepN'
p1792
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1793
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1794
Nsg69
Vn
sS'block_loop.thisTrialN'
p1795
I0
sg39
F1.4501825776865189
sg34
g752
(S'\x07\xdf\n\x01\n)\x1c\x07\x0c\xb0'
tRp1796
sa(dp1797
S'trial_loop.thisTrialN'
p1798
I61
sg894
S'22-daim.png'
p1799
sS'block_loop.thisIndex'
p1800
g888
sg38
S'left'
p1801
sg58
g62
sS'trial_loop.thisN'
p1802
I61
sg33
S'7-olives.png'
p1803
sg63
g64
sS'trial_loop.thisIndex'
p1804
g59
(g98
S'=\x00\x00\x00'
tRp1805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1806
I0
sg903
S'7-olives.png'
p1807
sS'block_loop.thisRepN'
p1808
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1809
I0
sg909
S'22-daim.png'
p1810
sg55
g11
sS'block_loop.thisTrial'
p1811
Nsg69
Vn
sS'block_loop.thisTrialN'
p1812
I0
sg39
F1.6167439476239451
sg34
g752
(S'\x07\xdf\n\x01\n)"\x0e\x82\xd8'
tRp1813
sa(dp1814
S'trial_loop.thisTrialN'
p1815
I62
sg894
S'43-mrporky_pork_crackles_redo.png'
p1816
sS'block_loop.thisIndex'
p1817
g888
sg38
S'right'
p1818
sg58
g62
sS'trial_loop.thisN'
p1819
I62
sg33
g1530
sg63
g64
sS'trial_loop.thisIndex'
p1820
g59
(g98
S'>\x00\x00\x00'
tRp1821
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1822
I0
sg903
S'18-mms.png'
p1823
sS'block_loop.thisRepN'
p1824
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1825
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p1826
Nsg69
Vn
sS'block_loop.thisTrialN'
p1827
I0
sg39
F1.5174304100755762
sg34
g752
(S'\x07\xdf\n\x01\n))\t\x1c\x08'
tRp1828
sa(dp1829
S'trial_loop.thisTrialN'
p1830
I63
sg894
g1096
sS'block_loop.thisIndex'
p1831
g888
sg38
S'right'
p1832
sg58
g62
sS'trial_loop.thisN'
p1833
I63
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1834
g59
(g98
S'?\x00\x00\x00'
tRp1835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1836
I0
sg903
g1103
sS'block_loop.thisRepN'
p1837
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1838
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1839
Nsg69
Vn
sS'block_loop.thisTrialN'
p1840
I0
sg39
F1.3501756782802659
sg34
g752
(S'\x07\xdf\n\x01\n)0\x02F\x08'
tRp1841
sa(dp1842
S'trial_loop.thisTrialN'
p1843
I64
sg894
g895
sS'block_loop.thisIndex'
p1844
g888
sg38
S'left'
p1845
sg58
g62
sS'trial_loop.thisN'
p1846
I64
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1847
g59
(g98
S'@\x00\x00\x00'
tRp1848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1849
I0
sg903
g904
sS'block_loop.thisRepN'
p1850
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1851
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1852
Nsg69
Vn
sS'block_loop.thisTrialN'
p1853
I0
sg39
F1.0501201979272992
sg34
g752
(S'\x07\xdf\n\x01\n)6\x08\x12h'
tRp1854
sa(dp1855
S'trial_loop.thisTrialN'
p1856
I65
sg894
g1536
sS'block_loop.thisIndex'
p1857
g888
sg38
S'left'
p1858
sg58
g62
sS'trial_loop.thisN'
p1859
I65
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1860
g59
(g98
S'A\x00\x00\x00'
tRp1861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1862
I0
sg903
g1543
sS'block_loop.thisRepN'
p1863
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1864
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1865
Nsg69
Vn
sS'block_loop.thisTrialN'
p1866
I0
sg39
F1.350085016655612
sg34
g752
(S'\x07\xdf\n\x01\n*\x00\tZ\x88'
tRp1867
sa(dp1868
S'trial_loop.thisTrialN'
p1869
I66
sg894
g1489
sS'block_loop.thisIndex'
p1870
g888
sg38
S'left'
p1871
sg58
g62
sS'trial_loop.thisN'
p1872
I66
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1873
g59
(g98
S'B\x00\x00\x00'
tRp1874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1875
I0
sg903
g1496
sS'block_loop.thisRepN'
p1876
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1877
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p1878
Nsg69
Vn
sS'block_loop.thisTrialN'
p1879
I0
sg39
F1.3834208398570809
sg34
g752
(S'\x07\xdf\n\x01\n*\x06\x0f*\xd0'
tRp1880
sa(dp1881
S'trial_loop.thisTrialN'
p1882
I67
sg894
g1284
sS'block_loop.thisIndex'
p1883
g888
sg38
S'left'
p1884
sg58
g62
sS'trial_loop.thisN'
p1885
I67
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p1886
g59
(g98
S'C\x00\x00\x00'
tRp1887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1888
I0
sg903
g1291
sS'block_loop.thisRepN'
p1889
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1890
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p1891
Nsg69
Vn
sS'block_loop.thisTrialN'
p1892
I0
sg39
F1.4165761951085187
sg34
g752
(S'\x07\xdf\n\x01\n*\r\x06l\x88'
tRp1893
sa(dp1894
S'trial_loop.thisTrialN'
p1895
I68
sg894
g1186
sS'block_loop.thisIndex'
p1896
g888
sg38
S'right'
p1897
sg58
g62
sS'trial_loop.thisN'
p1898
I68
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p1899
g59
(g98
S'D\x00\x00\x00'
tRp1900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1901
I0
sg903
g1194
sS'block_loop.thisRepN'
p1902
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1903
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p1904
Nsg69
Vn
sS'block_loop.thisTrialN'
p1905
I0
sg39
F1.5167755366428537
sg34
g752
(S'\x07\xdf\n\x01\n*\x13\r/\x00'
tRp1906
sa(dp1907
S'trial_loop.thisTrialN'
p1908
I69
sg894
g895
sS'block_loop.thisIndex'
p1909
g888
sg38
S'left'
p1910
sg58
g62
sS'trial_loop.thisN'
p1911
I69
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1912
g59
(g98
S'E\x00\x00\x00'
tRp1913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1914
I0
sg903
g904
sS'block_loop.thisRepN'
p1915
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1916
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1917
Nsg69
Vn
sS'block_loop.thisTrialN'
p1918
I0
sg39
F0.86682092447517789
sg34
g752
(S'\x07\xdf\n\x01\n*\x1a\x06Y\x00'
tRp1919
sa(dp1920
S'trial_loop.thisTrialN'
p1921
I70
sg894
g915
sS'block_loop.thisIndex'
p1922
g888
sg38
S'right'
p1923
sg58
g62
sS'trial_loop.thisN'
p1924
I70
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1925
g59
(g98
S'F\x00\x00\x00'
tRp1926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1927
I0
sg903
g923
sS'block_loop.thisRepN'
p1928
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1929
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p1930
Nsg69
Vn
sS'block_loop.thisTrialN'
p1931
I0
sg39
F1.5499556955460321
sg34
g752
(S'\x07\xdf\n\x01\n* \x04\xc2\xc0'
tRp1932
sa(dp1933
S'trial_loop.thisTrialN'
p1934
I71
sg894
g895
sS'block_loop.thisIndex'
p1935
g888
sg38
S'left'
p1936
sg58
g62
sS'trial_loop.thisN'
p1937
I71
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1938
g59
(g98
S'G\x00\x00\x00'
tRp1939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1940
I0
sg903
g904
sS'block_loop.thisRepN'
p1941
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1942
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1943
Nsg69
Vn
sS'block_loop.thisTrialN'
p1944
I0
sg39
F0.90011084666548413
sg34
g752
(S'\x07\xdf\n\x01\n*&\r\xac\x00'
tRp1945
sa(dp1946
S'trial_loop.thisTrialN'
p1947
I72
sg894
g1689
sS'block_loop.thisIndex'
p1948
g888
sg38
S'right'
p1949
sg58
g62
sS'trial_loop.thisN'
p1950
I72
sg33
g1693
sg63
g64
sS'trial_loop.thisIndex'
p1951
g59
(g98
S'H\x00\x00\x00'
tRp1952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1953
I0
sg903
g1697
sS'block_loop.thisRepN'
p1954
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1955
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p1956
Nsg69
Vn
sS'block_loop.thisTrialN'
p1957
I0
sg39
F1.5001733404642437
sg34
g752
(S'\x07\xdf\n\x01\n*,\x0c\x92\xc0'
tRp1958
sa(dp1959
S'trial_loop.thisTrialN'
p1960
I73
sg894
g1034
sS'block_loop.thisIndex'
p1961
g888
sg38
S'left'
p1962
sg58
g62
sS'trial_loop.thisN'
p1963
I73
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1964
g59
(g98
S'I\x00\x00\x00'
tRp1965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1966
I0
sg903
g1041
sS'block_loop.thisRepN'
p1967
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1968
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1969
Nsg69
Vn
sS'block_loop.thisTrialN'
p1970
I0
sg39
F0.98343885814256282
sg34
g752
(S'\x07\xdf\n\x01\n*3\x05~@'
tRp1971
sa(dp1972
S'trial_loop.thisTrialN'
p1973
I74
sg894
g1096
sS'block_loop.thisIndex'
p1974
g888
sg38
S'right'
p1975
sg58
g62
sS'trial_loop.thisN'
p1976
I74
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1977
g59
(g98
S'J\x00\x00\x00'
tRp1978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1979
I0
sg903
g1103
sS'block_loop.thisRepN'
p1980
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1981
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1982
Nsg69
Vn
sS'block_loop.thisTrialN'
p1983
I0
sg39
F1.2001985432557376
sg34
g752
(S'\x07\xdf\n\x01\n*9\x05\xd40'
tRp1984
sa(dp1985
S'trial_loop.thisTrialN'
p1986
I75
sg894
g1689
sS'block_loop.thisIndex'
p1987
g888
sg38
S'right'
p1988
sg58
g62
sS'trial_loop.thisN'
p1989
I75
sg33
g1700
sg63
g64
sS'trial_loop.thisIndex'
p1990
g59
(g98
S'K\x00\x00\x00'
tRp1991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1992
I0
sg903
g1697
sS'block_loop.thisRepN'
p1993
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1994
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p1995
Nsg69
Vn
sS'block_loop.thisTrialN'
p1996
I0
sg39
F1.0168402542171862
sg34
g752
(S'\x07\xdf\n\x01\n+\x03\t?0'
tRp1997
sa(dp1998
S'trial_loop.thisTrialN'
p1999
I76
sg894
S'23-crunchie_redo.png'
p2000
sS'block_loop.thisIndex'
p2001
g888
sg38
S'right'
p2002
sg58
g62
sS'trial_loop.thisN'
p2003
I76
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2004
g59
(g98
S'L\x00\x00\x00'
tRp2005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2006
I0
sg903
S'33-ambrosia_rice.png'
p2007
sS'block_loop.thisRepN'
p2008
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2009
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2010
Nsg69
Vn
sS'block_loop.thisTrialN'
p2011
I0
sg39
F1.6500994426878606
sg34
g752
(S'\x07\xdf\n\x01\n+\t\n\x0e8'
tRp2012
sa(dp2013
S'trial_loop.thisTrialN'
p2014
I77
sg894
g983
sS'block_loop.thisIndex'
p2015
g888
sg38
S'right'
p2016
sg58
g62
sS'trial_loop.thisN'
p2017
I77
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2018
g59
(g98
S'M\x00\x00\x00'
tRp2019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2020
I0
sg903
g991
sS'block_loop.thisRepN'
p2021
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2022
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2023
Nsg69
Vn
sS'block_loop.thisTrialN'
p2024
I0
sg39
F1.3005181967573662
sg34
g752
(S'\x07\xdf\n\x01\n+\x10\x05[\x18'
tRp2025
sa(dp2026
S'trial_loop.thisTrialN'
p2027
I78
sg894
g1706
sS'block_loop.thisIndex'
p2028
g888
sg38
S'left'
p2029
sg58
g62
sS'trial_loop.thisN'
p2030
I78
sg33
g1562
sg63
g64
sS'trial_loop.thisIndex'
p2031
g59
(g98
S'N\x00\x00\x00'
tRp2032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2033
I0
sg903
g1713
sS'block_loop.thisRepN'
p2034
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2035
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p2036
Nsg69
Vn
sS'block_loop.thisTrialN'
p2037
I0
sg39
F0.95011158792431161
sg34
g752
(S'\x07\xdf\n\x01\n+\x16\ns\xc8'
tRp2038
sa(dp2039
S'trial_loop.thisTrialN'
p2040
I79
sg894
g1203
sS'block_loop.thisIndex'
p2041
g888
sg38
S'right'
p2042
sg58
g62
sS'trial_loop.thisN'
p2043
I79
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p2044
g59
(g98
S'O\x00\x00\x00'
tRp2045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2046
I0
sg903
g1211
sS'block_loop.thisRepN'
p2047
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2048
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p2049
Nsg69
Vn
sS'block_loop.thisTrialN'
p2050
I0
sg39
F1.2498765519385415
sg34
g752
(S'\x07\xdf\n\x01\n+\x1c\n\x12 '
tRp2051
sa(dp2052
S'trial_loop.thisTrialN'
p2053
I80
sg894
g1171
sS'block_loop.thisIndex'
p2054
g888
sg38
S'left'
p2055
sg58
g62
sS'trial_loop.thisN'
p2056
I80
sg33
g1089
sg63
g64
sS'trial_loop.thisIndex'
p2057
g59
(g98
S'P\x00\x00\x00'
tRp2058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2059
I0
sg903
g1178
sS'block_loop.thisRepN'
p2060
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2061
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p2062
Nsg69
Vn
sS'block_loop.thisTrialN'
p2063
I0
sg39
F1.0002001398129323
sg34
g752
(S'\x07\xdf\n\x01\n+"\x0es8'
tRp2064
sa(dp2065
S'trial_loop.thisTrialN'
p2066
I81
sg894
g1519
sS'block_loop.thisIndex'
p2067
g888
sg38
S'right'
p2068
sg58
g62
sS'trial_loop.thisN'
p2069
I81
sg33
g1523
sg63
g64
sS'trial_loop.thisIndex'
p2070
g59
(g98
S'Q\x00\x00\x00'
tRp2071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2072
I0
sg903
g1527
sS'block_loop.thisRepN'
p2073
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2074
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p2075
Nsg69
Vn
sS'block_loop.thisTrialN'
p2076
I0
sg39
F2.3834459286085803
sg34
g752
(S'\x07\xdf\n\x01\n+(\x0f\x03\xc0'
tRp2077
sa(dp2078
S'trial_loop.thisTrialN'
p2079
I82
sg894
g1314
sS'block_loop.thisIndex'
p2080
g888
sg38
S'right'
p2081
sg58
g62
sS'trial_loop.thisN'
p2082
I82
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p2083
g59
(g98
S'R\x00\x00\x00'
tRp2084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2085
I0
sg903
g1321
sS'block_loop.thisRepN'
p2086
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2087
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p2088
Nsg69
Vn
sS'block_loop.thisTrialN'
p2089
I0
sg39
F1.3335466827538767
sg34
g752
(S'\x07\xdf\n\x01\n+0\x06\x03\x10'
tRp2090
sa(dp2091
S'trial_loop.thisTrialN'
p2092
I83
sg894
g1079
sS'block_loop.thisIndex'
p2093
g888
sg38
S'right'
p2094
sg58
g62
sS'trial_loop.thisN'
p2095
I83
sg33
g1089
sg63
g64
sS'trial_loop.thisIndex'
p2096
g59
(g98
S'S\x00\x00\x00'
tRp2097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2098
I0
sg903
g1087
sS'block_loop.thisRepN'
p2099
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2100
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p2101
Nsg69
Vn
sS'block_loop.thisTrialN'
p2102
I0
sg39
F0.91677975611446527
sg34
g752
(S'\x07\xdf\n\x01\n+6\x0b\x94\xd8'
tRp2103
sa(dp2104
S'trial_loop.thisTrialN'
p2105
I84
sg894
g1154
sS'block_loop.thisIndex'
p2106
g888
sg38
S'left'
p2107
sg58
g62
sS'trial_loop.thisN'
p2108
I84
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2109
g59
(g98
S'T\x00\x00\x00'
tRp2110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2111
I0
sg903
g1162
sS'block_loop.thisRepN'
p2112
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2113
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2114
Nsg69
Vn
sS'block_loop.thisTrialN'
p2115
I0
sg39
F1.8334061287255281
sg34
g752
(S'\x07\xdf\n\x01\n,\x00\n\xf4\xb0'
tRp2116
sa(dp2117
S'trial_loop.thisTrialN'
p2118
I85
sg894
g983
sS'block_loop.thisIndex'
p2119
g888
sg38
S'right'
p2120
sg58
g62
sS'trial_loop.thisN'
p2121
I85
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2122
g59
(g98
S'U\x00\x00\x00'
tRp2123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2124
I0
sg903
g991
sS'block_loop.thisRepN'
p2125
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2126
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2127
Nsg69
Vn
sS'block_loop.thisTrialN'
p2128
I0
sg39
F1.0835030625385116
sg34
g752
(S'\x07\xdf\n\x01\n,\x07\x08\xe1p'
tRp2129
sa(dp2130
S'trial_loop.thisTrialN'
p2131
I86
sg894
g1689
sS'block_loop.thisIndex'
p2132
g888
sg38
S'right'
p2133
sg58
g62
sS'trial_loop.thisN'
p2134
I86
sg33
g1693
sg63
g64
sS'trial_loop.thisIndex'
p2135
g59
(g98
S'V\x00\x00\x00'
tRp2136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2137
I0
sg903
g1697
sS'block_loop.thisRepN'
p2138
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2139
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p2140
Nsg69
Vn
sS'block_loop.thisTrialN'
p2141
I0
sg39
F1.0835367042732287
sg34
g752
(S'\x07\xdf\n\x01\n,\r\n\xa2\xa8'
tRp2142
sa(dp2143
S'trial_loop.thisTrialN'
p2144
I87
sg894
g983
sS'block_loop.thisIndex'
p2145
g888
sg38
S'right'
p2146
sg58
g62
sS'trial_loop.thisN'
p2147
I87
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2148
g59
(g98
S'W\x00\x00\x00'
tRp2149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2150
I0
sg903
g991
sS'block_loop.thisRepN'
p2151
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2152
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2153
Nsg69
Vn
sS'block_loop.thisTrialN'
p2154
I0
sg39
F1.0505509831941708
sg34
g752
(S'\x07\xdf\n\x01\n,\x13\x0cc\xe0'
tRp2155
sa(dp2156
S'trial_loop.thisTrialN'
p2157
I88
sg894
g1124
sS'block_loop.thisIndex'
p2158
g888
sg38
S'left'
p2159
sg58
g62
sS'trial_loop.thisN'
p2160
I88
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2161
g59
(g98
S'X\x00\x00\x00'
tRp2162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2163
I0
sg903
g1132
sS'block_loop.thisRepN'
p2164
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2165
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p2166
Nsg69
Vn
sS'block_loop.thisTrialN'
p2167
I0
sg39
F1.933511387442195
sg34
g752
(S'\x07\xdf\n\x01\n,\x19\r\xac\x00'
tRp2168
sa(dp2169
S'trial_loop.thisTrialN'
p2170
I89
sg894
g915
sS'block_loop.thisIndex'
p2171
g888
sg38
S'right'
p2172
sg58
g62
sS'trial_loop.thisN'
p2173
I89
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2174
g59
(g98
S'Y\x00\x00\x00'
tRp2175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2176
I0
sg903
g923
sS'block_loop.thisRepN'
p2177
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2178
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F1.1666565931527657
sg34
g752
(S'\x07\xdf\n\x01\n, \rB\x88'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1706
sS'block_loop.thisIndex'
p2184
g888
sg38
S'left'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1555
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1713
sS'block_loop.thisRepN'
p2190
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2191
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F1.3335329979804555
sg34
g752
(S"\x07\xdf\n\x01\n,'\x00\xf6\x18"
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
S'7-olives.png'
p2197
sS'block_loop.thisIndex'
p2198
g888
sg38
S'right'
p2199
sg58
g62
sS'trial_loop.thisN'
p2200
I91
sg33
g1810
sg63
g64
sS'trial_loop.thisIndex'
p2201
g59
(g98
S'[\x00\x00\x00'
tRp2202
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2203
I0
sg903
S'22-daim.png'
p2204
sS'block_loop.thisRepN'
p2205
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2206
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2207
Nsg69
Vn
sS'block_loop.thisTrialN'
p2208
I0
sg39
F1.4001861129199824
sg34
g752
(S'\x07\xdf\n\x01\n,-\x06\x83\xf8'
tRp2209
sa(dp2210
S'trial_loop.thisTrialN'
p2211
I92
sg894
g1237
sS'block_loop.thisIndex'
p2212
g888
sg38
S'right'
p2213
sg58
g62
sS'trial_loop.thisN'
p2214
I92
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2215
g59
(g98
S'\\\x00\x00\x00'
tRp2216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2217
I0
sg903
g1244
sS'block_loop.thisRepN'
p2218
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2219
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p2220
Nsg69
Vn
sS'block_loop.thisTrialN'
p2221
I0
sg39
F1.0668649438293869
sg34
g752
(S'\x07\xdf\n\x01\n,3\r\x0b\xd8'
tRp2222
sa(dp2223
S'trial_loop.thisTrialN'
p2224
I93
sg894
g1816
sS'block_loop.thisIndex'
p2225
g888
sg38
S'left'
p2226
sg58
g62
sS'trial_loop.thisN'
p2227
I93
sg33
g1523
sg63
g64
sS'trial_loop.thisIndex'
p2228
g59
(g98
S']\x00\x00\x00'
tRp2229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2230
I0
sg903
g1823
sS'block_loop.thisRepN'
p2231
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2232
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vn
sS'block_loop.thisTrialN'
p2234
I0
sg39
F1.2667752515430948
sg34
g752
(S'\x07\xdf\n\x01\n,9\x0e\x8e\x90'
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g2197
sS'block_loop.thisIndex'
p2238
g888
sg38
S'right'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g2204
sS'block_loop.thisRepN'
p2244
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2245
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vn
sS'block_loop.thisTrialN'
p2247
I0
sg39
F0.93341616422640072
sg34
g752
(S'\x07\xdf\n\x01\n-\x04\x03\xeb\xe8'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1079
sS'block_loop.thisIndex'
p2251
g888
sg38
S'right'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1089
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1087
sS'block_loop.thisRepN'
p2257
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2258
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vn
sS'block_loop.thisTrialN'
p2260
I0
sg39
F1.0167781025379554
sg34
g752
(S'\x07\xdf\n\x01\n-\n\x03\x8a@'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g2000
sS'block_loop.thisIndex'
p2264
g888
sg38
S'right'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g2007
sS'block_loop.thisRepN'
p2270
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2271
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vn
sS'block_loop.thisTrialN'
p2273
I0
sg39
F1.5500879816900124
sg34
g752
(S'\x07\xdf\n\x01\n-\x10\x04U`'
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
g1551
sS'block_loop.thisIndex'
p2277
g888
sg38
S'right'
p2278
sg58
g62
sS'trial_loop.thisN'
p2279
I97
sg33
g1562
sg63
g64
sS'trial_loop.thisIndex'
p2280
g59
(g98
S'a\x00\x00\x00'
tRp2281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2282
I0
sg903
g1559
sS'block_loop.thisRepN'
p2283
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2284
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vn
sS'block_loop.thisTrialN'
p2286
I0
sg39
F1.183282737684749
sg34
g752
(S'\x07\xdf\n\x01\n-\x16\r>\xa0'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
g1186
sS'block_loop.thisIndex'
p2290
g888
sg38
S'right'
p2291
sg58
g62
sS'trial_loop.thisN'
p2292
I98
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p2293
g59
(g98
S'b\x00\x00\x00'
tRp2294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2295
I0
sg903
g1194
sS'block_loop.thisRepN'
p2296
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2297
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p2298
Nsg69
Vn
sS'block_loop.thisTrialN'
p2299
I0
sg39
F1.0335265547328163
sg34
g752
(S'\x07\xdf\n\x01\n-\x1d\x01(\xe0'
tRp2300
sa(dp2301
S'trial_loop.thisTrialN'
p2302
I99
sg894
g932
sS'block_loop.thisIndex'
p2303
g888
sg38
S'right'
p2304
sg58
g62
sS'trial_loop.thisN'
p2305
I99
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2306
g59
(g98
S'c\x00\x00\x00'
tRp2307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2308
I0
sg903
g940
sS'block_loop.thisRepN'
p2309
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2310
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2311
Nsg69
Vn
sS'block_loop.thisTrialN'
p2312
I0
sg39
F1.3668360347455746
sg34
g752
(S'\x07\xdf\n\x01\n-#\x026h'
tRp2313
sa(dp2314
S'trial_loop.thisTrialN'
p2315
I100
sg894
g1607
sS'block_loop.thisIndex'
p2316
g888
sg38
S'right'
p2317
sg58
g62
sS'trial_loop.thisN'
p2318
I100
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2319
g59
(g98
S'd\x00\x00\x00'
tRp2320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2321
I0
sg903
g1614
sS'block_loop.thisRepN'
p2322
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2323
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2324
Nsg69
Vn
sS'block_loop.thisTrialN'
p2325
I0
sg39
F1.7001780160958333
sg34
g752
(S'\x07\xdf\n\x01\n-)\x08AH'
tRp2326
sa(dp2327
S'trial_loop.thisTrialN'
p2328
I101
sg894
g1489
sS'block_loop.thisIndex'
p2329
g888
sg38
S'left'
p2330
sg58
g62
sS'trial_loop.thisN'
p2331
I101
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2332
g59
(g98
S'e\x00\x00\x00'
tRp2333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2334
I0
sg903
g1496
sS'block_loop.thisRepN'
p2335
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2336
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2337
Nsg69
Vn
sS'block_loop.thisTrialN'
p2338
I0
sg39
F1.4335484503708358
sg34
g752
(S'\x07\xdf\n\x01\n-0\x04E\xc0'
tRp2339
sa(dp2340
S'trial_loop.thisTrialN'
p2341
I102
sg894
g1049
sS'block_loop.thisIndex'
p2342
g888
sg38
S'left'
p2343
sg58
g62
sS'trial_loop.thisN'
p2344
I102
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2345
g59
(g98
S'f\x00\x00\x00'
tRp2346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2347
I0
sg903
g1057
sS'block_loop.thisRepN'
p2348
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2349
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p2350
Nsg69
Vn
sS'block_loop.thisTrialN'
p2351
I0
sg39
F1.1835741093204888
sg34
g752
(S'\x07\xdf\n\x01\n-6\x0bB\xd0'
tRp2352
sa(dp2353
S'trial_loop.thisTrialN'
p2354
I103
sg894
g932
sS'block_loop.thisIndex'
p2355
g888
sg38
S'right'
p2356
sg58
g62
sS'trial_loop.thisN'
p2357
I103
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2358
g59
(g98
S'g\x00\x00\x00'
tRp2359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2360
I0
sg903
g940
sS'block_loop.thisRepN'
p2361
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2362
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2363
Nsg69
Vn
sS'block_loop.thisTrialN'
p2364
I0
sg39
F1.116760198292468
sg34
g752
(S'\x07\xdf\n\x01\n.\x00\x0e\xb1\xb8'
tRp2365
sa(dp2366
S'trial_loop.thisTrialN'
p2367
I104
sg894
g966
sS'block_loop.thisIndex'
p2368
g888
sg38
S'right'
p2369
sg58
g62
sS'trial_loop.thisN'
p2370
I104
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p2371
g59
(g98
S'h\x00\x00\x00'
tRp2372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2373
I0
sg903
g974
sS'block_loop.thisRepN'
p2374
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2375
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F1.0168821638362715
sg34
g752
(S'\x07\xdf\n\x01\n.\x07\x01\xa9\xc8'
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g1799
sS'block_loop.thisIndex'
p2381
g888
sg38
S'left'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g1807
sS'block_loop.thisRepN'
p2387
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2388
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vn
sS'block_loop.thisTrialN'
p2390
I0
sg39
F0.89996801184224751
sg34
g752
(S'\x07\xdf\n\x01\n.\r\x02x\xd0'
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
g1519
sS'block_loop.thisIndex'
p2394
g888
sg38
S'left'
p2395
sg58
g62
sS'trial_loop.thisN'
p2396
I106
sg33
g1523
sg63
g64
sS'trial_loop.thisIndex'
p2397
g59
(g98
S'j\x00\x00\x00'
tRp2398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2399
I0
sg903
g1527
sS'block_loop.thisRepN'
p2400
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2401
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p2402
Nsg69
Vn
sS'block_loop.thisTrialN'
p2403
I0
sg39
F1.816862092834981
sg34
g752
(S'\x07\xdf\n\x01\n.\x13\x01_\x90'
tRp2404
sa(dp2405
S'trial_loop.thisTrialN'
p2406
I107
sg894
g2197
sS'block_loop.thisIndex'
p2407
g888
sg38
S'right'
p2408
sg58
g62
sS'trial_loop.thisN'
p2409
I107
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p2410
g59
(g98
S'k\x00\x00\x00'
tRp2411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2412
I0
sg903
g2204
sS'block_loop.thisRepN'
p2413
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2414
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2415
Nsg69
Vn
sS'block_loop.thisTrialN'
p2416
I0
sg39
F1.350536329082388
sg34
g752
(S'\x07\xdf\n\x01\n.\x19\x0eP\x10'
tRp2417
sa(dp2418
S'trial_loop.thisTrialN'
p2419
I108
sg894
g1220
sS'block_loop.thisIndex'
p2420
g888
sg38
S'left'
p2421
sg58
g62
sS'trial_loop.thisN'
p2422
I108
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p2423
g59
(g98
S'l\x00\x00\x00'
tRp2424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2425
I0
sg903
g1228
sS'block_loop.thisRepN'
p2426
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2427
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2428
Nsg69
Vn
sS'block_loop.thisTrialN'
p2429
I0
sg39
F1.5334301911193506
sg34
g752
(S'\x07\xdf\n\x01\n. \x05\x18\xb0'
tRp2430
sa(dp2431
S'trial_loop.thisTrialN'
p2432
I109
sg894
g1186
sS'block_loop.thisIndex'
p2433
g888
sg38
S'right'
p2434
sg58
g62
sS'trial_loop.thisN'
p2435
I109
sg33
g1190
sg63
g64
sS'trial_loop.thisIndex'
p2436
g59
(g98
S'm\x00\x00\x00'
tRp2437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2438
I0
sg903
g1194
sS'block_loop.thisRepN'
p2439
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2440
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p2441
Nsg69
Vn
sS'block_loop.thisTrialN'
p2442
I0
sg39
F1.0667283811940251
sg34
g752
(S'\x07\xdf\n\x01\n.&\r\x84\xf0'
tRp2443
sa(dp2444
S'trial_loop.thisTrialN'
p2445
I110
sg894
g1284
sS'block_loop.thisIndex'
p2446
g888
sg38
S'left'
p2447
sg58
g62
sS'trial_loop.thisN'
p2448
I110
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p2449
g59
(g98
S'n\x00\x00\x00'
tRp2450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2451
I0
sg903
g1291
sS'block_loop.thisRepN'
p2452
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2453
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p2454
Nsg69
Vn
sS'block_loop.thisTrialN'
p2455
I0
sg39
F1.3165872569666135
sg34
g752
(S'\x07\xdf\n\x01\n.-\x00\x07\xd0'
tRp2456
sa(dp2457
S'trial_loop.thisTrialN'
p2458
I111
sg894
g1435
sS'block_loop.thisIndex'
p2459
g888
sg38
S'left'
p2460
sg58
g62
sS'trial_loop.thisN'
p2461
I111
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p2462
g59
(g98
S'o\x00\x00\x00'
tRp2463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2464
I0
sg903
g1442
sS'block_loop.thisRepN'
p2465
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2466
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p2467
Nsg69
Vn
sS'block_loop.thisTrialN'
p2468
I0
sg39
F1.3167805543930626
sg34
g752
(S'\x07\xdf\n\x01\n.3\x05[\x18'
tRp2469
sa(dp2470
S'trial_loop.thisTrialN'
p2471
I112
sg894
g1299
sS'block_loop.thisIndex'
p2472
g888
sg38
S'left'
p2473
sg58
g62
sS'trial_loop.thisN'
p2474
I112
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p2475
g59
(g98
S'p\x00\x00\x00'
tRp2476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2477
I0
sg903
g1306
sS'block_loop.thisRepN'
p2478
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2479
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p2480
Nsg69
Vn
sS'block_loop.thisTrialN'
p2481
I0
sg39
F1.0168616366763672
sg34
g752
(S'\x07\xdf\n\x01\n.9\n\xae`'
tRp2482
sa(dp2483
S'trial_loop.thisTrialN'
p2484
I113
sg894
g1049
sS'block_loop.thisIndex'
p2485
g888
sg38
S'left'
p2486
sg58
g62
sS'trial_loop.thisN'
p2487
I113
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2488
g59
(g98
S'q\x00\x00\x00'
tRp2489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2490
I0
sg903
g1057
sS'block_loop.thisRepN'
p2491
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2492
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p2493
Nsg69
Vn
sS'block_loop.thisTrialN'
p2494
I0
sg39
F1.0334376037048969
sg34
g752
(S'\x07\xdf\n\x01\n/\x03\x0b>\xe8'
tRp2495
sa(dp2496
S'trial_loop.thisTrialN'
p2497
I114
sg894
g1342
sS'block_loop.thisIndex'
p2498
g888
sg38
S'right'
p2499
sg58
g62
sS'trial_loop.thisN'
p2500
I114
sg33
g1224
sg63
g64
sS'trial_loop.thisIndex'
p2501
g59
(g98
S'r\x00\x00\x00'
tRp2502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2503
I0
sg903
g1349
sS'block_loop.thisRepN'
p2504
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2505
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2506
Nsg69
Vn
sS'block_loop.thisTrialN'
p2507
I0
sg39
F0.95020110915083933
sg34
g752
(S'\x07\xdf\n\x01\n/\t\x0cLp'
tRp2508
sa(dp2509
S'trial_loop.thisTrialN'
p2510
I115
sg894
g1489
sS'block_loop.thisIndex'
p2511
g888
sg38
S'left'
p2512
sg58
g62
sS'trial_loop.thisN'
p2513
I115
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2514
g59
(g98
S's\x00\x00\x00'
tRp2515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2516
I0
sg903
g1496
sS'block_loop.thisRepN'
p2517
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2518
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2519
Nsg69
Vn
sS'block_loop.thisTrialN'
p2520
I0
sg39
F1.1335479942113125
sg34
g752
(S'\x07\xdf\n\x01\n/\x0f\x0c%`'
tRp2521
sa(dp2522
S'trial_loop.thisTrialN'
p2523
I116
sg894
g1607
sS'block_loop.thisIndex'
p2524
g888
sg38
S'right'
p2525
sg58
g62
sS'trial_loop.thisN'
p2526
I116
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2527
g59
(g98
S't\x00\x00\x00'
tRp2528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2529
I0
sg903
g1614
sS'block_loop.thisRepN'
p2530
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2531
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2532
Nsg69
Vn
sS'block_loop.thisTrialN'
p2533
I0
sg39
F1.2168680229037818
sg34
g752
(S'\x07\xdf\n\x01\n/\x15\x0e\x9e0'
tRp2534
sa(dp2535
S'trial_loop.thisTrialN'
p2536
I117
sg894
g1504
sS'block_loop.thisIndex'
p2537
g888
sg38
S'right'
p2538
sg58
g62
sS'trial_loop.thisN'
p2539
I117
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2540
g59
(g98
S'u\x00\x00\x00'
tRp2541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2542
I0
sg903
g1511
sS'block_loop.thisRepN'
p2543
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2544
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2545
Nsg69
Vn
sS'block_loop.thisTrialN'
p2546
I0
sg39
F1.2668676237644831
sg34
g752
(S'\x07\xdf\n\x01\n/\x1c\x03C\xf0'
tRp2547
sa(dp2548
S'trial_loop.thisTrialN'
p2549
I118
sg894
g2197
sS'block_loop.thisIndex'
p2550
g888
sg38
S'right'
p2551
sg58
g62
sS'trial_loop.thisN'
p2552
I118
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p2553
g59
(g98
S'v\x00\x00\x00'
tRp2554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2555
I0
sg903
g2204
sS'block_loop.thisRepN'
p2556
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2557
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2558
Nsg69
Vn
sS'block_loop.thisTrialN'
p2559
I0
sg39
F0.80010166646297876
sg34
g752
(S'\x07\xdf\n\x01\n/"\x07\xdf\xa0'
tRp2560
sa(dp2561
S'trial_loop.thisTrialN'
p2562
I119
sg894
g1689
sS'block_loop.thisIndex'
p2563
g888
sg38
S'right'
p2564
sg58
g62
sS'trial_loop.thisN'
p2565
I119
sg33
g1693
sg63
g64
sS'trial_loop.thisIndex'
p2566
g59
(g98
S'w\x00\x00\x00'
tRp2567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2568
I0
sg903
g1697
sS'block_loop.thisRepN'
p2569
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2570
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p2571
Nsg69
Vn
sS'block_loop.thisTrialN'
p2572
I0
sg39
F1.3834630345754704
sg34
g752
(S'\x07\xdf\n\x01\n/(\x05[\x18'
tRp2573
sa(dp2574
S'trial_loop.thisTrialN'
p2575
I120
sg894
g1220
sS'block_loop.thisIndex'
p2576
g888
sg38
S'left'
p2577
sg58
g62
sS'trial_loop.thisN'
p2578
I120
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p2579
g59
(g98
S'x\x00\x00\x00'
tRp2580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2581
I0
sg903
g1228
sS'block_loop.thisRepN'
p2582
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2583
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p2584
Nsg69
Vn
sS'block_loop.thisTrialN'
p2585
I0
sg39
F1.5335362481141601
sg34
g752
(S'\x07\xdf\n\x01\n/.\x0b\xa0\x90'
tRp2586
sa(dp2587
S'trial_loop.thisTrialN'
p2588
I121
sg894
g1551
sS'block_loop.thisIndex'
p2589
g888
sg38
S'right'
p2590
sg58
g62
sS'trial_loop.thisN'
p2591
I121
sg33
g1562
sg63
g64
sS'trial_loop.thisIndex'
p2592
g59
(g98
S'y\x00\x00\x00'
tRp2593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2594
I0
sg903
g1559
sS'block_loop.thisRepN'
p2595
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2596
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p2597
Nsg69
Vn
sS'block_loop.thisTrialN'
p2598
I0
sg39
F1.2835131550591541
sg34
g752
(S'\x07\xdf\n\x01\n/5\x05\t\x10'
tRp2599
sa(dp2600
S'trial_loop.thisTrialN'
p2601
I122
sg894
g1799
sS'block_loop.thisIndex'
p2602
g888
sg38
S'right'
p2603
sg58
g62
sS'trial_loop.thisN'
p2604
I122
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p2605
g59
(g98
S'z\x00\x00\x00'
tRp2606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2607
I0
sg903
g1807
sS'block_loop.thisRepN'
p2608
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2609
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2610
Nsg69
Vn
sS'block_loop.thisTrialN'
p2611
I0
sg39
F0.90025140069383269
sg34
g752
(S'\x07\xdf\n\x01\n/;\t\xe3@'
tRp2612
sa(dp2613
S'trial_loop.thisTrialN'
p2614
I123
sg894
g1299
sS'block_loop.thisIndex'
p2615
g888
sg38
S'left'
p2616
sg58
g62
sS'trial_loop.thisN'
p2617
I123
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p2618
g59
(g98
S'{\x00\x00\x00'
tRp2619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2620
I0
sg903
g1306
sS'block_loop.thisRepN'
p2621
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2622
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p2623
Nsg69
Vn
sS'block_loop.thisTrialN'
p2624
I0
sg39
F1.100243817048522
sg34
g752
(S'\x07\xdf\n\x01\n0\x05\x08\xca\x00'
tRp2625
sa(dp2626
S'trial_loop.thisTrialN'
p2627
I124
sg894
S'46-pistachios.png'
p2628
sS'block_loop.thisIndex'
p2629
g888
sg38
S'left'
p2630
sg58
g62
sS'trial_loop.thisN'
p2631
I124
sg33
g1693
sg63
g64
sS'trial_loop.thisIndex'
p2632
g59
(g98
S'|\x00\x00\x00'
tRp2633
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2634
I0
sg903
S'29-beans.png'
p2635
sS'block_loop.thisRepN'
p2636
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2637
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F0.91685673296569803
sg34
g752
(S'\x07\xdf\n\x01\n0\x0b\n\xc9\xb8'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1252
sS'block_loop.thisIndex'
p2643
g888
sg38
S'right'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1259
sS'block_loop.thisRepN'
p2649
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2650
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.283508593467559
sg34
g752
(S'\x07\xdf\n\x01\n0\x11\n)\x90'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1017
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1025
sS'block_loop.thisRepN'
p2662
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2663
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F0.9001901043120597
sg34
g752
(S'\x07\xdf\n\x01\n0\x17\x0f\x03\xc0'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1489
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1496
sS'block_loop.thisRepN'
p2675
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2676
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.75022921995650904
sg34
g752
(S'\x07\xdf\n\x01\n0\x1d\r\xea\x80'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g2628
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1693
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g2635
sS'block_loop.thisRepN'
p2688
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2689
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F0.71678106757190108
sg34
g752
(S'\x07\xdf\n\x01\n0#\n\xaax'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g949
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g957
sS'block_loop.thisRepN'
p2701
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2702
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.216851772235259
sg34
g752
(S'\x07\xdf\n\x01\n0)\x06\xb6\xc0'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g895
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g904
sS'block_loop.thisRepN'
p2714
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2715
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F0.76678038333329823
sg34
g752
(S'\x07\xdf\n\x01\n0/\n\x9e\xc0'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g2628
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1693
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g2635
sS'block_loop.thisRepN'
p2727
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2728
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F0.85011979878845523
sg34
g752
(S'\x07\xdf\n\x01\n05\x07\x9d8'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1816
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1523
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1823
sS'block_loop.thisRepN'
p2740
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2741
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.6668624349545098
sg34
g752
(S'\x07\xdf\n\x01\n0;\x05\xcc`'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g949
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g957
sS'block_loop.thisRepN'
p2753
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2754
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F0.91677690512005938
sg34
g752
(S'\x07\xdf\n\x01\n1\x06\x01\x1d('
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1799
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1807
sS'block_loop.thisRepN'
p2766
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2767
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.0501167767338302
sg34
g752
(S'\x07\xdf\n\x01\n1\x0c\x00}\x00'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g932
sS'block_loop.thisIndex'
p2773
g888
sg38
S'left'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g940
sS'block_loop.thisRepN'
p2779
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2780
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F1.2168600401191725
sg34
g752
(S'\x07\xdf\n\x01\n1\x12\x01\xc5 '
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1284
sS'block_loop.thisIndex'
p2786
g888
sg38
S'left'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1291
sS'block_loop.thisRepN'
p2792
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2793
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.5831945849349722
sg34
g752
(S'\x07\xdf\n\x01\n1\x18\x05n\xa0'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g2197
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g2204
sS'block_loop.thisRepN'
p2805
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2806
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F0.88388925825120168
sg34
g752
(S'\x07\xdf\n\x01\n1\x1e\x0e\xcd\x10'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1034
sS'block_loop.thisIndex'
p2812
g888
sg38
S'left'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1041
sS'block_loop.thisRepN'
p2818
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2819
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F0.9000549671736735
sg34
g752
(S'\x07\xdf\n\x01\n1$\r\xb3\xd0'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g1186
sS'block_loop.thisIndex'
p2825
g888
sg38
S'right'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g1194
sS'block_loop.thisRepN'
p2831
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2832
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.1169204241823536
sg34
g752
(S'\x07\xdf\n\x01\n1*\x0c\x9a\x90'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g966
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g974
sS'block_loop.thisRepN'
p2844
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2845
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F1.2169005242408275
sg34
g752
(S'\x07\xdf\n\x01\n10\x0e\xd8\xc8'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1674
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1681
sS'block_loop.thisRepN'
p2857
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2858
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.9334096069392217
sg34
g752
(S'\x07\xdf\n\x01\n17\x03z\xa0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g2000
sS'block_loop.thisIndex'
p2864
g888
sg38
S'right'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g2007
sS'block_loop.thisRepN'
p2870
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2871
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.2339104126303937
sg34
g752
(S'\x07\xdf\n\x01\n2\x01\x02\xde`'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1519
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1530
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1527
sS'block_loop.thisRepN'
p2883
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2884
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F0.90011255726221862
sg34
g752
(S'\x07\xdf\n\x01\n2\x07\x07\x00\xf8'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1706
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1555
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1713
sS'block_loop.thisRepN'
p2896
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2897
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F0.85016427430218755
sg34
g752
(S'\x07\xdf\n\x01\n2\r\x05\xe7\xb8'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g2628
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1700
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g2635
sS'block_loop.thisRepN'
p2909
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2910
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.81676686961964151
sg34
g752
(S'\x07\xdf\n\x01\n2\x13\x04\x16\xe0'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1674
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1681
sS'block_loop.thisRepN'
p2922
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2923
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.70006169552061692
sg34
g752
(S'\x07\xdf\n\x01\n2\x19\x01\xcc\xf0'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1435
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1442
sS'block_loop.thisRepN'
p2935
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2936
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.1500877536100234
sg34
g752
(S'\x07\xdf\n\x01\n2\x1e\r\x1bx'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1252
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1259
sS'block_loop.thisRepN'
p2948
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2949
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F1.0502288208172104
sg34
g752
(S'\x07\xdf\n\x01\n2%\x00\x90\x88'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1237
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1244
sS'block_loop.thisRepN'
p2961
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2962
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.9501974028580662
sg34
g752
(S'\x07\xdf\n\x01\n2+\x01\xd8\xa8'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1519
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1523
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1527
sS'block_loop.thisRepN'
p2974
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2975
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.85011181600384589
sg34
g752
(S'\x07\xdf\n\x01\n21\x01\xb1\x98'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1000
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1008
sS'block_loop.thisRepN'
p2987
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2988
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.016843390311351
sg34
g752
(S'\x07\xdf\n\x01\n26\x0f#\x00'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1203
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1211
sS'block_loop.thisRepN'
p3000
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3001
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.083362508510163
sg34
g752
(S'\x07\xdf\n\x01\n3\x01\x00\xaf\xc8'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1017
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1025
sS'block_loop.thisRepN'
p3013
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3014
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.1338995218311538
sg34
g752
(S'\x07\xdf\n\x01\n3\x07\x02q\x00'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1124
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1132
sS'block_loop.thisRepN'
p3026
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3027
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.8167839755865316
sg34
g752
(S'\x07\xdf\n\x01\n3\r\x04\xe9\xd0'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1504
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1511
sS'block_loop.thisRepN'
p3039
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3040
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.3168726415146921
sg34
g752
(S'\x07\xdf\n\x01\n3\x13\x02\x9f\xe0'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1124
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1135
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1132
sS'block_loop.thisRepN'
p3052
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3053
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.2168104328152367
sg34
g752
(S'\x07\xdf\n\x01\n3\x19\x07\xf3('
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1551
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1555
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1559
sS'block_loop.thisRepN'
p3065
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3066
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.0501005260653073
sg34
g752
(S'\x07\xdf\n\x01\n3\x1f\x0b\xdb('
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1267
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1275
sS'block_loop.thisRepN'
p3078
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3079
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.95061165235665612
sg34
g752
(S'\x07\xdf\n\x01\n3%\r#H'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1674
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1681
sS'block_loop.thisRepN'
p3091
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3092
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F0.7333473412195417
sg34
g752
(S'\x07\xdf\n\x01\n3+\x0c\xc1\xa0'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1314
sS'block_loop.thisIndex'
p3098
g888
sg38
S'right'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1321
sS'block_loop.thisRepN'
p3104
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3105
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.6501416374057953
sg34
g752
(S'\x07\xdf\n\x01\n31\tG\x00'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g2628
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1693
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g2635
sS'block_loop.thisRepN'
p3117
I0
sg906
g1693
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3118
I0
sg909
g1700
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.76688701052717079
sg34
g752
(S'\x07\xdf\n\x01\n38\x04YH'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1154
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1158
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1162
sS'block_loop.thisRepN'
p3130
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3131
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F2.1168557066075664
sg34
g752
(S'\x07\xdf\n\x01\n4\x02\x01W\xc0'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1203
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1214
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1211
sS'block_loop.thisRepN'
p3143
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3144
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.96661342909601444
sg34
g752
(S'\x07\xdf\n\x01\n4\t\x03\xc8\xc0'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1504
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1511
sS'block_loop.thisRepN'
p3156
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3157
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.5001097632875826
sg34
g752
(S'\x07\xdf\n\x01\n4\x0f\x03\xa5\x98'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1314
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1321
sS'block_loop.thisRepN'
p3169
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3170
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.90021063147241875
sg34
g752
(S'\x07\xdf\n\x01\n4\x15\x0b\xd3X'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1096
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1103
sS'block_loop.thisRepN'
p3182
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3183
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F1.2001811521895434
sg34
g752
(S'\x07\xdf\n\x01\n4\x1b\n\xba\x18'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g915
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g923
sS'block_loop.thisRepN'
p3195
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3196
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.1000596428043536
sg34
g752
(S'\x07\xdf\n\x01\n4!\x0ec\x98'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1299
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1196
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1306
sS'block_loop.thisRepN'
p3208
I0
sg906
g1196
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3209
I0
sg909
g1190
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.7672262788705666
sg34
g752
(S'\x07\xdf\n\x01\n4(\x01!\x10'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1000
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1008
sS'block_loop.thisRepN'
p3221
I0
sg906
g1004
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3222
I0
sg909
g1011
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.0833853164663196
sg34
g752
(S'\x07\xdf\n\x01\n4-\ra\xc8'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g1551
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1555
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g1559
sS'block_loop.thisRepN'
p3234
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3235
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.0502305314139448
sg34
g752
(S'\x07\xdf\n\x01\n43\x0f#\x00'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1816
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1523
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1823
sS'block_loop.thisRepN'
p3247
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3248
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F1.150103719179242
sg34
g752
(S'\x07\xdf\n\x01\n4:\x01(\xe0'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g949
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g957
sS'block_loop.thisRepN'
p3260
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3261
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.88344535840997196
sg34
g752
(S'\x07\xdf\n\x01\n5\x04\x03\xe00'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1284
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1207
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1291
sS'block_loop.thisRepN'
p3273
I0
sg906
g1207
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3274
I0
sg909
g1214
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F1.2669822337425103
sg34
g752
(S'\x07\xdf\n\x01\n5\n\x02\x88p'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g2000
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g2007
sS'block_loop.thisRepN'
p3286
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3287
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.0668062133436251
sg34
g752
(S'\x07\xdf\n\x01\n5\x10\x07(\x08'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1607
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1614
sS'block_loop.thisRepN'
p3299
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3300
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.0668632332331072
sg34
g752
(S'\x07\xdf\n\x01\n5\x16\x08\xaa\xc0'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g915
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g923
sS'block_loop.thisRepN'
p3312
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3313
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.93341873012150245
sg34
g752
(S'\x07\xdf\n\x01\n5\x1c\n1`'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1536
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1543
sS'block_loop.thisRepN'
p3325
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3326
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F1.7001420935653186
sg34
g752
(S'\x07\xdf\n\x01\n5"\t\xcf\xb8'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1079
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1089
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1087
sS'block_loop.thisRepN'
p3338
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3339
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.2338984384532523
sg34
g752
(S'\x07\xdf\n\x01\n5)\x05\x95\xb0'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1314
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1027
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1321
sS'block_loop.thisRepN'
p3351
I0
sg906
g1027
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3352
I0
sg909
g1021
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.4501050306366778
sg34
g752
(S'\x07\xdf\n\x01\n5/\t\xbc0'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1342
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1224
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1349
sS'block_loop.thisRepN'
p3364
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3365
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F1.1000992716276414
sg34
g752
(S'\x07\xdf\n\x01\n56\x01\xf0\x18'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1536
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1543
sS'block_loop.thisRepN'
p3377
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3378
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F1.4168421928939097
sg34
g752
(S'\x07\xdf\n\x01\n6\x00\x03\xef\xd0'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1435
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1442
sS'block_loop.thisRepN'
p3390
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3391
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.2167645318040741
sg34
g752
(S'\x07\xdf\n\x01\n6\x06\n\xb2H'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1536
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1543
sS'block_loop.thisRepN'
p3403
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3404
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.85021274120799717
sg34
g752
(S'\x07\xdf\n\x01\n6\x0c\x0e\x96`'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1220
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1230
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1228
sS'block_loop.thisRepN'
p3416
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3417
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.78347979842328641
sg34
g752
(S'\x07\xdf\n\x01\n6\x12\x0c\xc9p'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1237
sS'block_loop.thisIndex'
p3423
g888
sg38
S'right'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1244
sS'block_loop.thisRepN'
p3429
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3430
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.98349359723670204
sg34
g752
(S'\x07\xdf\n\x01\n6\x18\n\x06h'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1674
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1681
sS'block_loop.thisRepN'
p3442
I0
sg906
g925
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3443
I0
sg909
g919
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.81674890835438418
sg34
g752
(S'\x07\xdf\n\x01\n6\x1e\nXp'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1706
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1562
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1713
sS'block_loop.thisRepN'
p3455
I0
sg906
g1555
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3456
I0
sg909
g1562
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.90012709733446172
sg34
g752
(S'\x07\xdf\n\x01\n6$\x08\x0e\x80'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1252
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1128
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1259
sS'block_loop.thisRepN'
p3468
I0
sg906
g1128
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3469
I0
sg909
g1135
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.2001868541788099
sg34
g752
(S'\x07\xdf\n\x01\n6*\x06\xf5@'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1237
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1244
sS'block_loop.thisRepN'
p3481
I0
sg906
g1053
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3482
I0
sg909
g1060
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.95014323396299005
sg34
g752
(S'\x07\xdf\n\x01\n60\n\x9e\xc0'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1154
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1162
sS'block_loop.thisRepN'
p3494
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3495
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.95007937168657008
sg34
g752
(S'\x07\xdf\n\x01\n66\n=\x18'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1034
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1041
sS'block_loop.thisRepN'
p3507
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3508
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.0167712601510175
sg34
g752
(S'\x07\xdf\n\x01\n7\x00\n\x16\x08'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g966
sS'block_loop.thisIndex'
p3514
g888
sg38
S'right'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g974
sS'block_loop.thisRepN'
p3520
I0
sg906
g970
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3521
I0
sg909
g977
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.7001304044879362
sg34
g752
(S'\x07\xdf\n\x01\n7\x06\n\xaax'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1154
sS'block_loop.thisIndex'
p3527
g888
sg38
S'left'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1162
sS'block_loop.thisRepN'
p3533
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3534
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.2338770559949808
sg34
g752
(S'\x07\xdf\n\x01\n7\r\x06\xae\xf0'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1799
sS'block_loop.thisIndex'
p3540
g888
sg38
S'right'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1803
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1807
sS'block_loop.thisRepN'
p3546
I0
sg906
g1803
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3547
I0
sg909
g1810
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.1001021226225021
sg34
g752
(S'\x07\xdf\n\x01\n7\x13\n\xd1\x88'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1816
sS'block_loop.thisIndex'
p3553
g888
sg38
S'right'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1523
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1823
sS'block_loop.thisRepN'
p3559
I0
sg906
g1523
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3560
I0
sg909
g1530
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.6334348097302609
sg34
g752
(S'\x07\xdf\n\x01\n7\x19\x0c\xd1@'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g1267
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1271
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g1275
sS'block_loop.thisRepN'
p3572
I0
sg906
g1271
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3573
I0
sg909
g1278
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.0501903323920487
sg34
g752
(S'\x07\xdf\n\x01\n7 \x07\xa5\x08'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1079
sS'block_loop.thisIndex'
p3579
g888
sg38
S'right'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1089
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1087
sS'block_loop.thisRepN'
p3585
I0
sg906
g1089
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3586
I0
sg909
g1083
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.0834451873502076
sg34
g752
(S'\x07\xdf\n\x01\n7&\x08\xed('
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1342
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1224
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1349
sS'block_loop.thisRepN'
p3598
I0
sg906
g1230
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3599
I0
sg909
g1224
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.91688011112046297
sg34
g752
(S'\x07\xdf\n\x01\n7,\n\xae`'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g2000
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1164
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g2007
sS'block_loop.thisRepN'
p3611
I0
sg906
g1164
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3612
I0
sg909
g1158
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.95013411078025456
sg34
g752
(S'\x07\xdf\n\x01\n72\n\x0e8'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F60.56575961326871
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'29-beans.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'46-pistachios.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'46-pistachios.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'29-beans.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.033390847395367
sg34
g752
(S'\x07\xdf\n\x01\n9\x02\x03\xc8\xc0'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'18-mms.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'43-mrporky_pork_crackles_redo.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
S'18-mms.png'
p3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3664
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.81682474480749079
sg34
g752
(S'\x07\xdf\n\x01\n9\x08\x04\x97\xc8'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'27-hartleys_raspberries_jelly.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'51-mars.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'51-mars.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3680
I1
sg3646
S'27-hartleys_raspberries_jelly.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.85010753951200968
sg34
g752
(S'\x07\xdf\n\x01\n9\x0e\x02M\xd8'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
g3633
sS'block_loop.thisIndex'
p3687
g3626
sg38
S'right'
p3688
sg58
g62
sS'trial_loop.thisN'
p3689
I3
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p3690
g59
(g98
S'\x03\x00\x00\x00'
tRp3691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3692
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3693
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3694
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3695
Nsg69
Vn
sS'block_loop.thisTrialN'
p3696
I0
sg39
F0.88352518625515586
sg34
g752
(S'\x07\xdf\n\x01\n9\x14\x00}\x00'
tRp3697
sa(dp3698
S'trial_loop.thisTrialN'
p3699
I4
sg3632
g3653
sS'block_loop.thisIndex'
p3700
g3626
sg38
S'left'
p3701
sg58
g62
sS'trial_loop.thisN'
p3702
I4
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3703
g59
(g98
S'\x04\x00\x00\x00'
tRp3704
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3705
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3706
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3707
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3708
Nsg69
Vn
sS'block_loop.thisTrialN'
p3709
I0
sg39
F0.81679024777395171
sg34
g752
(S'\x07\xdf\n\x01\n9\x19\x0e\xa6\x00'
tRp3710
sa(dp3711
S'trial_loop.thisTrialN'
p3712
I5
sg3632
S'33-ambrosia_rice.png'
p3713
sS'block_loop.thisIndex'
p3714
g3626
sg38
S'right'
p3715
sg58
g62
sS'trial_loop.thisN'
p3716
I5
sg33
S'23-crunchie_redo.png'
p3717
sg63
g64
sS'trial_loop.thisIndex'
p3718
g59
(g98
S'\x05\x00\x00\x00'
tRp3719
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3720
I0
sg3641
S'23-crunchie_redo.png'
p3721
sS'block_loop.thisRepN'
p3722
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3723
I1
sg3646
S'33-ambrosia_rice.png'
p3724
sg55
g11
sS'block_loop.thisTrial'
p3725
Nsg69
Vn
sS'block_loop.thisTrialN'
p3726
I0
sg39
F1.5335333971197542
sg34
g752
(S'\x07\xdf\n\x01\n9\x1f\x0c\\\x10'
tRp3727
sa(dp3728
S'trial_loop.thisTrialN'
p3729
I6
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3730
sS'block_loop.thisIndex'
p3731
g3626
sg38
S'right'
p3732
sg58
g62
sS'trial_loop.thisN'
p3733
I6
sg33
S'36-fig_rolls.png'
p3734
sg63
g64
sS'trial_loop.thisIndex'
p3735
g59
(g98
S'\x06\x00\x00\x00'
tRp3736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3737
I0
sg3641
S'36-fig_rolls.png'
p3738
sS'block_loop.thisRepN'
p3739
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3740
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p3741
sg55
g11
sS'block_loop.thisTrial'
p3742
Nsg69
Vn
sS'block_loop.thisTrialN'
p3743
I0
sg39
F1.3001863409995167
sg34
g752
(S'\x07\xdf\n\x01\n9&\x05\xc4\x90'
tRp3744
sa(dp3745
S'trial_loop.thisTrialN'
p3746
I7
sg3632
S'41-peanuts_redo.png'
p3747
sS'block_loop.thisIndex'
p3748
g3626
sg38
S'left'
p3749
sg58
g62
sS'trial_loop.thisN'
p3750
I7
sg33
S'41-peanuts_redo.png'
p3751
sg63
g64
sS'trial_loop.thisIndex'
p3752
g59
(g98
S'\x07\x00\x00\x00'
tRp3753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3754
I0
sg3641
S'45-chewy_nougat_redo.png'
p3755
sS'block_loop.thisRepN'
p3756
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3757
I1
sg3646
S'45-chewy_nougat_redo.png'
p3758
sg55
g11
sS'block_loop.thisTrial'
p3759
Nsg69
Vn
sS'block_loop.thisTrialN'
p3760
I0
sg39
F0.83343577906862265
sg34
g752
(S'\x07\xdf\n\x01\n9,\n\xd9X'
tRp3761
sa(dp3762
S'trial_loop.thisTrialN'
p3763
I8
sg3632
S'23-crunchie_redo.png'
p3764
sS'block_loop.thisIndex'
p3765
g3626
sg38
S'left'
p3766
sg58
g62
sS'trial_loop.thisN'
p3767
I8
sg33
g3717
sg63
g64
sS'trial_loop.thisIndex'
p3768
g59
(g98
S'\x08\x00\x00\x00'
tRp3769
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3770
I0
sg3641
S'33-ambrosia_rice.png'
p3771
sS'block_loop.thisRepN'
p3772
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3773
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p3774
Nsg69
Vn
sS'block_loop.thisTrialN'
p3775
I0
sg39
F0.7168472106441186
sg34
g752
(S'\x07\xdf\n\x01\n92\x08\xcd\xe8'
tRp3776
sa(dp3777
S'trial_loop.thisTrialN'
p3778
I9
sg3632
S'6-sour_patch_kids.png'
p3779
sS'block_loop.thisIndex'
p3780
g3626
sg38
S'right'
p3781
sg58
g62
sS'trial_loop.thisN'
p3782
I9
sg33
S'38-maltesers.png'
p3783
sg63
g64
sS'trial_loop.thisIndex'
p3784
g59
(g98
S'\t\x00\x00\x00'
tRp3785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3786
I0
sg3641
S'38-maltesers.png'
p3787
sS'block_loop.thisRepN'
p3788
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3789
I1
sg3646
S'6-sour_patch_kids.png'
p3790
sg55
g11
sS'block_loop.thisTrial'
p3791
Nsg69
Vn
sS'block_loop.thisTrialN'
p3792
I0
sg39
F1.2666019110783964
sg34
g752
(S'\x07\xdf\n\x01\n98\x04\xda0'
tRp3793
sa(dp3794
S'trial_loop.thisTrialN'
p3795
I10
sg3632
S'42-mrkipling_lemon_slices.png'
p3796
sS'block_loop.thisIndex'
p3797
g3626
sg38
S'left'
p3798
sg58
g62
sS'trial_loop.thisN'
p3799
I10
sg33
S'16-skips_prawn.png'
p3800
sg63
g64
sS'trial_loop.thisIndex'
p3801
g59
(g98
S'\n\x00\x00\x00'
tRp3802
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3803
I0
sg3641
S'16-skips_prawn.png'
p3804
sS'block_loop.thisRepN'
p3805
I1
sg3644
S'42-mrkipling_lemon_slices.png'
p3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3807
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p3808
Nsg69
Vn
sS'block_loop.thisTrialN'
p3809
I0
sg39
F0.76711908147808572
sg34
g752
(S'\x07\xdf\n\x01\n:\x02\tu\xe0'
tRp3810
sa(dp3811
S'trial_loop.thisTrialN'
p3812
I11
sg3632
S'50-polo.png'
p3813
sS'block_loop.thisIndex'
p3814
g3626
sg38
S'right'
p3815
sg58
g62
sS'trial_loop.thisN'
p3816
I11
sg33
S'48-twix.png'
p3817
sg63
g64
sS'trial_loop.thisIndex'
p3818
g59
(g98
S'\x0b\x00\x00\x00'
tRp3819
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3820
I0
sg3641
S'48-twix.png'
p3821
sS'block_loop.thisRepN'
p3822
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3823
I1
sg3646
S'50-polo.png'
p3824
sg55
g11
sS'block_loop.thisTrial'
p3825
Nsg69
Vn
sS'block_loop.thisTrialN'
p3826
I0
sg39
F1.5502288208172104
sg34
g752
(S'\x07\xdf\n\x01\n:\x08\x06tX'
tRp3827
sa(dp3828
S'trial_loop.thisTrialN'
p3829
I12
sg3632
S'40-sardines.png'
p3830
sS'block_loop.thisIndex'
p3831
g3626
sg38
S'left'
p3832
sg58
g62
sS'trial_loop.thisN'
p3833
I12
sg33
S'40-sardines.png'
p3834
sg63
g64
sS'trial_loop.thisIndex'
p3835
g59
(g98
S'\x0c\x00\x00\x00'
tRp3836
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3837
I0
sg3641
S'5-pineapple.png'
p3838
sS'block_loop.thisRepN'
p3839
I1
sg3644
S'5-pineapple.png'
p3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3841
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p3842
Nsg69
Vn
sS'block_loop.thisTrialN'
p3843
I0
sg39
F0.78344102489836587
sg34
g752
(S'\x07\xdf\n\x01\n:\x0f\x00\x1bX'
tRp3844
sa(dp3845
S'trial_loop.thisTrialN'
p3846
I13
sg3632
g3653
sS'block_loop.thisIndex'
p3847
g3626
sg38
S'left'
p3848
sg58
g62
sS'trial_loop.thisN'
p3849
I13
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3850
g59
(g98
S'\r\x00\x00\x00'
tRp3851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3852
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3853
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3854
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3855
Nsg69
Vn
sS'block_loop.thisTrialN'
p3856
I0
sg39
F0.78355050308618956
sg34
g752
(S'\x07\xdf\n\x01\n:\x14\x0c\x96\xa8'
tRp3857
sa(dp3858
S'trial_loop.thisTrialN'
p3859
I14
sg3632
g3764
sS'block_loop.thisIndex'
p3860
g3626
sg38
S'left'
p3861
sg58
g62
sS'trial_loop.thisN'
p3862
I14
sg33
g3724
sg63
g64
sS'trial_loop.thisIndex'
p3863
g59
(g98
S'\x0e\x00\x00\x00'
tRp3864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3865
I0
sg3641
g3771
sS'block_loop.thisRepN'
p3866
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3867
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p3868
Nsg69
Vn
sS'block_loop.thisTrialN'
p3869
I0
sg39
F1.0667942391664837
sg34
g752
(S'\x07\xdf\n\x01\n:\x1a\t\xd3\xa0'
tRp3870
sa(dp3871
S'trial_loop.thisTrialN'
p3872
I15
sg3632
S'36-fig_rolls.png'
p3873
sS'block_loop.thisIndex'
p3874
g3626
sg38
S'left'
p3875
sg58
g62
sS'trial_loop.thisN'
p3876
I15
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p3877
g59
(g98
S'\x0f\x00\x00\x00'
tRp3878
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3879
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p3880
sS'block_loop.thisRepN'
p3881
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3882
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p3883
Nsg69
Vn
sS'block_loop.thisTrialN'
p3884
I0
sg39
F0.73354719593316986
sg34
g752
(S'\x07\xdf\n\x01\n: \x0bZ@'
tRp3885
sa(dp3886
S'trial_loop.thisTrialN'
p3887
I16
sg3632
S'16-skips_prawn.png'
p3888
sS'block_loop.thisIndex'
p3889
g3626
sg38
S'right'
p3890
sg58
g62
sS'trial_loop.thisN'
p3891
I16
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p3892
g59
(g98
S'\x10\x00\x00\x00'
tRp3893
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3894
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3895
sS'block_loop.thisRepN'
p3896
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3897
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p3898
Nsg69
Vn
sS'block_loop.thisTrialN'
p3899
I0
sg39
F0.90000535986928298
sg34
g752
(S'\x07\xdf\n\x01\n:&\x07\xa1 '
tRp3900
sa(dp3901
S'trial_loop.thisTrialN'
p3902
I17
sg3632
S'44-crunch.png'
p3903
sS'block_loop.thisIndex'
p3904
g3626
sg38
S'left'
p3905
sg58
g62
sS'trial_loop.thisN'
p3906
I17
sg33
S'44-crunch.png'
p3907
sg63
g64
sS'trial_loop.thisIndex'
p3908
g59
(g98
S'\x11\x00\x00\x00'
tRp3909
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3910
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3911
sS'block_loop.thisRepN'
p3912
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3913
I1
sg3646
S'26-walkers_smoky_bacon.png'
p3914
sg55
g11
sS'block_loop.thisTrial'
p3915
Nsg69
Vn
sS'block_loop.thisTrialN'
p3916
I0
sg39
F0.68344666986740776
sg34
g752
(S'\x07\xdf\n\x01\n:,\x06\xc6`'
tRp3917
sa(dp3918
S'trial_loop.thisTrialN'
p3919
I18
sg3632
S'31-hobnobs.png'
p3920
sS'block_loop.thisIndex'
p3921
g3626
sg38
S'left'
p3922
sg58
g62
sS'trial_loop.thisN'
p3923
I18
sg33
S'31-hobnobs.png'
p3924
sg63
g64
sS'trial_loop.thisIndex'
p3925
g59
(g98
S'\x12\x00\x00\x00'
tRp3926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3927
I0
sg3641
S'25-kitkat.png'
p3928
sS'block_loop.thisRepN'
p3929
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3930
I1
sg3646
S'25-kitkat.png'
p3931
sg55
g11
sS'block_loop.thisTrial'
p3932
Nsg69
Vn
sS'block_loop.thisTrialN'
p3933
I0
sg39
F0.95016632701845083
sg34
g752
(S'\x07\xdf\n\x01\n:2\x02U\xa8'
tRp3934
sa(dp3935
S'trial_loop.thisTrialN'
p3936
I19
sg3632
S'21-nakd_banana_crunch.png'
p3937
sS'block_loop.thisIndex'
p3938
g3626
sg38
S'right'
p3939
sg58
g62
sS'trial_loop.thisN'
p3940
I19
sg33
S'1-treacle_cookies.png'
p3941
sg63
g64
sS'trial_loop.thisIndex'
p3942
g59
(g98
S'\x13\x00\x00\x00'
tRp3943
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3944
I0
sg3641
S'1-treacle_cookies.png'
p3945
sS'block_loop.thisRepN'
p3946
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3947
I1
sg3646
S'21-nakd_banana_crunch.png'
p3948
sg55
g11
sS'block_loop.thisTrial'
p3949
Nsg69
Vn
sS'block_loop.thisTrialN'
p3950
I0
sg39
F0.9334361211876967
sg34
g752
(S'\x07\xdf\n\x01\n:8\x022\x80'
tRp3951
sa(dp3952
S'trial_loop.thisTrialN'
p3953
I20
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3954
sS'block_loop.thisIndex'
p3955
g3626
sg38
S'right'
p3956
sg58
g62
sS'trial_loop.thisN'
p3957
I20
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3958
g59
(g98
S'\x14\x00\x00\x00'
tRp3959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3960
I0
sg3641
S'18-mms.png'
p3961
sS'block_loop.thisRepN'
p3962
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3963
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3964
Nsg69
Vn
sS'block_loop.thisTrialN'
p3965
I0
sg39
F0.76678152373096964
sg34
g752
(S'\x07\xdf\n\x01\n;\x02\x01\x92X'
tRp3966
sa(dp3967
S'trial_loop.thisTrialN'
p3968
I21
sg3632
S'13-mccoys_steak_crisps.png'
p3969
sS'block_loop.thisIndex'
p3970
g3626
sg38
S'left'
p3971
sg58
g62
sS'trial_loop.thisN'
p3972
I21
sg33
S'3-ellas_strawberries_apples.png'
p3973
sg63
g64
sS'trial_loop.thisIndex'
p3974
g59
(g98
S'\x15\x00\x00\x00'
tRp3975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3976
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3977
sS'block_loop.thisRepN'
p3978
I1
sg3644
S'13-mccoys_steak_crisps.png'
p3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3980
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p3981
Nsg69
Vn
sS'block_loop.thisTrialN'
p3982
I0
sg39
F1.3169139809347143
sg34
g752
(S'\x07\xdf\n\x01\n;\x07\r\xd3\x10'
tRp3983
sa(dp3984
S'trial_loop.thisTrialN'
p3985
I22
sg3632
S'49-yorkie.png'
p3986
sS'block_loop.thisIndex'
p3987
g3626
sg38
S'right'
p3988
sg58
g62
sS'trial_loop.thisN'
p3989
I22
sg33
S'49-yorkie.png'
p3990
sg63
g64
sS'trial_loop.thisIndex'
p3991
g59
(g98
S'\x16\x00\x00\x00'
tRp3992
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3993
I0
sg3641
S'35-raisins.png'
p3994
sS'block_loop.thisRepN'
p3995
I1
sg3644
S'35-raisins.png'
p3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3997
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p3998
Nsg69
Vn
sS'block_loop.thisTrialN'
p3999
I0
sg39
F0.96676909339521444
sg34
g752
(S'\x07\xdf\n\x01\n;\x0e\x03\xe4\x18'
tRp4000
sa(dp4001
S'trial_loop.thisTrialN'
p4002
I23
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4003
sS'block_loop.thisIndex'
p4004
g3626
sg38
S'right'
p4005
sg58
g62
sS'trial_loop.thisN'
p4006
I23
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4007
sg63
g64
sS'trial_loop.thisIndex'
p4008
g59
(g98
S'\x17\x00\x00\x00'
tRp4009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4010
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4011
sS'block_loop.thisRepN'
p4012
I1
sg3644
S'8-liquorice_catherine_wheels.png'
p4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4014
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p4015
Nsg69
Vn
sS'block_loop.thisTrialN'
p4016
I0
sg39
F1.0334341825114279
sg34
g752
(S'\x07\xdf\n\x01\n;\x14\x03\xc0\xf0'
tRp4017
sa(dp4018
S'trial_loop.thisTrialN'
p4019
I24
sg3632
g3903
sS'block_loop.thisIndex'
p4020
g3626
sg38
S'left'
p4021
sg58
g62
sS'trial_loop.thisN'
p4022
I24
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p4023
g59
(g98
S'\x18\x00\x00\x00'
tRp4024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4025
I0
sg3641
g3911
sS'block_loop.thisRepN'
p4026
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4027
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p4028
Nsg69
Vn
sS'block_loop.thisTrialN'
p4029
I0
sg39
F0.75010121030436494
sg34
g752
(S'\x07\xdf\n\x01\n;\x1a\x04\xca\x90'
tRp4030
sa(dp4031
S'trial_loop.thisTrialN'
p4032
I25
sg3632
S'2-steamed_puddings.png'
p4033
sS'block_loop.thisIndex'
p4034
g3626
sg38
S'left'
p4035
sg58
g62
sS'trial_loop.thisN'
p4036
I25
sg33
S'2-steamed_puddings.png'
p4037
sg63
g64
sS'trial_loop.thisIndex'
p4038
g59
(g98
S'\x19\x00\x00\x00'
tRp4039
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4040
I0
sg3641
S'20-fruit_pastilles.png'
p4041
sS'block_loop.thisRepN'
p4042
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4043
I1
sg3646
S'20-fruit_pastilles.png'
p4044
sg55
g11
sS'block_loop.thisTrial'
p4045
Nsg69
Vn
sS'block_loop.thisTrialN'
p4046
I0
sg39
F0.73345254291598394
sg34
g752
(S'\x07\xdf\n\x01\n; \x01\x8ep'
tRp4047
sa(dp4048
S'trial_loop.thisTrialN'
p4049
I26
sg3632
S'22-daim.png'
p4050
sS'block_loop.thisIndex'
p4051
g3626
sg38
S'right'
p4052
sg58
g62
sS'trial_loop.thisN'
p4053
I26
sg33
S'7-olives.png'
p4054
sg63
g64
sS'trial_loop.thisIndex'
p4055
g59
(g98
S'\x1a\x00\x00\x00'
tRp4056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4057
I0
sg3641
S'7-olives.png'
p4058
sS'block_loop.thisRepN'
p4059
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4060
I1
sg3646
S'22-daim.png'
p4061
sg55
g11
sS'block_loop.thisTrial'
p4062
Nsg69
Vn
sS'block_loop.thisTrialN'
p4063
I0
sg39
F1.0168613515766083
sg34
g752
(S'\x07\xdf\n\x01\n;%\rV\x10'
tRp4064
sa(dp4065
S'trial_loop.thisTrialN'
p4066
I27
sg3632
g3779
sS'block_loop.thisIndex'
p4067
g3626
sg38
S'right'
p4068
sg58
g62
sS'trial_loop.thisN'
p4069
I27
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p4070
g59
(g98
S'\x1b\x00\x00\x00'
tRp4071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4072
I0
sg3641
g3787
sS'block_loop.thisRepN'
p4073
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4074
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p4075
Nsg69
Vn
sS'block_loop.thisTrialN'
p4076
I0
sg39
F1.6833158092208578
sg34
g752
(S'\x07\xdf\n\x01\n;+\x0e%\x18'
tRp4077
sa(dp4078
S'trial_loop.thisTrialN'
p4079
I28
sg3632
S'7-olives.png'
p4080
sS'block_loop.thisIndex'
p4081
g3626
sg38
S'left'
p4082
sg58
g62
sS'trial_loop.thisN'
p4083
I28
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4084
g59
(g98
S'\x1c\x00\x00\x00'
tRp4085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4086
I0
sg3641
S'22-daim.png'
p4087
sS'block_loop.thisRepN'
p4088
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4089
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4090
Nsg69
Vn
sS'block_loop.thisTrialN'
p4091
I0
sg39
F0.85012179448403913
sg34
g752
(S'\x07\xdf\n\x01\n;2\t\xb0x'
tRp4092
sa(dp4093
S'trial_loop.thisTrialN'
p4094
I29
sg3632
S'5-pineapple.png'
p4095
sS'block_loop.thisIndex'
p4096
g3626
sg38
S'right'
p4097
sg58
g62
sS'trial_loop.thisN'
p4098
I29
sg33
g3834
sg63
g64
sS'trial_loop.thisIndex'
p4099
g59
(g98
S'\x1d\x00\x00\x00'
tRp4100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4101
I0
sg3641
S'40-sardines.png'
p4102
sS'block_loop.thisRepN'
p4103
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4104
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4105
Nsg69
Vn
sS'block_loop.thisTrialN'
p4106
I0
sg39
F0.9334432486739388
sg34
g752
(S'\x07\xdf\n\x01\n;8\x07\xdf\xa0'
tRp4107
sa(dp4108
S'trial_loop.thisTrialN'
p4109
I30
sg3632
S'19-caramello_redo.png'
p4110
sS'block_loop.thisIndex'
p4111
g3626
sg38
S'left'
p4112
sg58
g62
sS'trial_loop.thisN'
p4113
I30
sg33
S'30-spaghetti_hoops.png'
p4114
sg63
g64
sS'trial_loop.thisIndex'
p4115
g59
(g98
S'\x1e\x00\x00\x00'
tRp4116
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4117
I0
sg3641
S'30-spaghetti_hoops.png'
p4118
sS'block_loop.thisRepN'
p4119
I1
sg3644
S'19-caramello_redo.png'
p4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4121
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p4122
Nsg69
Vn
sS'block_loop.thisTrialN'
p4123
I0
sg39
F0.76694174962131001
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00\x02\x07}\xf8'
tRp4124
sa(dp4125
S'trial_loop.thisTrialN'
p4126
I31
sg3632
g3779
sS'block_loop.thisIndex'
p4127
g3626
sg38
S'right'
p4128
sg58
g62
sS'trial_loop.thisN'
p4129
I31
sg33
g3790
sg63
g64
sS'trial_loop.thisIndex'
p4130
g59
(g98
S'\x1f\x00\x00\x00'
tRp4131
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4132
I0
sg3641
g3787
sS'block_loop.thisRepN'
p4133
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4134
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p4135
Nsg69
Vn
sS'block_loop.thisTrialN'
p4136
I0
sg39
F0.83318945314522352
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00\x08\x04|p'
tRp4137
sa(dp4138
S'trial_loop.thisTrialN'
p4139
I32
sg3632
g3969
sS'block_loop.thisIndex'
p4140
g3626
sg38
S'left'
p4141
sg58
g62
sS'trial_loop.thisN'
p4142
I32
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p4143
g59
(g98
S' \x00\x00\x00'
tRp4144
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4145
I0
sg3641
g3977
sS'block_loop.thisRepN'
p4146
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4147
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p4148
Nsg69
Vn
sS'block_loop.thisTrialN'
p4149
I0
sg39
F1.1167841466458412
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00\x0e\x02q\x00'
tRp4150
sa(dp4151
S'trial_loop.thisTrialN'
p4152
I33
sg3632
S'26-walkers_smoky_bacon.png'
p4153
sS'block_loop.thisIndex'
p4154
g3626
sg38
S'right'
p4155
sg58
g62
sS'trial_loop.thisN'
p4156
I33
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p4157
g59
(g98
S'!\x00\x00\x00'
tRp4158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4159
I0
sg3641
S'44-crunch.png'
p4160
sS'block_loop.thisRepN'
p4161
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4162
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p4163
Nsg69
Vn
sS'block_loop.thisTrialN'
p4164
I0
sg39
F1.1338430721402801
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00\x14\x04\xabP'
tRp4165
sa(dp4166
S'trial_loop.thisTrialN'
p4167
I34
sg3632
g4050
sS'block_loop.thisIndex'
p4168
g3626
sg38
S'right'
p4169
sg58
g62
sS'trial_loop.thisN'
p4170
I34
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4171
g59
(g98
S'"\x00\x00\x00'
tRp4172
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4173
I0
sg3641
g4058
sS'block_loop.thisRepN'
p4174
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4175
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4176
Nsg69
Vn
sS'block_loop.thisTrialN'
p4177
I0
sg39
F0.85020076703131053
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00\x1a\x07$ '
tRp4178
sa(dp4179
S'trial_loop.thisTrialN'
p4180
I35
sg3632
S'30-spaghetti_hoops.png'
p4181
sS'block_loop.thisIndex'
p4182
g3626
sg38
S'right'
p4183
sg58
g62
sS'trial_loop.thisN'
p4184
I35
sg33
g4120
sg63
g64
sS'trial_loop.thisIndex'
p4185
g59
(g98
S'#\x00\x00\x00'
tRp4186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4187
I0
sg3641
S'19-caramello_redo.png'
p4188
sS'block_loop.thisRepN'
p4189
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4190
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p4191
Nsg69
Vn
sS'block_loop.thisTrialN'
p4192
I0
sg39
F1.0835136112177679
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00 \x05SH'
tRp4193
sa(dp4194
S'trial_loop.thisTrialN'
p4195
I36
sg3632
S'3-ellas_strawberries_apples.png'
p4196
sS'block_loop.thisIndex'
p4197
g3626
sg38
S'right'
p4198
sg58
g62
sS'trial_loop.thisN'
p4199
I36
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p4200
g59
(g98
S'$\x00\x00\x00'
tRp4201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4202
I0
sg3641
S'13-mccoys_steak_crisps.png'
p4203
sS'block_loop.thisRepN'
p4204
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4205
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p4206
Nsg69
Vn
sS'block_loop.thisTrialN'
p4207
I0
sg39
F0.95022363200723703
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00&\x07\x14\x80'
tRp4208
sa(dp4209
S'trial_loop.thisTrialN'
p4210
I37
sg3632
S'4-corn.png'
p4211
sS'block_loop.thisIndex'
p4212
g3626
sg38
S'right'
p4213
sg58
g62
sS'trial_loop.thisN'
p4214
I37
sg33
S'10-bounty_redo.png'
p4215
sg63
g64
sS'trial_loop.thisIndex'
p4216
g59
(g98
S'%\x00\x00\x00'
tRp4217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4218
I0
sg3641
S'10-bounty_redo.png'
p4219
sS'block_loop.thisRepN'
p4220
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4221
I1
sg3646
S'4-corn.png'
p4222
sg55
g11
sS'block_loop.thisTrial'
p4223
Nsg69
Vn
sS'block_loop.thisTrialN'
p4224
I0
sg39
F0.90007207314056359
sg34
g752
(S'\x07\xdf\n\x01\x0b\x00,\x06\xf1X'
tRp4225
sa(dp4226
S'trial_loop.thisTrialN'
p4227
I38
sg3632
g3713
sS'block_loop.thisIndex'
p4228
g3626
sg38
S'right'
p4229
sg58
g62
sS'trial_loop.thisN'
p4230
I38
sg33
g3717
sg63
g64
sS'trial_loop.thisIndex'
p4231
g59
(g98
S'&\x00\x00\x00'
tRp4232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4233
I0
sg3641
g3721
sS'block_loop.thisRepN'
p4234
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4235
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p4236
Nsg69
Vn
sS'block_loop.thisTrialN'
p4237
I0
sg39
F1.2002153641233235
sg34
g752
(S'\x07\xdf\n\x01\x0b\x002\x05\xd8\x18'
tRp4238
sa(dp4239
S'trial_loop.thisTrialN'
p4240
I39
sg3632
S'20-fruit_pastilles.png'
p4241
sS'block_loop.thisIndex'
p4242
g3626
sg38
S'right'
p4243
sg58
g62
sS'trial_loop.thisN'
p4244
I39
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4245
g59
(g98
S"'\x00\x00\x00"
tRp4246
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4247
I0
sg3641
S'2-steamed_puddings.png'
p4248
sS'block_loop.thisRepN'
p4249
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4250
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4251
Nsg69
Vn
sS'block_loop.thisTrialN'
p4252
I0
sg39
F1.0835375595715959
sg34
g752
(S'\x07\xdf\n\x01\x0b\x008\t\x81\x98'
tRp4253
sa(dp4254
S'trial_loop.thisTrialN'
p4255
I40
sg3632
S'48-twix.png'
p4256
sS'block_loop.thisIndex'
p4257
g3626
sg38
S'left'
p4258
sg58
g62
sS'trial_loop.thisN'
p4259
I40
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p4260
g59
(g98
S'(\x00\x00\x00'
tRp4261
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4262
I0
sg3641
S'50-polo.png'
p4263
sS'block_loop.thisRepN'
p4264
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4265
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p4266
Nsg69
Vn
sS'block_loop.thisTrialN'
p4267
I0
sg39
F1.2167753655830893
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01\x02\x0bB\xd0'
tRp4268
sa(dp4269
S'trial_loop.thisTrialN'
p4270
I41
sg3632
g3903
sS'block_loop.thisIndex'
p4271
g3626
sg38
S'left'
p4272
sg58
g62
sS'trial_loop.thisN'
p4273
I41
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p4274
g59
(g98
S')\x00\x00\x00'
tRp4275
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4276
I0
sg3641
g3911
sS'block_loop.thisRepN'
p4277
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4278
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p4279
Nsg69
Vn
sS'block_loop.thisTrialN'
p4280
I0
sg39
F0.71685775932382967
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01\x08\x0e\xecP'
tRp4281
sa(dp4282
S'trial_loop.thisTrialN'
p4283
I42
sg3632
S'38-maltesers.png'
p4284
sS'block_loop.thisIndex'
p4285
g3626
sg38
S'left'
p4286
sg58
g62
sS'trial_loop.thisN'
p4287
I42
sg33
g3790
sg63
g64
sS'trial_loop.thisIndex'
p4288
g59
(g98
S'*\x00\x00\x00'
tRp4289
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4290
I0
sg3641
S'6-sour_patch_kids.png'
p4291
sS'block_loop.thisRepN'
p4292
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4293
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p4294
Nsg69
Vn
sS'block_loop.thisTrialN'
p4295
I0
sg39
F1.3166189030057467
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01\x0e\x0b30'
tRp4296
sa(dp4297
S'trial_loop.thisTrialN'
p4298
I43
sg3632
g4241
sS'block_loop.thisIndex'
p4299
g3626
sg38
S'right'
p4300
sg58
g62
sS'trial_loop.thisN'
p4301
I43
sg33
g4044
sg63
g64
sS'trial_loop.thisIndex'
p4302
g59
(g98
S'+\x00\x00\x00'
tRp4303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4304
I0
sg3641
g4248
sS'block_loop.thisRepN'
p4305
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4306
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4307
Nsg69
Vn
sS'block_loop.thisTrialN'
p4308
I0
sg39
F0.90056985677756529
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01\x15\x01H '
tRp4309
sa(dp4310
S'trial_loop.thisTrialN'
p4311
I44
sg3632
g3747
sS'block_loop.thisIndex'
p4312
g3626
sg38
S'left'
p4313
sg58
g62
sS'trial_loop.thisN'
p4314
I44
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p4315
g59
(g98
S',\x00\x00\x00'
tRp4316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4317
I0
sg3641
g3755
sS'block_loop.thisRepN'
p4318
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4319
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p4320
Nsg69
Vn
sS'block_loop.thisTrialN'
p4321
I0
sg39
F1.0834223793945057
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01\x1b\x00.\xe0'
tRp4322
sa(dp4323
S'trial_loop.thisTrialN'
p4324
I45
sg3632
g3779
sS'block_loop.thisIndex'
p4325
g3626
sg38
S'right'
p4326
sg58
g62
sS'trial_loop.thisN'
p4327
I45
sg33
g3790
sg63
g64
sS'trial_loop.thisIndex'
p4328
g59
(g98
S'-\x00\x00\x00'
tRp4329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4330
I0
sg3641
g3787
sS'block_loop.thisRepN'
p4331
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4332
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p4333
Nsg69
Vn
sS'block_loop.thisTrialN'
p4334
I0
sg39
F0.7498577353753717
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01!\x02*\xb0'
tRp4335
sa(dp4336
S'trial_loop.thisTrialN'
p4337
I46
sg3632
g4050
sS'block_loop.thisIndex'
p4338
g3626
sg38
S'right'
p4339
sg58
g62
sS'trial_loop.thisN'
p4340
I46
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4341
g59
(g98
S'.\x00\x00\x00'
tRp4342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4343
I0
sg3641
g4058
sS'block_loop.thisRepN'
p4344
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4345
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4346
Nsg69
Vn
sS'block_loop.thisTrialN'
p4347
I0
sg39
F0.9502167896202991
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01&\r\xf2P'
tRp4348
sa(dp4349
S'trial_loop.thisTrialN'
p4350
I47
sg3632
S'8-liquorice_catherine_wheels.png'
p4351
sS'block_loop.thisIndex'
p4352
g3626
sg38
S'left'
p4353
sg58
g62
sS'trial_loop.thisN'
p4354
I47
sg33
g4013
sg63
g64
sS'trial_loop.thisIndex'
p4355
g59
(g98
S'/\x00\x00\x00'
tRp4356
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4357
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4358
sS'block_loop.thisRepN'
p4359
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4360
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p4361
Nsg69
Vn
sS'block_loop.thisTrialN'
p4362
I0
sg39
F0.96686146561614805
sg34
g752
(S'\x07\xdf\n\x01\x0b\x01,\r\xcf('
tRp4363
sa(dp4364
S'trial_loop.thisTrialN'
p4365
I48
sg3632
S'51-mars.png'
p4366
sS'block_loop.thisIndex'
p4367
g3626
sg38
S'right'
p4368
sg58
g62
sS'trial_loop.thisN'
p4369
I48
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4370
g59
(g98
S'0\x00\x00\x00'
tRp4371
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4372
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4373
sS'block_loop.thisRepN'
p4374
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4375
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4376
Nsg69
Vn
sS'block_loop.thisTrialN'
p4377
I0
sg39
F0.91685046077782317
sg34
g752
(S'\x07\xdf\n\x01\x0b\x012\r\xa8\x18'
tRp4378
sa(dp4379
S'trial_loop.thisTrialN'
p4380
I49
sg3632
g4284
sS'block_loop.thisIndex'
p4381
g3626
sg38
S'left'
p4382
sg58
g62
sS'trial_loop.thisN'
p4383
I49
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p4384
g59
(g98
S'1\x00\x00\x00'
tRp4385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4386
I0
sg3641
g4291
sS'block_loop.thisRepN'
p4387
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4388
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p4389
Nsg69
Vn
sS'block_loop.thisTrialN'
p4390
I0
sg39
F0.86653496972803623
sg34
g752
(S'\x07\xdf\n\x01\x0b\x018\r\x0b\xd8'
tRp4391
sa(dp4392
S'trial_loop.thisTrialN'
p4393
I50
sg3632
S'25-kitkat.png'
p4394
sS'block_loop.thisIndex'
p4395
g3626
sg38
S'right'
p4396
sg58
g62
sS'trial_loop.thisN'
p4397
I50
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p4398
g59
(g98
S'2\x00\x00\x00'
tRp4399
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4400
I0
sg3641
S'31-hobnobs.png'
p4401
sS'block_loop.thisRepN'
p4402
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4403
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p4404
Nsg69
Vn
sS'block_loop.thisTrialN'
p4405
I0
sg39
F1.1335003826034153
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02\x02\x0bu\x98'
tRp4406
sa(dp4407
S'trial_loop.thisTrialN'
p4408
I51
sg3632
g4256
sS'block_loop.thisIndex'
p4409
g3626
sg38
S'left'
p4410
sg58
g62
sS'trial_loop.thisN'
p4411
I51
sg33
g3824
sg63
g64
sS'trial_loop.thisIndex'
p4412
g59
(g98
S'3\x00\x00\x00'
tRp4413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4414
I0
sg3641
g4263
sS'block_loop.thisRepN'
p4415
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4416
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p4417
Nsg69
Vn
sS'block_loop.thisTrialN'
p4418
I0
sg39
F0.96677821657749519
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02\x08\r\xeeh'
tRp4419
sa(dp4420
S'trial_loop.thisTrialN'
p4421
I52
sg3632
g3747
sS'block_loop.thisIndex'
p4422
g3626
sg38
S'left'
p4423
sg58
g62
sS'trial_loop.thisN'
p4424
I52
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p4425
g59
(g98
S'4\x00\x00\x00'
tRp4426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4427
I0
sg3641
g3755
sS'block_loop.thisRepN'
p4428
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4429
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p4430
Nsg69
Vn
sS'block_loop.thisTrialN'
p4431
I0
sg39
F0.91678146671119976
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02\x0e\x0e\x05\xd8'
tRp4432
sa(dp4433
S'trial_loop.thisTrialN'
p4434
I53
sg3632
g4394
sS'block_loop.thisIndex'
p4435
g3626
sg38
S'right'
p4436
sg58
g62
sS'trial_loop.thisN'
p4437
I53
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p4438
g59
(g98
S'5\x00\x00\x00'
tRp4439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4440
I0
sg3641
g4401
sS'block_loop.thisRepN'
p4441
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4442
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p4443
Nsg69
Vn
sS'block_loop.thisTrialN'
p4444
I0
sg39
F0.83352244930074448
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02\x14\r+\x18'
tRp4445
sa(dp4446
S'trial_loop.thisTrialN'
p4447
I54
sg3632
g4095
sS'block_loop.thisIndex'
p4448
g3626
sg38
S'right'
p4449
sg58
g62
sS'trial_loop.thisN'
p4450
I54
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p4451
g59
(g98
S'6\x00\x00\x00'
tRp4452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4453
I0
sg3641
g4102
sS'block_loop.thisRepN'
p4454
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4455
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4456
Nsg69
Vn
sS'block_loop.thisTrialN'
p4457
I0
sg39
F0.91727582915473249
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02\x1a\x0b\x1f\xa8'
tRp4458
sa(dp4459
S'trial_loop.thisTrialN'
p4460
I55
sg3632
S'10-bounty_redo.png'
p4461
sS'block_loop.thisIndex'
p4462
g3626
sg38
S'left'
p4463
sg58
g62
sS'trial_loop.thisN'
p4464
I55
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p4465
g59
(g98
S'7\x00\x00\x00'
tRp4466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4467
I0
sg3641
S'4-corn.png'
p4468
sS'block_loop.thisRepN'
p4469
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4470
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p4471
Nsg69
Vn
sS'block_loop.thisTrialN'
p4472
I0
sg39
F0.96679332684834662
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02 \n\x7f\x80'
tRp4473
sa(dp4474
S'trial_loop.thisTrialN'
p4475
I56
sg3632
g3830
sS'block_loop.thisIndex'
p4476
g3626
sg38
S'left'
p4477
sg58
g62
sS'trial_loop.thisN'
p4478
I56
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p4479
g59
(g98
S'8\x00\x00\x00'
tRp4480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4481
I0
sg3641
g3838
sS'block_loop.thisRepN'
p4482
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4483
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p4484
Nsg69
Vn
sS'block_loop.thisTrialN'
p4485
I0
sg39
F0.71677508048378513
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02&\nXp'
tRp4486
sa(dp4487
S'trial_loop.thisTrialN'
p4488
I57
sg3632
g3954
sS'block_loop.thisIndex'
p4489
g3626
sg38
S'right'
p4490
sg58
g62
sS'trial_loop.thisN'
p4491
I57
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4492
g59
(g98
S'9\x00\x00\x00'
tRp4493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4494
I0
sg3641
g3961
sS'block_loop.thisRepN'
p4495
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4496
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4497
Nsg69
Vn
sS'block_loop.thisTrialN'
p4498
I0
sg39
F1.0501130704415118
sg34
g752
(S'\x07\xdf\n\x01\x0b\x02,\x06\xa38'
tRp4499
sa(dp4500
S'trial_loop.thisTrialN'
p4501
I58
sg3632
g4080
sS'block_loop.thisIndex'
p4502
g3626
sg38
S'left'
p4503
sg58
g62
sS'trial_loop.thisN'
p4504
I58
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4505
g59
(g98
S':\x00\x00\x00'
tRp4506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4507
I0
sg3641
g4087
sS'block_loop.thisRepN'
p4508
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4509
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4510
Nsg69
Vn
sS'block_loop.thisTrialN'
p4511
I0
sg39
F0.98354320454063782
sg34
g752
(S'\x07\xdf\n\x01\x0b\x022\x07\xebX'
tRp4512
sa(dp4513
S'trial_loop.thisTrialN'
p4514
I59
sg3632
g4461
sS'block_loop.thisIndex'
p4515
g3626
sg38
S'left'
p4516
sg58
g62
sS'trial_loop.thisN'
p4517
I59
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p4518
g59
(g98
S';\x00\x00\x00'
tRp4519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4520
I0
sg3641
g4468
sS'block_loop.thisRepN'
p4521
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4522
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p4523
Nsg69
Vn
sS'block_loop.thisTrialN'
p4524
I0
sg39
F0.98348333365629514
sg34
g752
(S'\x07\xdf\n\x01\x0b\x028\x08=`'
tRp4525
sa(dp4526
S'trial_loop.thisTrialN'
p4527
I60
sg3632
g4241
sS'block_loop.thisIndex'
p4528
g3626
sg38
S'right'
p4529
sg58
g62
sS'trial_loop.thisN'
p4530
I60
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4531
g59
(g98
S'<\x00\x00\x00'
tRp4532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4533
I0
sg3641
g4248
sS'block_loop.thisRepN'
p4534
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4535
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4536
Nsg69
Vn
sS'block_loop.thisTrialN'
p4537
I0
sg39
F1.016839969117882
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03\x02\x08T\xd0'
tRp4538
sa(dp4539
S'trial_loop.thisTrialN'
p4540
I61
sg3632
g3796
sS'block_loop.thisIndex'
p4541
g3626
sg38
S'left'
p4542
sg58
g62
sS'trial_loop.thisN'
p4543
I61
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4544
g59
(g98
S'=\x00\x00\x00'
tRp4545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4546
I0
sg3641
g3804
sS'block_loop.thisRepN'
p4547
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4548
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4549
Nsg69
Vn
sS'block_loop.thisTrialN'
p4550
I0
sg39
F0.85002429047290207
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03\x08\t#\xd8'
tRp4551
sa(dp4552
S'trial_loop.thisTrialN'
p4553
I62
sg3632
g3713
sS'block_loop.thisIndex'
p4554
g3626
sg38
S'right'
p4555
sg58
g62
sS'trial_loop.thisN'
p4556
I62
sg33
g3717
sg63
g64
sS'trial_loop.thisIndex'
p4557
g59
(g98
S'>\x00\x00\x00'
tRp4558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4559
I0
sg3641
g3721
sS'block_loop.thisRepN'
p4560
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4561
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p4562
Nsg69
Vn
sS'block_loop.thisTrialN'
p4563
I0
sg39
F1.0001234480610037
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03\x0e\x07S\x00'
tRp4564
sa(dp4565
S'trial_loop.thisTrialN'
p4566
I63
sg3632
S'1-treacle_cookies.png'
p4567
sS'block_loop.thisIndex'
p4568
g3626
sg38
S'left'
p4569
sg58
g62
sS'trial_loop.thisN'
p4570
I63
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p4571
g59
(g98
S'?\x00\x00\x00'
tRp4572
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4573
I0
sg3641
S'21-nakd_banana_crunch.png'
p4574
sS'block_loop.thisRepN'
p4575
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4576
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p4577
Nsg69
Vn
sS'block_loop.thisTrialN'
p4578
I0
sg39
F0.73346166609826469
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03\x14\x07\xe3\x88'
tRp4579
sa(dp4580
S'trial_loop.thisTrialN'
p4581
I64
sg3632
g3986
sS'block_loop.thisIndex'
p4582
g3626
sg38
S'right'
p4583
sg58
g62
sS'trial_loop.thisN'
p4584
I64
sg33
g3996
sg63
g64
sS'trial_loop.thisIndex'
p4585
g59
(g98
S'@\x00\x00\x00'
tRp4586
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4587
I0
sg3641
g3994
sS'block_loop.thisRepN'
p4588
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4589
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p4590
Nsg69
Vn
sS'block_loop.thisTrialN'
p4591
I0
sg39
F1.1668689922416888
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03\x1a\x04h\xe8'
tRp4592
sa(dp4593
S'trial_loop.thisTrialN'
p4594
I65
sg3632
g3813
sS'block_loop.thisIndex'
p4595
g3626
sg38
S'right'
p4596
sg58
g62
sS'trial_loop.thisN'
p4597
I65
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p4598
g59
(g98
S'A\x00\x00\x00'
tRp4599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4600
I0
sg3641
g3821
sS'block_loop.thisRepN'
p4601
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4602
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p4603
Nsg69
Vn
sS'block_loop.thisTrialN'
p4604
I0
sg39
F1.0000835341384118
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03 \x07^\xb8'
tRp4605
sa(dp4606
S'trial_loop.thisTrialN'
p4607
I66
sg3632
g3937
sS'block_loop.thisIndex'
p4608
g3626
sg38
S'right'
p4609
sg58
g62
sS'trial_loop.thisN'
p4610
I66
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p4611
g59
(g98
S'B\x00\x00\x00'
tRp4612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4613
I0
sg3641
g3945
sS'block_loop.thisRepN'
p4614
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4615
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p4616
Nsg69
Vn
sS'block_loop.thisTrialN'
p4617
I0
sg39
F0.80010708335248637
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03&\x07\xef@'
tRp4618
sa(dp4619
S'trial_loop.thisTrialN'
p4620
I67
sg3632
g4110
sS'block_loop.thisIndex'
p4621
g3626
sg38
S'left'
p4622
sg58
g62
sS'trial_loop.thisN'
p4623
I67
sg33
g4120
sg63
g64
sS'trial_loop.thisIndex'
p4624
g59
(g98
S'C\x00\x00\x00'
tRp4625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4626
I0
sg3641
g4118
sS'block_loop.thisRepN'
p4627
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4628
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p4629
Nsg69
Vn
sS'block_loop.thisTrialN'
p4630
I0
sg39
F1.1834255725079856
sg34
g752
(S'\x07\xdf\n\x01\x0b\x03,\x05f\xd0'
tRp4631
sa(dp4632
S'trial_loop.thisTrialN'
p4633
I68
sg3632
g3873
sS'block_loop.thisIndex'
p4634
g3626
sg38
S'left'
p4635
sg58
g62
sS'trial_loop.thisN'
p4636
I68
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p4637
g59
(g98
S'D\x00\x00\x00'
tRp4638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4639
I0
sg3641
g3880
sS'block_loop.thisRepN'
p4640
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4641
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p4642
Nsg69
Vn
sS'block_loop.thisTrialN'
p4643
I0
sg39
F0.90019181490879419
sg34
g752
(S'\x07\xdf\n\x01\x0b\x032\x08\x978'
tRp4644
sa(dp4645
S'trial_loop.thisTrialN'
p4646
I69
sg3632
g4461
sS'block_loop.thisIndex'
p4647
g3626
sg38
S'left'
p4648
sg58
g62
sS'trial_loop.thisN'
p4649
I69
sg33
g4215
sg63
g64
sS'trial_loop.thisIndex'
p4650
g59
(g98
S'E\x00\x00\x00'
tRp4651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4652
I0
sg3641
g4468
sS'block_loop.thisRepN'
p4653
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4654
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p4655
Nsg69
Vn
sS'block_loop.thisTrialN'
p4656
I0
sg39
F0.86675563670087286
sg34
g752
(S'\x07\xdf\n\x01\x0b\x038\x07\xbcx'
tRp4657
sa(dp4658
S'trial_loop.thisTrialN'
p4659
I70
sg3632
g4153
sS'block_loop.thisIndex'
p4660
g3626
sg38
S'right'
p4661
sg58
g62
sS'trial_loop.thisN'
p4662
I70
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p4663
g59
(g98
S'F\x00\x00\x00'
tRp4664
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4665
I0
sg3641
g4160
sS'block_loop.thisRepN'
p4666
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4667
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p4668
Nsg69
Vn
sS'block_loop.thisTrialN'
p4669
I0
sg39
F1.116871101977722
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04\x02\x06* '
tRp4670
sa(dp4671
S'trial_loop.thisTrialN'
p4672
I71
sg3632
g3969
sS'block_loop.thisIndex'
p4673
g3626
sg38
S'left'
p4674
sg58
g62
sS'trial_loop.thisN'
p4675
I71
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p4676
g59
(g98
S'G\x00\x00\x00'
tRp4677
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4678
I0
sg3641
g3977
sS'block_loop.thisRepN'
p4679
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4680
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p4681
Nsg69
Vn
sS'block_loop.thisTrialN'
p4682
I0
sg39
F1.3334320727758495
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04\x08\x08dp'
tRp4683
sa(dp4684
S'trial_loop.thisTrialN'
p4685
I72
sg3632
g3937
sS'block_loop.thisIndex'
p4686
g3626
sg38
S'right'
p4687
sg58
g62
sS'trial_loop.thisN'
p4688
I72
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p4689
g59
(g98
S'H\x00\x00\x00'
tRp4690
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4691
I0
sg3641
g3945
sS'block_loop.thisRepN'
p4692
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4693
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p4694
Nsg69
Vn
sS'block_loop.thisTrialN'
p4695
I0
sg39
F0.91687811542396958
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04\x0e\x0eoP'
tRp4696
sa(dp4697
S'trial_loop.thisTrialN'
p4698
I73
sg3632
g4351
sS'block_loop.thisIndex'
p4699
g3626
sg38
S'left'
p4700
sg58
g62
sS'trial_loop.thisN'
p4701
I73
sg33
g4013
sg63
g64
sS'trial_loop.thisIndex'
p4702
g59
(g98
S'I\x00\x00\x00'
tRp4703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4704
I0
sg3641
g4358
sS'block_loop.thisRepN'
p4705
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4706
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p4707
Nsg69
Vn
sS'block_loop.thisTrialN'
p4708
I0
sg39
F0.7335184008888973
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04\x14\r\xcf('
tRp4709
sa(dp4710
S'trial_loop.thisTrialN'
p4711
I74
sg3632
S'45-chewy_nougat_redo.png'
p4712
sS'block_loop.thisIndex'
p4713
g3626
sg38
S'right'
p4714
sg58
g62
sS'trial_loop.thisN'
p4715
I74
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p4716
g59
(g98
S'J\x00\x00\x00'
tRp4717
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4718
I0
sg3641
S'41-peanuts_redo.png'
p4719
sS'block_loop.thisRepN'
p4720
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4721
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p4722
Nsg69
Vn
sS'block_loop.thisTrialN'
p4723
I0
sg39
F0.95014893595180183
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04\x1a\n\x19\xf0'
tRp4724
sa(dp4725
S'trial_loop.thisTrialN'
p4726
I75
sg3632
g4284
sS'block_loop.thisIndex'
p4727
g3626
sg38
S'left'
p4728
sg58
g62
sS'trial_loop.thisN'
p4729
I75
sg33
g3790
sg63
g64
sS'trial_loop.thisIndex'
p4730
g59
(g98
S'K\x00\x00\x00'
tRp4731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4732
I0
sg3641
g4291
sS'block_loop.thisRepN'
p4733
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4734
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p4735
Nsg69
Vn
sS'block_loop.thisTrialN'
p4736
I0
sg39
F0.84984638841706328
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04 \t\xf2\xe0'
tRp4737
sa(dp4738
S'trial_loop.thisTrialN'
p4739
I76
sg3632
S'35-raisins.png'
p4740
sS'block_loop.thisIndex'
p4741
g3626
sg38
S'left'
p4742
sg58
g62
sS'trial_loop.thisN'
p4743
I76
sg33
g3996
sg63
g64
sS'trial_loop.thisIndex'
p4744
g59
(g98
S'L\x00\x00\x00'
tRp4745
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4746
I0
sg3641
S'49-yorkie.png'
p4747
sS'block_loop.thisRepN'
p4748
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4749
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p4750
Nsg69
Vn
sS'block_loop.thisTrialN'
p4751
I0
sg39
F0.83343720456605297
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04&\x08"\x08'
tRp4752
sa(dp4753
S'trial_loop.thisTrialN'
p4754
I77
sg3632
g4256
sS'block_loop.thisIndex'
p4755
g3626
sg38
S'left'
p4756
sg58
g62
sS'trial_loop.thisN'
p4757
I77
sg33
g3824
sg63
g64
sS'trial_loop.thisIndex'
p4758
g59
(g98
S'M\x00\x00\x00'
tRp4759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4760
I0
sg3641
g4263
sS'block_loop.thisRepN'
p4761
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4762
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p4763
Nsg69
Vn
sS'block_loop.thisTrialN'
p4764
I0
sg39
F1.333430362179115
sg34
g752
(S'\x07\xdf\n\x01\x0b\x04,\x06\x16\x98'
tRp4765
sa(dp4766
S'trial_loop.thisTrialN'
p4767
I78
sg3632
g3633
sS'block_loop.thisIndex'
p4768
g3626
sg38
S'right'
p4769
sg58
g62
sS'trial_loop.thisN'
p4770
I78
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4771
g59
(g98
S'N\x00\x00\x00'
tRp4772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4773
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4774
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4775
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4776
Nsg69
Vn
sS'block_loop.thisTrialN'
p4777
I0
sg39
F0.88343880112279294
sg34
g752
(S'\x07\xdf\n\x01\x0b\x042\x0b\xa8`'
tRp4778
sa(dp4779
S'trial_loop.thisTrialN'
p4780
I79
sg3632
g4080
sS'block_loop.thisIndex'
p4781
g3626
sg38
S'left'
p4782
sg58
g62
sS'trial_loop.thisN'
p4783
I79
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p4784
g59
(g98
S'O\x00\x00\x00'
tRp4785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4786
I0
sg3641
g4087
sS'block_loop.thisRepN'
p4787
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4788
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4789
Nsg69
Vn
sS'block_loop.thisTrialN'
p4790
I0
sg39
F0.95011187302361577
sg34
g752
(S'\x07\xdf\n\x01\x0b\x048\nP\xa0'
tRp4791
sa(dp4792
S'trial_loop.thisTrialN'
p4793
I80
sg3632
g4033
sS'block_loop.thisIndex'
p4794
g3626
sg38
S'left'
p4795
sg58
g62
sS'trial_loop.thisN'
p4796
I80
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4797
g59
(g98
S'P\x00\x00\x00'
tRp4798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4799
I0
sg3641
g4041
sS'block_loop.thisRepN'
p4800
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4801
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4802
Nsg69
Vn
sS'block_loop.thisTrialN'
p4803
I0
sg39
F0.71670295032345166
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05\x02\n)\x90'
tRp4804
sa(dp4805
S'trial_loop.thisTrialN'
p4806
I81
sg3632
g4153
sS'block_loop.thisIndex'
p4807
g3626
sg38
S'right'
p4808
sg58
g62
sS'trial_loop.thisN'
p4809
I81
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p4810
g59
(g98
S'Q\x00\x00\x00'
tRp4811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4812
I0
sg3641
g4160
sS'block_loop.thisRepN'
p4813
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4814
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p4815
Nsg69
Vn
sS'block_loop.thisTrialN'
p4816
I0
sg39
F1.0501290360107305
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05\x08\x06tX'
tRp4817
sa(dp4818
S'trial_loop.thisTrialN'
p4819
I82
sg3632
g3670
sS'block_loop.thisIndex'
p4820
g3626
sg38
S'left'
p4821
sg58
g62
sS'trial_loop.thisN'
p4822
I82
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4823
g59
(g98
S'R\x00\x00\x00'
tRp4824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4825
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4826
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4827
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vn
sS'block_loop.thisTrialN'
p4829
I0
sg39
F0.81685211435478777
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05\x0e\x07\xbcx'
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g3653
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'left'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4839
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4840
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vn
sS'block_loop.thisTrialN'
p4842
I0
sg39
F1.0667765630009853
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05\x14\x05r\x88'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g4366
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'right'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g4373
sS'block_loop.thisRepN'
p4852
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4853
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vn
sS'block_loop.thisTrialN'
p4855
I0
sg39
F0.9502159343223866
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05\x1a\x06\xf5@'
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
g3873
sS'block_loop.thisIndex'
p4859
g3626
sg38
S'left'
p4860
sg58
g62
sS'trial_loop.thisN'
p4861
I85
sg33
g3741
sg63
g64
sS'trial_loop.thisIndex'
p4862
g59
(g98
S'U\x00\x00\x00'
tRp4863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4864
I0
sg3641
g3880
sS'block_loop.thisRepN'
p4865
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4866
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p4867
Nsg69
Vn
sS'block_loop.thisTrialN'
p4868
I0
sg39
F0.75013399674071479
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05 \x06\x93\x98'
tRp4869
sa(dp4870
S'trial_loop.thisTrialN'
p4871
I86
sg3632
g4567
sS'block_loop.thisIndex'
p4872
g3626
sg38
S'left'
p4873
sg58
g62
sS'trial_loop.thisN'
p4874
I86
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p4875
g59
(g98
S'V\x00\x00\x00'
tRp4876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4877
I0
sg3641
g4574
sS'block_loop.thisRepN'
p4878
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4879
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vn
sS'block_loop.thisTrialN'
p4881
I0
sg39
F0.70012470249866965
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05&\x03Wx'
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g3730
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'right'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g3738
sS'block_loop.thisRepN'
p4891
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4892
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vn
sS'block_loop.thisTrialN'
p4894
I0
sg39
F0.86715990771881479
sg34
g752
(S'\x07\xdf\n\x01\x0b\x05+\x0eg\x80'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g4211
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'right'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g4222
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g4219
sS'block_loop.thisRepN'
p4904
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4905
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vn
sS'block_loop.thisTrialN'
p4907
I0
sg39
F0.83346058272036316
sg34
g752
(S'\x07\xdf\n\x01\x0b\x051\r\x13\xa8'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g4567
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'left'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g4574
sS'block_loop.thisRepN'
p4917
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4918
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vn
sS'block_loop.thisTrialN'
p4920
I0
sg39
F0.75021125869125171
sg34
g752
(S'\x07\xdf\n\x01\x0b\x057\x0b\x04P'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
g3888
sS'block_loop.thisIndex'
p4924
g3626
sg38
S'right'
p4925
sg58
g62
sS'trial_loop.thisN'
p4926
I90
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p4927
g59
(g98
S'Z\x00\x00\x00'
tRp4928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4929
I0
sg3641
g3895
sS'block_loop.thisRepN'
p4930
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4931
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p4932
Nsg69
Vn
sS'block_loop.thisTrialN'
p4933
I0
sg39
F0.84992707156106917
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06\x01\x07\x89\xb0'
tRp4934
sa(dp4935
S'trial_loop.thisTrialN'
p4936
I91
sg3632
g3937
sS'block_loop.thisIndex'
p4937
g3626
sg38
S'right'
p4938
sg58
g62
sS'trial_loop.thisN'
p4939
I91
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p4940
g59
(g98
S'[\x00\x00\x00'
tRp4941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4942
I0
sg3641
g3945
sS'block_loop.thisRepN'
p4943
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4944
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p4945
Nsg69
Vn
sS'block_loop.thisTrialN'
p4946
I0
sg39
F1.1667769051200594
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06\x07\x05\xb8\xd8'
tRp4947
sa(dp4948
S'trial_loop.thisTrialN'
p4949
I92
sg3632
g4033
sS'block_loop.thisIndex'
p4950
g3626
sg38
S'left'
p4951
sg58
g62
sS'trial_loop.thisN'
p4952
I92
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4953
g59
(g98
S'\\\x00\x00\x00'
tRp4954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4955
I0
sg3641
g4041
sS'block_loop.thisRepN'
p4956
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4957
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4958
Nsg69
Vn
sS'block_loop.thisTrialN'
p4959
I0
sg39
F0.68342215131497142
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06\r\x08\xe9@'
tRp4960
sa(dp4961
S'trial_loop.thisTrialN'
p4962
I93
sg3632
g3920
sS'block_loop.thisIndex'
p4963
g3626
sg38
S'left'
p4964
sg58
g62
sS'trial_loop.thisN'
p4965
I93
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p4966
g59
(g98
S']\x00\x00\x00'
tRp4967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4968
I0
sg3641
g3928
sS'block_loop.thisRepN'
p4969
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4970
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vn
sS'block_loop.thisTrialN'
p4972
I0
sg39
F0.91725273609972646
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06\x13\x04|p'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
g4080
sS'block_loop.thisIndex'
p4976
g3626
sg38
S'left'
p4977
sg58
g62
sS'trial_loop.thisN'
p4978
I94
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4979
g59
(g98
S'^\x00\x00\x00'
tRp4980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4981
I0
sg3641
g4087
sS'block_loop.thisRepN'
p4982
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4983
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4984
Nsg69
Vn
sS'block_loop.thisTrialN'
p4985
I0
sg39
F1.1834449592706733
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06\x19\x03\xdcH'
tRp4986
sa(dp4987
S'trial_loop.thisTrialN'
p4988
I95
sg3632
g4110
sS'block_loop.thisIndex'
p4989
g3626
sg38
S'left'
p4990
sg58
g62
sS'trial_loop.thisN'
p4991
I95
sg33
g4120
sg63
g64
sS'trial_loop.thisIndex'
p4992
g59
(g98
S'_\x00\x00\x00'
tRp4993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4994
I0
sg3641
g4118
sS'block_loop.thisRepN'
p4995
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4996
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p4997
Nsg69
Vn
sS'block_loop.thisTrialN'
p4998
I0
sg39
F1.0834061287259829
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06\x1f\x07\x0c\xb0'
tRp4999
sa(dp5000
S'trial_loop.thisTrialN'
p5001
I96
sg3632
g4740
sS'block_loop.thisIndex'
p5002
g3626
sg38
S'left'
p5003
sg58
g62
sS'trial_loop.thisN'
p5004
I96
sg33
g3990
sg63
g64
sS'trial_loop.thisIndex'
p5005
g59
(g98
S'`\x00\x00\x00'
tRp5006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5007
I0
sg3641
g4747
sS'block_loop.thisRepN'
p5008
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5009
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vn
sS'block_loop.thisTrialN'
p5011
I0
sg39
F0.73338525944609501
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06%\x08\xcd\xe8'
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g4284
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'left'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g4291
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5022
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vn
sS'block_loop.thisTrialN'
p5024
I0
sg39
F1.4165887394842684
sg34
g752
(S'\x07\xdf\n\x01\x0b\x06+\x05SH'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g3873
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'left'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g3880
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5035
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F0.86688535695020619
sg34
g752
(S'\x07\xdf\n\x01\x0b\x061\x0c\x15\xc0'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g3747
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'left'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3758
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g3755
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5048
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vn
sS'block_loop.thisTrialN'
p5050
I0
sg39
F0.7167528427266916
sg34
g752
(S'\x07\xdf\n\x01\x0b\x067\n\xbe\x00'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
g4461
sS'block_loop.thisIndex'
p5054
g3626
sg38
S'left'
p5055
sg58
g62
sS'trial_loop.thisN'
p5056
I100
sg33
g4215
sg63
g64
sS'trial_loop.thisIndex'
p5057
g59
(g98
S'd\x00\x00\x00'
tRp5058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5059
I0
sg3641
g4468
sS'block_loop.thisRepN'
p5060
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5061
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p5062
Nsg69
Vn
sS'block_loop.thisTrialN'
p5063
I0
sg39
F0.70010274984088028
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07\x01\x06\xcaH'
tRp5064
sa(dp5065
S'trial_loop.thisTrialN'
p5066
I101
sg3632
g3796
sS'block_loop.thisIndex'
p5067
g3626
sg38
S'left'
p5068
sg58
g62
sS'trial_loop.thisN'
p5069
I101
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p5070
g59
(g98
S'e\x00\x00\x00'
tRp5071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5072
I0
sg3641
g3804
sS'block_loop.thisRepN'
p5073
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5074
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5075
Nsg69
Vn
sS'block_loop.thisTrialN'
p5076
I0
sg39
F0.70000895212251635
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07\x07\x02\xd6\x90'
tRp5077
sa(dp5078
S'trial_loop.thisTrialN'
p5079
I102
sg3632
g4256
sS'block_loop.thisIndex'
p5080
g3626
sg38
S'left'
p5081
sg58
g62
sS'trial_loop.thisN'
p5082
I102
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p5083
g59
(g98
S'f\x00\x00\x00'
tRp5084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5085
I0
sg3641
g4263
sS'block_loop.thisRepN'
p5086
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5087
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vn
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.73355945520916066
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07\x0c\r\xe6\x98'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g3670
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'left'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5099
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5100
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vn
sS'block_loop.thisTrialN'
p5102
I0
sg39
F0.8834912594211346
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07\x12\nk\xf8'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g4050
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'right'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g4058
sS'block_loop.thisRepN'
p5112
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5113
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vn
sS'block_loop.thisTrialN'
p5115
I0
sg39
F1.2001840031839492
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07\x18\t\x148'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g3713
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'right'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g3717
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g3721
sS'block_loop.thisRepN'
p5125
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5126
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vn
sS'block_loop.thisTrialN'
p5128
I0
sg39
F1.0668435613711154
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07\x1e\x0c\xbd\xb8'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g4181
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'right'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g4114
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g4188
sS'block_loop.thisRepN'
p5138
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5139
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vn
sS'block_loop.thisTrialN'
p5141
I0
sg39
F1.05022425922607
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07$\x0eDX'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
S'46-pistachios.png'
p5145
sS'block_loop.thisIndex'
p5146
g3626
sg38
S'left'
p5147
sg58
g62
sS'trial_loop.thisN'
p5148
I107
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5149
g59
(g98
S'k\x00\x00\x00'
tRp5150
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5151
I0
sg3641
S'29-beans.png'
p5152
sS'block_loop.thisRepN'
p5153
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5154
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vn
sS'block_loop.thisTrialN'
p5156
I0
sg39
F0.78353453751742563
sg34
g752
(S'\x07\xdf\n\x01\x0b\x07+\x00J8'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g3813
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'right'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g3821
sS'block_loop.thisRepN'
p5166
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5167
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vn
sS'block_loop.thisTrialN'
p5169
I0
sg39
F0.70011158792431161
sg34
g752
(S'\x07\xdf\n\x01\x0b\x070\x0c\xc9p'
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g4095
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'right'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g4102
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5180
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F0.91680199387155881
sg34
g752
(S'\x07\xdf\n\x01\x0b\x076\x08\x978'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g3888
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'right'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g3895
sS'block_loop.thisRepN'
p5192
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5193
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F0.98382602319315993
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08\x00\x07\xf7\x10'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g4567
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'left'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g4574
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5206
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F0.85012863687097706
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08\x06\x08\x0e\x80'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g4153
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'right'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5219
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F0.95026126513448617
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08\x0c\x06A\x90'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g3730
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'right'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g3738
sS'block_loop.thisRepN'
p5231
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5232
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F1.1834398274804698
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08\x12\x06\x1a\x80'
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g3888
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g3895
sS'block_loop.thisRepN'
p5244
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5245
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F0.93341416853036208
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08\x18\tJ\xe8'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3670
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5258
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F0.88346446007290069
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08\x1e\x08\xe9@'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g3713
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3717
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g3721
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5271
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F0.93344353377324296
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08$\x07\x91\x80'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g3954
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'right'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g3961
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5284
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F0.98356515719797244
sg34
g752
(S'\x07\xdf\n\x01\x0b\x08*\x07/\xd8'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g4366
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'right'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g4373
sS'block_loop.thisRepN'
p5296
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5297
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F0.90007036254382911
sg34
g752
(S'\x07\xdf\n\x01\x0b\x080\x07GH'
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4095
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'right'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4102
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5310
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.90016786655496617
sg34
g752
(S'\x07\xdf\n\x01\x0b\x086\x06h\xa0'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g3920
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'left'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g3931
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g3928
sS'block_loop.thisRepN'
p5322
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5323
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.95023218499090945
sg34
g752
(S'\x07\xdf\n\x01\x0b\t\x00\x05O`'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4740
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'left'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g3996
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4747
sS'block_loop.thisRepN'
p5335
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5336
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.93357553481791911
sg34
g752
(S'\x07\xdf\n\x01\x0b\t\x06\x05,8'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g4366
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g4373
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5349
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F1.0667757077026181
sg34
g752
(S'\x07\xdf\n\x01\x0b\t\x0c\x04\x8c\x10'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g3633
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'right'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5361
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5362
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.88344022661976851
sg34
g752
(S'\x07\xdf\n\x01\x0b\t\x12\x06\x12\xb0'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4033
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4041
sS'block_loop.thisRepN'
p5374
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5375
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F1.1834398274809246
sg34
g752
(S'\x07\xdf\n\x01\x0b\t\x18\x04\xba\xf0'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g4740
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3996
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g4747
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5388
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.7334927419383348
sg34
g752
(S'\x07\xdf\n\x01\x0b\t\x1e\x08)\xd8'
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4394
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4401
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5401
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.86678186585049843
sg34
g752
(S'\x07\xdf\n\x01\x0b\t$\x04p\xb8'
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g4256
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g4263
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5414
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.85018708225834416
sg34
g752
(S'\x07\xdf\n\x01\x0b\t*\x03\x18\xf8'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g4351
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'left'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g4013
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g4358
sS'block_loop.thisRepN'
p5426
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5427
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F0.93344011258022874
sg34
g752
(S'\x07\xdf\n\x01\x0b\t0\x01L\x08'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4181
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'right'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4120
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4188
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5440
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F1.2167708039919489
sg34
g752
(S'\x07\xdf\n\x01\x0b\t6\x00\xab\xe0'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3779
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3787
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5453
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.0499066584407046
sg34
g752
(S'\x07\xdf\n\x01\x0b\n\x00\x04\x8f\xf8'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g5145
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g5152
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5466
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F0.78353425241812147
sg34
g752
(S'\x07\xdf\n\x01\x0b\n\x06\x05\xd8\x18'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g3813
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g3821
sS'block_loop.thisRepN'
p5478
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5479
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F0.81731369036106116
sg34
g752
(S'\x07\xdf\n\x01\x0b\n\x0c\x03\x15\x10'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4712
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'right'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4719
sS'block_loop.thisRepN'
p5491
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5492
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F1.0000841043374749
sg34
g752
(S'\x07\xdf\n\x01\x0b\n\x12\x00\xcb '
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g4211
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'right'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g4215
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g4219
sS'block_loop.thisRepN'
p5504
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5505
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F0.86673682013770303
sg34
g752
(S'\x07\xdf\n\x01\x0b\n\x18\x01!\x10'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g3937
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'right'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3948
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g3945
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5518
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F0.96680986261617363
sg34
g752
(S'\x07\xdf\n\x01\x0b\n\x1d\x0f\x0b\x90'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g3888
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'right'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g3895
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5531
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.93341331323199483
sg34
g752
(S'\x07\xdf\n\x01\x0b\n#\x0e\xe8h'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4003
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'right'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g4013
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4011
sS'block_loop.thisRepN'
p5543
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5544
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.0167820939300327
sg34
g752
(S'\x07\xdf\n\x01\x0b\n)\x0e\x82\xd8'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g4241
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'right'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g4248
sS'block_loop.thisRepN'
p5556
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5557
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.0169158055714433
sg34
g752
(S'\x07\xdf\n\x01\x0b\n0\x00\x0f\xa0'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g4196
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g4203
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5570
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F1.4000849026160722
sg34
g752
(S'\x07\xdf\n\x01\x0b\n6\x00\xa0('
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g3830
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g3838
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5583
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.98351041810383322
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b\x00\x07b\xa0'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4394
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3931
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4401
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5596
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.0002104033928845
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b\x06\x07z\x10'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4712
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4719
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5609
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F1.1003587121263081
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b\x0c\x08\n\x98'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g3986
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3990
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g3994
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5622
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.90011198706315554
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b\x12\n\nP'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3954
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3961
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5635
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F1.2167856291630414
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b\x18\t/\x90'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4712
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4719
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5648
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.90011113176524304
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b\x1e\x0c\xd9\x10'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3903
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3914
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3911
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5661
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F1.0502137105463589
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b$\x0b\xfeP'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3730
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3738
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5674
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.96726516643548166
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b*\rFp'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g4153
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3907
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5687
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F1.6668119723522068
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b0\r\x1f`'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g4003
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g4011
sS'block_loop.thisRepN'
p5699
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5700
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.80020259166803953
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0b7\x08\xaa\xc0'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4366
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4373
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5713
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.3502361193632169
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c\x01\x06"P'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4567
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'left'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3941
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4574
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3941
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5726
I1
sg3646
g3948
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.83352729599118902
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c\x07\x0b\xf2\x98'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g3747
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g3755
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5739
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.85057054101616814
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c\r\t\xe3@'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4110
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g4114
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4118
sS'block_loop.thisRepN'
p5751
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5752
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.81681761732124869
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c\x13\x08\x16P'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3969
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3977
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5765
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F0.98352438797701325
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c\x19\x05\xcc`'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g4461
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'left'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g4215
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g4468
sS'block_loop.thisRepN'
p5777
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5778
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.65019238510785726
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c\x1f\x06\x1eh'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4181
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g4114
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4188
sS'block_loop.thisRepN'
p5790
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5791
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.98347449557331856
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c%\x018\x80'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4351
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4358
sS'block_loop.thisRepN'
p5803
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5804
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F1.0001120440833802
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c+\x01\x8a\x88'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g3653
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5817
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.816889462382278
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c1\x01\xe0x'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4003
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4011
sS'block_loop.thisRepN'
p5829
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5830
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.1335043739954926
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0c6\x0e\xd8\xc8'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4241
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4248
sS'block_loop.thisRepN'
p5842
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5843
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.96685718912476659
sg34
g752
(S'\x07\xdf\n\x01\x0b\r\x01\x02I\xf0'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3920
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3928
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5856
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F1.0501903323920487
sg34
g752
(S'\x07\xdf\n\x01\x0b\r\x07\x02&\xc8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g4003
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g4013
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g4011
sS'block_loop.thisRepN'
p5868
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5869
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.80016182244662559
sg34
g752
(S'\x07\xdf\n\x01\x0b\r\r\x03n\xe8'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g3986
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3996
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g3994
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5882
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.88343652032699538
sg34
g752
(S'\x07\xdf\n\x01\x0b\r\x13\x00\xe6x'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4095
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4102
sS'block_loop.thisRepN'
p5894
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5895
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.83352644069282178
sg34
g752
(S'\x07\xdf\n\x01\x0b\r\x18\x0e\xd4\xe0'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3969
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3977
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5908
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F1.0001967186194634
sg34
g752
(S'\x07\xdf\n\x01\x0b\r\x1e\r\x04\x08'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4211
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g4215
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4219
sS'block_loop.thisRepN'
p5920
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5921
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.0668646587305375
sg34
g752
(S'\x07\xdf\n\x01\x0b\r$\rY\xf8'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g3873
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g3880
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5934
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.76689556351038846
sg34
g752
(S'\x07\xdf\n\x01\x0b\r*\x0e\xdc\xb0'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3670
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5947
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.88354400281923517
sg34
g752
(S'\x07\xdf\n\x01\x0b\r0\x0b\xdb('
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g5145
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g5152
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5960
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.65019152980949002
sg34
g752
(S'\x07\xdf\n\x01\x0b\r6\n\x87P'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4740
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3996
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4747
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5973
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.75029564812803073
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e\x00\x05\xdc\x00'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4394
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4401
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5986
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.8334910883613702
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e\x06\x02a`'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3764
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3717
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3771
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5999
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.81674976365275143
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e\x0c\x00R\x08'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g3986
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3996
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g3994
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3996
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6012
I1
sg3646
g3990
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.1834586440440944
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e\x11\rJX'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4351
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4013
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4358
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4013
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6025
I1
sg3646
g4007
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F0.86675364100483421
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e\x18\x01w\x00'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g4196
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'right'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g4203
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6038
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.0171789523624284
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e\x1d\x0f&\xe8'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3920
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3924
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3928
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3924
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6051
I1
sg3646
g3931
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.98352809426978638
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e$\x00\xaf\xc8'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g3633
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'right'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6064
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F0.93345180165761121
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e*\x01\x05\xb8'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4284
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'left'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3783
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4291
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3783
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6077
I1
sg3646
g3790
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.78326682913530021
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e0\x00e\x90'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g5145
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g5152
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6090
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.76679178731137654
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e5\x0c\xe4\xc8'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4080
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4087
sS'block_loop.thisRepN'
p6102
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6103
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.83354554235620526
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0e;\t\xe3@'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3813
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3817
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3821
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3817
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6116
I1
sg3646
g3824
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.83360683873797825
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f\x05\x07\xd7\xd0'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g3764
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3717
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g3771
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6129
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.81689430907317728
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f\x0b\x05\xc8x'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3954
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3961
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6142
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.80013074660746497
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f\x11\x03\x82p'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4196
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4203
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6155
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.80020544266244542
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f\x17\x00\xfa\x00'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3764
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'left'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3724
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3771
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3717
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6168
I1
sg3646
g3724
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.73354405983900506
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f\x1c\r\xb3\xd0'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4211
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g4215
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4219
sS'block_loop.thisRepN'
p6180
I1
sg3644
g4215
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6181
I1
sg3646
g4222
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.75015053250899655
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f"\t\xfe\x98'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4110
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g4120
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4118
sS'block_loop.thisRepN'
p6193
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6194
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.9169228760383703
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f(\x06\xbe\x90'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4033
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'left'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4041
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4037
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6207
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.96687144409679604
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f.\x06"P'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4181
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g4120
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4188
sS'block_loop.thisRepN'
p6219
I1
sg3644
g4120
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6220
I1
sg3646
g4114
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.91687583462862676
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f4\x05\xfb@'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g3796
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3800
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g3804
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6233
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.93333605128100317
sg34
g752
(S'\x07\xdf\n\x01\x0b\x0f:\x05[\x18'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g3730
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3734
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g3738
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3734
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6246
I1
sg3646
g3741
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.86678158075119427
sg34
g752
(S'\x07\xdf\n\x01\x0b\x10\x04\x04\xba\xf0'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g4050
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g4058
sS'block_loop.thisRepN'
p6258
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6259
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.1001848014620919
sg34
g752
(S'\x07\xdf\n\x01\x0b\x10\n\x03(\x98'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g3830
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g3838
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6272
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F0.81687264151514682
sg34
g752
(S'\x07\xdf\n\x01\x0b\x10\x10\x05(P'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g5145
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g5152
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6285
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F0.75017020437098836
sg34
g752
(S'\x07\xdf\n\x01\x0b\x10\x16\x02\xde`'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g4196
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3979
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g4203
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3979
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6298
I1
sg3646
g3973
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.96687030369866989
sg34
g752
(S'\x07\xdf\n\x01\x0b\x10\x1b\x0e\xe4\x80'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g3830
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'left'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3840
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g3838
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3840
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6311
I1
sg3646
g3834
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.71684350435134547
sg34
g752
(S'\x07\xdf\n\x01\x0b\x10!\x0e\xfb\xf0'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3903
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3914
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3911
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6324
I1
sg3646
g3914
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F0.80013017640794715
sg34
g752
(S"\x07\xdf\n\x01\x0b\x10'\x0b\x04P"
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4712
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3751
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4719
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3751
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6337
I1
sg3646
g3758
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.88353544983510801
sg34
g752
(S'\x07\xdf\n\x01\x0b\x10-\x08\x7f\xc8'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g3796
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3806
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g3804
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3806
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6350
I1
sg3646
g3800
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.0667625931273506
sg34
g752
(S'\x07\xdf\n\x01\x0b\x103\x07(\x08'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F69.082454181668254
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'8-liquorice_catherine_wheels.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'8-liquorice_catherine_wheels.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'17-jacobs_mini_cheddars_redo.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'17-jacobs_mini_cheddars_redo.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.80019346848530404
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12\x0b\ns\xc8'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'7-olives.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'7-olives.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'22-daim.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6401
I2
sg6384
S'22-daim.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.80010964924804284
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12\x11\x07\xac\xd8'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'1-treacle_cookies.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'21-nakd_banana_crunch.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'21-nakd_banana_crunch.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
S'1-treacle_cookies.png'
p6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6419
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.78354366069925163
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12\x17\x05(P'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'13-mccoys_steak_crisps.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'left'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'13-mccoys_steak_crisps.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6435
I2
sg6384
S'3-ellas_strawberries_apples.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.83343634926768573
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12\x1d\x02eH'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'4-corn.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'10-bounty_redo.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'10-bounty_redo.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6452
I2
sg6384
S'4-corn.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.8501765335786331
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12#\x00U\xf0'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'45-chewy_nougat_redo.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'45-chewy_nougat_redo.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'41-peanuts_redo.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
S'41-peanuts_redo.png'
p6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6470
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.90022887783743499
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12(\r\xc7X'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'40-sardines.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'40-sardines.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'5-pineapple.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
S'5-pineapple.png'
p6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6487
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vn
sS'block_loop.thisTrialN'
p6489
I0
sg39
F0.81688119449881924
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12.\x0c\xec\x98'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'46-pistachios.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'left'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
S'46-pistachios.png'
p6497
sg63
g64
sS'trial_loop.thisIndex'
p6498
g59
(g98
S'\x07\x00\x00\x00'
tRp6499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6500
I0
sg6379
S'29-beans.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6503
I2
sg6384
S'29-beans.png'
p6504
sg55
g11
sS'block_loop.thisTrial'
p6505
Nsg69
Vn
sS'block_loop.thisTrialN'
p6506
I0
sg39
F0.71687771628512564
sg34
g752
(S'\x07\xdf\n\x01\x0b\x124\n\xa2\xa8'
tRp6507
sa(dp6508
S'trial_loop.thisTrialN'
p6509
I8
sg6370
S'42-mrkipling_lemon_slices.png'
p6510
sS'block_loop.thisIndex'
p6511
g6364
sg38
S'left'
p6512
sg58
g62
sS'trial_loop.thisN'
p6513
I8
sg33
S'42-mrkipling_lemon_slices.png'
p6514
sg63
g64
sS'trial_loop.thisIndex'
p6515
g59
(g98
S'\x08\x00\x00\x00'
tRp6516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6517
I0
sg6379
S'16-skips_prawn.png'
p6518
sS'block_loop.thisRepN'
p6519
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6520
I2
sg6384
S'16-skips_prawn.png'
p6521
sg55
g11
sS'block_loop.thisTrial'
p6522
Nsg69
Vn
sS'block_loop.thisTrialN'
p6523
I0
sg39
F0.73359195654666109
sg34
g752
(S'\x07\xdf\n\x01\x0b\x12:\x06\xae\xf0'
tRp6524
sa(dp6525
S'trial_loop.thisTrialN'
p6526
I9
sg6370
S'35-raisins.png'
p6527
sS'block_loop.thisIndex'
p6528
g6364
sg38
S'left'
p6529
sg58
g62
sS'trial_loop.thisN'
p6530
I9
sg33
S'35-raisins.png'
p6531
sg63
g64
sS'trial_loop.thisIndex'
p6532
g59
(g98
S'\t\x00\x00\x00'
tRp6533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6534
I0
sg6379
S'49-yorkie.png'
p6535
sS'block_loop.thisRepN'
p6536
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6537
I2
sg6384
S'49-yorkie.png'
p6538
sg55
g11
sS'block_loop.thisTrial'
p6539
Nsg69
Vn
sS'block_loop.thisTrialN'
p6540
I0
sg39
F0.65022118015167507
sg34
g752
(S'\x07\xdf\n\x01\x0b\x13\x04\x034P'
tRp6541
sa(dp6542
S'trial_loop.thisTrialN'
p6543
I10
sg6370
S'23-crunchie_redo.png'
p6544
sS'block_loop.thisIndex'
p6545
g6364
sg38
S'left'
p6546
sg58
g62
sS'trial_loop.thisN'
p6547
I10
sg33
S'33-ambrosia_rice.png'
p6548
sg63
g64
sS'trial_loop.thisIndex'
p6549
g59
(g98
S'\n\x00\x00\x00'
tRp6550
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6551
I0
sg6379
S'33-ambrosia_rice.png'
p6552
sS'block_loop.thisRepN'
p6553
I2
sg6382
S'23-crunchie_redo.png'
p6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6555
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p6556
Nsg69
Vn
sS'block_loop.thisTrialN'
p6557
I0
sg39
F0.73349958432481799
sg34
g752
(S'\x07\xdf\n\x01\x0b\x13\t\r\x8c\xc0'
tRp6558
sa(dp6559
S'trial_loop.thisTrialN'
p6560
I11
sg6370
S'26-walkers_smoky_bacon.png'
p6561
sS'block_loop.thisIndex'
p6562
g6364
sg38
S'right'
p6563
sg58
g62
sS'trial_loop.thisN'
p6564
I11
sg33
S'44-crunch.png'
p6565
sg63
g64
sS'trial_loop.thisIndex'
p6566
g59
(g98
S'\x0b\x00\x00\x00'
tRp6567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6568
I0
sg6379
S'44-crunch.png'
p6569
sS'block_loop.thisRepN'
p6570
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6571
I2
sg6384
S'26-walkers_smoky_bacon.png'
p6572
sg55
g11
sS'block_loop.thisTrial'
p6573
Nsg69
Vn
sS'block_loop.thisTrialN'
p6574
I0
sg39
F0.78386639327527519
sg34
g752
(S'\x07\xdf\n\x01\x0b\x13\x0f\n\x12 '
tRp6575
sa(dp6576
S'trial_loop.thisTrialN'
p6577
I12
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6578
sS'block_loop.thisIndex'
p6579
g6364
sg38
S'right'
p6580
sg58
g62
sS'trial_loop.thisN'
p6581
I12
sg33
S'18-mms.png'
p6582
sg63
g64
sS'trial_loop.thisIndex'
p6583
g59
(g98
S'\x0c\x00\x00\x00'
tRp6584
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6585
I0
sg6379
S'18-mms.png'
p6586
sS'block_loop.thisRepN'
p6587
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6588
I2
sg6384
S'43-mrporky_pork_crackles_redo.png'
p6589
sg55
g11
sS'block_loop.thisTrial'
p6590
Nsg69
Vn
sS'block_loop.thisTrialN'
p6591
I0
sg39
F1.0334427354955551
sg34
g752
(S'\x07\xdf\n\x01\x0b\x13\x15\x07O\x18'
tRp6592
sa(dp6593
S'trial_loop.thisTrialN'
p6594
I13
sg6370
S'2-steamed_puddings.png'
p6595
sS'block_loop.thisIndex'
p6596
g6364
sg38
S'left'
p6597
sg58
g62
sS'trial_loop.thisN'
p6598
I13
sg33
S'2-steamed_puddings.png'
p6599
sg63
g64
sS'trial_loop.thisIndex'
p6600
g59
(g98
S'\r\x00\x00\x00'
tRp6601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6602
I0
sg6379
S'20-fruit_pastilles.png'
p6603
sS'block_loop.thisRepN'
p6604
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6605
I2
sg6384
S'20-fruit_pastilles.png'
p6606
sg55
g11
sS'block_loop.thisTrial'
p6607
Nsg69
Vn
sS'block_loop.thisTrialN'
p6608
I0
sg39
F0.70021194292985456
sg34
g752
(S'\x07\xdf\n\x01\x0b\x13\x1b\x08\\\xa0'
tRp6609
sa(dp6610
S'trial_loop.thisTrialN'
p6611
I14
sg6370
S'51-mars.png'
p6612
sS'block_loop.thisIndex'
p6613
g6364
sg38
S'right'
p6614
sg58
g62
sS'trial_loop.thisN'
p6615
I14
sg33
S'51-mars.png'
p6616
sg63
g64
sS'trial_loop.thisIndex'
p6617
g59
(g98
S'\x0e\x00\x00\x00'
tRp6618
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6619
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6620
sS'block_loop.thisRepN'
p6621
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6622
I2
sg6384
S'27-hartleys_raspberries_jelly.png'
p6623
sg55
g11
sS'block_loop.thisTrial'
p6624
Nsg69
Vn
sS'block_loop.thisTrialN'
p6625
I0
sg39
F0.96678049737329275
sg34
g752
(S'\x07\xdf\n\x01\x0b\x13!\x04*h'
tRp6626
sa(dp6627
S'trial_loop.thisTrialN'
p6628
I15
sg6370
S'6-sour_patch_kids.png'
p6629
sS'block_loop.thisIndex'
p6630
g6364
sg38
S'right'
p6631
sg58
g62
sS'trial_loop.thisN'
p6632
I15
sg33
S'38-maltesers.png'
p6633
sg63
g64
sS'trial_loop.thisIndex'
p6634
g59
(g98
S'\x0f\x00\x00\x00'
tRp6635
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6636
I0
sg6379
S'38-maltesers.png'
p6637
sS'block_loop.thisRepN'
p6638
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6639
I2
sg6384
S'6-sour_patch_kids.png'
p6640
sg55
g11
sS'block_loop.thisTrial'
p6641
Nsg69
Vn
sS'block_loop.thisTrialN'
p6642
I0
sg39
F1.0831737726757638
sg34
g752
(S"\x07\xdf\n\x01\x0b\x13'\x04A\xd8"
tRp6643
sa(dp6644
S'trial_loop.thisTrialN'
p6645
I16
sg6370
S'36-fig_rolls.png'
p6646
sS'block_loop.thisIndex'
p6647
g6364
sg38
S'left'
p6648
sg58
g62
sS'trial_loop.thisN'
p6649
I16
sg33
S'36-fig_rolls.png'
p6650
sg63
g64
sS'trial_loop.thisIndex'
p6651
g59
(g98
S'\x10\x00\x00\x00'
tRp6652
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6653
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6654
sS'block_loop.thisRepN'
p6655
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6656
I2
sg6384
S'34-hula_hoops_bbq_beef_redo.png'
p6657
sg55
g11
sS'block_loop.thisTrial'
p6658
Nsg69
Vn
sS'block_loop.thisTrialN'
p6659
I0
sg39
F1.1001674103954429
sg34
g752
(S'\x07\xdf\n\x01\x0b\x13-\x06\x03\x10'
tRp6660
sa(dp6661
S'trial_loop.thisTrialN'
p6662
I17
sg6370
g6425
sS'block_loop.thisIndex'
p6663
g6364
sg38
S'left'
p6664
sg58
g62
sS'trial_loop.thisN'
p6665
I17
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6666
g59
(g98
S'\x11\x00\x00\x00'
tRp6667
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6668
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6669
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6670
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6671
Nsg69
Vn
sS'block_loop.thisTrialN'
p6672
I0
sg39
F0.83351361121731316
sg34
g752
(S'\x07\xdf\n\x01\x0b\x133\x08\x02\xc8'
tRp6673
sa(dp6674
S'trial_loop.thisTrialN'
p6675
I18
sg6370
g6459
sS'block_loop.thisIndex'
p6676
g6364
sg38
S'right'
p6677
sg58
g62
sS'trial_loop.thisN'
p6678
I18
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p6679
g59
(g98
S'\x12\x00\x00\x00'
tRp6680
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6681
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6682
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6683
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p6684
Nsg69
Vn
sS'block_loop.thisTrialN'
p6685
I0
sg39
F0.78343361231236486
sg34
g752
(S'\x07\xdf\n\x01\x0b\x139\x05\xf3p'
tRp6686
sa(dp6687
S'trial_loop.thisTrialN'
p6688
I19
sg6370
g6493
sS'block_loop.thisIndex'
p6689
g6364
sg38
S'left'
p6690
sg58
g62
sS'trial_loop.thisN'
p6691
I19
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p6692
g59
(g98
S'\x13\x00\x00\x00'
tRp6693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6694
I0
sg6379
g6501
sS'block_loop.thisRepN'
p6695
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6696
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p6697
Nsg69
Vn
sS'block_loop.thisTrialN'
p6698
I0
sg39
F0.70019825815688819
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14\x03\x030h'
tRp6699
sa(dp6700
S'trial_loop.thisTrialN'
p6701
I20
sg6370
S'41-peanuts_redo.png'
p6702
sS'block_loop.thisIndex'
p6703
g6364
sg38
S'left'
p6704
sg58
g62
sS'trial_loop.thisN'
p6705
I20
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p6706
g59
(g98
S'\x14\x00\x00\x00'
tRp6707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6708
I0
sg6379
S'45-chewy_nougat_redo.png'
p6709
sS'block_loop.thisRepN'
p6710
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6711
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p6712
Nsg69
Vn
sS'block_loop.thisTrialN'
p6713
I0
sg39
F0.98344826642460248
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14\x08\x0e@p'
tRp6714
sa(dp6715
S'trial_loop.thisTrialN'
p6716
I21
sg6370
g6544
sS'block_loop.thisIndex'
p6717
g6364
sg38
S'left'
p6718
sg58
g62
sS'trial_loop.thisN'
p6719
I21
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p6720
g59
(g98
S'\x15\x00\x00\x00'
tRp6721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6722
I0
sg6379
g6552
sS'block_loop.thisRepN'
p6723
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6724
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p6725
Nsg69
Vn
sS'block_loop.thisTrialN'
p6726
I0
sg39
F0.91685302667247015
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14\x0e\x0e\x96`'
tRp6727
sa(dp6728
S'trial_loop.thisTrialN'
p6729
I22
sg6370
S'21-nakd_banana_crunch.png'
p6730
sS'block_loop.thisIndex'
p6731
g6364
sg38
S'right'
p6732
sg58
g62
sS'trial_loop.thisN'
p6733
I22
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6734
g59
(g98
S'\x16\x00\x00\x00'
tRp6735
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6736
I0
sg6379
S'1-treacle_cookies.png'
p6737
sS'block_loop.thisRepN'
p6738
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6739
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6740
Nsg69
Vn
sS'block_loop.thisTrialN'
p6741
I0
sg39
F0.90062516607031284
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14\x14\r\xf68'
tRp6742
sa(dp6743
S'trial_loop.thisTrialN'
p6744
I23
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6745
sS'block_loop.thisIndex'
p6746
g6364
sg38
S'right'
p6747
sg58
g62
sS'trial_loop.thisN'
p6748
I23
sg33
g6650
sg63
g64
sS'trial_loop.thisIndex'
p6749
g59
(g98
S'\x17\x00\x00\x00'
tRp6750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6751
I0
sg6379
S'36-fig_rolls.png'
p6752
sS'block_loop.thisRepN'
p6753
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6754
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p6755
Nsg69
Vn
sS'block_loop.thisTrialN'
p6756
I0
sg39
F0.83362394470441359
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14\x1a\x0c\xdc\xf8'
tRp6757
sa(dp6758
S'trial_loop.thisTrialN'
p6759
I24
sg6370
g6527
sS'block_loop.thisIndex'
p6760
g6364
sg38
S'left'
p6761
sg58
g62
sS'trial_loop.thisN'
p6762
I24
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p6763
g59
(g98
S'\x18\x00\x00\x00'
tRp6764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6765
I0
sg6379
g6535
sS'block_loop.thisRepN'
p6766
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6767
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p6768
Nsg69
Vn
sS'block_loop.thisTrialN'
p6769
I0
sg39
F0.70020567074243445
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14 \n\xd1\x88'
tRp6770
sa(dp6771
S'trial_loop.thisTrialN'
p6772
I25
sg6370
S'31-hobnobs.png'
p6773
sS'block_loop.thisIndex'
p6774
g6364
sg38
S'left'
p6775
sg58
g62
sS'trial_loop.thisN'
p6776
I25
sg33
S'31-hobnobs.png'
p6777
sg63
g64
sS'trial_loop.thisIndex'
p6778
g59
(g98
S'\x19\x00\x00\x00'
tRp6779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6780
I0
sg6379
S'25-kitkat.png'
p6781
sS'block_loop.thisRepN'
p6782
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6783
I2
sg6384
S'25-kitkat.png'
p6784
sg55
g11
sS'block_loop.thisTrial'
p6785
Nsg69
Vn
sS'block_loop.thisTrialN'
p6786
I0
sg39
F0.91678203691026283
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14&\x06\x9fP'
tRp6787
sa(dp6788
S'trial_loop.thisTrialN'
p6789
I26
sg6370
S'48-twix.png'
p6790
sS'block_loop.thisIndex'
p6791
g6364
sg38
S'left'
p6792
sg58
g62
sS'trial_loop.thisN'
p6793
I26
sg33
S'48-twix.png'
p6794
sg63
g64
sS'trial_loop.thisIndex'
p6795
g59
(g98
S'\x1a\x00\x00\x00'
tRp6796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6797
I0
sg6379
S'50-polo.png'
p6798
sS'block_loop.thisRepN'
p6799
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6800
I2
sg6384
S'50-polo.png'
p6801
sg55
g11
sS'block_loop.thisTrial'
p6802
Nsg69
Vn
sS'block_loop.thisTrialN'
p6803
I0
sg39
F2.0834226644938099
sg34
g752
(S'\x07\xdf\n\x01\x0b\x14,\x05\xff('
tRp6804
sa(dp6805
S'trial_loop.thisTrialN'
p6806
I27
sg6370
g6730
sS'block_loop.thisIndex'
p6807
g6364
sg38
S'right'
p6808
sg58
g62
sS'trial_loop.thisN'
p6809
I27
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6810
g59
(g98
S'\x1b\x00\x00\x00'
tRp6811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6812
I0
sg6379
g6737
sS'block_loop.thisRepN'
p6813
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6814
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6815
Nsg69
Vn
sS'block_loop.thisTrialN'
p6816
I0
sg39
F0.85059677016579371
sg34
g752
(S'\x07\xdf\n\x01\x0b\x143\x07\xbcx'
tRp6817
sa(dp6818
S'trial_loop.thisTrialN'
p6819
I28
sg6370
g6629
sS'block_loop.thisIndex'
p6820
g6364
sg38
S'right'
p6821
sg58
g62
sS'trial_loop.thisN'
p6822
I28
sg33
g6633
sg63
g64
sS'trial_loop.thisIndex'
p6823
g59
(g98
S'\x1c\x00\x00\x00'
tRp6824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6825
I0
sg6379
g6637
sS'block_loop.thisRepN'
p6826
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6827
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p6828
Nsg69
Vn
sS'block_loop.thisTrialN'
p6829
I0
sg39
F0.64994007209588744
sg34
g752
(S'\x07\xdf\n\x01\x0b\x149\x05\xeb\xa0'
tRp6830
sa(dp6831
S'trial_loop.thisTrialN'
p6832
I29
sg6370
g6408
sS'block_loop.thisIndex'
p6833
g6364
sg38
S'left'
p6834
sg58
g62
sS'trial_loop.thisN'
p6835
I29
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6836
g59
(g98
S'\x1d\x00\x00\x00'
tRp6837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6838
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6839
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6840
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6841
Nsg69
Vn
sS'block_loop.thisTrialN'
p6842
I0
sg39
F0.80021912743632129
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15\x03\x01\x05\xb8'
tRp6843
sa(dp6844
S'trial_loop.thisTrialN'
p6845
I30
sg6370
S'44-crunch.png'
p6846
sS'block_loop.thisIndex'
p6847
g6364
sg38
S'left'
p6848
sg58
g62
sS'trial_loop.thisN'
p6849
I30
sg33
g6565
sg63
g64
sS'trial_loop.thisIndex'
p6850
g59
(g98
S'\x1e\x00\x00\x00'
tRp6851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6852
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6853
sS'block_loop.thisRepN'
p6854
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6855
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p6856
Nsg69
Vn
sS'block_loop.thisTrialN'
p6857
I0
sg39
F0.66682879321888322
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15\x08\r\xbf\x88'
tRp6858
sa(dp6859
S'trial_loop.thisTrialN'
p6860
I31
sg6370
S'10-bounty_redo.png'
p6861
sS'block_loop.thisIndex'
p6862
g6364
sg38
S'left'
p6863
sg58
g62
sS'trial_loop.thisN'
p6864
I31
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6865
g59
(g98
S'\x1f\x00\x00\x00'
tRp6866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6867
I0
sg6379
S'4-corn.png'
p6868
sS'block_loop.thisRepN'
p6869
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6870
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6871
Nsg69
Vn
sS'block_loop.thisTrialN'
p6872
I0
sg39
F0.76676156676967366
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15\x0e\tR\xb8'
tRp6873
sa(dp6874
S'trial_loop.thisTrialN'
p6875
I32
sg6370
g6578
sS'block_loop.thisIndex'
p6876
g6364
sg38
S'right'
p6877
sg58
g62
sS'trial_loop.thisN'
p6878
I32
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p6879
g59
(g98
S' \x00\x00\x00'
tRp6880
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6881
I0
sg6379
g6586
sS'block_loop.thisRepN'
p6882
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6883
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p6884
Nsg69
Vn
sS'block_loop.thisTrialN'
p6885
I0
sg39
F0.76716526758900727
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15\x14\x06Q0'
tRp6886
sa(dp6887
S'trial_loop.thisTrialN'
p6888
I33
sg6370
g6442
sS'block_loop.thisIndex'
p6889
g6364
sg38
S'right'
p6890
sg58
g62
sS'trial_loop.thisN'
p6891
I33
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6892
g59
(g98
S'!\x00\x00\x00'
tRp6893
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6894
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6895
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6896
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6897
Nsg69
Vn
sS'block_loop.thisTrialN'
p6898
I0
sg39
F0.95064843018462852
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15\x1a\x03\x11('
tRp6899
sa(dp6900
S'trial_loop.thisTrialN'
p6901
I34
sg6370
S'49-yorkie.png'
p6902
sS'block_loop.thisIndex'
p6903
g6364
sg38
S'right'
p6904
sg58
g62
sS'trial_loop.thisN'
p6905
I34
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p6906
g59
(g98
S'"\x00\x00\x00'
tRp6907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6908
I0
sg6379
S'35-raisins.png'
p6909
sS'block_loop.thisRepN'
p6910
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6911
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p6912
Nsg69
Vn
sS'block_loop.thisTrialN'
p6913
I0
sg39
F0.81684954845968605
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15 \x02\xee\x00'
tRp6914
sa(dp6915
S'trial_loop.thisTrialN'
p6916
I35
sg6370
g6578
sS'block_loop.thisIndex'
p6917
g6364
sg38
S'right'
p6918
sg58
g62
sS'trial_loop.thisN'
p6919
I35
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p6920
g59
(g98
S'#\x00\x00\x00'
tRp6921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6922
I0
sg6379
g6586
sS'block_loop.thisRepN'
p6923
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6924
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p6925
Nsg69
Vn
sS'block_loop.thisTrialN'
p6926
I0
sg39
F0.81679737526064855
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15&\x00\xa4\x10'
tRp6927
sa(dp6928
S'trial_loop.thisTrialN'
p6929
I36
sg6370
g6846
sS'block_loop.thisIndex'
p6930
g6364
sg38
S'left'
p6931
sg58
g62
sS'trial_loop.thisN'
p6932
I36
sg33
g6565
sg63
g64
sS'trial_loop.thisIndex'
p6933
g59
(g98
S'$\x00\x00\x00'
tRp6934
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6935
I0
sg6379
g6853
sS'block_loop.thisRepN'
p6936
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6937
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p6938
Nsg69
Vn
sS'block_loop.thisTrialN'
p6939
I0
sg39
F0.70010617103434925
sg34
g752
(S'\x07\xdf\n\x01\x0b\x15+\r\x9c`'
tRp6940
sa(dp6941
S'trial_loop.thisTrialN'
p6942
I37
sg6370
g6861
sS'block_loop.thisIndex'
p6943
g6364
sg38
S'left'
p6944
sg58
g62
sS'trial_loop.thisN'
p6945
I37
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6946
g59
(g98
S'%\x00\x00\x00'
tRp6947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6948
I0
sg6379
g6868
sS'block_loop.thisRepN'
p6949
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6950
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6951
Nsg69
Vn
sS'block_loop.thisTrialN'
p6952
I0
sg39
F0.75022152227120387
sg34
g752
(S'\x07\xdf\n\x01\x0b\x151\tj('
tRp6953
sa(dp6954
S'trial_loop.thisTrialN'
p6955
I38
sg6370
S'33-ambrosia_rice.png'
p6956
sS'block_loop.thisIndex'
p6957
g6364
sg38
S'right'
p6958
sg58
g62
sS'trial_loop.thisN'
p6959
I38
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p6960
g59
(g98
S'&\x00\x00\x00'
tRp6961
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6962
I0
sg6379
S'23-crunchie_redo.png'
p6963
sS'block_loop.thisRepN'
p6964
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6965
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p6966
Nsg69
Vn
sS'block_loop.thisTrialN'
p6967
I0
sg39
F0.78344872258367104
sg34
g752
(S'\x07\xdf\n\x01\x0b\x157\x06.\x08'
tRp6968
sa(dp6969
S'trial_loop.thisTrialN'
p6970
I39
sg6370
g6790
sS'block_loop.thisIndex'
p6971
g6364
sg38
S'left'
p6972
sg58
g62
sS'trial_loop.thisN'
p6973
I39
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p6974
g59
(g98
S"'\x00\x00\x00"
tRp6975
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6976
I0
sg6379
g6798
sS'block_loop.thisRepN'
p6977
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6978
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p6979
Nsg69
Vn
sS'block_loop.thisTrialN'
p6980
I0
sg39
F0.76718294375405094
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16\x01\x03g\x18'
tRp6981
sa(dp6982
S'trial_loop.thisTrialN'
p6983
I40
sg6370
g6459
sS'block_loop.thisIndex'
p6984
g6364
sg38
S'right'
p6985
sg58
g62
sS'trial_loop.thisN'
p6986
I40
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p6987
g59
(g98
S'(\x00\x00\x00'
tRp6988
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6989
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6990
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6991
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p6992
Nsg69
Vn
sS'block_loop.thisTrialN'
p6993
I0
sg39
F0.78354480109828728
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16\x07\x00ix'
tRp6994
sa(dp6995
S'trial_loop.thisTrialN'
p6996
I41
sg6370
g6561
sS'block_loop.thisIndex'
p6997
g6364
sg38
S'right'
p6998
sg58
g62
sS'trial_loop.thisN'
p6999
I41
sg33
g6565
sg63
g64
sS'trial_loop.thisIndex'
p7000
g59
(g98
S')\x00\x00\x00'
tRp7001
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7002
I0
sg6379
g6569
sS'block_loop.thisRepN'
p7003
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7004
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p7005
Nsg69
Vn
sS'block_loop.thisTrialN'
p7006
I0
sg39
F0.95023332538858085
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16\x0c\x0c\xe4\xc8'
tRp7007
sa(dp7008
S'trial_loop.thisTrialN'
p7009
I42
sg6370
S'27-hartleys_raspberries_jelly.png'
p7010
sS'block_loop.thisIndex'
p7011
g6364
sg38
S'left'
p7012
sg58
g62
sS'trial_loop.thisN'
p7013
I42
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7014
g59
(g98
S'*\x00\x00\x00'
tRp7015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7016
I0
sg6379
S'51-mars.png'
p7017
sS'block_loop.thisRepN'
p7018
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7019
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p7020
Nsg69
Vn
sS'block_loop.thisTrialN'
p7021
I0
sg39
F0.95009961374671548
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16\x12\x0c\x83 '
tRp7022
sa(dp7023
S'trial_loop.thisTrialN'
p7024
I43
sg6370
g6459
sS'block_loop.thisIndex'
p7025
g6364
sg38
S'right'
p7026
sg58
g62
sS'trial_loop.thisN'
p7027
I43
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p7028
g59
(g98
S'+\x00\x00\x00'
tRp7029
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7030
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7031
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7032
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p7033
Nsg69
Vn
sS'block_loop.thisTrialN'
p7034
I0
sg39
F1.150214907964255
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16\x18\x0c_\xf8'
tRp7035
sa(dp7036
S'trial_loop.thisTrialN'
p7037
I44
sg6370
S'3-ellas_strawberries_apples.png'
p7038
sS'block_loop.thisIndex'
p7039
g6364
sg38
S'right'
p7040
sg58
g62
sS'trial_loop.thisN'
p7041
I44
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7042
g59
(g98
S',\x00\x00\x00'
tRp7043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7044
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7045
sS'block_loop.thisRepN'
p7046
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7047
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7048
Nsg69
Vn
sS'block_loop.thisTrialN'
p7049
I0
sg39
F0.76678779591929924
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16\x1e\x0f\x13`'
tRp7050
sa(dp7051
S'trial_loop.thisTrialN'
p7052
I45
sg6370
g6956
sS'block_loop.thisIndex'
p7053
g6364
sg38
S'right'
p7054
sg58
g62
sS'trial_loop.thisN'
p7055
I45
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p7056
g59
(g98
S'-\x00\x00\x00'
tRp7057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7058
I0
sg6379
g6963
sS'block_loop.thisRepN'
p7059
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7060
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p7061
Nsg69
Vn
sS'block_loop.thisTrialN'
p7062
I0
sg39
F0.81686665442703088
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16$\x0c\x11\xd8'
tRp7063
sa(dp7064
S'trial_loop.thisTrialN'
p7065
I46
sg6370
g7038
sS'block_loop.thisIndex'
p7066
g6364
sg38
S'right'
p7067
sg58
g62
sS'trial_loop.thisN'
p7068
I46
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7069
g59
(g98
S'.\x00\x00\x00'
tRp7070
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7071
I0
sg6379
g7045
sS'block_loop.thisRepN'
p7072
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7073
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7074
Nsg69
Vn
sS'block_loop.thisTrialN'
p7075
I0
sg39
F0.95013696177466045
sg34
g752
(S'\x07\xdf\n\x01\x0b\x16*\t\xc7\xe8'
tRp7076
sa(dp7077
S'trial_loop.thisTrialN'
p7078
I47
sg6370
g6745
sS'block_loop.thisIndex'
p7079
g6364
sg38
S'right'
p7080
sg58
g62
sS'trial_loop.thisN'
p7081
I47
sg33
g6650
sg63
g64
sS'trial_loop.thisIndex'
p7082
g59
(g98
S'/\x00\x00\x00'
tRp7083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7084
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7085
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7086
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7087
Nsg69
Vn
sS'block_loop.thisTrialN'
p7088
I0
sg39
F0.9501452296590287
sg34
g752
(S'\x07\xdf\n\x01\x0b\x160\tf@'
tRp7089
sa(dp7090
S'trial_loop.thisTrialN'
p7091
I48
sg6370
S'50-polo.png'
p7092
sS'block_loop.thisIndex'
p7093
g6364
sg38
S'right'
p7094
sg58
g62
sS'trial_loop.thisN'
p7095
I48
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p7096
g59
(g98
S'0\x00\x00\x00'
tRp7097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7098
I0
sg6379
S'48-twix.png'
p7099
sS'block_loop.thisRepN'
p7100
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7101
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p7102
Nsg69
Vn
sS'block_loop.thisTrialN'
p7103
I0
sg39
F0.90011056156617997
sg34
g752
(S'\x07\xdf\n\x01\x0b\x166\tC\x18'
tRp7104
sa(dp7105
S'trial_loop.thisTrialN'
p7106
I49
sg6370
S'30-spaghetti_hoops.png'
p7107
sS'block_loop.thisIndex'
p7108
g6364
sg38
S'right'
p7109
sg58
g62
sS'trial_loop.thisN'
p7110
I49
sg33
S'19-caramello_redo.png'
p7111
sg63
g64
sS'trial_loop.thisIndex'
p7112
g59
(g98
S'1\x00\x00\x00'
tRp7113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7114
I0
sg6379
S'19-caramello_redo.png'
p7115
sS'block_loop.thisRepN'
p7116
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7117
I2
sg6384
S'30-spaghetti_hoops.png'
p7118
sg55
g11
sS'block_loop.thisTrial'
p7119
Nsg69
Vn
sS'block_loop.thisTrialN'
p7120
I0
sg39
F0.86690046722105762
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17\x00\x08)\xd8'
tRp7121
sa(dp7122
S'trial_loop.thisTrialN'
p7123
I50
sg6370
g6408
sS'block_loop.thisIndex'
p7124
g6364
sg38
S'left'
p7125
sg58
g62
sS'trial_loop.thisN'
p7126
I50
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7127
g59
(g98
S'2\x00\x00\x00'
tRp7128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7129
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7130
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7131
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7132
Nsg69
Vn
sS'block_loop.thisTrialN'
p7133
I0
sg39
F0.7668165909635718
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17\x06\x06\xd2\x18'
tRp7134
sa(dp7135
S'trial_loop.thisTrialN'
p7136
I51
sg6370
g6861
sS'block_loop.thisIndex'
p7137
g6364
sg38
S'left'
p7138
sg58
g62
sS'trial_loop.thisN'
p7139
I51
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7140
g59
(g98
S'3\x00\x00\x00'
tRp7141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7142
I0
sg6379
g6868
sS'block_loop.thisRepN'
p7143
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7144
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7145
Nsg69
Vn
sS'block_loop.thisTrialN'
p7146
I0
sg39
F0.76686049627824104
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17\x0c\x03\x95\xf8'
tRp7147
sa(dp7148
S'trial_loop.thisTrialN'
p7149
I52
sg6370
S'25-kitkat.png'
p7150
sS'block_loop.thisIndex'
p7151
g6364
sg38
S'right'
p7152
sg58
g62
sS'trial_loop.thisN'
p7153
I52
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7154
g59
(g98
S'4\x00\x00\x00'
tRp7155
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7156
I0
sg6379
S'31-hobnobs.png'
p7157
sS'block_loop.thisRepN'
p7158
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7159
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7160
Nsg69
Vn
sS'block_loop.thisTrialN'
p7161
I0
sg39
F0.85019477994319459
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17\x12\x00\x94p'
tRp7162
sa(dp7163
S'trial_loop.thisTrialN'
p7164
I53
sg6370
g6493
sS'block_loop.thisIndex'
p7165
g6364
sg38
S'left'
p7166
sg58
g62
sS'trial_loop.thisN'
p7167
I53
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7168
g59
(g98
S'5\x00\x00\x00'
tRp7169
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7170
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7171
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7172
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7173
Nsg69
Vn
sS'block_loop.thisTrialN'
p7174
I0
sg39
F0.90016387516334362
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17\x17\x0e\x05\xd8'
tRp7175
sa(dp7176
S'trial_loop.thisTrialN'
p7177
I54
sg6370
g7150
sS'block_loop.thisIndex'
p7178
g6364
sg38
S'right'
p7179
sg58
g62
sS'trial_loop.thisN'
p7180
I54
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7181
g59
(g98
S'6\x00\x00\x00'
tRp7182
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7183
I0
sg6379
g7157
sS'block_loop.thisRepN'
p7184
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7185
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7186
Nsg69
Vn
sS'block_loop.thisTrialN'
p7187
I0
sg39
F1.0335319716223239
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17\x1d\r+\x18'
tRp7188
sa(dp7189
S'trial_loop.thisTrialN'
p7190
I55
sg6370
g6612
sS'block_loop.thisIndex'
p7191
g6364
sg38
S'right'
p7192
sg58
g62
sS'trial_loop.thisN'
p7193
I55
sg33
g6616
sg63
g64
sS'trial_loop.thisIndex'
p7194
g59
(g98
S'7\x00\x00\x00'
tRp7195
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7196
I0
sg6379
g6620
sS'block_loop.thisRepN'
p7197
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7198
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p7199
Nsg69
Vn
sS'block_loop.thisTrialN'
p7200
I0
sg39
F1.5001818934479161
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17#\r\xfa '
tRp7201
sa(dp7202
S'trial_loop.thisTrialN'
p7203
I56
sg6370
S'19-caramello_redo.png'
p7204
sS'block_loop.thisIndex'
p7205
g6364
sg38
S'left'
p7206
sg58
g62
sS'trial_loop.thisN'
p7207
I56
sg33
g7118
sg63
g64
sS'trial_loop.thisIndex'
p7208
g59
(g98
S'8\x00\x00\x00'
tRp7209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7210
I0
sg6379
S'30-spaghetti_hoops.png'
p7211
sS'block_loop.thisRepN'
p7212
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7213
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p7214
Nsg69
Vn
sS'block_loop.thisTrialN'
p7215
I0
sg39
F0.70021678961984435
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17*\x06\xe5\xa0'
tRp7216
sa(dp7217
S'trial_loop.thisTrialN'
p7218
I57
sg6370
g7150
sS'block_loop.thisIndex'
p7219
g6364
sg38
S'right'
p7220
sg58
g62
sS'trial_loop.thisN'
p7221
I57
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7222
g59
(g98
S'9\x00\x00\x00'
tRp7223
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7224
I0
sg6379
g7157
sS'block_loop.thisRepN'
p7225
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7226
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7227
Nsg69
Vn
sS'block_loop.thisTrialN'
p7228
I0
sg39
F0.81679766035995272
sg34
g752
(S'\x07\xdf\n\x01\x0b\x170\x02\xf1\xe8'
tRp7229
sa(dp7230
S'trial_loop.thisTrialN'
p7231
I58
sg6370
g6544
sS'block_loop.thisIndex'
p7232
g6364
sg38
S'left'
p7233
sg58
g62
sS'trial_loop.thisN'
p7234
I58
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p7235
g59
(g98
S':\x00\x00\x00'
tRp7236
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7237
I0
sg6379
g6552
sS'block_loop.thisRepN'
p7238
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7239
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p7240
Nsg69
Vn
sS'block_loop.thisTrialN'
p7241
I0
sg39
F0.8001794986130335
sg34
g752
(S'\x07\xdf\n\x01\x0b\x176\x00\xa7\xf8'
tRp7242
sa(dp7243
S'trial_loop.thisTrialN'
p7244
I59
sg6370
g6408
sS'block_loop.thisIndex'
p7245
g6364
sg38
S'left'
p7246
sg58
g62
sS'trial_loop.thisN'
p7247
I59
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7248
g59
(g98
S';\x00\x00\x00'
tRp7249
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7250
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7251
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7252
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7253
Nsg69
Vn
sS'block_loop.thisTrialN'
p7254
I0
sg39
F0.81677456730449194
sg34
g752
(S'\x07\xdf\n\x01\x0b\x17;\ra\xc8'
tRp7255
sa(dp7256
S'trial_loop.thisTrialN'
p7257
I60
sg6370
g7204
sS'block_loop.thisIndex'
p7258
g6364
sg38
S'left'
p7259
sg58
g62
sS'trial_loop.thisN'
p7260
I60
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p7261
g59
(g98
S'<\x00\x00\x00'
tRp7262
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7263
I0
sg6379
g7211
sS'block_loop.thisRepN'
p7264
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7265
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p7266
Nsg69
Vn
sS'block_loop.thisTrialN'
p7267
I0
sg39
F0.81679110307231895
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18\x05\x0b\x17\xd8'
tRp7268
sa(dp7269
S'trial_loop.thisTrialN'
p7270
I61
sg6370
g6510
sS'block_loop.thisIndex'
p7271
g6364
sg38
S'left'
p7272
sg58
g62
sS'trial_loop.thisN'
p7273
I61
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7274
g59
(g98
S'=\x00\x00\x00'
tRp7275
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7276
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7277
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7278
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7279
Nsg69
Vn
sS'block_loop.thisTrialN'
p7280
I0
sg39
F0.78344159509651945
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18\x0b\x08\xcd\xe8'
tRp7281
sa(dp7282
S'trial_loop.thisTrialN'
p7283
I62
sg6370
g7107
sS'block_loop.thisIndex'
p7284
g6364
sg38
S'right'
p7285
sg58
g62
sS'trial_loop.thisN'
p7286
I62
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p7287
g59
(g98
S'>\x00\x00\x00'
tRp7288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7289
I0
sg6379
g7115
sS'block_loop.thisRepN'
p7290
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7291
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p7292
Nsg69
Vn
sS'block_loop.thisTrialN'
p7293
I0
sg39
F0.76723483185378427
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18\x11\x06\n\xe0'
tRp7294
sa(dp7295
S'trial_loop.thisTrialN'
p7296
I63
sg6370
g6730
sS'block_loop.thisIndex'
p7297
g6364
sg38
S'right'
p7298
sg58
g62
sS'trial_loop.thisN'
p7299
I63
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7300
g59
(g98
S'?\x00\x00\x00'
tRp7301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7302
I0
sg6379
g6737
sS'block_loop.thisRepN'
p7303
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7304
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg69
Vn
sS'block_loop.thisTrialN'
p7306
I0
sg39
F0.80008883698792488
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18\x17\x02\xce\xc0'
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I64
sg6370
g6544
sS'block_loop.thisIndex'
p7310
g6364
sg38
S'left'
p7311
sg58
g62
sS'trial_loop.thisN'
p7312
I64
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p7313
g59
(g98
S'@\x00\x00\x00'
tRp7314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7315
I0
sg6379
g6552
sS'block_loop.thisRepN'
p7316
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7317
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg69
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F1.066923389216754
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18\x1d\x00FP'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I65
sg6370
g7092
sS'block_loop.thisIndex'
p7323
g6364
sg38
S'right'
p7324
sg58
g62
sS'trial_loop.thisN'
p7325
I65
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p7326
g59
(g98
S'A\x00\x00\x00'
tRp7327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7328
I0
sg6379
g7099
sS'block_loop.thisRepN'
p7329
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7330
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p7331
Nsg69
Vn
sS'block_loop.thisTrialN'
p7332
I0
sg39
F0.75020641199989768
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18#\x01\xcc\xf0'
tRp7333
sa(dp7334
S'trial_loop.thisTrialN'
p7335
I66
sg6370
g7150
sS'block_loop.thisIndex'
p7336
g6364
sg38
S'right'
p7337
sg58
g62
sS'trial_loop.thisN'
p7338
I66
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7339
g59
(g98
S'B\x00\x00\x00'
tRp7340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7341
I0
sg6379
g7157
sS'block_loop.thisRepN'
p7342
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7343
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7344
Nsg69
Vn
sS'block_loop.thisTrialN'
p7345
I0
sg39
F0.86677416816473851
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18(\r\xcf('
tRp7346
sa(dp7347
S'trial_loop.thisTrialN'
p7348
I67
sg6370
g6425
sS'block_loop.thisIndex'
p7349
g6364
sg38
S'left'
p7350
sg58
g62
sS'trial_loop.thisN'
p7351
I67
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7352
g59
(g98
S'C\x00\x00\x00'
tRp7353
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7354
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7355
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7356
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7357
Nsg69
Vn
sS'block_loop.thisTrialN'
p7358
I0
sg39
F0.83353898506902624
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18.\x0c<\xd0'
tRp7359
sa(dp7360
S'trial_loop.thisTrialN'
p7361
I68
sg6370
g6902
sS'block_loop.thisIndex'
p7362
g6364
sg38
S'right'
p7363
sg58
g62
sS'trial_loop.thisN'
p7364
I68
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7365
g59
(g98
S'D\x00\x00\x00'
tRp7366
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7367
I0
sg6379
g6909
sS'block_loop.thisRepN'
p7368
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7369
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7370
Nsg69
Vn
sS'block_loop.thisTrialN'
p7371
I0
sg39
F0.88389439004095038
sg34
g752
(S'\x07\xdf\n\x01\x0b\x184\n1`'
tRp7372
sa(dp7373
S'trial_loop.thisTrialN'
p7374
I69
sg6370
S'5-pineapple.png'
p7375
sS'block_loop.thisIndex'
p7376
g6364
sg38
S'right'
p7377
sg58
g62
sS'trial_loop.thisN'
p7378
I69
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7379
g59
(g98
S'E\x00\x00\x00'
tRp7380
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7381
I0
sg6379
S'40-sardines.png'
p7382
sS'block_loop.thisRepN'
p7383
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7384
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7385
Nsg69
Vn
sS'block_loop.thisTrialN'
p7386
I0
sg39
F0.88341114647573704
sg34
g752
(S'\x07\xdf\n\x01\x0b\x18:\t\x18 '
tRp7387
sa(dp7388
S'trial_loop.thisTrialN'
p7389
I70
sg6370
g6846
sS'block_loop.thisIndex'
p7390
g6364
sg38
S'left'
p7391
sg58
g62
sS'trial_loop.thisN'
p7392
I70
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p7393
g59
(g98
S'F\x00\x00\x00'
tRp7394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7395
I0
sg6379
g6853
sS'block_loop.thisRepN'
p7396
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7397
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p7398
Nsg69
Vn
sS'block_loop.thisTrialN'
p7399
I0
sg39
F0.8002040171650151
sg34
g752
(S'\x07\xdf\n\x01\x0b\x19\x04\x07\xc0`'
tRp7400
sa(dp7401
S'trial_loop.thisTrialN'
p7402
I71
sg6370
g6612
sS'block_loop.thisIndex'
p7403
g6364
sg38
S'left'
p7404
sg58
g62
sS'trial_loop.thisN'
p7405
I71
sg33
g6616
sg63
g64
sS'trial_loop.thisIndex'
p7406
g59
(g98
S'G\x00\x00\x00'
tRp7407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7408
I0
sg6379
g6620
sS'block_loop.thisRepN'
p7409
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7410
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p7411
Nsg69
Vn
sS'block_loop.thisTrialN'
p7412
I0
sg39
F0.91675409716390277
sg34
g752
(S'\x07\xdf\n\x01\x0b\x19\n\x05;\xd8'
tRp7413
sa(dp7414
S'trial_loop.thisTrialN'
p7415
I72
sg6370
g7038
sS'block_loop.thisIndex'
p7416
g6364
sg38
S'right'
p7417
sg58
g62
sS'trial_loop.thisN'
p7418
I72
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7419
g59
(g98
S'H\x00\x00\x00'
tRp7420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7421
I0
sg6379
g7045
sS'block_loop.thisRepN'
p7422
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7423
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7424
Nsg69
Vn
sS'block_loop.thisTrialN'
p7425
I0
sg39
F0.80011820223080576
sg34
g752
(S'\x07\xdf\n\x01\x0b\x19\x10\x04]0'
tRp7426
sa(dp7427
S'trial_loop.thisTrialN'
p7428
I73
sg6370
S'29-beans.png'
p7429
sS'block_loop.thisIndex'
p7430
g6364
sg38
S'right'
p7431
sg58
g62
sS'trial_loop.thisN'
p7432
I73
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7433
g59
(g98
S'I\x00\x00\x00'
tRp7434
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7435
I0
sg6379
S'46-pistachios.png'
p7436
sS'block_loop.thisRepN'
p7437
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7438
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7439
Nsg69
Vn
sS'block_loop.thisTrialN'
p7440
I0
sg39
F0.85019221404763812
sg34
g752
(S'\x07\xdf\n\x01\x0b\x19\x16\x01\xd8\xa8'
tRp7441
sa(dp7442
S'trial_loop.thisTrialN'
p7443
I74
sg6370
g6612
sS'block_loop.thisIndex'
p7444
g6364
sg38
S'left'
p7445
sg58
g62
sS'trial_loop.thisN'
p7446
I74
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7447
g59
(g98
S'J\x00\x00\x00'
tRp7448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7449
I0
sg6379
g6620
sS'block_loop.thisRepN'
p7450
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7451
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p7452
Nsg69
Vn
sS'block_loop.thisTrialN'
p7453
I0
sg39
F0.78362348854534503
sg34
g752
(S'\x07\xdf\n\x01\x0b\x19\x1c\x00\x07\xd0'
tRp7454
sa(dp7455
S'trial_loop.thisTrialN'
p7456
I75
sg6370
g6459
sS'block_loop.thisIndex'
p7457
g6364
sg38
S'right'
p7458
sg58
g62
sS'trial_loop.thisN'
p7459
I75
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p7460
g59
(g98
S'K\x00\x00\x00'
tRp7461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7462
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7463
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7464
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p7465
Nsg69
Vn
sS'block_loop.thisTrialN'
p7466
I0
sg39
F0.85018679715904
sg34
g752
(S'\x07\xdf\n\x01\x0b\x19!\x0c\x87\x08'
tRp7467
sa(dp7468
S'trial_loop.thisTrialN'
p7469
I76
sg6370
g6425
sS'block_loop.thisIndex'
p7470
g6364
sg38
S'left'
p7471
sg58
g62
sS'trial_loop.thisN'
p7472
I76
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p7473
g59
(g98
S'L\x00\x00\x00'
tRp7474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7475
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7476
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7477
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7478
Nsg69
Vn
sS'block_loop.thisTrialN'
p7479
I0
sg39
F0.78345727556734346
sg34
g752
(S"\x07\xdf\n\x01\x0b\x19'\n\xb60"
tRp7480
sa(dp7481
S'trial_loop.thisTrialN'
p7482
I77
sg6370
g6702
sS'block_loop.thisIndex'
p7483
g6364
sg38
S'left'
p7484
sg58
g62
sS'trial_loop.thisN'
p7485
I77
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p7486
g59
(g98
S'M\x00\x00\x00'
tRp7487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7488
I0
sg6379
g6709
sS'block_loop.thisRepN'
p7489
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7490
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p7491
Nsg69
Vn
sS'block_loop.thisTrialN'
p7492
I0
sg39
F0.7501873103374237
sg34
g752
(S'\x07\xdf\n\x01\x0b\x19-\x07\xf3('
tRp7493
sa(dp7494
S'trial_loop.thisTrialN'
p7495
I78
sg6370
g6773
sS'block_loop.thisIndex'
p7496
g6364
sg38
S'left'
p7497
sg58
g62
sS'trial_loop.thisN'
p7498
I78
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7499
g59
(g98
S'N\x00\x00\x00'
tRp7500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7501
I0
sg6379
g6781
sS'block_loop.thisRepN'
p7502
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7503
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7504
Nsg69
Vn
sS'block_loop.thisTrialN'
p7505
I0
sg39
F0.81688062429930142
sg34
g752
(S'\x07\xdf\n\x01\x0b\x193\x04\xb3 '
tRp7506
sa(dp7507
S'trial_loop.thisTrialN'
p7508
I79
sg6370
S'18-mms.png'
p7509
sS'block_loop.thisIndex'
p7510
g6364
sg38
S'left'
p7511
sg58
g62
sS'trial_loop.thisN'
p7512
I79
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p7513
g59
(g98
S'O\x00\x00\x00'
tRp7514
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7515
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p7516
sS'block_loop.thisRepN'
p7517
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7518
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p7519
Nsg69
Vn
sS'block_loop.thisTrialN'
p7520
I0
sg39
F0.71675683411922364
sg34
g752
(S'\x07\xdf\n\x01\x0b\x199\x02i0'
tRp7521
sa(dp7522
S'trial_loop.thisTrialN'
p7523
I80
sg6370
g6702
sS'block_loop.thisIndex'
p7524
g6364
sg38
S'left'
p7525
sg58
g62
sS'trial_loop.thisN'
p7526
I80
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7527
g59
(g98
S'P\x00\x00\x00'
tRp7528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7529
I0
sg6379
g6709
sS'block_loop.thisRepN'
p7530
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7531
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p7532
Nsg69
Vn
sS'block_loop.thisTrialN'
p7533
I0
sg39
F0.95038357279827324
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a\x02\r\xb7\xb8'
tRp7534
sa(dp7535
S'trial_loop.thisTrialN'
p7536
I81
sg6370
g6371
sS'block_loop.thisIndex'
p7537
g6364
sg38
S'left'
p7538
sg58
g62
sS'trial_loop.thisN'
p7539
I81
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7540
g59
(g98
S'Q\x00\x00\x00'
tRp7541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7542
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7543
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7544
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7545
Nsg69
Vn
sS'block_loop.thisTrialN'
p7546
I0
sg39
F0.9835089926064029
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a\x08\r\x90\xa8'
tRp7547
sa(dp7548
S'trial_loop.thisTrialN'
p7549
I82
sg6370
S'38-maltesers.png'
p7550
sS'block_loop.thisIndex'
p7551
g6364
sg38
S'left'
p7552
sg58
g62
sS'trial_loop.thisN'
p7553
I82
sg33
g6633
sg63
g64
sS'trial_loop.thisIndex'
p7554
g59
(g98
S'R\x00\x00\x00'
tRp7555
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7556
I0
sg6379
S'6-sour_patch_kids.png'
p7557
sS'block_loop.thisRepN'
p7558
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7559
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p7560
Nsg69
Vn
sS'block_loop.thisTrialN'
p7561
I0
sg39
F0.71659974432259332
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a\x0e\r\xe6\x98'
tRp7562
sa(dp7563
S'trial_loop.thisTrialN'
p7564
I83
sg6370
g6391
sS'block_loop.thisIndex'
p7565
g6364
sg38
S'left'
p7566
sg58
g62
sS'trial_loop.thisN'
p7567
I83
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7568
g59
(g98
S'S\x00\x00\x00'
tRp7569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7570
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7571
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7572
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7573
Nsg69
Vn
sS'block_loop.thisTrialN'
p7574
I0
sg39
F0.78353054612489359
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a\x14\t\xf2\xe0'
tRp7575
sa(dp7576
S'trial_loop.thisTrialN'
p7577
I84
sg6370
g7429
sS'block_loop.thisIndex'
p7578
g6364
sg38
S'right'
p7579
sg58
g62
sS'trial_loop.thisN'
p7580
I84
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7581
g59
(g98
S'T\x00\x00\x00'
tRp7582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7583
I0
sg6379
g7436
sS'block_loop.thisRepN'
p7584
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7585
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7586
Nsg69
Vn
sS'block_loop.thisTrialN'
p7587
I0
sg39
F0.81688204979673174
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a\x1a\x07/\xd8'
tRp7588
sa(dp7589
S'trial_loop.thisTrialN'
p7590
I85
sg6370
S'16-skips_prawn.png'
p7591
sS'block_loop.thisIndex'
p7592
g6364
sg38
S'right'
p7593
sg58
g62
sS'trial_loop.thisN'
p7594
I85
sg33
g6521
sg63
g64
sS'trial_loop.thisIndex'
p7595
g59
(g98
S'U\x00\x00\x00'
tRp7596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7597
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p7598
sS'block_loop.thisRepN'
p7599
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7600
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7601
Nsg69
Vn
sS'block_loop.thisTrialN'
p7602
I0
sg39
F1.0499958945674734
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a \x04\xe5\xe8'
tRp7603
sa(dp7604
S'trial_loop.thisTrialN'
p7605
I86
sg6370
g6745
sS'block_loop.thisIndex'
p7606
g6364
sg38
S'right'
p7607
sg58
g62
sS'trial_loop.thisN'
p7608
I86
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7609
g59
(g98
S'V\x00\x00\x00'
tRp7610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7611
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7612
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7613
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7614
Nsg69
Vn
sS'block_loop.thisTrialN'
p7615
I0
sg39
F1.0501794986130335
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a&\x06.\x08'
tRp7616
sa(dp7617
S'trial_loop.thisTrialN'
p7618
I87
sg6370
g6371
sS'block_loop.thisIndex'
p7619
g6364
sg38
S'left'
p7620
sg58
g62
sS'trial_loop.thisN'
p7621
I87
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7622
g59
(g98
S'W\x00\x00\x00'
tRp7623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7624
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7625
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7626
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7627
Nsg69
Vn
sS'block_loop.thisTrialN'
p7628
I0
sg39
F0.75011489507778606
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a,\x07v('
tRp7629
sa(dp7630
S'trial_loop.thisTrialN'
p7631
I88
sg6370
g7591
sS'block_loop.thisIndex'
p7632
g6364
sg38
S'right'
p7633
sg58
g62
sS'trial_loop.thisN'
p7634
I88
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7635
g59
(g98
S'X\x00\x00\x00'
tRp7636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7637
I0
sg6379
g7598
sS'block_loop.thisRepN'
p7638
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7639
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7640
Nsg69
Vn
sS'block_loop.thisTrialN'
p7641
I0
sg39
F0.79990893923604744
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a2\x046 '
tRp7642
sa(dp7643
S'trial_loop.thisTrialN'
p7644
I89
sg6370
g6902
sS'block_loop.thisIndex'
p7645
g6364
sg38
S'right'
p7646
sg58
g62
sS'trial_loop.thisN'
p7647
I89
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7648
g59
(g98
S'Y\x00\x00\x00'
tRp7649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7650
I0
sg6379
g6909
sS'block_loop.thisRepN'
p7651
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7652
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7653
Nsg69
Vn
sS'block_loop.thisTrialN'
p7654
I0
sg39
F1.0002066971001113
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1a8\x01\xb1\x98'
tRp7655
sa(dp7656
S'trial_loop.thisTrialN'
p7657
I90
sg6370
g6745
sS'block_loop.thisIndex'
p7658
g6364
sg38
S'right'
p7659
sg58
g62
sS'trial_loop.thisN'
p7660
I90
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7661
g59
(g98
S'Z\x00\x00\x00'
tRp7662
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7663
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7664
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7665
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7666
Nsg69
Vn
sS'block_loop.thisTrialN'
p7667
I0
sg39
F0.91674668457835651
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b\x02\x02\x03\xa0'
tRp7668
sa(dp7669
S'trial_loop.thisTrialN'
p7670
I91
sg6370
g6544
sS'block_loop.thisIndex'
p7671
g6364
sg38
S'left'
p7672
sg58
g62
sS'trial_loop.thisN'
p7673
I91
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p7674
g59
(g98
S'[\x00\x00\x00'
tRp7675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7676
I0
sg6379
g6552
sS'block_loop.thisRepN'
p7677
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7678
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p7679
Nsg69
Vn
sS'block_loop.thisTrialN'
p7680
I0
sg39
F1.1668855280104253
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b\x08\x01g`'
tRp7681
sa(dp7682
S'trial_loop.thisTrialN'
p7683
I92
sg6370
g6773
sS'block_loop.thisIndex'
p7684
g6364
sg38
S'left'
p7685
sg58
g62
sS'trial_loop.thisN'
p7686
I92
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7687
g59
(g98
S'\\\x00\x00\x00'
tRp7688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7689
I0
sg6379
g6781
sS'block_loop.thisRepN'
p7690
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7691
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7692
Nsg69
Vn
sS'block_loop.thisTrialN'
p7693
I0
sg39
F0.85027033129699703
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b\x0e\x04YH'
tRp7694
sa(dp7695
S'trial_loop.thisTrialN'
p7696
I93
sg6370
g6730
sS'block_loop.thisIndex'
p7697
g6364
sg38
S'right'
p7698
sg58
g62
sS'trial_loop.thisN'
p7699
I93
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7700
g59
(g98
S']\x00\x00\x00'
tRp7701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7702
I0
sg6379
g6737
sS'block_loop.thisRepN'
p7703
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7704
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7705
Nsg69
Vn
sS'block_loop.thisTrialN'
p7706
I0
sg39
F0.93356470103935862
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b\x14\x02\x88p'
tRp7707
sa(dp7708
S'trial_loop.thisTrialN'
p7709
I94
sg6370
g7509
sS'block_loop.thisIndex'
p7710
g6364
sg38
S'left'
p7711
sg58
g62
sS'trial_loop.thisN'
p7712
I94
sg33
g6589
sg63
g64
sS'trial_loop.thisIndex'
p7713
g59
(g98
S'^\x00\x00\x00'
tRp7714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7715
I0
sg6379
g7516
sS'block_loop.thisRepN'
p7716
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7717
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p7718
Nsg69
Vn
sS'block_loop.thisTrialN'
p7719
I0
sg39
F0.73345738960688323
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b\x1a\x02&\xc8'
tRp7720
sa(dp7721
S'trial_loop.thisTrialN'
p7722
I95
sg6370
g7375
sS'block_loop.thisIndex'
p7723
g6364
sg38
S'right'
p7724
sg58
g62
sS'trial_loop.thisN'
p7725
I95
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7726
g59
(g98
S'_\x00\x00\x00'
tRp7727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7728
I0
sg6379
g7382
sS'block_loop.thisRepN'
p7729
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7730
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7731
Nsg69
Vn
sS'block_loop.thisTrialN'
p7732
I0
sg39
F0.81685582064710616
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b\x1f\r\xaf\xe8'
tRp7733
sa(dp7734
S'trial_loop.thisTrialN'
p7735
I96
sg6370
S'22-daim.png'
p7736
sS'block_loop.thisIndex'
p7737
g6364
sg38
S'right'
p7738
sg58
g62
sS'trial_loop.thisN'
p7739
I96
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7740
g59
(g98
S'`\x00\x00\x00'
tRp7741
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7742
I0
sg6379
S'7-olives.png'
p7743
sS'block_loop.thisRepN'
p7744
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7745
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7746
Nsg69
Vn
sS'block_loop.thisTrialN'
p7747
I0
sg39
F0.91688809390507231
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b%\x0be\xf8'
tRp7748
sa(dp7749
S'trial_loop.thisTrialN'
p7750
I97
sg6370
g6476
sS'block_loop.thisIndex'
p7751
g6364
sg38
S'left'
p7752
sg58
g62
sS'trial_loop.thisN'
p7753
I97
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7754
g59
(g98
S'a\x00\x00\x00'
tRp7755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7756
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7757
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7758
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7759
Nsg69
Vn
sS'block_loop.thisTrialN'
p7760
I0
sg39
F0.80019204298878321
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b+\n\xc5\xd0'
tRp7761
sa(dp7762
S'trial_loop.thisTrialN'
p7763
I98
sg6370
g6646
sS'block_loop.thisIndex'
p7764
g6364
sg38
S'left'
p7765
sg58
g62
sS'trial_loop.thisN'
p7766
I98
sg33
g6650
sg63
g64
sS'trial_loop.thisIndex'
p7767
g59
(g98
S'b\x00\x00\x00'
tRp7768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7769
I0
sg6379
g6654
sS'block_loop.thisRepN'
p7770
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7771
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7772
Nsg69
Vn
sS'block_loop.thisTrialN'
p7773
I0
sg39
F0.73355460851871612
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b1\x08AH'
tRp7774
sa(dp7775
S'trial_loop.thisTrialN'
p7776
I99
sg6370
g7509
sS'block_loop.thisIndex'
p7777
g6364
sg38
S'left'
p7778
sg58
g62
sS'trial_loop.thisN'
p7779
I99
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p7780
g59
(g98
S'c\x00\x00\x00'
tRp7781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7782
I0
sg6379
g7516
sS'block_loop.thisRepN'
p7783
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7784
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p7785
Nsg69
Vn
sS'block_loop.thisTrialN'
p7786
I0
sg39
F0.7002076664384731
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1b7\x04\x88('
tRp7787
sa(dp7788
S'trial_loop.thisTrialN'
p7789
I100
sg6370
g7375
sS'block_loop.thisIndex'
p7790
g6364
sg38
S'right'
p7791
sg58
g62
sS'trial_loop.thisN'
p7792
I100
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7793
g59
(g98
S'd\x00\x00\x00'
tRp7794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7795
I0
sg6379
g7382
sS'block_loop.thisRepN'
p7796
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7797
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7798
Nsg69
Vn
sS'block_loop.thisTrialN'
p7799
I0
sg39
F0.81693878458736435
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c\x01\x00\x94p'
tRp7800
sa(dp7801
S'trial_loop.thisTrialN'
p7802
I101
sg6370
g6371
sS'block_loop.thisIndex'
p7803
g6364
sg38
S'left'
p7804
sg58
g62
sS'trial_loop.thisN'
p7805
I101
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7806
g59
(g98
S'e\x00\x00\x00'
tRp7807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7808
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7809
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7810
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7811
Nsg69
Vn
sS'block_loop.thisTrialN'
p7812
I0
sg39
F0.91675951405341038
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c\x06\r\x8c\xc0'
tRp7813
sa(dp7814
S'trial_loop.thisTrialN'
p7815
I102
sg6370
g7509
sS'block_loop.thisIndex'
p7816
g6364
sg38
S'left'
p7817
sg58
g62
sS'trial_loop.thisN'
p7818
I102
sg33
g6589
sg63
g64
sS'trial_loop.thisIndex'
p7819
g59
(g98
S'f\x00\x00\x00'
tRp7820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7821
I0
sg6379
g7516
sS'block_loop.thisRepN'
p7822
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7823
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p7824
Nsg69
Vn
sS'block_loop.thisTrialN'
p7825
I0
sg39
F0.76678066843305714
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c\x0c\x0c\xb2\x00'
tRp7826
sa(dp7827
S'trial_loop.thisTrialN'
p7828
I103
sg6370
g6730
sS'block_loop.thisIndex'
p7829
g6364
sg38
S'right'
p7830
sg58
g62
sS'trial_loop.thisN'
p7831
I103
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7832
g59
(g98
S'g\x00\x00\x00'
tRp7833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7834
I0
sg6379
g6737
sS'block_loop.thisRepN'
p7835
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7836
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7837
Nsg69
Vn
sS'block_loop.thisTrialN'
p7838
I0
sg39
F0.76676413266432064
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c\x12\t\xb0x'
tRp7839
sa(dp7840
S'trial_loop.thisTrialN'
p7841
I104
sg6370
g6476
sS'block_loop.thisIndex'
p7842
g6364
sg38
S'left'
p7843
sg58
g62
sS'trial_loop.thisN'
p7844
I104
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7845
g59
(g98
S'h\x00\x00\x00'
tRp7846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7847
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7848
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7849
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7850
Nsg69
Vn
sS'block_loop.thisTrialN'
p7851
I0
sg39
F0.71686232091451529
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c\x18\x06\xae\xf0'
tRp7852
sa(dp7853
S'trial_loop.thisTrialN'
p7854
I105
sg6370
g7550
sS'block_loop.thisIndex'
p7855
g6364
sg38
S'left'
p7856
sg58
g62
sS'trial_loop.thisN'
p7857
I105
sg33
g6633
sg63
g64
sS'trial_loop.thisIndex'
p7858
g59
(g98
S'i\x00\x00\x00'
tRp7859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7860
I0
sg6379
g7557
sS'block_loop.thisRepN'
p7861
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7862
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p7863
Nsg69
Vn
sS'block_loop.thisTrialN'
p7864
I0
sg39
F1.1665610848376673
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c\x1e\x02\xf9\xb8'
tRp7865
sa(dp7866
S'trial_loop.thisTrialN'
p7867
I106
sg6370
g6956
sS'block_loop.thisIndex'
p7868
g6364
sg38
S'right'
p7869
sg58
g62
sS'trial_loop.thisN'
p7870
I106
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p7871
g59
(g98
S'j\x00\x00\x00'
tRp7872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7873
I0
sg6379
g6963
sS'block_loop.thisRepN'
p7874
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7875
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p7876
Nsg69
Vn
sS'block_loop.thisTrialN'
p7877
I0
sg39
F0.76678038333284348
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c$\x05\xeb\xa0'
tRp7878
sa(dp7879
S'trial_loop.thisTrialN'
p7880
I107
sg6370
g6442
sS'block_loop.thisIndex'
p7881
g6364
sg38
S'right'
p7882
sg58
g62
sS'trial_loop.thisN'
p7883
I107
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p7884
g59
(g98
S'k\x00\x00\x00'
tRp7885
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7886
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7887
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7888
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7889
Nsg69
Vn
sS'block_loop.thisTrialN'
p7890
I0
sg39
F1.13353630513393
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c*\x02\xea\x18'
tRp7891
sa(dp7892
S'trial_loop.thisTrialN'
p7893
I108
sg6370
g6790
sS'block_loop.thisIndex'
p7894
g6364
sg38
S'left'
p7895
sg58
g62
sS'trial_loop.thisN'
p7896
I108
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p7897
g59
(g98
S'l\x00\x00\x00'
tRp7898
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7899
I0
sg6379
g6798
sS'block_loop.thisRepN'
p7900
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7901
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p7902
Nsg69
Vn
sS'block_loop.thisTrialN'
p7903
I0
sg39
F0.78355791567173583
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c0\x05b\xe8'
tRp7904
sa(dp7905
S'trial_loop.thisTrialN'
p7906
I109
sg6370
g7736
sS'block_loop.thisIndex'
p7907
g6364
sg38
S'right'
p7908
sg58
g62
sS'trial_loop.thisN'
p7909
I109
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7910
g59
(g98
S'm\x00\x00\x00'
tRp7911
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7912
I0
sg6379
g7743
sS'block_loop.thisRepN'
p7913
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7914
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7915
Nsg69
Vn
sS'block_loop.thisTrialN'
p7916
I0
sg39
F0.96684664044551027
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1c6\x02\x9f\xe0'
tRp7917
sa(dp7918
S'trial_loop.thisTrialN'
p7919
I110
sg6370
g6493
sS'block_loop.thisIndex'
p7920
g6364
sg38
S'left'
p7921
sg58
g62
sS'trial_loop.thisN'
p7922
I110
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7923
g59
(g98
S'n\x00\x00\x00'
tRp7924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7925
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7926
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7927
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p7928
Nsg69
Vn
sS'block_loop.thisTrialN'
p7929
I0
sg39
F0.75008438943677902
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d\x00\x02x\xd0'
tRp7930
sa(dp7931
S'trial_loop.thisTrialN'
p7932
I111
sg6370
g6391
sS'block_loop.thisIndex'
p7933
g6364
sg38
S'left'
p7934
sg58
g62
sS'trial_loop.thisN'
p7935
I111
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7936
g59
(g98
S'o\x00\x00\x00'
tRp7937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7938
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7939
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7940
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7941
Nsg69
Vn
sS'block_loop.thisTrialN'
p7942
I0
sg39
F0.80010081116506626
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d\x05\x0e~\xf0'
tRp7943
sa(dp7944
S'trial_loop.thisTrialN'
p7945
I112
sg6370
g6595
sS'block_loop.thisIndex'
p7946
g6364
sg38
S'left'
p7947
sg58
g62
sS'trial_loop.thisN'
p7948
I112
sg33
g6599
sg63
g64
sS'trial_loop.thisIndex'
p7949
g59
(g98
S'p\x00\x00\x00'
tRp7950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7951
I0
sg6379
g6603
sS'block_loop.thisRepN'
p7952
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7953
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p7954
Nsg69
Vn
sS'block_loop.thisTrialN'
p7955
I0
sg39
F0.75013371164186537
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d\x0b\x0b\xf6\x80'
tRp7956
sa(dp7957
S'trial_loop.thisTrialN'
p7958
I113
sg6370
g7550
sS'block_loop.thisIndex'
p7959
g6364
sg38
S'left'
p7960
sg58
g62
sS'trial_loop.thisN'
p7961
I113
sg33
g6633
sg63
g64
sS'trial_loop.thisIndex'
p7962
g59
(g98
S'q\x00\x00\x00'
tRp7963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7964
I0
sg6379
g7557
sS'block_loop.thisRepN'
p7965
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7966
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p7967
Nsg69
Vn
sS'block_loop.thisTrialN'
p7968
I0
sg39
F0.68328387808196567
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d\x11\x08\xba`'
tRp7969
sa(dp7970
S'trial_loop.thisTrialN'
p7971
I114
sg6370
g7107
sS'block_loop.thisIndex'
p7972
g6364
sg38
S'right'
p7973
sg58
g62
sS'trial_loop.thisN'
p7974
I114
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p7975
g59
(g98
S'r\x00\x00\x00'
tRp7976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7977
I0
sg6379
g7115
sS'block_loop.thisRepN'
p7978
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7979
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p7980
Nsg69
Vn
sS'block_loop.thisTrialN'
p7981
I0
sg39
F0.85012150938473496
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d\x17\x04I\xa8'
tRp7982
sa(dp7983
S'trial_loop.thisTrialN'
p7984
I115
sg6370
g6391
sS'block_loop.thisIndex'
p7985
g6364
sg38
S'left'
p7986
sg58
g62
sS'trial_loop.thisN'
p7987
I115
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7988
g59
(g98
S's\x00\x00\x00'
tRp7989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7990
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7991
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7992
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7993
Nsg69
Vn
sS'block_loop.thisTrialN'
p7994
I0
sg39
F0.68388315712309122
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d\x1d\x02|\xb8'
tRp7995
sa(dp7996
S'trial_loop.thisTrialN'
p7997
I116
sg6370
g6745
sS'block_loop.thisIndex'
p7998
g6364
sg38
S'right'
p7999
sg58
g62
sS'trial_loop.thisN'
p8000
I116
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p8001
g59
(g98
S't\x00\x00\x00'
tRp8002
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8003
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8004
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8005
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8006
Nsg69
Vn
sS'block_loop.thisTrialN'
p8007
I0
sg39
F0.85011124580523756
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d"\r\x8c\xc0'
tRp8008
sa(dp8009
S'trial_loop.thisTrialN'
p8010
I117
sg6370
g6476
sS'block_loop.thisIndex'
p8011
g6364
sg38
S'left'
p8012
sg58
g62
sS'trial_loop.thisN'
p8013
I117
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p8014
g59
(g98
S'u\x00\x00\x00'
tRp8015
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8016
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8017
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8018
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p8019
Nsg69
Vn
sS'block_loop.thisTrialN'
p8020
I0
sg39
F0.80015498006014241
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d(\x0b\xbb\xe8'
tRp8021
sa(dp8022
S'trial_loop.thisTrialN'
p8023
I118
sg6370
g6956
sS'block_loop.thisIndex'
p8024
g6364
sg38
S'right'
p8025
sg58
g62
sS'trial_loop.thisN'
p8026
I118
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p8027
g59
(g98
S'v\x00\x00\x00'
tRp8028
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8029
I0
sg6379
g6963
sS'block_loop.thisRepN'
p8030
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8031
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p8032
Nsg69
Vn
sS'block_loop.thisTrialN'
p8033
I0
sg39
F0.70032826350507094
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d.\t3x'
tRp8034
sa(dp8035
S'trial_loop.thisTrialN'
p8036
I119
sg6370
g6629
sS'block_loop.thisIndex'
p8037
g6364
sg38
S'right'
p8038
sg58
g62
sS'trial_loop.thisN'
p8039
I119
sg33
g6633
sg63
g64
sS'trial_loop.thisIndex'
p8040
g59
(g98
S'w\x00\x00\x00'
tRp8041
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8042
I0
sg6379
g6637
sS'block_loop.thisRepN'
p8043
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8044
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8045
Nsg69
Vn
sS'block_loop.thisTrialN'
p8046
I0
sg39
F0.68341445362966624
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d4\x05\x05('
tRp8047
sa(dp8048
S'trial_loop.thisTrialN'
p8049
I120
sg6370
g6527
sS'block_loop.thisIndex'
p8050
g6364
sg38
S'left'
p8051
sg58
g62
sS'trial_loop.thisN'
p8052
I120
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8053
g59
(g98
S'x\x00\x00\x00'
tRp8054
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8055
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8056
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8057
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8058
Nsg69
Vn
sS'block_loop.thisTrialN'
p8059
I0
sg39
F0.88350494419501047
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1d:\x00\xd2\xf0'
tRp8060
sa(dp8061
S'trial_loop.thisTrialN'
p8062
I121
sg6370
g7010
sS'block_loop.thisIndex'
p8063
g6364
sg38
S'right'
p8064
sg58
g62
sS'trial_loop.thisN'
p8065
I121
sg33
g6616
sg63
g64
sS'trial_loop.thisIndex'
p8066
g59
(g98
S'y\x00\x00\x00'
tRp8067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8068
I0
sg6379
g7017
sS'block_loop.thisRepN'
p8069
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8070
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p8071
Nsg69
Vn
sS'block_loop.thisTrialN'
p8072
I0
sg39
F1.1668085511582831
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e\x03\x0e\xbdp'
tRp8073
sa(dp8074
S'trial_loop.thisTrialN'
p8075
I122
sg6370
g6902
sS'block_loop.thisIndex'
p8076
g6364
sg38
S'right'
p8077
sg58
g62
sS'trial_loop.thisN'
p8078
I122
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8079
g59
(g98
S'z\x00\x00\x00'
tRp8080
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8081
I0
sg6379
g6909
sS'block_loop.thisRepN'
p8082
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8083
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8084
Nsg69
Vn
sS'block_loop.thisTrialN'
p8085
I0
sg39
F0.94996447660923877
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e\n\x02\xab\x98'
tRp8086
sa(dp8087
S'trial_loop.thisTrialN'
p8088
I123
sg6370
g7736
sS'block_loop.thisIndex'
p8089
g6364
sg38
S'right'
p8090
sg58
g62
sS'trial_loop.thisN'
p8091
I123
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8092
g59
(g98
S'{\x00\x00\x00'
tRp8093
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8094
I0
sg6379
g7743
sS'block_loop.thisRepN'
p8095
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8096
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8097
Nsg69
Vn
sS'block_loop.thisTrialN'
p8098
I0
sg39
F0.88343937132140127
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e\x10\x02I\xf0'
tRp8099
sa(dp8100
S'trial_loop.thisTrialN'
p8101
I124
sg6370
g7509
sS'block_loop.thisIndex'
p8102
g6364
sg38
S'left'
p8103
sg58
g62
sS'trial_loop.thisN'
p8104
I124
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p8105
g59
(g98
S'|\x00\x00\x00'
tRp8106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8107
I0
sg6379
g7516
sS'block_loop.thisRepN'
p8108
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8109
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p8110
Nsg69
Vn
sS'block_loop.thisTrialN'
p8111
I0
sg39
F0.73343116045816714
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e\x16\x00\xf20'
tRp8112
sa(dp8113
S'trial_loop.thisTrialN'
p8114
I125
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p8115
sS'block_loop.thisIndex'
p8116
g6364
sg38
S'right'
p8117
sg58
g62
sS'trial_loop.thisN'
p8118
I125
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8119
g59
(g98
S'}\x00\x00\x00'
tRp8120
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8121
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p8122
sS'block_loop.thisRepN'
p8123
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8124
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8125
Nsg69
Vn
sS'block_loop.thisTrialN'
p8126
I0
sg39
F0.98344798132438882
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e\x1b\x0c\xb9\xd0'
tRp8127
sa(dp8128
S'trial_loop.thisTrialN'
p8129
I126
sg6370
g6510
sS'block_loop.thisIndex'
p8130
g6364
sg38
S'left'
p8131
sg58
g62
sS'trial_loop.thisN'
p8132
I126
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8133
g59
(g98
S'~\x00\x00\x00'
tRp8134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8135
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8136
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8137
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8138
Nsg69
Vn
sS'block_loop.thisTrialN'
p8139
I0
sg39
F0.85018309086626687
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e!\r\x0f\xc0'
tRp8140
sa(dp8141
S'trial_loop.thisTrialN'
p8142
I127
sg6370
g7107
sS'block_loop.thisIndex'
p8143
g6364
sg38
S'right'
p8144
sg58
g62
sS'trial_loop.thisN'
p8145
I127
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p8146
g59
(g98
S'\x7f\x00\x00\x00'
tRp8147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8148
I0
sg6379
g7115
sS'block_loop.thisRepN'
p8149
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8150
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p8151
Nsg69
Vn
sS'block_loop.thisTrialN'
p8152
I0
sg39
F0.81711982273645845
sg34
g752
(S"\x07\xdf\n\x01\x0b\x1e'\x0b>\xe8"
tRp8153
sa(dp8154
S'trial_loop.thisTrialN'
p8155
I128
sg6370
g7429
sS'block_loop.thisIndex'
p8156
g6364
sg38
S'right'
p8157
sg58
g62
sS'trial_loop.thisN'
p8158
I128
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8159
g59
(g98
S'\x80\x00\x00\x00'
tRp8160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8161
I0
sg6379
g7436
sS'block_loop.thisRepN'
p8162
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8163
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8164
Nsg69
Vn
sS'block_loop.thisTrialN'
p8165
I0
sg39
F0.90022232054980122
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e-\x08\xf4\xf8'
tRp8166
sa(dp8167
S'trial_loop.thisTrialN'
p8168
I129
sg6370
g6578
sS'block_loop.thisIndex'
p8169
g6364
sg38
S'right'
p8170
sg58
g62
sS'trial_loop.thisN'
p8171
I129
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p8172
g59
(g98
S'\x81\x00\x00\x00'
tRp8173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8174
I0
sg6379
g6586
sS'block_loop.thisRepN'
p8175
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8176
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p8177
Nsg69
Vn
sS'block_loop.thisTrialN'
p8178
I0
sg39
F0.66679800247857202
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e3\x07\xdb\xb8'
tRp8179
sa(dp8180
S'trial_loop.thisTrialN'
p8181
I130
sg6370
g6846
sS'block_loop.thisIndex'
p8182
g6364
sg38
S'left'
p8183
sg58
g62
sS'trial_loop.thisN'
p8184
I130
sg33
g6565
sg63
g64
sS'trial_loop.thisIndex'
p8185
g59
(g98
S'\x82\x00\x00\x00'
tRp8186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8187
I0
sg6379
g6853
sS'block_loop.thisRepN'
p8188
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8189
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p8190
Nsg69
Vn
sS'block_loop.thisTrialN'
p8191
I0
sg39
F0.65012111024498154
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1e9\x03n\xe8'
tRp8192
sa(dp8193
S'trial_loop.thisTrialN'
p8194
I131
sg6370
g7107
sS'block_loop.thisIndex'
p8195
g6364
sg38
S'right'
p8196
sg58
g62
sS'trial_loop.thisN'
p8197
I131
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p8198
g59
(g98
S'\x83\x00\x00\x00'
tRp8199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8200
I0
sg6379
g7115
sS'block_loop.thisRepN'
p8201
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8202
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p8203
Nsg69
Vn
sS'block_loop.thisTrialN'
p8204
I0
sg39
F0.78343503780979518
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f\x02\r\xc7X'
tRp8205
sa(dp8206
S'trial_loop.thisTrialN'
p8207
I132
sg6370
g7550
sS'block_loop.thisIndex'
p8208
g6364
sg38
S'left'
p8209
sg58
g62
sS'trial_loop.thisN'
p8210
I132
sg33
g6633
sg63
g64
sS'trial_loop.thisIndex'
p8211
g59
(g98
S'\x84\x00\x00\x00'
tRp8212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8213
I0
sg6379
g7557
sS'block_loop.thisRepN'
p8214
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8215
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8216
Nsg69
Vn
sS'block_loop.thisTrialN'
p8217
I0
sg39
F1.0999353394454374
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f\x08\x0b\x04P'
tRp8218
sa(dp8219
S'trial_loop.thisTrialN'
p8220
I133
sg6370
g6956
sS'block_loop.thisIndex'
p8221
g6364
sg38
S'right'
p8222
sg58
g62
sS'trial_loop.thisN'
p8223
I133
sg33
g6554
sg63
g64
sS'trial_loop.thisIndex'
p8224
g59
(g98
S'\x85\x00\x00\x00'
tRp8225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8226
I0
sg6379
g6963
sS'block_loop.thisRepN'
p8227
I2
sg6382
g6554
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8228
I2
sg6384
g6548
sg55
g11
sS'block_loop.thisTrial'
p8229
Nsg69
Vn
sS'block_loop.thisTrialN'
p8230
I0
sg39
F1.6005500138562638
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f\x0e\r\x04\x08'
tRp8231
sa(dp8232
S'trial_loop.thisTrialN'
p8233
I134
sg6370
g7092
sS'block_loop.thisIndex'
p8234
g6364
sg38
S'right'
p8235
sg58
g62
sS'trial_loop.thisN'
p8236
I134
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8237
g59
(g98
S'\x86\x00\x00\x00'
tRp8238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8239
I0
sg6379
g7099
sS'block_loop.thisRepN'
p8240
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8241
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8242
Nsg69
Vn
sS'block_loop.thisTrialN'
p8243
I0
sg39
F0.90018839371532522
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f\x15\x07^\xb8'
tRp8244
sa(dp8245
S'trial_loop.thisTrialN'
p8246
I135
sg6370
g7375
sS'block_loop.thisIndex'
p8247
g6364
sg38
S'right'
p8248
sg58
g62
sS'trial_loop.thisN'
p8249
I135
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p8250
g59
(g98
S'\x87\x00\x00\x00'
tRp8251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8252
I0
sg6379
g7382
sS'block_loop.thisRepN'
p8253
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8254
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p8255
Nsg69
Vn
sS'block_loop.thisTrialN'
p8256
I0
sg39
F0.96684464474856213
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f\x1b\x06Ex'
tRp8257
sa(dp8258
S'trial_loop.thisTrialN'
p8259
I136
sg6370
g6790
sS'block_loop.thisIndex'
p8260
g6364
sg38
S'left'
p8261
sg58
g62
sS'trial_loop.thisN'
p8262
I136
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8263
g59
(g98
S'\x88\x00\x00\x00'
tRp8264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8265
I0
sg6379
g6798
sS'block_loop.thisRepN'
p8266
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8267
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8268
Nsg69
Vn
sS'block_loop.thisTrialN'
p8269
I0
sg39
F0.73344598562925967
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f!\x06\\\xe8'
tRp8270
sa(dp8271
S'trial_loop.thisTrialN'
p8272
I137
sg6370
g7550
sS'block_loop.thisIndex'
p8273
g6364
sg38
S'left'
p8274
sg58
g62
sS'trial_loop.thisN'
p8275
I137
sg33
g6633
sg63
g64
sS'trial_loop.thisIndex'
p8276
g59
(g98
S'\x89\x00\x00\x00'
tRp8277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8278
I0
sg6379
g7557
sS'block_loop.thisRepN'
p8279
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8280
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8281
Nsg69
Vn
sS'block_loop.thisTrialN'
p8282
I0
sg39
F0.78324658707424533
sg34
g752
(S"\x07\xdf\n\x01\x0b\x1f'\x02\xe2H"
tRp8283
sa(dp8284
S'trial_loop.thisTrialN'
p8285
I138
sg6370
g6371
sS'block_loop.thisIndex'
p8286
g6364
sg38
S'left'
p8287
sg58
g62
sS'trial_loop.thisN'
p8288
I138
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8289
g59
(g98
S'\x8a\x00\x00\x00'
tRp8290
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8291
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8292
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8293
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8294
Nsg69
Vn
sS'block_loop.thisTrialN'
p8295
I0
sg39
F0.73353237076116784
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f-\x00\x1f@'
tRp8296
sa(dp8297
S'trial_loop.thisTrialN'
p8298
I139
sg6370
g7092
sS'block_loop.thisIndex'
p8299
g6364
sg38
S'right'
p8300
sg58
g62
sS'trial_loop.thisN'
p8301
I139
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8302
g59
(g98
S'\x8b\x00\x00\x00'
tRp8303
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8304
I0
sg6379
g7099
sS'block_loop.thisRepN'
p8305
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8306
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8307
Nsg69
Vn
sS'block_loop.thisTrialN'
p8308
I0
sg39
F0.65025995367705036
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f2\x0b\xa8`'
tRp8309
sa(dp8310
S'trial_loop.thisTrialN'
p8311
I140
sg6370
g7038
sS'block_loop.thisIndex'
p8312
g6364
sg38
S'right'
p8313
sg58
g62
sS'trial_loop.thisN'
p8314
I140
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8315
g59
(g98
S'\x8c\x00\x00\x00'
tRp8316
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8317
I0
sg6379
g7045
sS'block_loop.thisRepN'
p8318
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8319
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8320
Nsg69
Vn
sS'block_loop.thisTrialN'
p8321
I0
sg39
F0.88348071074142354
sg34
g752
(S'\x07\xdf\n\x01\x0b\x1f8\x06\xfd\x10'
tRp8322
sa(dp8323
S'trial_loop.thisTrialN'
p8324
I141
sg6370
g6595
sS'block_loop.thisIndex'
p8325
g6364
sg38
S'left'
p8326
sg58
g62
sS'trial_loop.thisN'
p8327
I141
sg33
g6599
sg63
g64
sS'trial_loop.thisIndex'
p8328
g59
(g98
S'\x8d\x00\x00\x00'
tRp8329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8330
I0
sg6379
g6603
sS'block_loop.thisRepN'
p8331
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8332
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p8333
Nsg69
Vn
sS'block_loop.thisTrialN'
p8334
I0
sg39
F0.81677798849796091
sg34
g752
(S'\x07\xdf\n\x01\x0b \x02\x05\xa5P'
tRp8335
sa(dp8336
S'trial_loop.thisTrialN'
p8337
I142
sg6370
g6629
sS'block_loop.thisIndex'
p8338
g6364
sg38
S'right'
p8339
sg58
g62
sS'trial_loop.thisN'
p8340
I142
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p8341
g59
(g98
S'\x8e\x00\x00\x00'
tRp8342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8343
I0
sg6379
g6637
sS'block_loop.thisRepN'
p8344
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8345
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8346
Nsg69
Vn
sS'block_loop.thisTrialN'
p8347
I0
sg39
F0.73328091304756526
sg34
g752
(S'\x07\xdf\n\x01\x0b \x08\x03[`'
tRp8348
sa(dp8349
S'trial_loop.thisTrialN'
p8350
I143
sg6370
g7204
sS'block_loop.thisIndex'
p8351
g6364
sg38
S'left'
p8352
sg58
g62
sS'trial_loop.thisN'
p8353
I143
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p8354
g59
(g98
S'\x8f\x00\x00\x00'
tRp8355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8356
I0
sg6379
g7211
sS'block_loop.thisRepN'
p8357
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8358
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p8359
Nsg69
Vn
sS'block_loop.thisTrialN'
p8360
I0
sg39
F0.85009927162809618
sg34
g752
(S'\x07\xdf\n\x01\x0b \r\x0e\xe8h'
tRp8361
sa(dp8362
S'trial_loop.thisTrialN'
p8363
I144
sg6370
g6561
sS'block_loop.thisIndex'
p8364
g6364
sg38
S'right'
p8365
sg58
g62
sS'trial_loop.thisN'
p8366
I144
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p8367
g59
(g98
S'\x90\x00\x00\x00'
tRp8368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8369
I0
sg6379
g6569
sS'block_loop.thisRepN'
p8370
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8371
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p8372
Nsg69
Vn
sS'block_loop.thisTrialN'
p8373
I0
sg39
F0.90022203545049706
sg34
g752
(S'\x07\xdf\n\x01\x0b \x13\rV\x10'
tRp8374
sa(dp8375
S'trial_loop.thisTrialN'
p8376
I145
sg6370
g8115
sS'block_loop.thisIndex'
p8377
g6364
sg38
S'right'
p8378
sg58
g62
sS'trial_loop.thisN'
p8379
I145
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8380
g59
(g98
S'\x91\x00\x00\x00'
tRp8381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8382
I0
sg6379
g8122
sS'block_loop.thisRepN'
p8383
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8384
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8385
Nsg69
Vn
sS'block_loop.thisTrialN'
p8386
I0
sg39
F0.76692179265955929
sg34
g752
(S'\x07\xdf\n\x01\x0b \x19\x0c<\xd0'
tRp8387
sa(dp8388
S'trial_loop.thisTrialN'
p8389
I146
sg6370
g6790
sS'block_loop.thisIndex'
p8390
g6364
sg38
S'left'
p8391
sg58
g62
sS'trial_loop.thisN'
p8392
I146
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8393
g59
(g98
S'\x92\x00\x00\x00'
tRp8394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8395
I0
sg6379
g6798
sS'block_loop.thisRepN'
p8396
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8397
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8398
Nsg69
Vn
sS'block_loop.thisTrialN'
p8399
I0
sg39
F0.68343954238116567
sg34
g752
(S'\x07\xdf\n\x01\x0b \x1f\t;H'
tRp8400
sa(dp8401
S'trial_loop.thisTrialN'
p8402
I147
sg6370
g6476
sS'block_loop.thisIndex'
p8403
g6364
sg38
S'right'
p8404
sg58
g62
sS'trial_loop.thisN'
p8405
I147
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p8406
g59
(g98
S'\x93\x00\x00\x00'
tRp8407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8408
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8409
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8410
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p8411
Nsg69
Vn
sS'block_loop.thisTrialN'
p8412
I0
sg39
F1.2668442456097182
sg34
g752
(S'\x07\xdf\n\x01\x0b %\x04\xcex'
tRp8413
sa(dp8414
S'trial_loop.thisTrialN'
p8415
I148
sg6370
g7591
sS'block_loop.thisIndex'
p8416
g6364
sg38
S'right'
p8417
sg58
g62
sS'trial_loop.thisN'
p8418
I148
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8419
g59
(g98
S'\x94\x00\x00\x00'
tRp8420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8421
I0
sg6379
g7598
sS'block_loop.thisRepN'
p8422
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8423
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8424
Nsg69
Vn
sS'block_loop.thisTrialN'
p8425
I0
sg39
F0.93368244711109583
sg34
g752
(S'\x07\xdf\n\x01\x0b +\tj('
tRp8426
sa(dp8427
S'trial_loop.thisTrialN'
p8428
I149
sg6370
g6527
sS'block_loop.thisIndex'
p8429
g6364
sg38
S'left'
p8430
sg58
g62
sS'trial_loop.thisN'
p8431
I149
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8432
g59
(g98
S'\x95\x00\x00\x00'
tRp8433
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8434
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8435
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8436
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8437
Nsg69
Vn
sS'block_loop.thisTrialN'
p8438
I0
sg39
F1.3002214082316641
sg34
g752
(S'\x07\xdf\n\x01\x0b 1\t\x08\x80'
tRp8439
sa(dp8440
S'trial_loop.thisTrialN'
p8441
I150
sg6370
S'20-fruit_pastilles.png'
p8442
sS'block_loop.thisIndex'
p8443
g6364
sg38
S'right'
p8444
sg58
g62
sS'trial_loop.thisN'
p8445
I150
sg33
g6599
sg63
g64
sS'trial_loop.thisIndex'
p8446
g59
(g98
S'\x96\x00\x00\x00'
tRp8447
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8448
I0
sg6379
S'2-steamed_puddings.png'
p8449
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8451
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.9834916015397539
sg34
g752
(S'\x07\xdf\n\x01\x0b 7\r\xe2\xb0'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g7092
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g7099
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8464
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.66685901376149559
sg34
g752
(S'\x07\xdf\n\x01\x0b!\x01\x0e4\xb8'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7150
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7157
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8477
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.3668591278010354
sg34
g752
(S'\x07\xdf\n\x01\x0b!\x07\t\xc7\xe8'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g8115
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'right'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g8122
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8490
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.73345967040222604
sg34
g752
(S'\x07\xdf\n\x01\x0b!\x0e\x00\x90\x88'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g8442
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g8449
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8503
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.76681202937197668
sg34
g752
(S'\x07\xdf\n\x01\x0b!\x13\x0c\x19\xa8'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g6408
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8516
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.90019152980949002
sg34
g752
(S'\x07\xdf\n\x01\x0b!\x19\t\x1c\x08'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6646
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'left'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6650
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6654
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8529
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F1.2838931926235091
sg34
g752
(S'\x07\xdf\n\x01\x0b!\x1f\x08=`'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g7429
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g7436
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8542
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.78349519379389676
sg34
g752
(S'\x07\xdf\n\x01\x0b!%\r\x17\x90'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6442
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8555
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.88344079681883159
sg34
g752
(S'\x07\xdf\n\x01\x0b!+\n\x16\x08'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6561
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6565
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6569
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8568
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.7667889363165159
sg34
g752
(S'\x07\xdf\n\x01\x0b!1\x08\xfc\xc8'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6629
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6637
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6633
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8581
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.99992958043549152
sg34
g752
(S'\x07\xdf\n\x01\x0b!7\x05\xc0\xa8'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g7204
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g7211
sS'block_loop.thisRepN'
p8593
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8594
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.86679041883417085
sg34
g752
(S'\x07\xdf\n\x01\x0b"\x01\x06Q0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g8442
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'right'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6599
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g8449
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8607
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.75022779445953347
sg34
g752
(S'\x07\xdf\n\x01\x0b"\x07\x04\xbe\xd8'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6612
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6620
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8620
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F1.6501881086160211
sg34
g752
(S'\x07\xdf\n\x01\x0b"\r\x01\x82\xb8'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6773
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6781
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8633
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.88351976936610299
sg34
g752
(S'\x07\xdf\n\x01\x0b"\x13\x0c\x11\xd8'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g7429
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g7436
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8646
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F1.0001970037192223
sg34
g752
(S'\x07\xdf\n\x01\x0b"\x19\n\xbe\x00'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6861
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6868
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8659
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.84996755568226945
sg34
g752
(S'\x07\xdf\n\x01\x0b"\x1f\x0bN\x88'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g7736
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g7743
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8672
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.88389781123441935
sg34
g752
(S'\x07\xdf\n\x01\x0b"%\t}\xb0'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6561
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'right'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6572
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6569
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8685
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.9335436036799365
sg34
g752
(S'\x07\xdf\n\x01\x0b"+\x08%\xf0'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6702
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'left'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6709
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8698
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F1.1667666415396525
sg34
g752
(S'\x07\xdf\n\x01\x0b"1\x07\x89\xb0'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6646
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6650
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6654
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8711
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.96680929241665581
sg34
g752
(S'\x07\xdf\n\x01\x0b"7\n\xb60'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6527
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8724
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.96679332684834662
sg34
g752
(S'\x07\xdf\n\x01\x0b#\x01\n\x93\x08'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7591
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'right'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7598
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8737
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.83343435357073758
sg34
g752
(S'\x07\xdf\n\x01\x0b#\x07\n\xaax'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7204
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g7111
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7211
sS'block_loop.thisRepN'
p8749
I2
sg6382
g7111
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8750
I2
sg6384
g7118
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.75021696068051824
sg34
g752
(S'\x07\xdf\n\x01\x0b#\r\x08\x9b '
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6646
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6650
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6654
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6650
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8763
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.70011415381941333
sg34
g752
(S'\x07\xdf\n\x01\x0b#\x13\x05_\x00'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6902
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6538
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6909
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8776
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F1.5667802692942132
sg34
g752
(S'\x07\xdf\n\x01\x0b#\x19\x01,\xc8'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g8115
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g8122
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8789
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.83336592970317724
sg34
g752
(S'\x07\xdf\n\x01\x0b#\x1f\nP\xa0'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6578
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6582
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6586
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6582
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8802
I2
sg6384
g6589
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.93345208675691538
sg34
g752
(S'\x07\xdf\n\x01\x0b#%\x08E0'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6861
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6868
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8815
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.88328513251963159
sg34
g752
(S'\x07\xdf\n\x01\x0b#+\x07\xdf\xa0'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6702
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6469
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6709
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6469
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8828
I2
sg6384
g6463
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F1.1000935696383749
sg34
g752
(S'\x07\xdf\n\x01\x0b#1\x06\x8b\xc8'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6425
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8841
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F1.2501938676250575
sg34
g752
(S'\x07\xdf\n\x01\x0b#7\x08\x8b\x80'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g6510
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8854
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.80010708335339586
sg34
g752
(S'\x07\xdf\n\x01\x0b$\x01\x0c\xe8\xb0'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g8115
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g8122
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8867
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F1.1172599776255083
sg34
g752
(S'\x07\xdf\n\x01\x0b$\x07\nd('
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6595
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6603
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8880
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F1.000191301729501
sg34
g752
(S'\x07\xdf\n\x01\x0b$\r\x0c\x9ex'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7038
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6436
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7045
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6429
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8893
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.666782322009567
sg34
g752
(S'\x07\xdf\n\x01\x0b$\x13\r2\xe8'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g7010
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g7017
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8906
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.0501164916349808
sg34
g752
(S'\x07\xdf\n\x01\x0b$\x19\x08\x87\x98'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6773
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6781
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8919
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F1.0000880957295522
sg34
g752
(S'\x07\xdf\n\x01\x0b$\x1f\t\xcf\xb8'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g7736
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g7743
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8932
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F1.0002500322161723
sg34
g752
(S'\x07\xdf\n\x01\x0b$%\n`@'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g8442
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6599
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g8449
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8945
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.91683021871722303
sg34
g752
(S'\x07\xdf\n\x01\x0b$+\n\xf0\xc8'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6510
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6521
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8958
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.71676253610803542
sg34
g752
(S'\x07\xdf\n\x01\x0b$1\n\x16\x08'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g6493
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6497
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8971
I2
sg6384
g6504
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.7835114444624196
sg34
g752
(S'\x07\xdf\n\x01\x0b$7\x06\\\xe8'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6442
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6446
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8984
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.850118088191266
sg34
g752
(S'\x07\xdf\n\x01\x0b%\x01\x03\x99\xe0'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6846
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6565
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6853
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6565
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8997
I2
sg6384
g6572
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.6834432486739388
sg34
g752
(S'\x07\xdf\n\x01\x0b%\x07\x01\xc9\x08'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g7010
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'left'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6616
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g7017
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9010
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F1.3168247448074908
sg34
g752
(S'\x07\xdf\n\x01\x0b%\x0c\x0c\x9ex'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g7591
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g7598
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9023
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.91657248881529085
sg34
g752
(S'\x07\xdf\n\x01\x0b%\x13\x02\xaf\x80'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7010
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6616
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7017
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6616
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9036
I2
sg6384
g6623
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.81678226498934237
sg34
g752
(S'\x07\xdf\n\x01\x0b%\x19\x02\x0fX'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g8442
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6599
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g8449
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9049
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.83353499367603945
sg34
g752
(S'\x07\xdf\n\x01\x0b%\x1e\x0f\x07\xa8'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g7375
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g7382
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6486
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9062
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.90010942116896331
sg34
g752
(S'\x07\xdf\n\x01\x0b%$\x0c\xfc8'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6595
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6603
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6599
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9075
I2
sg6384
g6606
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.68342386191125115
sg34
g752
(S'\x07\xdf\n\x01\x0b%*\x0b\xe2\xf8'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6391
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6399
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6395
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9088
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.717255758153442
sg34
g752
(S'\x07\xdf\n\x01\x0b%0\x07\xb0\xc0'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I93
sg56
Vr
sg57
Vy
sg42
I507
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I93
sg55
g11
sg56
Vr
sg45
F0.070000000000000007
sg42
I507
sg49
F0.01
sg57
Vy
sg58
g62
sg44
I00
sg48
I25
sg47
g561
sg51
F30.07
sg46
F0
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I82420560
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0033\xf3?\x00\x00\x00\x00\xcd\xccL>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xaeGa>\x00\x00\x00\x00\x00\x00\x00\x00\x8f\xc2u>\x00\x00\x00\x00\x00\x00\x00\x00\xecQ8>'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xb6\xf3\xfd?\xee|\x17@\x91\xed\xec?\x0e-2@\xa8\xc6\x0b@\xdb\xf9.@\xbaI4@\xe9&!@B`\x15@/\xdd\x0c@\x0e-2@\xe9&\xf1?T\xe3\xa5@\x96C\x13@u\x93(@!\xb0\n@!\xb0\n@\xbaI\x04@\x87\x16\x01@\xc9v\x16@\x0e-\xe2?\xa8\xc6\x1b@+\x87\xe6?\xdb\xf9\x0e@\xe9&\xf1?\xfc\xa9\t@u\x93\x18@\xa8\xc6\x0b@\xdb\xf9>@\xa2E A#\xdb\xd9?\xa8\xc6\x1b@B`%@T\xe3\xdd@/\xdd\x0c@!\xb0\x1a@d;\xcb@\x93\x18\xe4?\xee|\x07@!\xb0Z@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00pA\x00\x00\xe8A\x00\x00\xc8A\x00\x00\xa8A\x00\x00\xf8A\x00\x00\x00@\x00\x00\xb8A\x00\x00\xd8A\x00\x00\xa0A\x00\x00\xd0A\x00\x00\x00\x00\x00\x00\x90A\x00\x00\x14B\x00\x00\x1cB\x00\x00\x10A\x00\x00@A\x00\x00\x80A\x00\x00\x88A\x00\x00\x08B\x00\x00PA\x00\x00\x80@\x00\x000A\x00\x00\x0cB\x00\x00\x00B\x00\x00\xc0A\x00\x00@@\x00\x00\x10B\x00\x00\x04B\x00\x00\x00A\x00\x00\x80?\x00\x00\xf0A\x00\x00`A\x00\x00\x98A\x00\x00\xc0@\x00\x00\xa0@\x00\x00 A\x00\x00\xb0A\x00\x00\xe0A\x00\x00\xe0@\x00\x00\x18B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x9a\x99\x99?ff\xe6?\x9a\x99\x99?33\xf3?\x9a\x99\xd9?\x9a\x99\x99?\x00\x00\x00@33\xf3?\xcd\xcc\xcc?\x00\x00\xc0?33\xf3?ff\xa6?\xcd\xcc\x8c?\x00\x00\xc0?ff\xe6?\xcd\xcc\xcc?33\xb3?\x9a\x99\x99?\x00\x00\x80?33\xb3?\xcd\xcc\x8c?33\xb3?ff\xa6?\x9a\x99\xd9?ff\xa6?33\xb3?33\xf3?33\xb3?\x00\x00\x00@\xcd\xcc\x8c?\x9a\x99\x99?\x00\x00\xc0?\x00\x00\x00@\x00\x00\xc0?\xcd\xcc\xcc?ff\xa6?33\xf3?\xcd\xcc\x8c?\x9a\x99\x99?33\xf3?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\n\x00\x00\x00\x1d\x00\x00\x00\x05\x00\x00\x00\x19\x00\x00\x00\x14\x00\x00\x00"\x00\x00\x00!\x00\x00\x00&\x00\x00\x00\x1c\x00\x00\x00\x0e\x00\x00\x00#\x00\x00\x00\x15\x00\x00\x00\x0f\x00\x00\x00\x13\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00$\x00\x00\x00\x06\x00\x00\x00\x18\x00\x00\x00\x02\x00\x00\x00\t\x00\x00\x00\x07\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00\x1e\x00\x00\x00\x04\x00\x00\x00\x17\x00\x00\x00\x1b\x00\x00\x00\x12\x00\x00\x00\x16\x00\x00\x00\x1a\x00\x00\x00\x0c\x00\x00\x00\'\x00\x00\x00\r\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g207
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g305
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g277
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g249
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g319
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g116
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g263
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g291
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g242
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g284
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g102
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g228
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g361
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g375
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g165
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g186
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g214
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g221
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g340
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g193
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g130
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g179
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g347
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g326
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g270
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g123
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g354
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g333
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g158
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g109
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g312
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g200
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g235
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g144
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g137
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g172
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g256
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g298
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g151
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g368
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I82420560
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x90@\x9a\x99\x99@\x9a\x99\xb9@ff\x96@333@33\xb3@\x9a\x99\x89@\x9a\x99y@\x9a\x99Y@ff&@ff\x86@\xcd\xcc\xbc@\x9a\x99y@33\xa3@\x9a\x99\x89@\x00\x00\x80@\x9a\x99\x19@ff\xa6@fff@33\x93@\x9a\x99\x99@\x00\x00\x90@\x00\x00\xb0@\x00\x00\xc0@\xcd\xcc\x8c@\x9a\x99\x99@33\x93@33\xa3@\xcd\xccl@33\x93@\x9a\x99\x99@33s@\xcd\xcc\x8c@\x00\x00\xc0@\x00\x00\x90@33S@fff@\x9a\x99\x99@\xcd\xcc\xac@\x9a\x99\xa9@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xda\xee>@\x19\x05\x10@k\xe1\x9d?\xe4\x02p@\x1c\xcd\x94@\xc7$2@\x03z\x17@-ET@\xe9\x8ah@a\xceL@\xd2\xab\n@\r\x8d\xc8?\x16\xcd\\@\x85\x89\xe8?\xbbD\x14@\xf9V\xb5?\xd44\x9b@f\xd3\xcc?q\x00\x80@)%\xe2?\xf8\xde\xa5@\x864C@\xc9\xf1\xee?-\xe4\x9d?\xca\xcd\x1c@\x8c\xaf\xea?\xfaz\xb7?\xa3J\x84?\x9a\x9f\xb9?\x05\x14!@\x9b\xdc-@M\xb4\xfb?\xd6\xbe\xbb?\x98$\x02@\x1eo\x06@#\x12\x89@\xcd\x17\xd1?\xf4\xf1\xce?1i\xa6?\xb88\x93?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'fff@fff@\x9a\x99Y@\xcd\xccl@\x9a\x99Y@\x9a\x99y@\xcd\xcc,@\x9a\x999@33S@\x00\x00`@ff\x86@33S@\x00\x00@@333@ff\x86@\x00\x00\x80@33S@\x9a\x99y@\x9a\x99y@\x9a\x99Y@\xcd\xccL@\xcd\xcc,@\x00\x00@@fff@\x9a\x99Y@\x9a\x999@fff@\x00\x00`@\xcd\xccl@333@\x9a\x999@333@\x9a\x99\x89@\x00\x00\x80@333@33S@\xcd\xcc,@\xcd\xccL@\xcd\xcc,@\xcd\xccl@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80\x0c\x08\x03\x80\xb2\xd3\x0c@\xdf\xd1\x0c k\x07\x03\xc0\xb5\xd3\x0c\xc0\xb6\xd3\x0c\x00\xb6\xd3\x0c\xc0\xdd\xd1\x0c\x00u\x85\x0c`z\x85\x0c\x80z\x85\x0c\x80|\x85\x0c\x80\xdf\xd1\x0c\xe0t\x85\x0c\xc0\xe0\x83\x0c\xa0\xdc\xd1\x0c \xb7\xd3\x0c\x80\xe0\x83\x0c\xc0\xb3\xd3\x0c\x00l\x07\x03`\xe0\x83\x0c\xe0z\x85\x0c\xa0{\x85\x0c\x80E\t\x03`@\t\x03\xe0A\t\x03@A\t\x03\xa0A\t\x03 @\t\x03\x80A\t\x03 C\t\x03\x80@\t\x03@B\t\x03\xc0A\t\x03\xa0B\t\x03 A\t\x03 i\x07\x03@b\x07\x03\xe0k\x07\x03`a\x07\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S"D\x8b\x98@^\xba\xd9?\xbaI\x04@\xa8\xc6\xbb?\xfc\xa9I@\xfc\xa9)@!\xb0\x1a@!\xb0z@\xbaI\x8c@\x91\xed\xec?\xe9&\xd1?\xb6\xf3\x1d@T\xe3\x85@\xa8\xc6\x1b@\xfe\xd4\xa4@+\x87\x86?\xee|\x07@T\xe3\r@\xa8\xc6\x9b?\xa8\xc6+@B`E@\xb6\xf3\xfd?\xc9v&@\x0e-\x82?\xee|'@\x0e-\xa2?b\x10\x10@!\xb0\n@\xb6\xf3\x1d?\xdb\xf9n@\xdd$\x82@^\xba\x99?\xe9&\xf1?\xe9&\xf1?\x96C3@\x96C\x13@\x87\x16Q@\xe9&\xf1?u\x93\xa8?!\xb0*@"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I82420560
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'P6\t\x03\xc8\x1c\x16\r\xb06\t\x03\xf0\x1c\x16\r\x18\x1d\x16\r\x806\t\x03@\x1d\x16\r\x18\x1d\x16\rh\x1d\x16\r 6\t\x03\xb8\x1d\x16\r\x806\t\x03h\x1d\x16\r\xf0\x1c\x16\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S"h\xc9F\x02\xa8kK\x04\xb8'\xed\x04\xf0e\xec\x04Pi\xec\x048`\xec\x04\xd8h\xec\x04Xa\xec\x04\xd8n\xec\x048c\xec\x04\xb8d\xec\x04\xe0c\xec\x04\xf8l\xec\x04\x10j\xec\x04"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g743
sg82
g766
sg83
g748
sg84
g770
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g775
sg82
g776
sg83
g780
sg84
g781
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g786
sg82
g787
sg83
g791
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g808
sg82
g809
sg83
g813
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g786
sg82
g819
sg83
g791
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g828
sg82
g829
sg83
g833
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g808
sg82
g839
sg83
g813
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g755
sg82
g848
sg83
g760
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g797
sg82
g857
sg83
g802
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g828
sg82
g866
sg83
g833
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g775
sg82
g875
sg83
g780
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I82420560
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I82420560
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xb06\x18\r\x98/\x18\r\x80\t\x07\x03\x08.\x18\r0.\x18\rx6\x18\r\xe0`\x18\r\x00b\x18\rx6\x18\r\x80.\x18\r\x00b\x18\rX7\x18\r\x08.\x18\rx6\x18\r\x10a\x18\r\x80.\x18\r`b\x18\r\xc0\r\x07\x03 p\x18\r\xd0.\x18\r\xc0b\x18\r\x80.\x18\r0b\x18\r\xa0a\x18\r\x90b\x18\r p\x18\rX.\x18\r\x08.\x18\rpa\x18\r\x10a\x18\r\xa8.\x18\rX7\x18\rX.\x18\r\x08.\x18\rx6\x18\r\xa0a\x18\rpa\x18\r\xa0a\x18\r\x10a\x18\r0.\x18\r 7\x18\r\xe0\n\x07\x03\x80\t\x07\x03\xf8.\x18\r0.\x18\r\xa0a\x18\r\xc0b\x18\r\xe0-\x18\r\xe0`\x18\r\x80.\x18\rX7\x18\r 7\x18\r@6\x18\r /\x18\r\xf8.\x18\r\xd0.\x18\r\xa0a\x18\r\xe0-\x18\rX7\x18\r\xe0`\x18\r\x80\x05\x07\x03H/\x18\r\x907\x18\r\x08.\x18\r\xe0-\x18\r\x80\t\x07\x030.\x18\r\xd0.\x18\r p\x18\r\xe0-\x18\r@6\x18\r\xe0-\x18\r /\x18\rx6\x18\r\xc0/\x18\rpp\x18\r@a\x18\rx6\x18\rHp\x18\r\xd0.\x18\r\xc0\r\x07\x03\xe0\n\x07\x03X.\x18\r\xc0\r\x07\x03@a\x18\rx6\x18\r /\x18\rx6\x18\r\x10a\x18\r@6\x18\r\xf8.\x18\r\x00\t\x07\x03\x80.\x18\r\xe0\n\x07\x03H/\x18\r\xc0\r\x07\x03`b\x18\rHp\x18\r\xa8.\x18\r\x80\t\x07\x03\xe0-\x18\r0.\x18\r\x80.\x18\r\x80\t\x07\x03\xd0a\x18\rH/\x18\r\xe0\n\x07\x03H/\x18\rpa\x18\r p\x18\r\xd0.\x18\r\xa0a\x18\r\xa8.\x18\r\x80.\x18\r\xc0b\x18\r0.\x18\r\xe0-\x18\r\xe0`\x18\rH/\x18\r /\x18\rpa\x18\rHp\x18\rH/\x18\r\xa8.\x18\r /\x18\r0b\x18\rX.\x18\r0.\x18\r /\x18\r\xc0/\x18\r\xe0-\x18\r /\x18\r\xe0\n\x07\x03\xc0/\x18\rH/\x18\r\x80\x05\x07\x03\xd0.\x18\rH/\x18\rx6\x18\r\xa8.\x18\r\xd0a\x18\r@6\x18\r@a\x18\r\x907\x18\r\xf8.\x18\rpp\x18\r@6\x18\r\xa0a\x18\r\x10a\x18\r\x80.\x18\r\xe0\n\x07\x03\xe0`\x18\r\xd0.\x18\rX.\x18\r\x10a\x18\r\xe0`\x18\r0b\x18\r\xf8.\x18\r\xa0a\x18\r@6\x18\rX.\x18\r /\x18\r`b\x18\r\x90b\x18\r\xe0`\x18\rX.\x18\r\x08.\x18\r@6\x18\r\xa8.\x18\r\xe0`\x18\r\xf8.\x18\r\xe0\n\x07\x03\x08.\x18\r\xd0.\x18\r@a\x18\r\xe0-\x18\r@6\x18\r\x80\t\x07\x03\xc0\r\x07\x03X.\x18\r\xc0b\x18\r\x80\t\x07\x03\xa0a\x18\r\x80\t\x07\x03pa\x18\r\x80.\x18\r@6\x18\rHp\x18\r\x10a\x18\r\x80.\x18\r@a\x18\rx6\x18\r\xd0a\x18\r@a\x18\rH/\x18\r\xe0\n\x07\x03\xa0a\x18\r\xc0\r\x07\x03\xc0b\x18\r@a\x18\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\xa0\x00\xd4\x0c\x80\xc4\x08\x03`\xcf\x08\x03\xc0\xcf\x08\x03@\xcc\x08\x03 \xca\x08\x03 \xc5\x08\x03\xa0\xc3\x08\x03 \xcf\x08\x03`\xc8\x08\x03\x80\xcf\x08\x03@\xc6\x08\x03\xa0\xce\x08\x03\x80\xcb\x08\x03\x80\xc6\x08\x03\xe0\xcd\x08\x03\x00\xcb\x08\x03\x80\xcc\x08\x03\xc0\xc4\x08\x03\xc0\xc8\x08\x03@\xcf\x08\x03 \xc6\x08\x03@\xc8\x08\x03\x00\xc9\x08\x03\x80\xcd\x08\x03\x80\xca\x08\x03\x00\xc6\x08\x03\xe0\xcf\x08\x03\xa0\xca\x08\x03\xa0\xc8\x08\x03`\xc9\x08\x03 \xc8\x08\x03\x80\xc0\x08\x03\xa0\xc9\x08\x03\x00\xc4\x08\x03`\xca\x08\x03\xc0\xca\x08\x03\x80\xce\x08\x03\xe0\xc4\x08\x03`\xc3\x08\x03 \xc9\x08\x03\xa0\xcf\x08\x03@\xc4\x08\x03\x00\xc3\x08\x03\xe0\xcb\x08\x03@\xca\x08\x03\xe0\xc9\x08\x03\xe0\xca\x08\x03\xc0\xc9\x08\x03`\xcd\x08\x03@\xcb\x08\x03`\xcc\x08\x03\xe0\xc8\x08\x03`\xcb\x08\x03@\xc9\x08\x03\xa0\xcb\x08\x03\xc0\xcb\x08\x03 \xcb\x08\x03 \xc3\x08\x03\xe0bx\x0c@cx\x0c gx\x0c\x00cx\x0c\xc0bx\x0c\x80gx\x0c\xa0gx\x0c\xa0cx\x0c\x80mx\x0c\xc0gx\x0c\xe0gx\x0c@kx\x0c\x80kx\x0c\xc0kx\x0c\xe0kx\x0c\x00lx\x0c`lx\x0c\x80lx\x0c\xa0lx\x0c\xa0bx\x0c\x00fx\x0c mx\x0c@mx\x0c`fx\x0c fx\x0c\x00kx\x0c`gx\x0c `x\x0c\x80bx\x0c\x80fx\x0c kx\x0c\xa0fx\x0c@fx\x0c@gx\x0c\x00gx\x0c\x80cx\x0c\xe0ox\x0c@`x\x0c@\x08\xd4\x0c`mx\x0c\xa0B\xad\x04\x00A\xad\x04\xc0A\xad\x04\xc0B\xad\x04\xe0B\xad\x04\x00C\xad\x04\xc0k\x07\x03\x00B\xad\x04\xe0@\xad\x04\x80C\xad\x04\xe0C\xad\x04\x80A\xad\x04`B\xad\x04 A\xad\x04@C\xad\x04\xa0@\xad\x04`A\xad\x04\xc0C\xad\x04 B\xad\x04 D\xad\x04\x00E\xad\x04@E\xad\x04`E\xad\x04@A\xad\x04 E\xad\x04`D\xad\x04\xa0D\xad\x04\x00F\xad\x04\x80D\xad\x04@D\xad\x04\x00D\xad\x04 F\xad\x04\x80F\xad\x04\xa0C\xad\x04@B\xad\x04\xa0F\xad\x04`F\xad\x04\xe0A\xad\x04`G\xad\x04\xa0A\xad\x04\xa0G\xad\x04\xc0G\xad\x04\x80B\xad\x04 G\xad\x04\x00H\xad\x04`C\xad\x04\xc0@\xad\x04 H\xad\x04@H\xad\x04\xe0G\xad\x04\xe0F\xad\x04\xe0H\xad\x04\x80E\xad\x04`H\xad\x04\xc0E\xad\x04\xe0E\xad\x04\x80H\xad\x04\x00G\xad\x04\xc0H\xad\x04\xe0D\xad\x04 J\xad\x04@J\xad\x04@I\xad\x04 I\xad\x04 C\xad\x04\xa0H\xad\x04\x00J\xad\x04\xa0E\xad\x04\x00K\xad\x04@K\xad\x04`K\xad\x04\xa0J\xad\x04@G\xad\x04\x80I\xad\x04\xe0K\xad\x04\xc0I\xad\x04\x00L\xad\x04\xa0I\xad\x04`L\xad\x04\x80L\xad\x04\x80G\xad\x04`J\xad\x04\xe0L\xad\x04\x00M\xad\x04\xc0K\xad\x04\xe0J\xad\x04\xc0F\xad\x04`M\xad\x04@F\xad\x04 L\xad\x04\x80M\xad\x04\xe0M\xad\x04@M\xad\x04@L\xad\x04@N\xad\x04\x80N\xad\x04\xa0N\xad\x04\xc0D\xad\x04\xa0L\xad\x04\xc0N\xad\x04\x00I\xad\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'*\xad*@Y2\xf3?\xfb(\xa2?\\\xd1\xac?\xce#\xa2?\xd9\xd2\xac?\xc2\'\xa2?\xeb\xa0\x99?&\x01\xc0?\xd8}\xf7?\x1c(\xc2?\x18K\x84?\xbb$\xd1?X\x13\xb1?\x97%\xa2?\xcd\x9a\xf9?x8\xd3?o\xb1\xca?\xd4\xf1\xce?\xb1\xec\xae?\xf4\'\xc2?\xd2\x13\xb1?{\xe5\xfd?\xbf$\x12@\xea\x85\xe8?a\x9d\x99?I-b?#\xf6\xae?\xbd\x898@\xe8\xee\x1e@5X\x95?\x06\xe3\xbd?r6Q?\xc8\xcd\xcc?$\x80w?\xcc\x9d\xf9?\xe5\xf4\x8e?\xb4X%@\xa9\x04\xa0?\xff\x111@\xabg\x16@^\x8e\xc8?\x82"\xf1?\xae\x14\xb1?V\x89X@\xa0\x13\xd1??\xd3\xac?o\xbck@\x8e\xb0\xea?;\x9a\t@\xbdY\xb5?\xe1Y\xf5?\x14L\x14@\x89Y\xd5?\x95}\xb7?\xf5\xda-@=\x9b\xb9?\xfa\xb1\xea?\xb6pf?\xbf\xf5n?\x95\x9f\xb9?w\xf1\xce?);\xc2?\x8e\xd2\xac?Wj\x86?\x96\xcf\xac?\xef\x13\xb1?^R\xb5?\xb3%\xc2?\xfa\xe7]?\xf3d\xc6?\xaamf?\xae\x05\xc0?\xa6\xc2{?\x1b\xa0\x99?\xd2\'\x82?u6\xd3?aw\xa6?\x83:s?\xf4\xfb\x9f?\x8f\x06\x80?a\x8a\x18@\xa8\xb1\xaa?\x14\xb2j?\r\xad\xea?:\xb0\x8a?U\xb1\x8a?tx\x86?M}\xf7?\x01U\x95?6\xb1\xaa?L9\xb3?\x08\x8f\x88?\xb1%\xa2?]\xf4n?\xc9%\x82?Hi\xc6?\xcfu\x97?\x99J\x84?|\xf4\xae?o\x9f\xd9?\x84~\xb7?[\x7f\x97?\x00\xf2\x8e?2)\x82?Ndf?\xf0\x8e\xe8?`\xde\xac?qG\xc4?\x8e\x8a\x88?\xee\x85\xa8?D\x8c\xa8?\x86(\x82?\xafG\x84?a@s?\x1a\x18\x91?U\xc2\x9b?\xb8(\xa2?v\xd3L?Q\x15\xb1?\xeaJ\xc4?)J\xa4?\xe0vf?\xca\xd4\x8c?\x1f\xb7j?\x02J\xa4?\xdcrf?\x06\x0f@?\xf7~7?\xcd\xc1\x9b?\xb8KD?s\xa1Y?\xc0[\xd5?\xe4\xb1j?:j\x86?\x12\xc2\x9b?\x1f\xa6\xca?\x91Fb?\x01jf?@\xf7\x8e?e\xc3\x9b?\xef\xf3n?\xc7\xf0\x9d?\xc7mf?^\xa4Y?\xa2\x17Q?>73?\x136\x93?\xe6m\x86?#@s?\xee\xa0Y?\xed\'\x82?\x9f\xab\x8a?\x9f#\x91?\xc1\x18Q?H\x8f\xa8?r\xc0\x9b?\xb2i\x86?I[s?\xa7\xbc;?\xd77\xd3?\xb5RD?\x90z\x07@\xfasw?\x99\x03\xc0?4tf?\x89\x9f\x99?\xc1\xce\x8c?\xf1hD?_\xac\x8a?\xf4m\x86?\x996\x93?z)b?y,\xa2?\x1b\x8d\x88?\xf9\x8e\x88?\x88\xf4n?B\x9e\xd9?b\xf0\x9d?\x0b\x9d\xb9?\x0e\xd0\x8c?\x16[\xb5?\xf1\xbe\x9b?\x8b\xa7Y?"\x92H?=\xc6{?u\x16Q?\xbbnf?\xb9\x9f\x99?\x96<s?g8s?\x90%\x82?\xe0\x9d\xd9?\xaf\xef\x9d?%\xd0\x8c?d\x14\xd1?\xa3l\x86?U\xae\x8a?\xa8\xb8j?\xfd;s?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x18n\xec\x04\x10g\xec\x048\x80\xe5\x04\xe0\x86\xe5\x04\xe0\x8f\xe5\x04\xa0\x8a\xe5\x04`\x82\xe5\x04@\x87\xe5\x04(\x84\xe5\x04\xd0\x87\xe5\x04\xd0\x8a\xe5\x04P\x8c\xe5\x04@\x84\xe5\x048\x8f\xe5\x04\xd8\x88\xe5\x04\x18\x85\xe5\x04 \x8c\xe5\x04\xb0\x80\xe5\x04\x10\x8a\xe5\x04\x10\x81\xe5\x04 \x89\xe5\x04x\x82\xe5\x04P\x89\xe5\x04\x80\x86\xe5\x04\xc0\x82\xe5\x04\xa0\x81\xe5\x04`\x8b\xe5\x04(\x8d\xe5\x04\xe8\x84\xe5\x04\xc8\x8f\xe5\x04\x00\x8e\xe5\x04\x88\x8a\xe5\x04\xb0\x8f\xe5\x04\xe0\x83\xe5\x04\xc8\x80\xe5\x04\x08\x83\xe5\x04\x18\x8e\xe5\x04(\x8a\xe5\x04@\x8a\xe5\x04\xc8\x89\xe5\x04h\x86\xe5\x04\x00\x8b\xe5\x04X\x8a\xe5\x04h\x80\xe5\x04\xb8\x8a\xe5\x04\x98\x80\xe5\x04\xb8\x81\xe5\x04\x90\x88\xe5\x04h\x8c\xe5\x04\x88\x87\xe5\x04\x88\x8d\xe5\x04\xc0\x8b\xe5\x040\x88\xe5\x040\x8b\xe5\x04X\x81\xe5\x04\xb8\x8d\xe5\x04(\x81\xe5\x048\x83\xe5\x04\xe0\x89\xe5\x04\x00\x88\xe5\x04H\x85\xe5\x04\xc8\x86\xe5\x04\x80\x80\xe5\x04x\x8e\xe5\x04\xc8\x83\xe5\x04h\x89\xe5\x04`\x8e\xe5\x04\xb8\x84\xe5\x04p\x87\xe5\x04\xb0\x8c\xe5\x04\x98\x8f\xe5\x040\x8e\xe5\x040\x85\xe5\x04\xd8\x8e\xe5\x04\x90\x82\xe5\x04\x90\x8b\xe5\x04X\x84\xe5\x04\xb0\x89\xe5\x04 \x8f\xe5\x048\x8c\xe5\x04\x18\x8b\xe5\x04\x10\x84\xe5\x04\xf8\x86\xe5\x048\x86\xe5\x04\xa8\x8e\xe5\x04X\x87\xe5\x04@\x8d\xe5\x04\xf0\x82\xe5\x04 \x83\xe5\x04\xa0\x87\xe5\x04\xc0\x8e\xe5\x04P\x86\xe5\x04x\x8b\xe5\x04x\x88\xe5\x04\x08\x89\xe5\x04\xc8\x8c\xe5\x04\xf8\x8c\xe5\x04\xd0\x84\xe5\x04\x80\x8c\xe5\x04p\x8a\xe5\x04\x18\x82\xe5\x04\xf0\x8b\xe5\x04\xa8\x88\xe5\x04\xf0\x88\xe5\x04\x98\x83\xe5\x04p\x8d\xe5\x04\x90\x8e\xe5\x04\x88\x81\xe5\x04h\x83\xe5\x04\x08\x8c\xe5\x04\xe0\x8c\xe5\x04\xd8\x8b\xe5\x04\xd0\x81\xe5\x04H\x8e\xe5\x04\xe8\x87\xe5\x04\xa8\x8b\xe5\x04P\x8f\xe5\x04P\x80\xe5\x04h\x8f\xe5\x04\x80\x89\xe5\x04H\x82\xe5\x04\x98\x8c\xe5\x04\xc0\x88\xe5\x04X\x8d\xe5\x04\xa0\x8d\xe5\x04\xf8\x80\xe5\x04\x00\x85\xe5\x04H\x88\xe5\x04(\x87\xe5\x04P\x83\xe5\x04\xd8\x82\xe5\x04\x80\x8f\xe5\x04\xf8\x83\xe5\x04`\x88\xe5\x04\xf0\x8e\xe5\x04\xf8\x89\xe5\x04\x80<\xc6\x04\xf8\x80\xec\x04\xb0\x8f\xec\x04P\x89\xec\x04@\x87\xec\x040\x8e\xec\x04\x08\x89\xec\x040\x82\xec\x04\x80\x8f\xec\x048\x89\xec\x04h\x86\xec\x04\xd0\x84\xec\x04\xc0\x8e\xec\x04X\x87\xec\x04\x18\x8e\xec\x04\xc8\x83\xec\x04P\x8f\xec\x04 \x89\xec\x04\xe0\x83\xec\x04 \x8f\xec\x04\xf0\x82\xec\x04\x10\x84\xec\x04\xa0\x81\xec\x04\xc0\x88\xec\x04P\x86\xec\x04\x98\x86\xec\x04@\x8a\xec\x04(\x8d\xec\x04`\x8b\xec\x04x\x85\xec\x04\x88\x8a\xec\x04h\x8f\xec\x04X\x8a\xec\x04\xe8\x8d\xec\x048\x80\xec\x04\xa0\x8a\xec\x04\xc0\x82\xec\x04p\x8a\xec\x04\x98\x89\xec\x04\xb8\x81\xec\x04x\x8e\xec\x04 \x80\xec\x04\xc8\x8f\xec\x04\x88\x87\xec\x04\xa8\x88\xec\x04\xd0\x87\xec\x040\x85\xec\x04\x80\x80\xec\x04X\x8d\xec\x04H\x88\xec\x04\xf8\x8c\xec\x04\x18\x82\xec\x04 \x86\xec\x04\xe8\x8d\xe5\x040\x82\xe5\x04H\x8b\xe5\x04p\x84\xe5\x04\x08\x8f\xe5\x04\xe8\x81\xe5\x04\x00\x82\xe5\x04\xb0\x86\xe5\x04@\x81\xe5\x04\xe0\x80\xe5\x04\xb8\x87\xe5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1027
sg894
g1017
sg909
g1021
sg903
g1025
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g987
sg894
g1034
sg909
g994
sg903
g1041
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1027
sg894
g1017
sg909
g1021
sg903
g1025
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1089
sg894
g1079
sg909
g1083
sg903
g1087
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g953
sg894
g1096
sg909
g960
sg903
g1103
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1128
sg894
g1124
sg909
g1135
sg903
g1132
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1164
sg894
g1154
sg909
g1158
sg903
g1162
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1089
sg894
g1171
sg909
g1083
sg903
g1178
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1196
sg894
g1186
sg909
g1190
sg903
g1194
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1053
sg894
g1237
sg909
g1060
sg903
g1244
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1128
sg894
g1252
sg909
g1135
sg903
g1259
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1271
sg894
g1267
sg909
g1278
sg903
g1275
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1207
sg894
g1284
sg909
g1214
sg903
g1291
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1196
sg894
g1299
sg909
g1190
sg903
g1306
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1027
sg894
g1314
sg909
g1021
sg903
g1321
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g953
sg894
g1096
sg909
g960
sg903
g1103
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1230
sg894
g1342
sg909
g1224
sg903
g1349
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1128
sg894
g1252
sg909
g1135
sg903
g1259
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1196
sg894
g1299
sg909
g1190
sg903
g1306
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1089
sg894
g1171
sg909
g1083
sg903
g1178
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1027
sg894
g1017
sg909
g1021
sg903
g1025
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g987
sg894
g1034
sg909
g994
sg903
g1041
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1271
sg894
g1435
sg909
g1278
sg903
g1442
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1271
sg894
g1435
sg909
g1278
sg903
g1442
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1128
sg894
g1124
sg909
g1135
sg903
g1132
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g970
sg894
g1489
sg909
g977
sg903
g1496
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1004
sg894
g1504
sg909
g1011
sg903
g1511
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1523
sg894
g1519
sg909
g1530
sg903
g1527
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g936
sg894
g1536
sg909
g943
sg903
g1543
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1555
sg894
g1551
sg909
g1562
sg903
g1559
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1271
sg894
g1267
sg909
g1278
sg903
g1275
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1230
sg894
g1342
sg909
g1224
sg903
g1349
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g907
sg894
g1607
sg909
g899
sg903
g1614
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1004
sg894
g1504
sg909
g1011
sg903
g1511
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1089
sg894
g1171
sg909
g1083
sg903
g1178
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g925
sg894
g1674
sg909
g919
sg903
g1681
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1693
sg894
g1689
sg909
g1700
sg903
g1697
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1555
sg894
g1706
sg909
g1562
sg903
g1713
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1271
sg894
g1267
sg909
g1278
sg903
g1275
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g907
sg894
g1607
sg909
g899
sg903
g1614
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1089
sg894
g1171
sg909
g1083
sg903
g1178
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1803
sg894
g1799
sg909
g1810
sg903
g1807
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1523
sg894
g1816
sg909
g1530
sg903
g1823
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g953
sg894
g1096
sg909
g960
sg903
g1103
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g936
sg894
g1536
sg909
g943
sg903
g1543
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g970
sg894
g1489
sg909
g977
sg903
g1496
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1207
sg894
g1284
sg909
g1214
sg903
g1291
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1196
sg894
g1186
sg909
g1190
sg903
g1194
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1693
sg894
g1689
sg909
g1700
sg903
g1697
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g987
sg894
g1034
sg909
g994
sg903
g1041
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g953
sg894
g1096
sg909
g960
sg903
g1103
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1693
sg894
g1689
sg909
g1700
sg903
g1697
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1164
sg894
g2000
sg909
g1158
sg903
g2007
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1555
sg894
g1706
sg909
g1562
sg903
g1713
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1089
sg894
g1171
sg909
g1083
sg903
g1178
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g1523
sg894
g1519
sg909
g1530
sg903
g1527
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1027
sg894
g1314
sg909
g1021
sg903
g1321
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1089
sg894
g1079
sg909
g1083
sg903
g1087
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1164
sg894
g1154
sg909
g1158
sg903
g1162
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1693
sg894
g1689
sg909
g1700
sg903
g1697
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1128
sg894
g1124
sg909
g1135
sg903
g1132
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1555
sg894
g1706
sg909
g1562
sg903
g1713
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1803
sg894
g2197
sg909
g1810
sg903
g2204
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1053
sg894
g1237
sg909
g1060
sg903
g1244
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1523
sg894
g1816
sg909
g1530
sg903
g1823
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1803
sg894
g2197
sg909
g1810
sg903
g2204
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1089
sg894
g1079
sg909
g1083
sg903
g1087
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1164
sg894
g2000
sg909
g1158
sg903
g2007
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1555
sg894
g1551
sg909
g1562
sg903
g1559
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1196
sg894
g1186
sg909
g1190
sg903
g1194
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g907
sg894
g1607
sg909
g899
sg903
g1614
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g970
sg894
g1489
sg909
g977
sg903
g1496
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1803
sg894
g1799
sg909
g1810
sg903
g1807
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1523
sg894
g1519
sg909
g1530
sg903
g1527
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1803
sg894
g2197
sg909
g1810
sg903
g2204
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1196
sg894
g1186
sg909
g1190
sg903
g1194
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1207
sg894
g1284
sg909
g1214
sg903
g1291
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1271
sg894
g1435
sg909
g1278
sg903
g1442
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1196
sg894
g1299
sg909
g1190
sg903
g1306
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1053
sg894
g1049
sg909
g1060
sg903
g1057
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1230
sg894
g1342
sg909
g1224
sg903
g1349
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g970
sg894
g1489
sg909
g977
sg903
g1496
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g907
sg894
g1607
sg909
g899
sg903
g1614
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1004
sg894
g1504
sg909
g1011
sg903
g1511
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1803
sg894
g2197
sg909
g1810
sg903
g2204
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1693
sg894
g1689
sg909
g1700
sg903
g1697
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1555
sg894
g1551
sg909
g1562
sg903
g1559
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1803
sg894
g1799
sg909
g1810
sg903
g1807
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1196
sg894
g1299
sg909
g1190
sg903
g1306
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1693
sg894
g2628
sg909
g1700
sg903
g2635
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1128
sg894
g1252
sg909
g1135
sg903
g1259
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1027
sg894
g1017
sg909
g1021
sg903
g1025
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g970
sg894
g1489
sg909
g977
sg903
g1496
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1693
sg894
g2628
sg909
g1700
sg903
g2635
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1693
sg894
g2628
sg909
g1700
sg903
g2635
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1523
sg894
g1816
sg909
g1530
sg903
g1823
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1803
sg894
g1799
sg909
g1810
sg903
g1807
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1207
sg894
g1284
sg909
g1214
sg903
g1291
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1803
sg894
g2197
sg909
g1810
sg903
g2204
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g987
sg894
g1034
sg909
g994
sg903
g1041
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1196
sg894
g1186
sg909
g1190
sg903
g1194
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g925
sg894
g1674
sg909
g919
sg903
g1681
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1164
sg894
g2000
sg909
g1158
sg903
g2007
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1523
sg894
g1519
sg909
g1530
sg903
g1527
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1555
sg894
g1706
sg909
g1562
sg903
g1713
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1693
sg894
g2628
sg909
g1700
sg903
g2635
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g925
sg894
g1674
sg909
g919
sg903
g1681
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1271
sg894
g1435
sg909
g1278
sg903
g1442
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1128
sg894
g1252
sg909
g1135
sg903
g1259
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1053
sg894
g1237
sg909
g1060
sg903
g1244
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1523
sg894
g1519
sg909
g1530
sg903
g1527
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1027
sg894
g1017
sg909
g1021
sg903
g1025
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1128
sg894
g1124
sg909
g1135
sg903
g1132
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1004
sg894
g1504
sg909
g1011
sg903
g1511
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1128
sg894
g1124
sg909
g1135
sg903
g1132
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1555
sg894
g1551
sg909
g1562
sg903
g1559
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1271
sg894
g1267
sg909
g1278
sg903
g1275
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g925
sg894
g1674
sg909
g919
sg903
g1681
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1027
sg894
g1314
sg909
g1021
sg903
g1321
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1693
sg894
g2628
sg909
g1700
sg903
g2635
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1164
sg894
g1154
sg909
g1158
sg903
g1162
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1207
sg894
g1203
sg909
g1214
sg903
g1211
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1004
sg894
g1504
sg909
g1011
sg903
g1511
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1027
sg894
g1314
sg909
g1021
sg903
g1321
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g953
sg894
g1096
sg909
g960
sg903
g1103
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1196
sg894
g1299
sg909
g1190
sg903
g1306
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1004
sg894
g1000
sg909
g1011
sg903
g1008
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1555
sg894
g1551
sg909
g1562
sg903
g1559
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1523
sg894
g1816
sg909
g1530
sg903
g1823
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1207
sg894
g1284
sg909
g1214
sg903
g1291
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1164
sg894
g2000
sg909
g1158
sg903
g2007
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g907
sg894
g1607
sg909
g899
sg903
g1614
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g925
sg894
g915
sg909
g919
sg903
g923
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g936
sg894
g1536
sg909
g943
sg903
g1543
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1089
sg894
g1079
sg909
g1083
sg903
g1087
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1027
sg894
g1314
sg909
g1021
sg903
g1321
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1230
sg894
g1342
sg909
g1224
sg903
g1349
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g936
sg894
g1536
sg909
g943
sg903
g1543
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1271
sg894
g1435
sg909
g1278
sg903
g1442
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g936
sg894
g1536
sg909
g943
sg903
g1543
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1230
sg894
g1220
sg909
g1224
sg903
g1228
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1053
sg894
g1237
sg909
g1060
sg903
g1244
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g925
sg894
g1674
sg909
g919
sg903
g1681
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1555
sg894
g1706
sg909
g1562
sg903
g1713
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1128
sg894
g1252
sg909
g1135
sg903
g1259
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1053
sg894
g1237
sg909
g1060
sg903
g1244
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1164
sg894
g1154
sg909
g1158
sg903
g1162
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g987
sg894
g1034
sg909
g994
sg903
g1041
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g970
sg894
g966
sg909
g977
sg903
g974
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1164
sg894
g1154
sg909
g1158
sg903
g1162
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1803
sg894
g1799
sg909
g1810
sg903
g1807
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1523
sg894
g1816
sg909
g1530
sg903
g1823
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1271
sg894
g1267
sg909
g1278
sg903
g1275
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1089
sg894
g1079
sg909
g1083
sg903
g1087
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1230
sg894
g1342
sg909
g1224
sg903
g1349
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1164
sg894
g2000
sg909
g1158
sg903
g2007
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I82420560
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'8\xb1\x8a\x12\xc8>\x8a\x12`O\xad\x04\xf0\xb2\x8a\x12\xe0N\xad\x04p\x87\x8a\x12`\xb1\x8a\x12\x88\xb1\x8a\x12p\x87\x8a\x12\xb0\xb1\x8a\x12\x18\xb3\x8a\x12\xa0O\xad\x04@\xb3\x8a\x12\xe0N\xad\x04`\x88\x8a\x12`\xb1\x8a\x12X>\x8a\x12\x00\xb2\x8a\x12(\xb2\x8a\x12\xa0\x87\x8a\x12\xe0N\xad\x04p?\x8a\x12\x90\xb3\x8a\x12\xa8?\x8a\x12\x00\xb2\x8a\x12\x00\x88\x8a\x12x\xb2\x8a\x12\xb0\xb1\x8a\x12x\xb2\x8a\x12@\xb3\x8a\x12\x80\x89\x8a\x12\xc0\x88\x8a\x12\xd0\x87\x8a\x12\x00\xb2\x8a\x12x\xb2\x8a\x120\x88\x8a\x12\xd0\x87\x8a\x12\xa0\xb2\x8a\x12p\x87\x8a\x12\x00\x88\x8a\x12\xa0O\xad\x04\x00\xb2\x8a\x12\xc0\x88\x8a\x12P\x89\x8a\x12\x88\xb1\x8a\x12\xc0\x88\x8a\x12x\xb2\x8a\x12\x90>\x8a\x12`O\xad\x04\xb0\xb1\x8a\x12(\xb2\x8a\x12\xc0O\xad\x04\x88\xb1\x8a\x12(\xb2\x8a\x12\xd8\xb1\x8a\x12\xe0O\xad\x04\xd8\xb1\x8a\x12\xe0N\xad\x04x\xb2\x8a\x12\xe0O\xad\x04\x00\x88\x8a\x12X>\x8a\x12p\x87\x8a\x12\xa0\x87\x8a\x12P\xb2\x8a\x12\xa0O\xad\x04\xa0\x87\x8a\x120\x88\x8a\x12`\xb1\x8a\x12\xa0\xb2\x8a\x12\x00\xb2\x8a\x12\xd0\x87\x8a\x12\xa0\x87\x8a\x12\x90>\x8a\x12\x88\xb1\x8a\x12\xc0\x88\x8a\x12P\xb2\x8a\x12\xc0O\xad\x048\xb1\x8a\x12\x80O\xad\x04\x00\x88\x8a\x12\x00\xb2\x8a\x12`O\xad\x04\xe0N\xad\x04`O\xad\x048?\x8a\x12\xa0\x87\x8a\x12`\xb1\x8a\x12\xe0O\xad\x04\xa0\x87\x8a\x12X>\x8a\x12\xa0\x87\x8a\x12\x00\x88\x8a\x12(\xb2\x8a\x12x\xb2\x8a\x120\x88\x8a\x12\x90\xb3\x8a\x12\xb0\xb1\x8a\x12`\xb1\x8a\x12\x90\x88\x8a\x12\xa0\xb2\x8a\x12\x18\xb3\x8a\x12\xa0O\xad\x04`O\xad\x04x\xb2\x8a\x12p\x87\x8a\x12\x80\x89\x8a\x128\xb1\x8a\x12\xa0O\xad\x04\xd8\xb1\x8a\x12X>\x8a\x12\xa0\x87\x8a\x12\x00\xb2\x8a\x12`\xb1\x8a\x12\x18\xb3\x8a\x12`O\xad\x04p\x87\x8a\x12\xe0N\xad\x04\x00?\x8a\x12\xd8\xb1\x8a\x12h\xb3\x8a\x12P\xb2\x8a\x12\x00?\x8a\x128\xb1\x8a\x12\x00\x88\x8a\x12P\xb2\x8a\x12(\xb2\x8a\x12\xa0O\xad\x04\x90>\x8a\x120\x88\x8a\x12\xb0\xb1\x8a\x128\xb1\x8a\x12\xa0O\xad\x04\x88\xb1\x8a\x12\xa0\xb2\x8a\x12 \x89\x8a\x12X>\x8a\x12\x90>\x8a\x12\x00\x88\x8a\x12\xd0\x87\x8a\x12\xd8\xb1\x8a\x12h\xb3\x8a\x12\x88\xb1\x8a\x12\x90\xb3\x8a\x12\xe0N\xad\x04\x88\xb1\x8a\x12\xf0\x88\x8a\x12`\xb1\x8a\x12\x00\xb2\x8a\x12\xa8?\x8a\x12`O\xad\x04\xa0\x87\x8a\x12\x88\xb1\x8a\x12\x80\x89\x8a\x12\xd0\x87\x8a\x12\xa0\xb2\x8a\x12\x80\x89\x8a\x12\xa8?\x8a\x12\xe0N\xad\x04\xa8?\x8a\x12\x00\x88\x8a\x12(\xb2\x8a\x12\x90>\x8a\x12P\xb2\x8a\x12\xd8\xb1\x8a\x12\xd0\x87\x8a\x12\xa0\xb2\x8a\x12`\xb1\x8a\x12`O\xad\x048\xb1\x8a\x12P\xb2\x8a\x12(\xb2\x8a\x12p\x87\x8a\x12P\xb2\x8a\x12\x90>\x8a\x12\xd0\x87\x8a\x12(\xb2\x8a\x12\xf0\xb2\x8a\x12\xb0\xb1\x8a\x128\xb1\x8a\x12x\xb2\x8a\x12\xa0O\xad\x04p\x87\x8a\x12\xe0N\xad\x04\xd0\x87\x8a\x12`\x88\x8a\x12\xa0\xb2\x8a\x120\x88\x8a\x12\x00\x88\x8a\x120\x88\x8a\x12\x18\xb3\x8a\x12`\xb1\x8a\x12\x80O\xad\x04\xd8\xb1\x8a\x128\xb1\x8a\x12\xd0\x87\x8a\x12\xd8\xb1\x8a\x12\xf0\x88\x8a\x12\x88\xb1\x8a\x12X>\x8a\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0`\x07\x03\xe0fx\x0c\x80\xc2\x8a\x12\x80\xc1\x8a\x12`\xc2\x8a\x12\xa0\xc2\x8a\x12\xc0\xc2\x8a\x12\xa0\xc1\x8a\x12\x00\xc3\x8a\x12\xc0`\x07\x03 \xc0\x8a\x12 \xc1\x8a\x12\xc0\xc1\x8a\x12\xa0\xc3\x8a\x12`\xc3\x8a\x12\xc0\xc3\x8a\x12\xe0\xc3\x8a\x12\x00\xc4\x8a\x12@\xc0\x8a\x12\x00\xc2\x8a\x12`\xc4\x8a\x12@\xc4\x8a\x12\xa0\xc4\x8a\x12\xc0\xc4\x8a\x12\x00\xc1\x8a\x12\xe0\xc0\x8a\x12\xe0\xc4\x8a\x12\x00\xc5\x8a\x12 \xc5\x8a\x12@\xc5\x8a\x12`\xc5\x8a\x12\x80\xc5\x8a\x12\xa0\xc5\x8a\x12\x00\xc6\x8a\x12\xe0\xc5\x8a\x12@\xc2\x8a\x12`\xc6\x8a\x12@\xc6\x8a\x12\xa0\xc6\x8a\x12\xc0\xc6\x8a\x12\x80\xc0\x8a\x12\xa0\xc0\x8a\x12\xe0\xc6\x8a\x12\x00\xc7\x8a\x12 \xc7\x8a\x12\x80\xc7\x8a\x12`\xc7\x8a\x12\xe0\xc1\x8a\x12\xe0\xc7\x8a\x12\xc0\xc7\x8a\x12\xc0\xc5\x8a\x12@\xc8\x8a\x12 \xc8\x8a\x12\x80\xc8\x8a\x12\xa0\xc8\x8a\x12\x80\xc6\x8a\x12\xc0\xc0\x8a\x12\xc0\xc8\x8a\x12\xe0\xc8\x8a\x12\x00\xc9\x8a\x12 \xc9\x8a\x12@\xc9\x8a\x12\x80\xc4\x8a\x12\xa0\xc9\x8a\x12`\xc9\x8a\x12\xe0\xc9\x8a\x12\x80\xc9\x8a\x12 \xca\x8a\x12\x00\xca\x8a\x12`\xca\x8a\x12@\xca\x8a\x12@\xc7\x8a\x12`\xc6\x08\x03 \xcd\x08\x03\xc0\xcc\x08\x03\x00\xca\x08\x03\xc0\xcd\x08\x03\xa0\xcd\x08\x03\xc0@\t\x03 B\t\x03\x00A\t\x03\xa0@\t\x03`A\t\x03@\xcd\x08\x03@C\t\x03\x00B\t\x03\x00b\x07\x03\xa0\x0b\x08\x03\x80\x05\x08\x03 \x0c\x08\x03\xe0\x0b\x08\x03\xa0\x0c\x08\x03\xe0\x0c\x08\x03`\x0f\x08\x03@\n\x08\x03 \r\x08\x03`\r\x08\x03\xa0\x0e\x08\x03\x80\x0e\x08\x03@\x0e\x08\x03\x00\x0c\x08\x03\xe0\r\x08\x03\x00\r\x08\x03@@\t\x03\x80\x0b\x08\x03`\x0c\x08\x03@\x0f\x08\x03 \x0f\x08\x03\x00\x0e\x08\x03 \n\x08\x03\xc0\x0f\x08\x03\x00\xcd\x08\x03`\xc5\x08\x03\x80q\x84\x0c bx\x0c\x00\n\x08\x03`\x0b\x08\x03\x00\t\x08\x03\x80\n\x08\x03\xc0\x0b\x08\x03\xe0\x0f\x08\x03@\x0c\x08\x03\xa0\r\x08\x03\xe0\x0e\x08\x03\xa0\x0f\x08\x03`\x0e\x08\x03@\r\x08\x03 \x0b\x08\x03\xe0B\t\x03\xa0t\x85\x0c`x\x85\x0c`}\x85\x0c\xc0{\x85\x0c\xe0u\x85\x0c\x00r\x85\x0c x\x85\x0c@{\x85\x0c u\x85\x0c\x00{\x85\x0c\xc0u\x85\x0c\xc0y\x85\x0c`bx\x0c\xe0A\x86\x0c\x80D\x86\x0c\x00B\x86\x0c\xc0K\x86\x0c\xe0K\x86\x0c\xa0A\x86\x0c\xe0C\x86\x0c\x00L\x86\x0c\xc0G\x86\x0c\xa0K\x86\x0c`C\x86\x0c A\x86\x0c`N\x86\x0c L\x86\x0c\xa0J\x86\x0c\xc0J\x86\x0c\xe0B\x86\x0c C\x86\x0c\x00K\x86\x0c\xe0F\x86\x0c\x00E\x86\x0c\x00C\x86\x0c`A\x86\x0c\xe0O\x86\x0c\xc0D\x86\x0c\x00A\x86\x0c\xe0D\x86\x0c\x80C\x86\x0c\xc0@\x86\x0c \x0e\x08\x03\x00\xd7\xd0\x0c\xa0\xda\xd0\x0c\xc0\xd0\xd0\x0c\xa0\xd2\xd0\x0c@\xd3\xd0\x0c\x00\xd9\xd0\x0c@\xd1\xd0\x0c\xe0\xd0\xd0\x0c\x00\xd3\xd0\x0c\xc0\xd2\xd0\x0c\xe0\xd2\xd0\x0c`\xd1\xd0\x0c\x80\xd0\xd0\x0c \xd3\xd0\x0c\xa0\xd0\xd0\x0c\x00\xdb\xd0\x0c\xc0\xda\xd0\x0c`\xda\xd0\x0c\xa0\xc5\x08\x03 \xbf\xd3\x0c\x00\xb7\xd3\x0c\xa0\xb6\xd3\x0c\xc0\xb0\xd3\x0c@\xb0\xd3\x0c\xe0\xb2\xd3\x0c\xc0\xb4\xd3\x0c`\xb0\xd3\x0c\xa0\xb0\xd3\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\'F\x84?m\x1bQ?\xa6\xa0Y?\xb5.b?*\x19Q?\xd3J\xc4?\x82l\xa6?\x0c\\U?L\x837?\x03 \xa2?\xebaD?\xe6m\xc6?\x97\x8fH?\xc4\x96H?\xb7\x8c\x88?\xc0\xc9;?\xc0ff?\\\xf6.?\x1a>s?\xab\xf5n?\xcbKD?\xa3\x90\xa8?.~w?\x92G\x84?\xa2\x06@?\x8c\xc3;?\x83(\x82?\xe4v\xd7?\x95\xa1Y?#\xf6n?KVD?\xe7KU?\xc8\xf2\x8e?\xc5!\x91?\xc2\xa6Y?\x93\xb0\x8a?\xdbAs? kf?\xa8\xa0\x99?\\\xb1\x8a?L\xbf\x9b?\xfd\x837?\xf8\x86\xa8?\xbf\x8bf?\x96\xad\x8a?\xad\xf6??hAs?<\x84w?\xb6\xb6j?<\xd5]?\x8a\x16\x91?\xc7~w?1\xb2j?\xbaaU?\x97\xd2j?\xc4\x7fw?\x92~7?\x1bj\x86?}\xc9{?\x90\xc5{?\xd0\'\x82?1\x9bY?\x0c\x04\x80?%\xc4;?\xf7[\x95?\xbd\x02\x80?\xd1\xd3L?}z\x97?\xf9rf?\xb3\xe3]?\xa2\xf5\x8e?\xe7\xad\xaa?\x86\xb8j?\xdd\xc7;?\xf6<s?\x88\x8fY?$\\U?\xd9\xad\xaa?\x0c)b?\x88:s?\xd8y7?\xa1j\x86?8\x1dQ?"\x8c\x88?ZAs?\xc8\x08@?_;3?1\xfe]?\xac]U?\xd8\r@?\xd2\x94Y?\xf2X\x95?\xc1\xf4.?\x13\xd1j? {\x97?\r\xad\x8a?#\xbf;?\xc8R\xb5?3\xec]?\x1d}7?\xef93?\xc933?\x8d\xca;?|,b?\xa1\x9f\x99?T\x8e\x88?\xc0m\x86?\xb8\x95H?\x83:3?\x89\xb3j?\x06\xdc{?\x08\xa2Y?SDs?\xf5z\x97?;\xf4n?\xba*b?(\xf6n?\xed\xca{?\x03kf?gqf?kBs?\xce\xfen?\x1b\x8c\x88?$)b?\xf5z\x97?.\xc6;?k\xe5]?\xdc\xa5Y?\xee\xf5n?%\xbf\x9b?Wc\x86?\xb3\x95H?x;Q?\xc2\x02\x80?w\xe2]?\xda\x80w?-\xf4n?\xea%\x82?L*\x82?\xfb5\xb3?W\xc7{?\xe5\x06\x80?\x8e\xd8\x8c?\xbdmf?\xa2\xbf\x9b?\xafmf?gm\x86?\xb1\x9ew?\x18Z\xd5?\x14\xdaL?\x8a\xd4\xac?\x0bbU?\xfe\xbeY?\xf6\x1aQ?A\xc8{?\x02s&?\xfc\xc4{?\xac\x03\x80?\xab\x1fQ?\xac\x16\x91?\xf4\x83w?\xa3l\x86?h\xd7L?\xe5(b?\xfdaU?r\x06\x80?\x05\x8f\x88?ESD?\xf1/b?\xf4r&?`\x13@?\xac_U?\x83\x16Q?\x93{\x97?\x91\xe3]?\xeb2\x82?\x7f\xc8{?\xb3\xf6n?-\x84H?wLD?>cU?BgU?\xfc\x1fQ?^\xd5L?D\xdaL?\x8b\xc9;?\xde\t@?u\xbbj?\xe3\x84w?`\xb8j?\x1d\xefn?f\xe5]?\xdb\xd2\x8c?\x91\x1eQ?(\x0b@?\xd0\x84w?\x0e\x837?U\xd5L?a/b?\xad\x8b\x88?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xe87\xc6\x04\xa82\xc6\x04\xe0\x10}\x04@\x17}\x04x\x18}\x04\x98\x16}\x04x\x1e}\x04@\x11}\x04 \x16}\x04X\x1a}\x04\xd0\x1d}\x04\x18\x1e}\x04\x90\x1e}\x04X\x11}\x04\xc0\x1b}\x04\x80\x1c}\x04\xc0\x12}\x04\x08\x16}\x04\x00\x1b}\x04\xc8\x16}\x048\x1f}\x04\xe0\x1c}\x04h\x19}\x04\x98\x13}\x04P\x16}\x04\xe8\x17}\x040\x18}\x04p\x1a}\x04\xe0\x19}\x04\x00\x12}\x04\xe0\x1f}\x04p\x14}\x04\x90\x1b}\x04h\x10}\x04\x08\x1c}\x04\xa8\x18}\x048\x10}\x04X\x1d}\x04P\x1c}\x04\xc0\x1e}\x04\xc0\x18}\x04`\x1e}\x04P\x10}\x04\xb0\x1f}\x04\xb0\x1c}\x04 \x1c}\x04\x00\x18}\x040\x12}\x04P\x1f}\x04\x10\x1d}\x04\x98\x1f}\x04\xb8\x1d}\x04X\x17}\x04\xd0\x11}\x04p\x1d}\x04\xa0\x1d}\x04\xd8\x1b}\x04\x18\x12}\x04h\x1c}\x04\xa0\x1a}\x04\xd8\x1e}\x04\xc8\x1c}\x04\xe8\x1d}\x04\x80\x1f}\x04\xf0\x18}\x04\x80\x10}\x04`\x1b}\x04(\x1d}\x04p\x11}\x04\xa8\x1e}\x04h\x1f}\x04H\x1e}\x04\xf8 \xed\x04\x08\x1f}\x04\x98\x19}\x04\x10\x1a}\x040\x1e}\x04\x88\x1d}\x04 \x1f}\x04\xd0\x1a}\x04\xf0\x1b}\x04\x80\x13}\x04\xc8\x1f}\x040\xbe\xe2\x04\xc8\xbc\xe2\x04\xb8\xbd\xe2\x04\x00\xbe\xe2\x04\xf8\xbc\xe2\x04\xb0\xbf\xe2\x04\xf0\xb2\xe2\x04\xc8\xbf\xe2\x04H\xbe\xe2\x04(\xbd\xe2\x04h\xb9\xe2\x04\xe0\xb3\xe2\x04\xe0\xb9\xe2\x04\x98\xbf\xe2\x040\xb8\xe2\x04\xf8\xb9\xe2\x04\x10\xb4\xe2\x04\x08\xb9\xe2\x04 \xbf\xe2\x04\x80\xbf\xe2\x04\x88\xb4\xe2\x04\x00\xb2\xe2\x04p\xb7\xe2\x04\x90\xbb\xe2\x04x\xb5\xe2\x04\x10\xbd\xe2\x048\xbf\xe2\x04\xe8\xb7\xe2\x04\xc8l\xec\x04\x08c\xec\x04xe\xec\x04\xe8m\xec\x04(d\xec\x04Xj\xec\x04\xb8g\xec\x04\xc8f\xec\x04Xm\xec\x04\xc0n\xec\x04 i\xec\x04\xd8b\xec\x04\xb8a\xec\x04\xe8g\xec\x048o\xec\x04\x90n\xec\x04hf\xec\x048i\xec\x04\x18b\xec\x04\x00e\xec\x04\x80i\xec\x04\xa0m\xec\x04\x88g\xec\x04\x18\x18}\x04\x08\x19}\x04\xf8\x16}\x04\x90\x12}\x04P\x19}\x04P\x13}\x04(\x1a}\x04\xe8\x1a}\x04\x10\x17}\x04(\x17}\x04\xc8\x19}\x04\x98\x10}\x04\xf8\x10}\x04\x98\x1c}\x04\xd8\x18}\x04 \x19}\x04\x80\x16}\x04`\x18}\x048\x1c}\x04\xa0\x17}\x04\xe0\x13}\x04 \x10}\x04\xe8\x11}\x04\x00\x1e}\x048\x19}\x04\x88\x11}\x04@\x1a}\x04\x80\x19}\x04p\x17}\x04H\x18}\x04@\x1d}\x04\xd0\x17}\x04\xb0\x10}\x04\x90\x15}\x04\x10\x14}\x04\xb8\x11}\x04\xc0\x15}\x04\x10\x11}\x04h\x16}\x04\x88\x1a}\x04\xc8\x10}\x04\xb0\x19}\x04H\x12}\x04\x88\x17}\x040\x1b}\x04H\x1b}\x04\xc8\x13}\x04\xa8\x1b}\x04\xb8\x1a}\x04\xb0\x16}\x04\xd8\x15}\x04\x90\x18}\x04\xb8\x17}\x04h\x13}\x04`\x12}\x04\x18\x1b}\x04(\x11}\x04\xf8\x19}\x04\xa8\x15}\x04\xe0\x16}\x04\xf0\x15}\x04\xa0\x11}\x048\x13}\x04x\x12}\x04\xb0\x13}\x048\x16}\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3717
sg3632
g3713
sg3646
g3724
sg3641
g3721
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3734
sg3632
g3730
sg3646
g3741
sg3641
g3738
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3751
sg3632
g3747
sg3646
g3758
sg3641
g3755
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3717
sg3632
g3764
sg3646
g3724
sg3641
g3771
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3783
sg3632
g3779
sg3646
g3790
sg3641
g3787
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3806
sg3632
g3796
sg3646
g3800
sg3641
g3804
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3817
sg3632
g3813
sg3646
g3824
sg3641
g3821
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3840
sg3632
g3830
sg3646
g3834
sg3641
g3838
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3717
sg3632
g3764
sg3646
g3724
sg3641
g3771
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3734
sg3632
g3873
sg3646
g3741
sg3641
g3880
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3806
sg3632
g3888
sg3646
g3800
sg3641
g3895
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3907
sg3632
g3903
sg3646
g3914
sg3641
g3911
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3924
sg3632
g3920
sg3646
g3931
sg3641
g3928
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3941
sg3632
g3937
sg3646
g3948
sg3641
g3945
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3663
sg3632
g3954
sg3646
g3657
sg3641
g3961
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3979
sg3632
g3969
sg3646
g3973
sg3641
g3977
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3996
sg3632
g3986
sg3646
g3990
sg3641
g3994
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g4013
sg3632
g4003
sg3646
g4007
sg3641
g4011
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3907
sg3632
g3903
sg3646
g3914
sg3641
g3911
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3783
sg3632
g3779
sg3646
g3790
sg3641
g3787
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3840
sg3632
g4095
sg3646
g3834
sg3641
g4102
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g4120
sg3632
g4110
sg3646
g4114
sg3641
g4118
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3783
sg3632
g3779
sg3646
g3790
sg3641
g3787
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3979
sg3632
g3969
sg3646
g3973
sg3641
g3977
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3907
sg3632
g4153
sg3646
g3914
sg3641
g4160
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4120
sg3632
g4181
sg3646
g4114
sg3641
g4188
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3979
sg3632
g4196
sg3646
g3973
sg3641
g4203
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g4215
sg3632
g4211
sg3646
g4222
sg3641
g4219
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3717
sg3632
g3713
sg3646
g3724
sg3641
g3721
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g4037
sg3632
g4241
sg3646
g4044
sg3641
g4248
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3817
sg3632
g4256
sg3646
g3824
sg3641
g4263
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3907
sg3632
g3903
sg3646
g3914
sg3641
g3911
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3783
sg3632
g4284
sg3646
g3790
sg3641
g4291
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g4037
sg3632
g4241
sg3646
g4044
sg3641
g4248
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3751
sg3632
g3747
sg3646
g3758
sg3641
g3755
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3783
sg3632
g3779
sg3646
g3790
sg3641
g3787
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4013
sg3632
g4351
sg3646
g4007
sg3641
g4358
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3674
sg3632
g4366
sg3646
g3681
sg3641
g4373
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3783
sg3632
g4284
sg3646
g3790
sg3641
g4291
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3924
sg3632
g4394
sg3646
g3931
sg3641
g4401
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3817
sg3632
g4256
sg3646
g3824
sg3641
g4263
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3751
sg3632
g3747
sg3646
g3758
sg3641
g3755
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3924
sg3632
g4394
sg3646
g3931
sg3641
g4401
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3840
sg3632
g4095
sg3646
g3834
sg3641
g4102
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4215
sg3632
g4461
sg3646
g4222
sg3641
g4468
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3840
sg3632
g3830
sg3646
g3834
sg3641
g3838
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3663
sg3632
g3954
sg3646
g3657
sg3641
g3961
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g4215
sg3632
g4461
sg3646
g4222
sg3641
g4468
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g4037
sg3632
g4241
sg3646
g4044
sg3641
g4248
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3806
sg3632
g3796
sg3646
g3800
sg3641
g3804
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3717
sg3632
g3713
sg3646
g3724
sg3641
g3721
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3941
sg3632
g4567
sg3646
g3948
sg3641
g4574
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3996
sg3632
g3986
sg3646
g3990
sg3641
g3994
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3817
sg3632
g3813
sg3646
g3824
sg3641
g3821
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3941
sg3632
g3937
sg3646
g3948
sg3641
g3945
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g4120
sg3632
g4110
sg3646
g4114
sg3641
g4118
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3734
sg3632
g3873
sg3646
g3741
sg3641
g3880
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g4215
sg3632
g4461
sg3646
g4222
sg3641
g4468
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3907
sg3632
g4153
sg3646
g3914
sg3641
g4160
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3979
sg3632
g3969
sg3646
g3973
sg3641
g3977
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3941
sg3632
g3937
sg3646
g3948
sg3641
g3945
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g4013
sg3632
g4351
sg3646
g4007
sg3641
g4358
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3751
sg3632
g4712
sg3646
g3758
sg3641
g4719
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3783
sg3632
g4284
sg3646
g3790
sg3641
g4291
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3996
sg3632
g4740
sg3646
g3990
sg3641
g4747
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3817
sg3632
g4256
sg3646
g3824
sg3641
g4263
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3907
sg3632
g4153
sg3646
g3914
sg3641
g4160
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3674
sg3632
g4366
sg3646
g3681
sg3641
g4373
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3734
sg3632
g3873
sg3646
g3741
sg3641
g3880
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3941
sg3632
g4567
sg3646
g3948
sg3641
g4574
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3734
sg3632
g3730
sg3646
g3741
sg3641
g3738
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g4215
sg3632
g4211
sg3646
g4222
sg3641
g4219
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3941
sg3632
g4567
sg3646
g3948
sg3641
g4574
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3806
sg3632
g3888
sg3646
g3800
sg3641
g3895
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3941
sg3632
g3937
sg3646
g3948
sg3641
g3945
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3924
sg3632
g3920
sg3646
g3931
sg3641
g3928
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g4120
sg3632
g4110
sg3646
g4114
sg3641
g4118
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3996
sg3632
g4740
sg3646
g3990
sg3641
g4747
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3783
sg3632
g4284
sg3646
g3790
sg3641
g4291
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3734
sg3632
g3873
sg3646
g3741
sg3641
g3880
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3751
sg3632
g3747
sg3646
g3758
sg3641
g3755
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g4215
sg3632
g4461
sg3646
g4222
sg3641
g4468
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3806
sg3632
g3796
sg3646
g3800
sg3641
g3804
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g3817
sg3632
g4256
sg3646
g3824
sg3641
g4263
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g3717
sg3632
g3713
sg3646
g3724
sg3641
g3721
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g4120
sg3632
g4181
sg3646
g4114
sg3641
g4188
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3637
sg3632
g5145
sg3646
g3647
sg3641
g5152
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3817
sg3632
g3813
sg3646
g3824
sg3641
g3821
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3840
sg3632
g4095
sg3646
g3834
sg3641
g4102
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3806
sg3632
g3888
sg3646
g3800
sg3641
g3895
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3941
sg3632
g4567
sg3646
g3948
sg3641
g4574
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3907
sg3632
g4153
sg3646
g3914
sg3641
g4160
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3734
sg3632
g3730
sg3646
g3741
sg3641
g3738
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g3806
sg3632
g3888
sg3646
g3800
sg3641
g3895
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3717
sg3632
g3713
sg3646
g3724
sg3641
g3721
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3663
sg3632
g3954
sg3646
g3657
sg3641
g3961
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3674
sg3632
g4366
sg3646
g3681
sg3641
g4373
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3840
sg3632
g4095
sg3646
g3834
sg3641
g4102
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3924
sg3632
g3920
sg3646
g3931
sg3641
g3928
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3996
sg3632
g4740
sg3646
g3990
sg3641
g4747
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3674
sg3632
g4366
sg3646
g3681
sg3641
g4373
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3996
sg3632
g4740
sg3646
g3990
sg3641
g4747
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3924
sg3632
g4394
sg3646
g3931
sg3641
g4401
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3817
sg3632
g4256
sg3646
g3824
sg3641
g4263
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g4013
sg3632
g4351
sg3646
g4007
sg3641
g4358
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4120
sg3632
g4181
sg3646
g4114
sg3641
g4188
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3783
sg3632
g3779
sg3646
g3790
sg3641
g3787
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3637
sg3632
g5145
sg3646
g3647
sg3641
g5152
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3817
sg3632
g3813
sg3646
g3824
sg3641
g3821
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g3751
sg3632
g4712
sg3646
g3758
sg3641
g4719
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4215
sg3632
g4211
sg3646
g4222
sg3641
g4219
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3941
sg3632
g3937
sg3646
g3948
sg3641
g3945
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3806
sg3632
g3888
sg3646
g3800
sg3641
g3895
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g4013
sg3632
g4003
sg3646
g4007
sg3641
g4011
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4037
sg3632
g4241
sg3646
g4044
sg3641
g4248
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3979
sg3632
g4196
sg3646
g3973
sg3641
g4203
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3840
sg3632
g3830
sg3646
g3834
sg3641
g3838
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3924
sg3632
g4394
sg3646
g3931
sg3641
g4401
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3751
sg3632
g4712
sg3646
g3758
sg3641
g4719
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3996
sg3632
g3986
sg3646
g3990
sg3641
g3994
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3663
sg3632
g3954
sg3646
g3657
sg3641
g3961
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3751
sg3632
g4712
sg3646
g3758
sg3641
g4719
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3907
sg3632
g3903
sg3646
g3914
sg3641
g3911
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3734
sg3632
g3730
sg3646
g3741
sg3641
g3738
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3907
sg3632
g4153
sg3646
g3914
sg3641
g4160
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g4013
sg3632
g4003
sg3646
g4007
sg3641
g4011
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3674
sg3632
g4366
sg3646
g3681
sg3641
g4373
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3941
sg3632
g4567
sg3646
g3948
sg3641
g4574
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3751
sg3632
g3747
sg3646
g3758
sg3641
g3755
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g4120
sg3632
g4110
sg3646
g4114
sg3641
g4118
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3979
sg3632
g3969
sg3646
g3973
sg3641
g3977
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g4215
sg3632
g4461
sg3646
g4222
sg3641
g4468
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g4120
sg3632
g4181
sg3646
g4114
sg3641
g4188
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g4013
sg3632
g4351
sg3646
g4007
sg3641
g4358
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g4013
sg3632
g4003
sg3646
g4007
sg3641
g4011
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g4037
sg3632
g4241
sg3646
g4044
sg3641
g4248
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3924
sg3632
g3920
sg3646
g3931
sg3641
g3928
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g4013
sg3632
g4003
sg3646
g4007
sg3641
g4011
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3996
sg3632
g3986
sg3646
g3990
sg3641
g3994
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g3840
sg3632
g4095
sg3646
g3834
sg3641
g4102
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3979
sg3632
g3969
sg3646
g3973
sg3641
g3977
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g4215
sg3632
g4211
sg3646
g4222
sg3641
g4219
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3734
sg3632
g3873
sg3646
g3741
sg3641
g3880
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3637
sg3632
g5145
sg3646
g3647
sg3641
g5152
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3996
sg3632
g4740
sg3646
g3990
sg3641
g4747
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3924
sg3632
g4394
sg3646
g3931
sg3641
g4401
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3717
sg3632
g3764
sg3646
g3724
sg3641
g3771
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3996
sg3632
g3986
sg3646
g3990
sg3641
g3994
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4013
sg3632
g4351
sg3646
g4007
sg3641
g4358
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3979
sg3632
g4196
sg3646
g3973
sg3641
g4203
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3924
sg3632
g3920
sg3646
g3931
sg3641
g3928
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3783
sg3632
g4284
sg3646
g3790
sg3641
g4291
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3637
sg3632
g5145
sg3646
g3647
sg3641
g5152
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3817
sg3632
g3813
sg3646
g3824
sg3641
g3821
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3717
sg3632
g3764
sg3646
g3724
sg3641
g3771
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3663
sg3632
g3954
sg3646
g3657
sg3641
g3961
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3979
sg3632
g4196
sg3646
g3973
sg3641
g4203
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3717
sg3632
g3764
sg3646
g3724
sg3641
g3771
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g4215
sg3632
g4211
sg3646
g4222
sg3641
g4219
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g4120
sg3632
g4110
sg3646
g4114
sg3641
g4118
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g4120
sg3632
g4181
sg3646
g4114
sg3641
g4188
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3806
sg3632
g3796
sg3646
g3800
sg3641
g3804
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3734
sg3632
g3730
sg3646
g3741
sg3641
g3738
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3840
sg3632
g3830
sg3646
g3834
sg3641
g3838
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3637
sg3632
g5145
sg3646
g3647
sg3641
g5152
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3979
sg3632
g4196
sg3646
g3973
sg3641
g4203
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3840
sg3632
g3830
sg3646
g3834
sg3641
g3838
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3907
sg3632
g3903
sg3646
g3914
sg3641
g3911
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3751
sg3632
g4712
sg3646
g3758
sg3641
g4719
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3806
sg3632
g3796
sg3646
g3800
sg3641
g3804
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I82420560
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'0\xd3\xd0\x120\xb9\xd0\x12\x10\xdd\xcf\x12P\xdc\xcf\x12X\xb9\xd0\x12@\xdd\xcf\x12\xe8\xba\xd0\x12\xd0\xb9\xd0\x12h\xd3\xd0\x12\xf8\xb9\xd0\x12p\xdd\xcf\x12 \xba\xd0\x12@\x00\xd4\x0c\xb0\xdc\xcf\x12\xa0\t\xd4\x0cH\xba\xd0\x12p\xba\xd0\x12P\xdc\xcf\x12\x80\xb9\xd0\x12\xd0\xb9\xd0\x12\x80\xb9\xd0\x12\x80\xdc\xcf\x12 \xdc\xcf\x12p\xba\xd0\x12\xf8\xb9\xd0\x12\x98\xba\xd0\x12\xc0\x06\xd4\x0c \xdc\xcf\x12H\xba\xd0\x12 \xdc\xcf\x12 \xba\xd0\x12X\xb9\xd0\x12@\x00\xd4\x0c \x0b\xd4\x0c\xf8\xb9\xd0\x12@\x00\xd4\x0c \xba\xd0\x12 \x0b\xd4\x0c\x80\xdc\xcf\x12\xc0\x06\xd4\x0c\x80\xb9\xd0\x12 \xba\xd0\x12H\xd4\xd0\x12\x80\xb9\xd0\x12\xd8\xd3\xd0\x12\x80\xdc\xcf\x12\xd8\xd3\xd0\x12p\xba\xd0\x12\xc0\x06\xd4\x0c\xe0\xdc\xcf\x12 \xdc\xcf\x12X\xb9\xd0\x12\x98\xba\xd0\x12\xd0\xb9\xd0\x12\x98\xba\xd0\x12\xa0\t\xd4\x0c0\xde\xcf\x12\x98\xba\xd0\x12\x80\xdc\xcf\x12\x10\xdd\xcf\x12\xe0\xdc\xcf\x12h\xd3\xd0\x12\xe0\xdc\xcf\x12\x10\xdd\xcf\x12\x80\xdc\xcf\x12\xc0\x06\xd4\x0c\x98\xba\xd0\x12P\xdc\xcf\x12\xf8\xb9\xd0\x12\xe8\xba\xd0\x12\xa0\xdd\xcf\x12\xa0\t\xd4\x0cP\xdc\xcf\x12\xd0\xb9\xd0\x12H\xd4\xd0\x12\x80\xb9\xd0\x12\xd8\xd3\xd0\x12\x80\xb9\xd0\x12\x98\xba\xd0\x12@\x00\xd4\x0c@\xdd\xcf\x120\xd3\xd0\x12H\xba\xd0\x120\xb9\xd0\x12\xd0\xb9\xd0\x128\xbb\xd0\x12\x80\xd4\xd0\x120\xd3\xd0\x12h\xd3\xd0\x12\xf8\xb9\xd0\x12\x80\xd4\xd0\x12\x80\xdc\xcf\x12\x98\xba\xd0\x12 \xdc\xcf\x12\x10\xd4\xd0\x12\xa8\xb9\xd0\x120\xb9\xd0\x12\xa8\xb9\xd0\x12p\xba\xd0\x12@\x00\xd4\x0c\xa8\xb9\xd0\x120\xd3\xd0\x12\x10\xd4\xd0\x12 \xdc\xcf\x12\xa8\xb9\xd0\x12H\xba\xd0\x12\x80\xdc\xcf\x12 \x0b\xd4\x0c\xc0\x06\xd4\x0c0\xb9\xd0\x12\xd0\xb9\xd0\x120\xb9\xd0\x12\xb0\xdc\xcf\x12H\xba\xd0\x12\xe0\xdc\xcf\x12\xc0\t\xd4\x0c\x80\xd4\xd0\x12\xa8\xb9\xd0\x12\x80\xdc\xcf\x12H\xba\xd0\x12\xf8\xb9\xd0\x12\xa0\t\xd4\x0c\xf8\xb9\xd0\x120\xb9\xd0\x12@\x00\xd4\x0c0\xd3\xd0\x12h\xd3\xd0\x12\xe0\xdc\xcf\x12\xd0\xb9\xd0\x12@\x00\xd4\x0c \xba\xd0\x12\xe0\xdc\xcf\x12H\xba\xd0\x12\x80\xdc\xcf\x12\xc0\x06\xd4\x0c\xa8\xb9\xd0\x12\xc0\x06\xd4\x0cH\xba\xd0\x120\xd3\xd0\x12\xc0\x06\xd4\x0cP\xdc\xcf\x12\xb0\xdc\xcf\x12\x00\xde\xcf\x12\xe0\xdc\xcf\x12\xa0\xdd\xcf\x120\xd3\xd0\x12\xc0\x06\xd4\x0c\xa8\xb9\xd0\x12h\xd3\xd0\x12\xf8\xb9\xd0\x12\xb0\xdc\xcf\x12\xc0\x06\xd4\x0c\x98\xba\xd0\x12\xa0\xd3\xd0\x12\xd0\xdd\xcf\x12 \xdc\xcf\x12p\xba\xd0\x12\xd0\xb9\xd0\x12X\xb9\xd0\x12 \xba\xd0\x12\x00\xde\xcf\x12\xe0\xdc\xcf\x12\xb0\xdc\xcf\x12H\xd4\xd0\x12\x98\xba\xd0\x12\xd0\xb9\xd0\x12X\xb9\xd0\x120\xb9\xd0\x12\xa0\xdd\xcf\x12\x80\xb9\xd0\x12p\xba\xd0\x12\xf8\xb9\xd0\x12h\xd3\xd0\x12\xe0\xdc\xcf\x12p\xba\xd0\x12`\xbb\xd0\x120\xd3\xd0\x12@\x00\xd4\x0cX\xb9\xd0\x12\x80\xb9\xd0\x12\xd8\xd3\xd0\x12h\xd3\xd0\x120\xd3\xd0\x12\xd0\xdd\xcf\x12\xd8\xd3\xd0\x12H\xd4\xd0\x12\x98\xba\xd0\x12\xc0\t\xd4\x0c\xb0\xdc\xcf\x128\xbb\xd0\x12\xd0\xb9\xd0\x12X\xb9\xd0\x12 \xba\xd0\x12\xa0\t\xd4\x0ch\xd3\xd0\x12\xa0\t\xd4\x0c\xb0\xdc\xcf\x12\xa8\xb9\xd0\x12\xd0\xdd\xcf\x120\xb9\xd0\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x00\xac\xd1\x12\xe0\xaa\xd1\x12@\xd0\xd0\x0c \xab\xd1\x12 \xad\xd1\x12\x80\xaa\xd1\x12\xc0\xac\xd1\x12@\xac\xd1\x12\xa0\xaa\xd1\x12@\xab\xd1\x12\xe0\xac\xd1\x12\xa0\xad\xd1\x12\x80\xad\xd1\x12\xa0\xab\xd1\x12\xc0\xad\xd1\x12\xe0\xad\xd1\x12\x00\xae\xd1\x12`\xae\xd1\x12\x80\xae\xd1\x12\xa0\xae\xd1\x12\xc0\xab\xd1\x12\xe0\xae\xd1\x12\x00\xaf\xd1\x12 \xaf\xd1\x12\x00\xad\xd1\x12`\xad\xd1\x12@\xaf\xd1\x12`\xaf\xd1\x12\xe0\xaf\xd1\x12\x80\xac\xd1\x12`\xac\xd1\x12 \xae\xd1\x12\xa0\xaf\xd1\x12\xc0\xae\xd1\x12@\xad\xd1\x12`\xaa\xd1\x12@\xae\xd1\x12`\xab\xd1\x12\xc0\xaf\xd1\x12\xc0\xaa\xd1\x12\xa0\xac\xd1\x12\x80\xab\xd1\x12\x00\xab\xd1\x12 \xac\xd1\x12\xe0\xab\xd1\x12\x00z\x85\x0c\xc0\xf1\xe3\x12 \xf1\xe3\x12\xa0\xf1\xe3\x12@\xf2\xe3\x12\x80\xf2\xe3\x12`\xf2\xe3\x12 \xf0\xe3\x12\x00\xf3\xe3\x12\xe0\xf2\xe3\x12@\xf3\xe3\x12 \xf3\xe3\x12\xe0\xf1\xe3\x12\xa0\xf3\xe3\x12\xc0\xf3\xe3\x12@\xf1\xe3\x12\xe0\xf0\xe3\x12\xe0\xf3\xe3\x12@\xf4\xe3\x12`\xf4\xe3\x12\x80\xf4\xe3\x12\x80\xf1\xe3\x12\xc0\xf4\xe3\x12\xe0\xf4\xe3\x12\x00\xf5\xe3\x12\xc0\xf2\xe3\x12\xa0\xf0\xe3\x12 \xf5\xe3\x12@\xf5\xe3\x12\xa0\xf5\xe3\x12\x80\xf5\xe3\x12\xe0\xf5\xe3\x12\x00\xf6\xe3\x12 \xf6\xe3\x12`\xf0\xe3\x12`\xf6\xe3\x12\x80\xf6\xe3\x12\xa0\xf6\xe3\x12 \xf4\xe3\x12@\xf0\xe3\x12\x00\xf7\xe3\x12 \xf7\xe3\x12\x00\xf2\xe3\x12`\x06\x07\x03\xa0\xf4\xe3\x12\x00\xf1\xe3\x12\xe0\xf6\xe3\x12\xe0\xf7\xe3\x12\x00\xf8\xe3\x12@\xf6\xe3\x12\xc0\xf7\xe3\x12\x80\xf7\xe3\x12\x80\xf8\xe3\x12@\xf8\xe3\x12\xa0\xf8\xe3\x12\x80\xf0\xe3\x12\xa0\xf7\xe3\x12\xa0\xf2\xe3\x12\x80\xf3\xe3\x12`\xf9\xe3\x12\x80\xf9\xe3\x12\xc0\xf8\xe3\x12\xa0\xf9\xe3\x12\x00\xf9\xe3\x12@\xf9\xe3\x12 \xfa\xe3\x12\xe0\xf9\xe3\x12 \xf2\xe3\x12@\xf7\xe3\x12\xa0\xfa\xe3\x12\xc0\xf0\xe3\x12`\xf5\xe3\x12`\xf3\xe3\x12 \xfb\xe3\x12`\xf8\xe3\x12`\xfa\xe3\x12\x80\xfb\xe3\x12\x00\xfb\xe3\x12\xc0\xfb\xe3\x12\xe0\xfb\xe3\x12`\xfb\xe3\x12`\xf7\xe3\x12\xc0\xfa\xe3\x12\x00\xfa\xe3\x12`\xfc\xe3\x12\x80\xfc\xe3\x12 \xf8\xe3\x12\xe0\xfc\xe3\x12\x00\xfd\xe3\x12\x00\xf4\xe3\x12\xc0\xfc\xe3\x12\x00\xfc\xe3\x12\x80\xfa\xe3\x12\xa0\xfd\xe3\x12\xa0\xfc\xe3\x12\xe0\xfa\xe3\x12`\xfd\xe3\x12\xc0\xf9\xe3\x12@\xfd\xe3\x12`\xfe\xe3\x12\x00\xfe\xe3\x12@\xfb\xe3\x12\xe0\xf8\xe3\x12\xe0\xfe\xe3\x12\xc0\xfd\xe3\x12 \xfd\xe3\x12 \xfc\xe3\x12 \xfe\xe3\x12\x80\xff\xe3\x12\xc0\xff\xe3\x12\xa0\xfe\xe3\x12\x00\xff\xe3\x12`\xff\xe3\x12\xc0\xfe\xe3\x12@\xff\xe3\x12\xe0\xff\xe3\x12\x80\xfe\xe3\x12@\xfc\xe3\x12`\xf1\xe3\x12@\xfe\xe3\x12\xa0\xff\xe3\x12@B\x86\x0c@\xfa\xe3\x12\xa0\xfb\xe3\x12 \xff\xe3\x12\x80\xfd\xe3\x12\xe0\xfd\xe3\x12\xc0\xf5\xe3\x12\xc0\x81\x0e\x13 \x81\x0e\x13\xa0\x82\x0e\x13`\x82\x0e\x13\x80\x80\x0e\x13`\xb9\xd3\x0c`\x81\x0e\x13@\x81\x0e\x13 \x83\x0e\x13@\x83\x0e\x13\xe0\x80\x0e\x13\x80\x81\x0e\x13\xa0\x83\x0e\x13 \x80\x0e\x13\xc0\x80\x0e\x13\x00\x83\x0e\x13\xc0\x82\x0e\x13\x00\x82\x0e\x13 \x82\x0e\x13`\x84\x0e\x13\x80\x82\x0e\x13\x80\x84\x0e\x13\xe0\x82\x0e\x13`\x80\x0e\x13 \x85\x0e\x13\x80\x83\x0e\x13@\x82\x0e\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'{\xd9L?\xfc\xd3L?Q\x96H?\x16\\U?+\xa5Y?fuf? \x1fQ?L\x857?\xaf\xcc;?\xe5t&?\xa1\xc6;?x\xabH?\xdaG\x84?\x17A3?\xed~w?p\xa5\x8a?I\xd2\x8c?&aU?\x1b\x8fH?1@3?D\xc3{?\xe1\xb6j?_\x8ff?ahU?\xae@3?:\xb2j?\xccV\x05@\xb6\xc0Y?yb&?)\xdbL?K\xb5*?|JD?\xf1dD?\xb2]s?\r\x1dQ?\xa2\x19Q?(:3?\x85\x0e@?\x18\x90H?\x1afD?d\x96H?~Bs?\xba9s?>:\x93?4LD?,\x1eQ?-<s?\xb8<s?\xa5mf?0\xed]?\x18ND?\xf8PD?]\xa6Y?$qf?\xc7J\x84?\xf6\x05\xc0?hA3?\xa7\x19Q?\x90\xd8L?#\x18Q?9\x19Q?\xa1\x8fH?\x80iD?\x9f\xd2L?\xf2\x90\x88?\x87\r@?\xe9\xe4]?\xd0bU?\xe7Fb?<\'b?,\xdaL?f\xb0j?\x8c\xd4L?2\xa6Y?\x8d\x9bH?\xd8\xa5Y?\xa8\x90H?G\x0c@?\x17\x1fQ?`}7?VLs??\xc7{?\x15s7?u\x95H?/\x1fQ?Df\x86?Hl\x86?\x88\x07@?\xd5\xc6L?\xc6\x06\x80?\xe9\xafj?\x81\\\x95?Q\xabY?\x19\xfen?\xdd\xc3;?w\x1dQ?.\xb9j?c\xd9L?<\xca;?\xcf@3?\xe6"Q?\xc0\xb0j?\xbdKD?\xa7JD?J\x847?\xe0Q\x95?\xb8KD?\xb8\x17\x91?@\x97H?C\x83w?\x88\x05@?h\xd3L?\xc3\x08@?\xb1\xeb.?\x90\xa1Y?\xf7\x12/?\xe4\xa0Y?\xf5\xd6L?\xb7H3?@\xf4.?a-b?\xfcY\x95?\xdf0s?\x15)b?%\xc2;??\xc3{?\x99\xa5Y?\xc4.Q?\xf8tf?F\xb3*?Vn&?3\x8fH?\xae\xca\x8c?\xd3\xde\xcc?\xbfrf?!\x83w?\x1e\xc3;?\xd9\x82H?\xc7\xc8;?pw&?\xcb+b?]\x18Q?L\xb8;?\x1b\xa0Y?\xf4tf?\xfdTD?\xe5\xf5.?\xf4\'\xa2?\xd0\x05o?\xa8m\xa6?\x1b\xc6{?F\xb7*?=\xf5\xae?\x03\xc4;?\xcbMD?\xf4rf?\x9dV\xa4?$\x93H?-)b?HLD?c\xfb\x7f?\xfa\xe5]?\xee\x0e@?]9\xd3?Z.b?u\x06\x80?y\x97Y?!Gb?\xb7\xfcn?\x9cX\x95?\xd0\x80w?\xc4\x7fw?\xf4[U?8\x0e@?\xae:3?B\x8c\xc8?xWU?\xb7\xf6n?\xf9\x1eb?\xde\xcf\x8c?Z\x06\xa0?\xd1\xd3L?`\x02\x8f?E\x06\x80??\xb2*?8j\x86?\xe3\x02\x80?1\x08\x80?c\xb5j?\xc0}7?5\x94H?W\xa1Y?#\xf6.?\xb7\x8d\xa8?\x7f\xa4j?\xa4\x18Q?\x8dbU?\x92mf?\xde\xf4.?\x13\x9e7?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'8\xb9\xe2\x04\xd0\xb7\xe2\x04\xf8`\xe5\x04pa\xe5\x04\xe0o\xe5\x04\x80l\xe5\x04\xd8h\xe5\x04xh\xe5\x048o\xe5\x04\x00k\xe5\x04\x00n\xe5\x04\xc8i\xe5\x04hi\xe5\x04\xb0i\xe5\x04 c\xe5\x04pj\xe5\x04hc\xe5\x040k\xe5\x04Po\xe5\x04\x90h\xe5\x04\x18h\xe5\x04\xc8l\xe5\x04xe\xe5\x04\xa8h\xe5\x04\x88g\xe5\x04\xa0m\xe5\x04\xa0g\xe5\x04\x98i\xe5\x04\x90n\xe5\x04\x10a\xe5\x04\xa8b\xe5\x04Hn\xe5\x04\xb0c\xe5\x04`n\xe5\x04h`\xe5\x04\xd8n\xe5\x04`h\xe5\x04\xd0d\xe5\x04\xb0o\xe5\x04\xc8f\xe5\x04\x98\xc6\x0b\x05\xf8\xc0\x0b\x05\x88\xcd\x0b\x05H\xce\x0b\x05\xd0\xc4\x0b\x05\xf8\xc9\x0b\x05\xc8\xcf\x0b\x05\xa0\xc1\x0b\x05H\xc5\x0b\x05\xe8\xc4\x0b\x05\x80\xcf\x0b\x05 \xc0\x0b\x05(\xc1\x0b\x05\x80\xc6\x0b\x05\x00\xc5\x0b\x05`\xc5\x0b\x058\xc9\x0b\x05p\xca\x0b\x05\x10\xcd\x0b\x05\xc0\xc2\x0b\x05\xc8\xc9\x0b\x05\x98\xc9\x0b\x05\x98\xc0\x0b\x05\xb8\xc1\x0b\x05\x18\xc2\x0b\x05\xc8\xc0\x0b\x05X\xcd\x0b\x05\x08\xc9\x0b\x05\x08\xc6\x0b\x05\x18\xc5\x0b\x058\xc0\x0b\x05\x80\xc9\x0b\x05h\xc0\x0b\x05\x88\xc1\x0b\x05p\xc1\x0b\x05\xd8\xcb\x0b\x05\xd8\xc8\x0b\x05 \xc6\x0b\x05@\xc4\x0b\x05h\xc6\x0b\x05\xb0\xc9\x0b\x05x\xc2\x0b\x05\x10\xc1\x0b\x05`\xc8\x0b\x05\xe8\xc7\x0b\x05\xf0\xc5\x0b\x050\xc2\x0b\x05\xa8\xc5\x0b\x05P\xcc\x0b\x05\x18\xcb\x0b\x05\xf0\xc2\x0b\x05@\xc1\x0b\x05 \xcf\x0b\x05h\xcc\x0b\x05\x88\xc7\x0b\x05\xf8\xc6\x0b\x05X\xc1\x0b\x05\xb8\xc7\x0b\x05\xc0\xc8\x0b\x05\x80\xc0\x0b\x05\xe0\xcf\x0b\x05\x10\xc7\x0b\x05 \xcc\x0b\x058\xcc\x0b\x05\xb8\xca\x0b\x05\x00\xce\x0b\x05\xf8\xcc\x0b\x05\xa0\xca\x0b\x05\x00\xcb\x0b\x05@\xc7\x0b\x05p\xc7\x0b\x05\xa8\xce\x0b\x05x\xc5\x0b\x05\xa8\xc8\x0b\x05\xd8\xc2\x0b\x05(\xc7\x0b\x05\x08\xcc\x0b\x05P\xcf\x0b\x05h\xc9\x0b\x05x\xcb\x0b\x05 \xc9\x0b\x05\x18\xce\x0b\x05x\xc8\x0b\x05\xc0\xcb\x0b\x05`\xc2\x0b\x05\x80\xcc\x0b\x05\xe8\xcd\x0b\x05\xb0\xcf\x0b\x05\xd0\xcd\x0b\x05`\xce\x0b\x05\xe0\xcc\x0b\x05\x00\xc2\x0b\x05\xa0\xcd\x0b\x05x\xce\x0b\x05\xb0\xcc\x0b\x058\xc6\x0b\x05\x00\xc8\x0b\x05H\xcb\x0b\x05h\xcf\x0b\x05P\xc9\x0b\x05(\xcd\x0b\x05\xe8\xca\x0b\x05X\xca\x0b\x050\xce\x0b\x05\xe8\xc1\x0b\x05P\xc6\x0b\x05\x90\xc8\x0b\x05\x98\xcf\x0b\x05\xf0\xc8\x0b\x05\xd8\xc5\x0b\x05\xc8\xc6\x0b\x05`\xcb\x0b\x05\x08\xcf\x0b\x05\xb0\xc6\x0b\x05\xb8\xcd\x0b\x05\x88\xca\x0b\x05p\xcd\x0b\x05\xd0\xc7\x0b\x05\x10\xca\x0b\x05@\xcd\x0b\x05\xf0\xce\x0b\x05X\xc7\x0b\x05\xe0\xc9\x0b\x05\xe0\xc3\x0b\x05\x08\xc3\x0b\x05@\xca\x0b\x05\x88\xc4\x0b\x05\xb8\xc4\x0b\x05\xf0\xcb\x0b\x05\xc0\xce\x0b\x050\xc5\x0b\x050\xc8\x0b\x05(\xca\x0b\x05\xd0\xca\x0b\x05\x98\xcc\x0b\x058\xcf\x0b\x05H\xc8\x0b\x05\x80i\xe5\x04\xa8e\xe5\x048l\xe5\x04`b\xe5\x04 f\xe5\x04\x88d\xe5\x04\xe0l\xe5\x04@d\xe5\x04@m\xe5\x040h\xe5\x04\xb0`\xe5\x04\xf0b\xe5\x04\xb8a\xe5\x04\xe8a\xe5\x04\xe0`\xe5\x04(g\xe5\x04Xm\xe5\x04\x08c\xe5\x04\x88m\xe5\x04 o\xe5\x04@g\xe5\x04\xb0f\xe5\x04Xg\xe5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6469
sg6370
g6459
sg6384
g6463
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6554
sg6370
g6544
sg6384
g6548
sg6379
g6552
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6565
sg6370
g6561
sg6384
g6572
sg6379
g6569
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6582
sg6370
g6578
sg6384
g6589
sg6379
g6586
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6599
sg6370
g6595
sg6384
g6606
sg6379
g6603
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6616
sg6370
g6612
sg6384
g6623
sg6379
g6620
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6633
sg6370
g6629
sg6384
g6640
sg6379
g6637
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6650
sg6370
g6646
sg6384
g6657
sg6379
g6654
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6469
sg6370
g6459
sg6384
g6463
sg6379
g6467
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6469
sg6370
g6702
sg6384
g6463
sg6379
g6709
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6554
sg6370
g6544
sg6384
g6548
sg6379
g6552
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6418
sg6370
g6730
sg6384
g6412
sg6379
g6737
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6650
sg6370
g6745
sg6384
g6657
sg6379
g6752
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6418
sg6370
g6730
sg6384
g6412
sg6379
g6737
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6633
sg6370
g6629
sg6384
g6640
sg6379
g6637
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6565
sg6370
g6846
sg6384
g6572
sg6379
g6853
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6446
sg6370
g6861
sg6384
g6453
sg6379
g6868
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6582
sg6370
g6578
sg6384
g6589
sg6379
g6586
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6531
sg6370
g6902
sg6384
g6538
sg6379
g6909
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6582
sg6370
g6578
sg6384
g6589
sg6379
g6586
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6565
sg6370
g6846
sg6384
g6572
sg6379
g6853
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6446
sg6370
g6861
sg6384
g6453
sg6379
g6868
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6554
sg6370
g6956
sg6384
g6548
sg6379
g6963
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6469
sg6370
g6459
sg6384
g6463
sg6379
g6467
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6565
sg6370
g6561
sg6384
g6572
sg6379
g6569
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6616
sg6370
g7010
sg6384
g6623
sg6379
g7017
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6469
sg6370
g6459
sg6384
g6463
sg6379
g6467
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6429
sg6370
g7038
sg6384
g6436
sg6379
g7045
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6554
sg6370
g6956
sg6384
g6548
sg6379
g6963
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6429
sg6370
g7038
sg6384
g6436
sg6379
g7045
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6650
sg6370
g6745
sg6384
g6657
sg6379
g6752
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6794
sg6370
g7092
sg6384
g6801
sg6379
g7099
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g7111
sg6370
g7107
sg6384
g7118
sg6379
g7115
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6446
sg6370
g6861
sg6384
g6453
sg6379
g6868
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6777
sg6370
g7150
sg6384
g6784
sg6379
g7157
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6777
sg6370
g7150
sg6384
g6784
sg6379
g7157
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6616
sg6370
g6612
sg6384
g6623
sg6379
g6620
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g7111
sg6370
g7204
sg6384
g7118
sg6379
g7211
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6777
sg6370
g7150
sg6384
g6784
sg6379
g7157
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6554
sg6370
g6544
sg6384
g6548
sg6379
g6552
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g7111
sg6370
g7204
sg6384
g7118
sg6379
g7211
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g7111
sg6370
g7107
sg6384
g7118
sg6379
g7115
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6418
sg6370
g6730
sg6384
g6412
sg6379
g6737
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6554
sg6370
g6544
sg6384
g6548
sg6379
g6552
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6794
sg6370
g7092
sg6384
g6801
sg6379
g7099
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6777
sg6370
g7150
sg6384
g6784
sg6379
g7157
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6531
sg6370
g6902
sg6384
g6538
sg6379
g6909
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6486
sg6370
g7375
sg6384
g6480
sg6379
g7382
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6565
sg6370
g6846
sg6384
g6572
sg6379
g6853
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6616
sg6370
g6612
sg6384
g6623
sg6379
g6620
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6429
sg6370
g7038
sg6384
g6436
sg6379
g7045
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6497
sg6370
g7429
sg6384
g6504
sg6379
g7436
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6616
sg6370
g6612
sg6384
g6623
sg6379
g6620
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6469
sg6370
g6459
sg6384
g6463
sg6379
g6467
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6469
sg6370
g6702
sg6384
g6463
sg6379
g6709
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6582
sg6370
g7509
sg6384
g6589
sg6379
g7516
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6469
sg6370
g6702
sg6384
g6463
sg6379
g6709
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6633
sg6370
g7550
sg6384
g6640
sg6379
g7557
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6497
sg6370
g7429
sg6384
g6504
sg6379
g7436
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6514
sg6370
g7591
sg6384
g6521
sg6379
g7598
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6650
sg6370
g6745
sg6384
g6657
sg6379
g6752
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6514
sg6370
g7591
sg6384
g6521
sg6379
g7598
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6531
sg6370
g6902
sg6384
g6538
sg6379
g6909
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6650
sg6370
g6745
sg6384
g6657
sg6379
g6752
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6554
sg6370
g6544
sg6384
g6548
sg6379
g6552
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6418
sg6370
g6730
sg6384
g6412
sg6379
g6737
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6582
sg6370
g7509
sg6384
g6589
sg6379
g7516
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6486
sg6370
g7375
sg6384
g6480
sg6379
g7382
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6395
sg6370
g7736
sg6384
g6402
sg6379
g7743
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6650
sg6370
g6646
sg6384
g6657
sg6379
g6654
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6582
sg6370
g7509
sg6384
g6589
sg6379
g7516
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6486
sg6370
g7375
sg6384
g6480
sg6379
g7382
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6582
sg6370
g7509
sg6384
g6589
sg6379
g7516
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6418
sg6370
g6730
sg6384
g6412
sg6379
g6737
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6633
sg6370
g7550
sg6384
g6640
sg6379
g7557
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6554
sg6370
g6956
sg6384
g6548
sg6379
g6963
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6395
sg6370
g7736
sg6384
g6402
sg6379
g7743
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6599
sg6370
g6595
sg6384
g6606
sg6379
g6603
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6633
sg6370
g7550
sg6384
g6640
sg6379
g7557
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g7111
sg6370
g7107
sg6384
g7118
sg6379
g7115
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6650
sg6370
g6745
sg6384
g6657
sg6379
g6752
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6554
sg6370
g6956
sg6384
g6548
sg6379
g6963
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6633
sg6370
g6629
sg6384
g6640
sg6379
g6637
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6616
sg6370
g7010
sg6384
g6623
sg6379
g7017
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6531
sg6370
g6902
sg6384
g6538
sg6379
g6909
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6395
sg6370
g7736
sg6384
g6402
sg6379
g7743
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6582
sg6370
g7509
sg6384
g6589
sg6379
g7516
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6375
sg6370
g8115
sg6384
g6385
sg6379
g8122
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g7111
sg6370
g7107
sg6384
g7118
sg6379
g7115
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6497
sg6370
g7429
sg6384
g6504
sg6379
g7436
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6582
sg6370
g6578
sg6384
g6589
sg6379
g6586
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6565
sg6370
g6846
sg6384
g6572
sg6379
g6853
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g7111
sg6370
g7107
sg6384
g7118
sg6379
g7115
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6633
sg6370
g7550
sg6384
g6640
sg6379
g7557
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6554
sg6370
g6956
sg6384
g6548
sg6379
g6963
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6794
sg6370
g7092
sg6384
g6801
sg6379
g7099
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6486
sg6370
g7375
sg6384
g6480
sg6379
g7382
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6633
sg6370
g7550
sg6384
g6640
sg6379
g7557
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6794
sg6370
g7092
sg6384
g6801
sg6379
g7099
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6429
sg6370
g7038
sg6384
g6436
sg6379
g7045
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6599
sg6370
g6595
sg6384
g6606
sg6379
g6603
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6633
sg6370
g6629
sg6384
g6640
sg6379
g6637
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g7111
sg6370
g7204
sg6384
g7118
sg6379
g7211
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6565
sg6370
g6561
sg6384
g6572
sg6379
g6569
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6375
sg6370
g8115
sg6384
g6385
sg6379
g8122
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6514
sg6370
g7591
sg6384
g6521
sg6379
g7598
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6599
sg6370
g8442
sg6384
g6606
sg6379
g8449
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6794
sg6370
g7092
sg6384
g6801
sg6379
g7099
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6777
sg6370
g7150
sg6384
g6784
sg6379
g7157
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6375
sg6370
g8115
sg6384
g6385
sg6379
g8122
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6599
sg6370
g8442
sg6384
g6606
sg6379
g8449
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6650
sg6370
g6646
sg6384
g6657
sg6379
g6654
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6497
sg6370
g7429
sg6384
g6504
sg6379
g7436
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6565
sg6370
g6561
sg6384
g6572
sg6379
g6569
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6633
sg6370
g6629
sg6384
g6640
sg6379
g6637
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g7111
sg6370
g7204
sg6384
g7118
sg6379
g7211
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6599
sg6370
g8442
sg6384
g6606
sg6379
g8449
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6616
sg6370
g6612
sg6384
g6623
sg6379
g6620
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6497
sg6370
g7429
sg6384
g6504
sg6379
g7436
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6446
sg6370
g6861
sg6384
g6453
sg6379
g6868
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6395
sg6370
g7736
sg6384
g6402
sg6379
g7743
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6565
sg6370
g6561
sg6384
g6572
sg6379
g6569
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6469
sg6370
g6702
sg6384
g6463
sg6379
g6709
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6650
sg6370
g6646
sg6384
g6657
sg6379
g6654
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6514
sg6370
g7591
sg6384
g6521
sg6379
g7598
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g7111
sg6370
g7204
sg6384
g7118
sg6379
g7211
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6650
sg6370
g6646
sg6384
g6657
sg6379
g6654
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6531
sg6370
g6902
sg6384
g6538
sg6379
g6909
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6375
sg6370
g8115
sg6384
g6385
sg6379
g8122
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6582
sg6370
g6578
sg6384
g6589
sg6379
g6586
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6446
sg6370
g6861
sg6384
g6453
sg6379
g6868
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6469
sg6370
g6702
sg6384
g6463
sg6379
g6709
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6375
sg6370
g8115
sg6384
g6385
sg6379
g8122
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6599
sg6370
g6595
sg6384
g6606
sg6379
g6603
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6429
sg6370
g7038
sg6384
g6436
sg6379
g7045
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6616
sg6370
g7010
sg6384
g6623
sg6379
g7017
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6395
sg6370
g7736
sg6384
g6402
sg6379
g7743
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6599
sg6370
g8442
sg6384
g6606
sg6379
g8449
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6497
sg6370
g6493
sg6384
g6504
sg6379
g6501
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6565
sg6370
g6846
sg6384
g6572
sg6379
g6853
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6616
sg6370
g7010
sg6384
g6623
sg6379
g7017
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6514
sg6370
g7591
sg6384
g6521
sg6379
g7598
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6616
sg6370
g7010
sg6384
g6623
sg6379
g7017
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6599
sg6370
g8442
sg6384
g6606
sg6379
g8449
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6486
sg6370
g7375
sg6384
g6480
sg6379
g7382
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6599
sg6370
g6595
sg6384
g6606
sg6379
g6603
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.