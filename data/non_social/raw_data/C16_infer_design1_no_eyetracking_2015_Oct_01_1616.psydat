ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C16_infer_design1_no_eyetracking_2015_Oct_01_1616
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vl
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x19\xcc\xf6#\xaf\x04N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_01_1616
p66
sVparticipant
p67
VC16
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vl
sg15
F0.23352495817744057
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F16.816585546370334
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P4\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F17.699999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x04\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p102
sg21
F1.7
sg69
Vn
sa(dp103
g63
g64
sg20
F6.234
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'&\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V50-polo.png
p109
sg21
F1
sg69
Vn
sa(dp110
g63
g64
sg20
F2.984
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x0e\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p116
sg21
F1.6000000000000001
sg69
Vn
sa(dp117
g63
g64
sg20
F5.2510000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x16\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p123
sg21
F1.5
sg69
Vn
sa(dp124
g63
g64
sg20
F17.716999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x17\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p130
sg21
F1.5
sg69
Vn
sa(dp131
g63
g64
sg20
F12.250999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.039999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x13\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p137
sg21
F1.3999999999999999
sg69
Vn
sa(dp138
g63
g64
sg20
F10.901
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x12\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p144
sg21
F1.8
sg69
Vn
sa(dp145
g63
g64
sg20
F2.6669999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x14\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p151
sg21
F1.3
sg69
Vn
sa(dp152
g63
g64
sg20
F2.867
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x07\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p158
sg21
F1.8999999999999999
sg69
Vn
sa(dp159
g63
g64
sg20
F4.5679999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.079999999999998947
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x03\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V4-corn.png
p165
sg21
F1.3999999999999999
sg69
Vn
sa(dp166
g63
g64
sg20
F2.7839999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\t\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p172
sg21
F1.8
sg69
Vn
sa(dp173
g63
g64
sg20
F2.484
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'"\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p179
sg21
F1.7
sg69
Vn
sa(dp180
g63
g64
sg20
F6.4169999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.019999999999999383
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x1a\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V35-raisins.png
p186
sg21
F1
sg69
Vn
sa(dp187
g63
g64
sg20
F2.6509999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x05\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p193
sg21
F1.3
sg69
Vn
sa(dp194
g63
g64
sg20
F13.4
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.11999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'$\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V48-twix.png
p200
sg21
F1.6000000000000001
sg69
Vn
sa(dp201
g63
g64
sg20
F6.4009999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S' \x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p207
sg21
F1.3
sg69
Vn
sa(dp208
g63
g64
sg20
F8.9169999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.29999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x0c\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V18-mms.png
p214
sg21
F1.6000000000000001
sg69
Vn
sa(dp215
g63
g64
sg20
F2.2669999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\n\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p221
sg21
F1.1000000000000001
sg69
Vn
sa(dp222
g63
g64
sg20
F4.851
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.15999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x0b\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p228
sg21
F1.6000000000000001
sg69
Vn
sa(dp229
g63
g64
sg20
F4.6340000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x00\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p235
sg21
F1.7
sg69
Vn
sa(dp236
g63
g64
sg20
F7.0670000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'!\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V44-crunch.png
p242
sg21
F1
sg69
Vn
sa(dp243
g63
g64
sg20
F2.7170000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x1f\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p249
sg21
F1.1000000000000001
sg69
Vn
sa(dp250
g63
g64
sg20
F10.500999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.49999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'#\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p256
sg21
F1.3
sg69
Vn
sa(dp257
g63
g64
sg20
F3.0840000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x02\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p263
sg21
F1.8
sg69
Vn
sa(dp264
g63
g64
sg20
F3.0339999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x10\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V22-daim.png
p270
sg21
F1.7
sg69
Vn
sa(dp271
g63
g64
sg20
F3.4670000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x01\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p277
sg21
F1.8
sg69
Vn
sa(dp278
g63
g64
sg20
F4.7670000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F0.13999999999999896
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x1b\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p284
sg21
F1.3999999999999999
sg69
Vn
sa(dp285
g63
g64
sg20
F3.6669999999999998
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x06\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V7-olives.png
p291
sg21
F1.1000000000000001
sg69
Vn
sa(dp292
g63
g64
sg20
F2.7010000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\r\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p298
sg21
F1.8
sg69
Vn
sa(dp299
g63
g64
sg20
F2.2669999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x19\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p305
sg21
F1.6000000000000001
sg69
Vn
sa(dp306
g63
g64
sg20
F2.8170000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x1c\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p312
sg21
F1.3
sg69
Vn
sa(dp313
g63
g64
sg20
F2.734
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x18\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p319
sg21
F1.7
sg69
Vn
sa(dp320
g63
g64
sg20
F8.8840000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0.19999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x1d\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V40-sardines.png
p326
sg21
F1.6000000000000001
sg69
Vn
sa(dp327
g63
g64
sg20
F12.034000000000001
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F0.45999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'\x1e\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p333
sg21
F1.3999999999999999
sg69
Vn
sa(dp334
g63
g64
sg20
F6.5170000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.17999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x0f\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p340
sg21
F1
sg69
Vn
sa(dp341
g63
g64
sg20
F4.7670000000000003
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.11999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S"'\x00\x00\x00"
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V51-mars.png
p347
sg21
F1.3
sg69
Vn
sa(dp348
g63
g64
sg20
F4.2009999999999996
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'%\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p354
sg21
F1.3999999999999999
sg69
Vn
sa(dp355
g63
g64
sg20
F3.3010000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.17999999999999872
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'\x11\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p361
sg21
F1.7
sg69
Vn
sa(dp362
g63
g64
sg20
F6.0510000000000002
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.059999999999998721
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x15\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V29-beans.png
p368
sg21
F1.8
sg69
Vn
sa(dp369
g63
g64
sg20
F2.5009999999999999
sg56
Vl
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x08\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p375
sg21
F1.3999999999999999
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vl
sg23
F1.7834931980978581
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'22-daim.png'
p380
sg26
F5.0000000000000018
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vl
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'left'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F3.4833342266429099
sg27
F5.8840000000000003
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p389
sg26
F4.2000000000000002
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vl
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F2.7332672282755084
sg27
F6.3339999999999996
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'29-beans.png'
p398
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vl
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F2.5337728806589439
sg27
F2.0840000000000001
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'49-yorkie.png'
p407
sg26
F2.7999999999999998
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vl
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'right'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F4.1167188588697172
sg27
F1.917
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p416
sg26
F4.5000000000000009
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vl
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F4.516695138598152
sg27
F2.8839999999999999
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p425
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vl
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.3834436478100542
sg27
F1.4339999999999999
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'4-corn.png'
p434
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vl
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.7001865690799605
sg27
F1.8169999999999999
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p443
sg26
F3.2999999999999994
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vl
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F3.0500614674419921
sg27
F2.2839999999999998
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p452
sg26
F3.5000000000000004
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vl
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F3.5834012820341741
sg27
F1.8169999999999999
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p461
sg26
F3.0999999999999988
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vl
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F1.4834476962241752
sg27
F3.7839999999999998
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'38-maltesers.png'
p470
sg26
F3.2999999999999998
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vl
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.73311869146346
sg27
F1.518
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p479
sg26
F4.9000000000000004
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vl
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'right'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.3667408115288708
sg27
F2.1669999999999998
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p488
sg26
F3.2999999999999998
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vl
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'left'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F2.7166838486627967
sg27
F1.4179999999999999
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'35-raisins.png'
p497
sg26
F3.2999999999999994
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vl
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'left'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F2.0500426508770033
sg27
F1.6339999999999999
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p506
sg26
F4.7000000000000011
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vl
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.2000383173653972
sg27
F2.0670000000000002
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p515
sg26
F3.4999999999999991
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vl
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F3.5166498077851429
sg27
F2.0670000000000002
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p524
sg26
F4.9000000000000021
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vl
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'right'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.3334232346933277
sg27
F2.6339999999999999
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'18-mms.png'
p533
sg26
F3.9000000000000008
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vl
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'left'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.1000699063843058
sg27
F1.8340000000000001
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p542
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vl
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.53331729173442
sg27
F3.4510000000000001
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p551
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vl
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F2.5000225228577619
sg27
F2.1339999999999999
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'5-pineapple.png'
p560
sg26
F5.0000000000000009
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vl
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F3.5167980594997061
sg27
F1.601
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'7-olives.png'
p569
sg26
F4.6000000000000014
sg28
F3
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vl
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'right'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F2.5166997001870186
sg27
F1.6339999999999999
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'50-polo.png'
p578
sg26
F5.0000000000000009
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vl
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'right'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F0.98338240844896063
sg27
F0.85099999999999998
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p587
sg26
F3.6000000000000005
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vl
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F3.2166738701780559
sg27
F1.9339999999999999
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p596
sg26
F4.5
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vl
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.0667189729138045
sg27
F1.5169999999999999
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p605
sg26
F4.7000000000000011
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vl
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'left'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F2.2501573748959345
sg27
F1.734
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'31-hobnobs.png'
p614
sg26
F4.0000000000000009
sg28
F3
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vl
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'left'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F2.2833805838163244
sg27
F1.2170000000000001
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'51-mars.png'
p623
sg26
F3.7000000000000002
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vl
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.3166978755543823
sg27
F0.88400000000000001
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p632
sg26
F3.2000000000000002
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vl
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.16646842751652
sg27
F0.96799999999999997
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p641
sg26
F4.9000000000000004
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vl
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.4500177902045834
sg27
F2.0510000000000002
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'25-kitkat.png'
p650
sg26
F5.0999999999999996
sg28
F4.2999999999999998
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vl
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'right'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F3.9500594147248194
sg27
F1.167
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p659
sg26
F4.6000000000000005
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vl
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F0.75006443247548304
sg27
F1.8839999999999999
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p668
sg26
F4.4000000000000004
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vl
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'right'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.7166770062722208
sg27
F1.4510000000000001
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'48-twix.png'
p677
sg26
F5.6999999999999984
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vl
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.1167222800650052
sg27
F1.101
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'44-crunch.png'
p686
sg26
F4.5000000000000018
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vl
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F3.6167333989433246
sg27
F1.984
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'40-sardines.png'
p695
sg26
F5.5999999999999988
sg28
F4
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vl
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.7667729707463877
sg27
F1.2170000000000001
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p704
sg26
F4.3000000000000007
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vl
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.6002127412102709
sg27
F1.3009999999999999
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p713
sg26
F5.2000000000000002
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vl
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.0833984310411324
sg27
F1.2509999999999999
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'46-pistachios.png'
p722
sg26
F5.5999999999999988
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vl
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.0500626078392088
sg27
F1.401
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p731
sg26
F4.7000000000000011
sg28
F3
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vl
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F0.98341205879478366
sg27
F0.98399999999999999
sg69
Vn
sa(dp738
g63
g64
sg56
Vl
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F311.84333614251591
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vl
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F3.8667721724705189
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'53-cheestrings.png'
p743
sg82
S'47-picnic.png'
p744
sg56
Vl
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'47-picnic.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x01\x10\x1f5\x04\xc6\xa8'
tRp753
sa(dp754
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p755
sg82
S'37-nakd_cashew_cookie.png'
p756
sg56
Vl
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'9-yu_mango_pieces.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x01\x10 \x08\x0c\xbd\xb8'
tRp764
sa(dp765
g63
g64
sg81
S'11-snickers.png'
p766
sg82
S'11-snickers.png'
p767
sg56
Vl
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'54-frubes_yogurt.png'
p771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x01\x10 \x12\x04*h'
tRp775
sa(dp776
g63
g64
sg81
S'52-aero_mousse.png'
p777
sg82
S'52-aero_mousse.png'
p778
sg56
Vl
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'14-discos_salt_vinegar.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x01\x10 \x19\x0b\x9c\xa8'
tRp786
sa(dp787
g63
g64
sg81
g755
sg82
S'9-yu_mango_pieces.png'
p788
sg56
Vl
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\n\x01\x10  \t\xc7\xe8'
tRp795
sa(dp796
g63
g64
sg81
S'12-topic.png'
p797
sg82
S'39-mackerel.png'
p798
sg56
Vl
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'39-mackerel.png'
p802
sg33
g802
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S"\x07\xdf\n\x01\x10 '\x02\xb3h"
tRp806
sa(dp807
g63
g64
sg81
S'15-walnut_whip.png'
p808
sg82
S'28-maple_pecan.png'
p809
sg56
Vl
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p812
I0
sg83
S'28-maple_pecan.png'
p813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x01\x10 -\x07\xcc\x18'
tRp817
sa(dp818
g63
g64
sg81
g743
sg82
S'53-cheestrings.png'
p819
sg56
Vl
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p822
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x01\x10 3\x03\x99\xe0'
tRp826
sa(dp827
g63
g64
sg81
g808
sg82
S'15-walnut_whip.png'
p828
sg56
Vl
sS'practice_loop.thisN'
p829
I8
sS'practice_loop.thisTrialN'
p830
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p831
I0
sg83
g813
sg33
g808
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p832
sS'practice_loop.thisIndex'
p833
g59
(g98
S'\x08\x00\x00\x00'
tRp834
sg34
g752
(S'\x07\xdf\n\x01\x10 9\x07\xfa\xf8'
tRp835
sa(dp836
g63
g64
sg81
g797
sg82
S'12-topic.png'
p837
sg56
Vl
sS'practice_loop.thisN'
p838
I9
sS'practice_loop.thisTrialN'
p839
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p840
I0
sg83
g802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p841
sS'practice_loop.thisIndex'
p842
g59
(g98
S'\t\x00\x00\x00'
tRp843
sg34
g752
(S'\x07\xdf\n\x01\x10!\x04\x06\xd9\xe8'
tRp844
sa(dp845
g63
g64
sg81
g777
sg82
S'14-discos_salt_vinegar.png'
p846
sg56
Vl
sS'practice_loop.thisN'
p847
I10
sS'practice_loop.thisTrialN'
p848
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p849
I0
sg83
g782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p850
sS'practice_loop.thisIndex'
p851
g59
(g98
S'\n\x00\x00\x00'
tRp852
sg34
g752
(S'\x07\xdf\n\x01\x10!\x0c\r\x90\xa8'
tRp853
sa(dp854
g63
g64
sg81
S'32-hovis_crackers.png'
p855
sg82
S'32-hovis_crackers.png'
p856
sg56
Vl
sS'practice_loop.thisN'
p857
I11
sS'practice_loop.thisTrialN'
p858
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p859
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p860
sg33
g855
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x01\x10!\x13\n\x0e8'
tRp864
sa(dp865
g63
g64
sg81
g766
sg82
S'54-frubes_yogurt.png'
p866
sg56
Vl
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x01\x10!\x1b\x06\x87\xe0'
tRp873
sa(dp874
g63
g64
sg81
g855
sg82
S'24-food_doctor_apple_walnut_bar.png'
p875
sg56
Vl
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g860
sg33
g855
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x01\x10!!\x0f.\xb8'
tRp882
sa(dp883
g63
g64
sg56
Vl
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F35.549255776400969
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vl
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'38-maltesers.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'left'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'38-maltesers.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'6-sour_patch_kids.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'6-sour_patch_kids.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.8331304375569744
sg34
g752
(S'\x07\xdf\n\x01\x10"\x18\tn\x10'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'16-skips_prawn.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'16-skips_prawn.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'42-mrkipling_lemon_slices.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
S'42-mrkipling_lemon_slices.png'
p925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p926
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F2.0499599720351398
sg34
g752
(S'\x07\xdf\n\x01\x10"\x1f\x07Z\xd0'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'6-sour_patch_kids.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p936
g59
(g98
S'\x02\x00\x00\x00'
tRp937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p938
I0
sg903
S'38-maltesers.png'
p939
sS'block_loop.thisRepN'
p940
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p941
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p942
Nsg69
Vn
sS'block_loop.thisTrialN'
p943
I0
sg39
F1.1831812422824441
sg34
g752
(S'\x07\xdf\n\x01\x10"&\x08\x9b '
tRp944
sa(dp945
S'trial_loop.thisTrialN'
p946
I3
sg894
S'1-treacle_cookies.png'
p947
sS'block_loop.thisIndex'
p948
g888
sg38
S'left'
p949
sg58
g62
sS'trial_loop.thisN'
p950
I3
sg33
S'1-treacle_cookies.png'
p951
sg63
g64
sS'trial_loop.thisIndex'
p952
g59
(g98
S'\x03\x00\x00\x00'
tRp953
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p954
I0
sg903
S'21-nakd_banana_crunch.png'
p955
sS'block_loop.thisRepN'
p956
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p957
I0
sg908
S'21-nakd_banana_crunch.png'
p958
sg55
g11
sS'block_loop.thisTrial'
p959
Nsg69
Vn
sS'block_loop.thisTrialN'
p960
I0
sg39
F1.7667478819967073
sg34
g752
(S'\x07\xdf\n\x01\x10",\x0c\x06 '
tRp961
sa(dp962
S'trial_loop.thisTrialN'
p963
I4
sg894
S'49-yorkie.png'
p964
sS'block_loop.thisIndex'
p965
g888
sg38
S'right'
p966
sg58
g62
sS'trial_loop.thisN'
p967
I4
sg33
S'35-raisins.png'
p968
sg63
g64
sS'trial_loop.thisIndex'
p969
g59
(g98
S'\x04\x00\x00\x00'
tRp970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p971
I0
sg903
S'35-raisins.png'
p972
sS'block_loop.thisRepN'
p973
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p974
I0
sg908
S'49-yorkie.png'
p975
sg55
g11
sS'block_loop.thisTrial'
p976
Nsg69
Vn
sS'block_loop.thisTrialN'
p977
I0
sg39
F1.5002041312072834
sg34
g752
(S'\x07\xdf\n\x01\x10"3\t\x00\xb0'
tRp978
sa(dp979
S'trial_loop.thisTrialN'
p980
I5
sg894
S'7-olives.png'
p981
sS'block_loop.thisIndex'
p982
g888
sg38
S'right'
p983
sg58
g62
sS'trial_loop.thisN'
p984
I5
sg33
S'7-olives.png'
p985
sg63
g64
sS'trial_loop.thisIndex'
p986
g59
(g98
S'\x05\x00\x00\x00'
tRp987
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p988
I0
sg903
S'22-daim.png'
p989
sS'block_loop.thisRepN'
p990
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p991
I0
sg908
S'22-daim.png'
p992
sg55
g11
sS'block_loop.thisTrial'
p993
Nsg69
Vn
sS'block_loop.thisTrialN'
p994
I0
sg39
F1.5334099490610242
sg34
g752
(S'\x07\xdf\n\x01\x10":\x01\xb1\x98'
tRp995
sa(dp996
S'trial_loop.thisTrialN'
p997
I6
sg894
S'13-mccoys_steak_crisps.png'
p998
sS'block_loop.thisIndex'
p999
g888
sg38
S'left'
p1000
sg58
g62
sS'trial_loop.thisN'
p1001
I6
sg33
S'3-ellas_strawberries_apples.png'
p1002
sg63
g64
sS'trial_loop.thisIndex'
p1003
g59
(g98
S'\x06\x00\x00\x00'
tRp1004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1005
I0
sg903
S'3-ellas_strawberries_apples.png'
p1006
sS'block_loop.thisRepN'
p1007
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1008
I0
sg908
S'13-mccoys_steak_crisps.png'
p1009
sg55
g11
sS'block_loop.thisTrial'
p1010
Nsg69
Vn
sS'block_loop.thisTrialN'
p1011
I0
sg39
F1.3334246601916675
sg34
g752
(S'\x07\xdf\n\x01\x10#\x04\nXp'
tRp1012
sa(dp1013
S'trial_loop.thisTrialN'
p1014
I7
sg894
S'30-spaghetti_hoops.png'
p1015
sS'block_loop.thisIndex'
p1016
g888
sg38
S'right'
p1017
sg58
g62
sS'trial_loop.thisN'
p1018
I7
sg33
S'19-caramello_redo.png'
p1019
sg63
g64
sS'trial_loop.thisIndex'
p1020
g59
(g98
S'\x07\x00\x00\x00'
tRp1021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1022
I0
sg903
S'19-caramello_redo.png'
p1023
sS'block_loop.thisRepN'
p1024
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1025
I0
sg908
S'30-spaghetti_hoops.png'
p1026
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vn
sS'block_loop.thisTrialN'
p1028
I0
sg39
F1.5667566060401441
sg34
g752
(S'\x07\xdf\n\x01\x10#\x0b\x00\xa7\xf8'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'36-fig_rolls.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'left'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
S'36-fig_rolls.png'
p1036
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1040
sS'block_loop.thisRepN'
p1041
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1042
I0
sg908
S'34-hula_hoops_bbq_beef_redo.png'
p1043
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vn
sS'block_loop.thisTrialN'
p1045
I0
sg39
F1.6000838762593048
sg34
g752
(S'\x07\xdf\n\x01\x10#\x11\t\xcb\xd0'
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
S'20-fruit_pastilles.png'
p1049
sS'block_loop.thisIndex'
p1050
g888
sg38
S'right'
p1051
sg58
g62
sS'trial_loop.thisN'
p1052
I9
sg33
S'20-fruit_pastilles.png'
p1053
sg63
g64
sS'trial_loop.thisIndex'
p1054
g59
(g98
S'\t\x00\x00\x00'
tRp1055
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1056
I0
sg903
S'2-steamed_puddings.png'
p1057
sS'block_loop.thisRepN'
p1058
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1059
I0
sg908
S'2-steamed_puddings.png'
p1060
sg55
g11
sS'block_loop.thisTrial'
p1061
Nsg69
Vn
sS'block_loop.thisTrialN'
p1062
I0
sg39
F2.3168461272689456
sg34
g752
(S'\x07\xdf\n\x01\x10#\x18\x04e\x00'
tRp1063
sa(dp1064
S'trial_loop.thisTrialN'
p1065
I10
sg894
S'3-ellas_strawberries_apples.png'
p1066
sS'block_loop.thisIndex'
p1067
g888
sg38
S'left'
p1068
sg58
g62
sS'trial_loop.thisN'
p1069
I10
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p1070
g59
(g98
S'\n\x00\x00\x00'
tRp1071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1072
I0
sg903
S'13-mccoys_steak_crisps.png'
p1073
sS'block_loop.thisRepN'
p1074
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1075
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p1076
Nsg69
Vn
sS'block_loop.thisTrialN'
p1077
I0
sg39
F0.98357627607765608
sg34
g752
(S'\x07\xdf\n\x01\x10#\x1f\t\xb0x'
tRp1078
sa(dp1079
S'trial_loop.thisTrialN'
p1080
I11
sg894
S'51-mars.png'
p1081
sS'block_loop.thisIndex'
p1082
g888
sg38
S'left'
p1083
sg58
g62
sS'trial_loop.thisN'
p1084
I11
sg33
S'51-mars.png'
p1085
sg63
g64
sS'trial_loop.thisIndex'
p1086
g59
(g98
S'\x0b\x00\x00\x00'
tRp1087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1088
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1089
sS'block_loop.thisRepN'
p1090
I0
sg906
S'27-hartleys_raspberries_jelly.png'
p1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1092
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p1093
Nsg69
Vn
sS'block_loop.thisTrialN'
p1094
I0
sg39
F1.2334325859555975
sg34
g752
(S'\x07\xdf\n\x01\x10#%\t\xc7\xe8'
tRp1095
sa(dp1096
S'trial_loop.thisTrialN'
p1097
I12
sg894
S'46-pistachios.png'
p1098
sS'block_loop.thisIndex'
p1099
g888
sg38
S'left'
p1100
sg58
g62
sS'trial_loop.thisN'
p1101
I12
sg33
S'46-pistachios.png'
p1102
sg63
g64
sS'trial_loop.thisIndex'
p1103
g59
(g98
S'\x0c\x00\x00\x00'
tRp1104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1105
I0
sg903
S'29-beans.png'
p1106
sS'block_loop.thisRepN'
p1107
I0
sg906
S'29-beans.png'
p1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1109
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p1110
Nsg69
Vn
sS'block_loop.thisTrialN'
p1111
I0
sg39
F1.9334272831038106
sg34
g752
(S'\x07\xdf\n\x01\x10#+\r\xea\x80'
tRp1112
sa(dp1113
S'trial_loop.thisTrialN'
p1114
I13
sg894
g1049
sS'block_loop.thisIndex'
p1115
g888
sg38
S'left'
p1116
sg58
g62
sS'trial_loop.thisN'
p1117
I13
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1118
g59
(g98
S'\r\x00\x00\x00'
tRp1119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1120
I0
sg903
g1057
sS'block_loop.thisRepN'
p1121
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1122
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1123
Nsg69
Vn
sS'block_loop.thisTrialN'
p1124
I0
sg39
F2.1500697923474945
sg34
g752
(S'\x07\xdf\n\x01\x10#2\r\x84\xf0'
tRp1125
sa(dp1126
S'trial_loop.thisTrialN'
p1127
I14
sg894
S'8-liquorice_catherine_wheels.png'
p1128
sS'block_loop.thisIndex'
p1129
g888
sg38
S'right'
p1130
sg58
g62
sS'trial_loop.thisN'
p1131
I14
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1132
sg63
g64
sS'trial_loop.thisIndex'
p1133
g59
(g98
S'\x0e\x00\x00\x00'
tRp1134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1135
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1136
sS'block_loop.thisRepN'
p1137
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1138
I0
sg908
S'8-liquorice_catherine_wheels.png'
p1139
sg55
g11
sS'block_loop.thisTrial'
p1140
Nsg69
Vn
sS'block_loop.thisTrialN'
p1141
I0
sg39
F1.5002109735905833
sg34
g752
(S'\x07\xdf\n\x01\x10#:\x00\xf20'
tRp1142
sa(dp1143
S'trial_loop.thisTrialN'
p1144
I15
sg894
S'26-walkers_smoky_bacon.png'
p1145
sS'block_loop.thisIndex'
p1146
g888
sg38
S'right'
p1147
sg58
g62
sS'trial_loop.thisN'
p1148
I15
sg33
S'44-crunch.png'
p1149
sg63
g64
sS'trial_loop.thisIndex'
p1150
g59
(g98
S'\x0f\x00\x00\x00'
tRp1151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1152
I0
sg903
S'44-crunch.png'
p1153
sS'block_loop.thisRepN'
p1154
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1155
I0
sg908
S'26-walkers_smoky_bacon.png'
p1156
sg55
g11
sS'block_loop.thisTrial'
p1157
Nsg69
Vn
sS'block_loop.thisTrialN'
p1158
I0
sg39
F3.2500718450573913
sg34
g752
(S'\x07\xdf\n\x01\x10$\x04\t\x1f\xf0'
tRp1159
sa(dp1160
S'trial_loop.thisTrialN'
p1161
I16
sg894
S'35-raisins.png'
p1162
sS'block_loop.thisIndex'
p1163
g888
sg38
S'left'
p1164
sg58
g62
sS'trial_loop.thisN'
p1165
I16
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p1166
g59
(g98
S'\x10\x00\x00\x00'
tRp1167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1168
I0
sg903
S'49-yorkie.png'
p1169
sS'block_loop.thisRepN'
p1170
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1171
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p1172
Nsg69
Vn
sS'block_loop.thisTrialN'
p1173
I0
sg39
F0.96678163776959991
sg34
g752
(S'\x07\xdf\n\x01\x10$\x0c\ruP'
tRp1174
sa(dp1175
S'trial_loop.thisTrialN'
p1176
I17
sg894
S'18-mms.png'
p1177
sS'block_loop.thisIndex'
p1178
g888
sg38
S'left'
p1179
sg58
g62
sS'trial_loop.thisN'
p1180
I17
sg33
S'43-mrporky_pork_crackles_redo.png'
p1181
sg63
g64
sS'trial_loop.thisIndex'
p1182
g59
(g98
S'\x11\x00\x00\x00'
tRp1183
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1184
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1185
sS'block_loop.thisRepN'
p1186
I0
sg906
S'18-mms.png'
p1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1188
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p1189
Nsg69
Vn
sS'block_loop.thisTrialN'
p1190
I0
sg39
F2.0500874114914041
sg34
g752
(S'\x07\xdf\n\x01\x10$\x12\r\x8c\xc0'
tRp1191
sa(dp1192
S'trial_loop.thisTrialN'
p1193
I18
sg894
S'19-caramello_redo.png'
p1194
sS'block_loop.thisIndex'
p1195
g888
sg38
S'left'
p1196
sg58
g62
sS'trial_loop.thisN'
p1197
I18
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p1198
g59
(g98
S'\x12\x00\x00\x00'
tRp1199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1200
I0
sg903
S'30-spaghetti_hoops.png'
p1201
sS'block_loop.thisRepN'
p1202
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1203
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p1204
Nsg69
Vn
sS'block_loop.thisTrialN'
p1205
I0
sg39
F1.4667514172324445
sg34
g752
(S'\x07\xdf\n\x01\x10$\x19\x0e\xcd\x10'
tRp1206
sa(dp1207
S'trial_loop.thisTrialN'
p1208
I19
sg894
S'40-sardines.png'
p1209
sS'block_loop.thisIndex'
p1210
g888
sg38
S'right'
p1211
sg58
g62
sS'trial_loop.thisN'
p1212
I19
sg33
S'5-pineapple.png'
p1213
sg63
g64
sS'trial_loop.thisIndex'
p1214
g59
(g98
S'\x13\x00\x00\x00'
tRp1215
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1216
I0
sg903
S'5-pineapple.png'
p1217
sS'block_loop.thisRepN'
p1218
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1219
I0
sg908
S'40-sardines.png'
p1220
sg55
g11
sS'block_loop.thisTrial'
p1221
Nsg69
Vn
sS'block_loop.thisTrialN'
p1222
I0
sg39
F2.3168618077361316
sg34
g752
(S'\x07\xdf\n\x01\x10$ \x07\x04\xe0'
tRp1223
sa(dp1224
S'trial_loop.thisTrialN'
p1225
I20
sg894
S'42-mrkipling_lemon_slices.png'
p1226
sS'block_loop.thisIndex'
p1227
g888
sg38
S'right'
p1228
sg58
g62
sS'trial_loop.thisN'
p1229
I20
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1230
g59
(g98
S'\x14\x00\x00\x00'
tRp1231
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1232
I0
sg903
S'16-skips_prawn.png'
p1233
sS'block_loop.thisRepN'
p1234
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1235
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1236
Nsg69
Vn
sS'block_loop.thisTrialN'
p1237
I0
sg39
F1.7499754814452899
sg34
g752
(S"\x07\xdf\n\x01\x10$'\x0cPX"
tRp1238
sa(dp1239
S'trial_loop.thisTrialN'
p1240
I21
sg894
g1177
sS'block_loop.thisIndex'
p1241
g888
sg38
S'right'
p1242
sg58
g62
sS'trial_loop.thisN'
p1243
I21
sg33
g1187
sg63
g64
sS'trial_loop.thisIndex'
p1244
g59
(g98
S'\x15\x00\x00\x00'
tRp1245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1246
I0
sg903
g1185
sS'block_loop.thisRepN'
p1247
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1248
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p1249
Nsg69
Vn
sS'block_loop.thisTrialN'
p1250
I0
sg39
F1.4001935255037097
sg34
g752
(S'\x07\xdf\n\x01\x10$.\t\x0ch'
tRp1251
sa(dp1252
S'trial_loop.thisTrialN'
p1253
I22
sg894
g964
sS'block_loop.thisIndex'
p1254
g888
sg38
S'right'
p1255
sg58
g62
sS'trial_loop.thisN'
p1256
I22
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p1257
g59
(g98
S'\x16\x00\x00\x00'
tRp1258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1259
I0
sg903
g972
sS'block_loop.thisRepN'
p1260
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1261
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p1262
Nsg69
Vn
sS'block_loop.thisTrialN'
p1263
I0
sg39
F1.266776962140284
sg34
g752
(S'\x07\xdf\n\x01\x10$5\x00\x8c\xa0'
tRp1264
sa(dp1265
S'trial_loop.thisTrialN'
p1266
I23
sg894
g932
sS'block_loop.thisIndex'
p1267
g888
sg38
S'right'
p1268
sg58
g62
sS'trial_loop.thisN'
p1269
I23
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1270
g59
(g98
S'\x17\x00\x00\x00'
tRp1271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1272
I0
sg903
g939
sS'block_loop.thisRepN'
p1273
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1274
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1275
Nsg69
Vn
sS'block_loop.thisTrialN'
p1276
I0
sg39
F1.1331645354548527
sg34
g752
(S'\x07\xdf\n\x01\x10$;\x05,8'
tRp1277
sa(dp1278
S'trial_loop.thisTrialN'
p1279
I24
sg894
S'41-peanuts_redo.png'
p1280
sS'block_loop.thisIndex'
p1281
g888
sg38
S'right'
p1282
sg58
g62
sS'trial_loop.thisN'
p1283
I24
sg33
S'41-peanuts_redo.png'
p1284
sg63
g64
sS'trial_loop.thisIndex'
p1285
g59
(g98
S'\x18\x00\x00\x00'
tRp1286
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1287
I0
sg903
S'45-chewy_nougat_redo.png'
p1288
sS'block_loop.thisRepN'
p1289
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1290
I0
sg908
S'45-chewy_nougat_redo.png'
p1291
sg55
g11
sS'block_loop.thisTrial'
p1292
Nsg69
Vn
sS'block_loop.thisTrialN'
p1293
I0
sg39
F3.1505182537766814
sg34
g752
(S'\x07\xdf\n\x01\x10%\x05\x07\xa5\x08'
tRp1294
sa(dp1295
S'trial_loop.thisTrialN'
p1296
I25
sg894
g1226
sS'block_loop.thisIndex'
p1297
g888
sg38
S'right'
p1298
sg58
g62
sS'trial_loop.thisN'
p1299
I25
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1300
g59
(g98
S'\x19\x00\x00\x00'
tRp1301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1302
I0
sg903
g1233
sS'block_loop.thisRepN'
p1303
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1304
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1305
Nsg69
Vn
sS'block_loop.thisTrialN'
p1306
I0
sg39
F1.3832976768972003
sg34
g752
(S'\x07\xdf\n\x01\x10%\r\nL\xb8'
tRp1307
sa(dp1308
S'trial_loop.thisTrialN'
p1309
I26
sg894
S'44-crunch.png'
p1310
sS'block_loop.thisIndex'
p1311
g888
sg38
S'left'
p1312
sg58
g62
sS'trial_loop.thisN'
p1313
I26
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p1314
g59
(g98
S'\x1a\x00\x00\x00'
tRp1315
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1316
I0
sg903
S'26-walkers_smoky_bacon.png'
p1317
sS'block_loop.thisRepN'
p1318
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1319
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p1320
Nsg69
Vn
sS'block_loop.thisTrialN'
p1321
I0
sg39
F2.5167493074914091
sg34
g752
(S'\x07\xdf\n\x01\x10%\x14\x01\x8ep'
tRp1322
sa(dp1323
S'trial_loop.thisTrialN'
p1324
I27
sg894
S'22-daim.png'
p1325
sS'block_loop.thisIndex'
p1326
g888
sg38
S'right'
p1327
sg58
g62
sS'trial_loop.thisN'
p1328
I27
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p1329
g59
(g98
S'\x1b\x00\x00\x00'
tRp1330
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1331
I0
sg903
S'7-olives.png'
p1332
sS'block_loop.thisRepN'
p1333
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1334
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p1335
Nsg69
Vn
sS'block_loop.thisTrialN'
p1336
I0
sg39
F1.6667666415378335
sg34
g752
(S'\x07\xdf\n\x01\x10%\x1b\t\xf6\xc8'
tRp1337
sa(dp1338
S'trial_loop.thisTrialN'
p1339
I28
sg894
S'48-twix.png'
p1340
sS'block_loop.thisIndex'
p1341
g888
sg38
S'left'
p1342
sg58
g62
sS'trial_loop.thisN'
p1343
I28
sg33
S'50-polo.png'
p1344
sg63
g64
sS'trial_loop.thisIndex'
p1345
g59
(g98
S'\x1c\x00\x00\x00'
tRp1346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1347
I0
sg903
S'50-polo.png'
p1348
sS'block_loop.thisRepN'
p1349
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1350
I0
sg908
S'48-twix.png'
p1351
sg55
g11
sS'block_loop.thisTrial'
p1352
Nsg69
Vn
sS'block_loop.thisTrialN'
p1353
I0
sg39
F1.9834063568050624
sg34
g752
(S'\x07\xdf\n\x01\x10%"\x05C\xa8'
tRp1354
sa(dp1355
S'trial_loop.thisTrialN'
p1356
I29
sg894
S'4-corn.png'
p1357
sS'block_loop.thisIndex'
p1358
g888
sg38
S'right'
p1359
sg58
g62
sS'trial_loop.thisN'
p1360
I29
sg33
S'10-bounty_redo.png'
p1361
sg63
g64
sS'trial_loop.thisIndex'
p1362
g59
(g98
S'\x1d\x00\x00\x00'
tRp1363
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1364
I0
sg903
S'10-bounty_redo.png'
p1365
sS'block_loop.thisRepN'
p1366
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1367
I0
sg908
S'4-corn.png'
p1368
sg55
g11
sS'block_loop.thisTrial'
p1369
Nsg69
Vn
sS'block_loop.thisTrialN'
p1370
I0
sg39
F2.1835447440753342
sg34
g752
(S'\x07\xdf\n\x01\x10%)\x05\x91\xc8'
tRp1371
sa(dp1372
S'trial_loop.thisTrialN'
p1373
I30
sg894
S'25-kitkat.png'
p1374
sS'block_loop.thisIndex'
p1375
g888
sg38
S'right'
p1376
sg58
g62
sS'trial_loop.thisN'
p1377
I30
sg33
S'25-kitkat.png'
p1378
sg63
g64
sS'trial_loop.thisIndex'
p1379
g59
(g98
S'\x1e\x00\x00\x00'
tRp1380
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1381
I0
sg903
S'31-hobnobs.png'
p1382
sS'block_loop.thisRepN'
p1383
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1384
I0
sg908
S'31-hobnobs.png'
p1385
sg55
g11
sS'block_loop.thisTrial'
p1386
Nsg69
Vn
sS'block_loop.thisTrialN'
p1387
I0
sg39
F2.0500871263902809
sg34
g752
(S'\x07\xdf\n\x01\x10%0\x08\xf8\xe0'
tRp1388
sa(dp1389
S'trial_loop.thisTrialN'
p1390
I31
sg894
g947
sS'block_loop.thisIndex'
p1391
g888
sg38
S'left'
p1392
sg58
g62
sS'trial_loop.thisN'
p1393
I31
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p1394
g59
(g98
S'\x1f\x00\x00\x00'
tRp1395
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1396
I0
sg903
g955
sS'block_loop.thisRepN'
p1397
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1398
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p1399
Nsg69
Vn
sS'block_loop.thisTrialN'
p1400
I0
sg39
F1.4834388581439271
sg34
g752
(S'\x07\xdf\n\x01\x10%7\n90'
tRp1401
sa(dp1402
S'trial_loop.thisTrialN'
p1403
I32
sg894
g1177
sS'block_loop.thisIndex'
p1404
g888
sg38
S'right'
p1405
sg58
g62
sS'trial_loop.thisN'
p1406
I32
sg33
g1187
sg63
g64
sS'trial_loop.thisIndex'
p1407
g59
(g98
S' \x00\x00\x00'
tRp1408
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1409
I0
sg903
g1185
sS'block_loop.thisRepN'
p1410
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1411
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p1412
Nsg69
Vn
sS'block_loop.thisTrialN'
p1413
I0
sg39
F1.2834404546993028
sg34
g752
(S'\x07\xdf\n\x01\x10&\x02\x02\xaf\x80'
tRp1414
sa(dp1415
S'trial_loop.thisTrialN'
p1416
I33
sg894
g1145
sS'block_loop.thisIndex'
p1417
g888
sg38
S'right'
p1418
sg58
g62
sS'trial_loop.thisN'
p1419
I33
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p1420
g59
(g98
S'!\x00\x00\x00'
tRp1421
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1422
I0
sg903
g1153
sS'block_loop.thisRepN'
p1423
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1424
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p1425
Nsg69
Vn
sS'block_loop.thisTrialN'
p1426
I0
sg39
F1.8667473688183236
sg34
g752
(S'\x07\xdf\n\x01\x10&\x08\x07\x89\xb0'
tRp1427
sa(dp1428
S'trial_loop.thisTrialN'
p1429
I34
sg894
S'2-steamed_puddings.png'
p1430
sS'block_loop.thisIndex'
p1431
g888
sg38
S'right'
p1432
sg58
g62
sS'trial_loop.thisN'
p1433
I34
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1434
g59
(g98
S'"\x00\x00\x00'
tRp1435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1436
I0
sg903
S'20-fruit_pastilles.png'
p1437
sS'block_loop.thisRepN'
p1438
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1439
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1440
Nsg69
Vn
sS'block_loop.thisTrialN'
p1441
I0
sg39
F1.4668691633014532
sg34
g752
(S'\x07\xdf\n\x01\x10&\x0f\x06* '
tRp1442
sa(dp1443
S'trial_loop.thisTrialN'
p1444
I35
sg894
g1340
sS'block_loop.thisIndex'
p1445
g888
sg38
S'right'
p1446
sg58
g62
sS'trial_loop.thisN'
p1447
I35
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p1448
g59
(g98
S'#\x00\x00\x00'
tRp1449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1450
I0
sg903
g1348
sS'block_loop.thisRepN'
p1451
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1452
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p1453
Nsg69
Vn
sS'block_loop.thisTrialN'
p1454
I0
sg39
F1.2501091930898838
sg34
g752
(S'\x07\xdf\n\x01\x10&\x15\r\xa40'
tRp1455
sa(dp1456
S'trial_loop.thisTrialN'
p1457
I36
sg894
g1081
sS'block_loop.thisIndex'
p1458
g888
sg38
S'left'
p1459
sg58
g62
sS'trial_loop.thisN'
p1460
I36
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p1461
g59
(g98
S'$\x00\x00\x00'
tRp1462
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1463
I0
sg903
g1089
sS'block_loop.thisRepN'
p1464
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1465
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p1466
Nsg69
Vn
sS'block_loop.thisTrialN'
p1467
I0
sg39
F1.1667660713392252
sg34
g752
(S'\x07\xdf\n\x01\x10&\x1c\x02\xc3\x08'
tRp1468
sa(dp1469
S'trial_loop.thisTrialN'
p1470
I37
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1471
sS'block_loop.thisIndex'
p1472
g888
sg38
S'left'
p1473
sg58
g62
sS'trial_loop.thisN'
p1474
I37
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1475
g59
(g98
S'%\x00\x00\x00'
tRp1476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1477
I0
sg903
S'36-fig_rolls.png'
p1478
sS'block_loop.thisRepN'
p1479
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1480
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1481
Nsg69
Vn
sS'block_loop.thisTrialN'
p1482
I0
sg39
F1.6833454595616786
sg34
g752
(S'\x07\xdf\n\x01\x10&"\x05\xb4\xf0'
tRp1483
sa(dp1484
S'trial_loop.thisTrialN'
p1485
I38
sg894
g1049
sS'block_loop.thisIndex'
p1486
g888
sg38
S'left'
p1487
sg58
g62
sS'trial_loop.thisN'
p1488
I38
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1489
g59
(g98
S'&\x00\x00\x00'
tRp1490
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1491
I0
sg903
g1057
sS'block_loop.thisRepN'
p1492
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1493
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1494
Nsg69
Vn
sS'block_loop.thisTrialN'
p1495
I0
sg39
F1.1334413670192589
sg34
g752
(S'\x07\xdf\n\x01\x10&)\x01~\xd0'
tRp1496
sa(dp1497
S'trial_loop.thisTrialN'
p1498
I39
sg894
S'33-ambrosia_rice.png'
p1499
sS'block_loop.thisIndex'
p1500
g888
sg38
S'right'
p1501
sg58
g62
sS'trial_loop.thisN'
p1502
I39
sg33
S'33-ambrosia_rice.png'
p1503
sg63
g64
sS'trial_loop.thisIndex'
p1504
g59
(g98
S"'\x00\x00\x00"
tRp1505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1506
I0
sg903
S'23-crunchie_redo.png'
p1507
sS'block_loop.thisRepN'
p1508
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1509
I0
sg908
S'23-crunchie_redo.png'
p1510
sg55
g11
sS'block_loop.thisTrial'
p1511
Nsg69
Vn
sS'block_loop.thisTrialN'
p1512
I0
sg39
F1.866788138038828
sg34
g752
(S'\x07\xdf\n\x01\x10&/\x03\xf7\xa0'
tRp1513
sa(dp1514
S'trial_loop.thisTrialN'
p1515
I40
sg894
S'50-polo.png'
p1516
sS'block_loop.thisIndex'
p1517
g888
sg38
S'left'
p1518
sg58
g62
sS'trial_loop.thisN'
p1519
I40
sg33
g1351
sg63
g64
sS'trial_loop.thisIndex'
p1520
g59
(g98
S'(\x00\x00\x00'
tRp1521
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1522
I0
sg903
S'48-twix.png'
p1523
sS'block_loop.thisRepN'
p1524
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1525
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p1526
Nsg69
Vn
sS'block_loop.thisTrialN'
p1527
I0
sg39
F1.9500933415583859
sg34
g752
(S'\x07\xdf\n\x01\x10&6\x02\x98\x10'
tRp1528
sa(dp1529
S'trial_loop.thisTrialN'
p1530
I41
sg894
g1226
sS'block_loop.thisIndex'
p1531
g888
sg38
S'left'
p1532
sg58
g62
sS'trial_loop.thisN'
p1533
I41
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1534
g59
(g98
S')\x00\x00\x00'
tRp1535
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1536
I0
sg903
g1233
sS'block_loop.thisRepN'
p1537
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1538
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1539
Nsg69
Vn
sS'block_loop.thisTrialN'
p1540
I0
sg39
F1.5833077694151143
sg34
g752
(S"\x07\xdf\n\x01\x10'\x01\x022\x80"
tRp1541
sa(dp1542
S'trial_loop.thisTrialN'
p1543
I42
sg894
g1015
sS'block_loop.thisIndex'
p1544
g888
sg38
S'right'
p1545
sg58
g62
sS'trial_loop.thisN'
p1546
I42
sg33
g1026
sg63
g64
sS'trial_loop.thisIndex'
p1547
g59
(g98
S'*\x00\x00\x00'
tRp1548
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1549
I0
sg903
g1023
sS'block_loop.thisRepN'
p1550
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1551
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p1552
Nsg69
Vn
sS'block_loop.thisTrialN'
p1553
I0
sg39
F1.7000899203667359
sg34
g752
(S"\x07\xdf\n\x01\x10'\x07\x0b\x90\xf0"
tRp1554
sa(dp1555
S'trial_loop.thisTrialN'
p1556
I43
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1557
sS'block_loop.thisIndex'
p1558
g888
sg38
S'left'
p1559
sg58
g62
sS'trial_loop.thisN'
p1560
I43
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1561
g59
(g98
S'+\x00\x00\x00'
tRp1562
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1563
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1564
sS'block_loop.thisRepN'
p1565
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1566
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1567
Nsg69
Vn
sS'block_loop.thisTrialN'
p1568
I0
sg39
F1.6167610535921995
sg34
g752
(S"\x07\xdf\n\x01\x10'\x0e\x07\x95h"
tRp1569
sa(dp1570
S'trial_loop.thisTrialN'
p1571
I44
sg894
S'21-nakd_banana_crunch.png'
p1572
sS'block_loop.thisIndex'
p1573
g888
sg38
S'right'
p1574
sg58
g62
sS'trial_loop.thisN'
p1575
I44
sg33
g958
sg63
g64
sS'trial_loop.thisIndex'
p1576
g59
(g98
S',\x00\x00\x00'
tRp1577
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1578
I0
sg903
S'1-treacle_cookies.png'
p1579
sS'block_loop.thisRepN'
p1580
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1581
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p1582
Nsg69
Vn
sS'block_loop.thisTrialN'
p1583
I0
sg39
F1.6335229054566298
sg34
g752
(S"\x07\xdf\n\x01\x10'\x15\x02.\x98"
tRp1584
sa(dp1585
S'trial_loop.thisTrialN'
p1586
I45
sg894
g1081
sS'block_loop.thisIndex'
p1587
g888
sg38
S'right'
p1588
sg58
g62
sS'trial_loop.thisN'
p1589
I45
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p1590
g59
(g98
S'-\x00\x00\x00'
tRp1591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1592
I0
sg903
g1089
sS'block_loop.thisRepN'
p1593
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1594
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p1595
Nsg69
Vn
sS'block_loop.thisTrialN'
p1596
I0
sg39
F2.3667889933349215
sg34
g752
(S"\x07\xdf\n\x01\x10'\x1b\x0c\x83 "
tRp1597
sa(dp1598
S'trial_loop.thisTrialN'
p1599
I46
sg894
g1499
sS'block_loop.thisIndex'
p1600
g888
sg38
S'left'
p1601
sg58
g62
sS'trial_loop.thisN'
p1602
I46
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p1603
g59
(g98
S'.\x00\x00\x00'
tRp1604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1605
I0
sg903
g1507
sS'block_loop.thisRepN'
p1606
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1607
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p1608
Nsg69
Vn
sS'block_loop.thisTrialN'
p1609
I0
sg39
F0.90008832380772219
sg34
g752
(S"\x07\xdf\n\x01\x10'#\x03C\xf0"
tRp1610
sa(dp1611
S'trial_loop.thisTrialN'
p1612
I47
sg894
g964
sS'block_loop.thisIndex'
p1613
g888
sg38
S'right'
p1614
sg58
g62
sS'trial_loop.thisN'
p1615
I47
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p1616
g59
(g98
S'/\x00\x00\x00'
tRp1617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1618
I0
sg903
g972
sS'block_loop.thisRepN'
p1619
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1620
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p1621
Nsg69
Vn
sS'block_loop.thisTrialN'
p1622
I0
sg39
F1.3001988853757211
sg34
g752
(S"\x07\xdf\n\x01\x10')\x02*\xb0"
tRp1623
sa(dp1624
S'trial_loop.thisTrialN'
p1625
I48
sg894
g1557
sS'block_loop.thisIndex'
p1626
g888
sg38
S'left'
p1627
sg58
g62
sS'trial_loop.thisN'
p1628
I48
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1629
g59
(g98
S'0\x00\x00\x00'
tRp1630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1631
I0
sg903
g1564
sS'block_loop.thisRepN'
p1632
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1633
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg69
Vn
sS'block_loop.thisTrialN'
p1635
I0
sg39
F1.0334395993995713
sg34
g752
(S"\x07\xdf\n\x01\x10'/\x07C`"
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I49
sg894
S'23-crunchie_redo.png'
p1639
sS'block_loop.thisIndex'
p1640
g888
sg38
S'right'
p1641
sg58
g62
sS'trial_loop.thisN'
p1642
I49
sg33
g1510
sg63
g64
sS'trial_loop.thisIndex'
p1643
g59
(g98
S'1\x00\x00\x00'
tRp1644
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1645
I0
sg903
S'33-ambrosia_rice.png'
p1646
sS'block_loop.thisRepN'
p1647
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1648
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p1649
Nsg69
Vn
sS'block_loop.thisTrialN'
p1650
I0
sg39
F1.6335739382593601
sg34
g752
(S"\x07\xdf\n\x01\x10'5\x08M\x00"
tRp1651
sa(dp1652
S'trial_loop.thisTrialN'
p1653
I50
sg894
g1209
sS'block_loop.thisIndex'
p1654
g888
sg38
S'right'
p1655
sg58
g62
sS'trial_loop.thisN'
p1656
I50
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p1657
g59
(g98
S'2\x00\x00\x00'
tRp1658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1659
I0
sg903
g1217
sS'block_loop.thisRepN'
p1660
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1661
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p1662
Nsg69
Vn
sS'block_loop.thisTrialN'
p1663
I0
sg39
F1.9167261574184522
sg34
g752
(S'\x07\xdf\n\x01\x10(\x00\x03_H'
tRp1664
sa(dp1665
S'trial_loop.thisTrialN'
p1666
I51
sg894
g1226
sS'block_loop.thisIndex'
p1667
g888
sg38
S'left'
p1668
sg58
g62
sS'trial_loop.thisN'
p1669
I51
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p1670
g59
(g98
S'3\x00\x00\x00'
tRp1671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1672
I0
sg903
g1233
sS'block_loop.thisRepN'
p1673
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1674
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p1675
Nsg69
Vn
sS'block_loop.thisTrialN'
p1676
I0
sg39
F1.8999816966170329
sg34
g752
(S'\x07\xdf\n\x01\x10(\x07\x02|\xb8'
tRp1677
sa(dp1678
S'trial_loop.thisTrialN'
p1679
I52
sg894
g998
sS'block_loop.thisIndex'
p1680
g888
sg38
S'right'
p1681
sg58
g62
sS'trial_loop.thisN'
p1682
I52
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p1683
g59
(g98
S'4\x00\x00\x00'
tRp1684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1685
I0
sg903
g1006
sS'block_loop.thisRepN'
p1686
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1687
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg69
Vn
sS'block_loop.thisTrialN'
p1689
I0
sg39
F1.5167792429347173
sg34
g752
(S'\x07\xdf\n\x01\x10(\x0e\x01[\xa8'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I53
sg894
g932
sS'block_loop.thisIndex'
p1693
g888
sg38
S'right'
p1694
sg58
g62
sS'trial_loop.thisN'
p1695
I53
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1696
g59
(g98
S'5\x00\x00\x00'
tRp1697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1698
I0
sg903
g939
sS'block_loop.thisRepN'
p1699
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1700
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1701
Nsg69
Vn
sS'block_loop.thisTrialN'
p1702
I0
sg39
F1.6664849632834375
sg34
g752
(S'\x07\xdf\n\x01\x10(\x14\t\xc7\xe8'
tRp1703
sa(dp1704
S'trial_loop.thisTrialN'
p1705
I54
sg894
g1280
sS'block_loop.thisIndex'
p1706
g888
sg38
S'left'
p1707
sg58
g62
sS'trial_loop.thisN'
p1708
I54
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p1709
g59
(g98
S'6\x00\x00\x00'
tRp1710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1711
I0
sg903
g1288
sS'block_loop.thisRepN'
p1712
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1713
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p1714
Nsg69
Vn
sS'block_loop.thisTrialN'
p1715
I0
sg39
F1.2835379587086209
sg34
g752
(S'\x07\xdf\n\x01\x10(\x1b\x05SH'
tRp1716
sa(dp1717
S'trial_loop.thisTrialN'
p1718
I55
sg894
g1066
sS'block_loop.thisIndex'
p1719
g888
sg38
S'left'
p1720
sg58
g62
sS'trial_loop.thisN'
p1721
I55
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p1722
g59
(g98
S'7\x00\x00\x00'
tRp1723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1724
I0
sg903
g1073
sS'block_loop.thisRepN'
p1725
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1726
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p1727
Nsg69
Vn
sS'block_loop.thisTrialN'
p1728
I0
sg39
F1.2501422646273568
sg34
g752
(S'\x07\xdf\n\x01\x10(!\n-x'
tRp1729
sa(dp1730
S'trial_loop.thisTrialN'
p1731
I56
sg894
g1209
sS'block_loop.thisIndex'
p1732
g888
sg38
S'left'
p1733
sg58
g62
sS'trial_loop.thisN'
p1734
I56
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p1735
g59
(g98
S'8\x00\x00\x00'
tRp1736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1737
I0
sg903
g1217
sS'block_loop.thisRepN'
p1738
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1739
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p1740
Nsg69
Vn
sS'block_loop.thisTrialN'
p1741
I0
sg39
F2.333253315424372
sg34
g752
(S"\x07\xdf\n\x01\x10('\x0eS\xf8"
tRp1742
sa(dp1743
S'trial_loop.thisTrialN'
p1744
I57
sg894
g1430
sS'block_loop.thisIndex'
p1745
g888
sg38
S'left'
p1746
sg58
g62
sS'trial_loop.thisN'
p1747
I57
sg33
g1060
sg63
g64
sS'trial_loop.thisIndex'
p1748
g59
(g98
S'9\x00\x00\x00'
tRp1749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1750
I0
sg903
g1437
sS'block_loop.thisRepN'
p1751
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1752
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1753
Nsg69
Vn
sS'block_loop.thisTrialN'
p1754
I0
sg39
F2.1334228355553932
sg34
g752
(S'\x07\xdf\n\x01\x10(/\x04\xd6H'
tRp1755
sa(dp1756
S'trial_loop.thisTrialN'
p1757
I58
sg894
S'10-bounty_redo.png'
p1758
sS'block_loop.thisIndex'
p1759
g888
sg38
S'right'
p1760
sg58
g62
sS'trial_loop.thisN'
p1761
I58
sg33
g1368
sg63
g64
sS'trial_loop.thisIndex'
p1762
g59
(g98
S':\x00\x00\x00'
tRp1763
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1764
I0
sg903
S'4-corn.png'
p1765
sS'block_loop.thisRepN'
p1766
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1767
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p1768
Nsg69
Vn
sS'block_loop.thisTrialN'
p1769
I0
sg39
F2.4500619806203758
sg34
g752
(S'\x07\xdf\n\x01\x10(6\x07K0'
tRp1770
sa(dp1771
S'trial_loop.thisTrialN'
p1772
I59
sg894
g1430
sS'block_loop.thisIndex'
p1773
g888
sg38
S'right'
p1774
sg58
g62
sS'trial_loop.thisN'
p1775
I59
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1776
g59
(g98
S';\x00\x00\x00'
tRp1777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1778
I0
sg903
g1437
sS'block_loop.thisRepN'
p1779
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1780
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1781
Nsg69
Vn
sS'block_loop.thisTrialN'
p1782
I0
sg39
F3.1501741387437505
sg34
g752
(S'\x07\xdf\n\x01\x10)\x01\x0e\xbdp'
tRp1783
sa(dp1784
S'trial_loop.thisTrialN'
p1785
I60
sg894
g1374
sS'block_loop.thisIndex'
p1786
g888
sg38
S'left'
p1787
sg58
g62
sS'trial_loop.thisN'
p1788
I60
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p1789
g59
(g98
S'<\x00\x00\x00'
tRp1790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1791
I0
sg903
g1382
sS'block_loop.thisRepN'
p1792
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1793
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p1794
Nsg69
Vn
sS'block_loop.thisTrialN'
p1795
I0
sg39
F3.5500360935875506
sg34
g752
(S'\x07\xdf\n\x01\x10)\n\x02"\xe0'
tRp1796
sa(dp1797
S'trial_loop.thisTrialN'
p1798
I61
sg894
g1430
sS'block_loop.thisIndex'
p1799
g888
sg38
S'left'
p1800
sg58
g62
sS'trial_loop.thisN'
p1801
I61
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p1802
g59
(g98
S'=\x00\x00\x00'
tRp1803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1804
I0
sg903
g1437
sS'block_loop.thisRepN'
p1805
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1806
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1807
Nsg69
Vn
sS'block_loop.thisTrialN'
p1808
I0
sg39
F1.9500924862622924
sg34
g752
(S'\x07\xdf\n\x01\x10)\x12\x0b;\x00'
tRp1809
sa(dp1810
S'trial_loop.thisTrialN'
p1811
I62
sg894
g1516
sS'block_loop.thisIndex'
p1812
g888
sg38
S'right'
p1813
sg58
g62
sS'trial_loop.thisN'
p1814
I62
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p1815
g59
(g98
S'>\x00\x00\x00'
tRp1816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1817
I0
sg903
g1523
sS'block_loop.thisRepN'
p1818
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1819
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p1820
Nsg69
Vn
sS'block_loop.thisTrialN'
p1821
I0
sg39
F1.2000836481784063
sg34
g752
(S'\x07\xdf\n\x01\x10)\x19\n\xd1\x88'
tRp1822
sa(dp1823
S'trial_loop.thisTrialN'
p1824
I63
sg894
g1499
sS'block_loop.thisIndex'
p1825
g888
sg38
S'left'
p1826
sg58
g62
sS'trial_loop.thisN'
p1827
I63
sg33
g1503
sg63
g64
sS'trial_loop.thisIndex'
p1828
g59
(g98
S'?\x00\x00\x00'
tRp1829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1830
I0
sg903
g1507
sS'block_loop.thisRepN'
p1831
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1832
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p1833
Nsg69
Vn
sS'block_loop.thisTrialN'
p1834
I0
sg39
F1.1334775746472587
sg34
g752
(S'\x07\xdf\n\x01\x10)\x1f\x0e{\x08'
tRp1835
sa(dp1836
S'trial_loop.thisTrialN'
p1837
I64
sg894
g1516
sS'block_loop.thisIndex'
p1838
g888
sg38
S'right'
p1839
sg58
g62
sS'trial_loop.thisN'
p1840
I64
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p1841
g59
(g98
S'@\x00\x00\x00'
tRp1842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1843
I0
sg903
g1523
sS'block_loop.thisRepN'
p1844
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1845
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p1846
Nsg69
Vn
sS'block_loop.thisTrialN'
p1847
I0
sg39
F0.8172315817209892
sg34
g752
(S'\x07\xdf\n\x01\x10)&\x01\xb1\x98'
tRp1848
sa(dp1849
S'trial_loop.thisTrialN'
p1850
I65
sg894
g1015
sS'block_loop.thisIndex'
p1851
g888
sg38
S'right'
p1852
sg58
g62
sS'trial_loop.thisN'
p1853
I65
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p1854
g59
(g98
S'A\x00\x00\x00'
tRp1855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1856
I0
sg903
g1023
sS'block_loop.thisRepN'
p1857
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1858
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p1859
Nsg69
Vn
sS'block_loop.thisTrialN'
p1860
I0
sg39
F1.2334362922483706
sg34
g752
(S'\x07\xdf\n\x01\x10)+\x0e\xa9\xe8'
tRp1861
sa(dp1862
S'trial_loop.thisTrialN'
p1863
I66
sg894
S'31-hobnobs.png'
p1864
sS'block_loop.thisIndex'
p1865
g888
sg38
S'right'
p1866
sg58
g62
sS'trial_loop.thisN'
p1867
I66
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p1868
g59
(g98
S'B\x00\x00\x00'
tRp1869
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1870
I0
sg903
S'25-kitkat.png'
p1871
sS'block_loop.thisRepN'
p1872
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1873
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p1874
Nsg69
Vn
sS'block_loop.thisTrialN'
p1875
I0
sg39
F1.4667656722012907
sg34
g752
(S'\x07\xdf\n\x01\x10)2\x03\x8a@'
tRp1876
sa(dp1877
S'trial_loop.thisTrialN'
p1878
I67
sg894
g1162
sS'block_loop.thisIndex'
p1879
g888
sg38
S'left'
p1880
sg58
g62
sS'trial_loop.thisN'
p1881
I67
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p1882
g59
(g98
S'C\x00\x00\x00'
tRp1883
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1884
I0
sg903
g1169
sS'block_loop.thisRepN'
p1885
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1886
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p1887
Nsg69
Vn
sS'block_loop.thisTrialN'
p1888
I0
sg39
F1.0667671547162172
sg34
g752
(S'\x07\xdf\n\x01\x10)8\x0b\x04P'
tRp1889
sa(dp1890
S'trial_loop.thisTrialN'
p1891
I68
sg894
g1471
sS'block_loop.thisIndex'
p1892
g888
sg38
S'right'
p1893
sg58
g62
sS'trial_loop.thisN'
p1894
I68
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p1895
g59
(g98
S'D\x00\x00\x00'
tRp1896
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1897
I0
sg903
g1478
sS'block_loop.thisRepN'
p1898
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1899
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p1900
Nsg69
Vn
sS'block_loop.thisTrialN'
p1901
I0
sg39
F1.5167957787016348
sg34
g752
(S'\x07\xdf\n\x01\x10*\x02\x0c\x8a\xf0'
tRp1902
sa(dp1903
S'trial_loop.thisTrialN'
p1904
I69
sg894
S'43-mrporky_pork_crackles_redo.png'
p1905
sS'block_loop.thisIndex'
p1906
g888
sg38
S'left'
p1907
sg58
g62
sS'trial_loop.thisN'
p1908
I69
sg33
g1181
sg63
g64
sS'trial_loop.thisIndex'
p1909
g59
(g98
S'E\x00\x00\x00'
tRp1910
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1911
I0
sg903
S'18-mms.png'
p1912
sS'block_loop.thisRepN'
p1913
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1914
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p1915
Nsg69
Vn
sS'block_loop.thisTrialN'
p1916
I0
sg39
F0.90021861425702809
sg34
g752
(S'\x07\xdf\n\x01\x10*\t\x05\xb4\xf0'
tRp1917
sa(dp1918
S'trial_loop.thisTrialN'
p1919
I70
sg894
g1049
sS'block_loop.thisIndex'
p1920
g888
sg38
S'left'
p1921
sg58
g62
sS'trial_loop.thisN'
p1922
I70
sg33
g1060
sg63
g64
sS'trial_loop.thisIndex'
p1923
g59
(g98
S'F\x00\x00\x00'
tRp1924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1925
I0
sg903
g1057
sS'block_loop.thisRepN'
p1926
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1927
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p1928
Nsg69
Vn
sS'block_loop.thisTrialN'
p1929
I0
sg39
F1.2500983593090496
sg34
g752
(S'\x07\xdf\n\x01\x10*\x0f\x04\xd6H'
tRp1930
sa(dp1931
S'trial_loop.thisTrialN'
p1932
I71
sg894
g1357
sS'block_loop.thisIndex'
p1933
g888
sg38
S'left'
p1934
sg58
g62
sS'trial_loop.thisN'
p1935
I71
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p1936
g59
(g98
S'G\x00\x00\x00'
tRp1937
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1938
I0
sg903
g1365
sS'block_loop.thisRepN'
p1939
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1940
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p1941
Nsg69
Vn
sS'block_loop.thisTrialN'
p1942
I0
sg39
F1.5168120293747052
sg34
g752
(S'\x07\xdf\n\x01\x10*\x15\x08\xf8\xe0'
tRp1943
sa(dp1944
S'trial_loop.thisTrialN'
p1945
I72
sg894
g1177
sS'block_loop.thisIndex'
p1946
g888
sg38
S'left'
p1947
sg58
g62
sS'trial_loop.thisN'
p1948
I72
sg33
g1187
sg63
g64
sS'trial_loop.thisIndex'
p1949
g59
(g98
S'H\x00\x00\x00'
tRp1950
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1951
I0
sg903
g1185
sS'block_loop.thisRepN'
p1952
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1953
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p1954
Nsg69
Vn
sS'block_loop.thisTrialN'
p1955
I0
sg39
F0.88341371237038402
sg34
g752
(S'\x07\xdf\n\x01\x10*\x1c\x02"\xe0'
tRp1956
sa(dp1957
S'trial_loop.thisTrialN'
p1958
I73
sg894
g1557
sS'block_loop.thisIndex'
p1959
g888
sg38
S'left'
p1960
sg58
g62
sS'trial_loop.thisN'
p1961
I73
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1962
g59
(g98
S'I\x00\x00\x00'
tRp1963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1964
I0
sg903
g1564
sS'block_loop.thisRepN'
p1965
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1966
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1967
Nsg69
Vn
sS'block_loop.thisTrialN'
p1968
I0
sg39
F1.1834840178962622
sg34
g752
(S'\x07\xdf\n\x01\x10*"\x01\t\xa0'
tRp1969
sa(dp1970
S'trial_loop.thisTrialN'
p1971
I74
sg894
g895
sS'block_loop.thisIndex'
p1972
g888
sg38
S'left'
p1973
sg58
g62
sS'trial_loop.thisN'
p1974
I74
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1975
g59
(g98
S'J\x00\x00\x00'
tRp1976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1977
I0
sg903
g904
sS'block_loop.thisRepN'
p1978
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1979
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1980
Nsg69
Vn
sS'block_loop.thisTrialN'
p1981
I0
sg39
F1.6832596446292882
sg34
g752
(S'\x07\xdf\n\x01\x10*(\x04:\x08'
tRp1982
sa(dp1983
S'trial_loop.thisTrialN'
p1984
I75
sg894
S'29-beans.png'
p1985
sS'block_loop.thisIndex'
p1986
g888
sg38
S'right'
p1987
sg58
g62
sS'trial_loop.thisN'
p1988
I75
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p1989
g59
(g98
S'K\x00\x00\x00'
tRp1990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1991
I0
sg903
S'46-pistachios.png'
p1992
sS'block_loop.thisRepN'
p1993
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p1994
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p1995
Nsg69
Vn
sS'block_loop.thisTrialN'
p1996
I0
sg39
F1.1501533264818136
sg34
g752
(S'\x07\xdf\n\x01\x10*/\x00\x03\xe8'
tRp1997
sa(dp1998
S'trial_loop.thisTrialN'
p1999
I76
sg894
g932
sS'block_loop.thisIndex'
p2000
g888
sg38
S'right'
p2001
sg58
g62
sS'trial_loop.thisN'
p2002
I76
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2003
g59
(g98
S'L\x00\x00\x00'
tRp2004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2005
I0
sg903
g939
sS'block_loop.thisRepN'
p2006
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2007
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2008
Nsg69
Vn
sS'block_loop.thisTrialN'
p2009
I0
sg39
F0.9664996744140808
sg34
g752
(S'\x07\xdf\n\x01\x10*5\x02\xb7P'
tRp2010
sa(dp2011
S'trial_loop.thisTrialN'
p2012
I77
sg894
g1098
sS'block_loop.thisIndex'
p2013
g888
sg38
S'left'
p2014
sg58
g62
sS'trial_loop.thisN'
p2015
I77
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p2016
g59
(g98
S'M\x00\x00\x00'
tRp2017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2018
I0
sg903
g1106
sS'block_loop.thisRepN'
p2019
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2020
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p2021
Nsg69
Vn
sS'block_loop.thisTrialN'
p2022
I0
sg39
F0.78344672688399442
sg34
g752
(S'\x07\xdf\n\x01\x10*;\x02\xce\xc0'
tRp2023
sa(dp2024
S'trial_loop.thisTrialN'
p2025
I78
sg894
g1226
sS'block_loop.thisIndex'
p2026
g888
sg38
S'left'
p2027
sg58
g62
sS'trial_loop.thisN'
p2028
I78
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2029
g59
(g98
S'N\x00\x00\x00'
tRp2030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2031
I0
sg903
g1233
sS'block_loop.thisRepN'
p2032
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2033
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2034
Nsg69
Vn
sS'block_loop.thisTrialN'
p2035
I0
sg39
F1.6333193444552307
sg34
g752
(S'\x07\xdf\n\x01\x10+\x04\x0f\x13`'
tRp2036
sa(dp2037
S'trial_loop.thisTrialN'
p2038
I79
sg894
g1905
sS'block_loop.thisIndex'
p2039
g888
sg38
S'right'
p2040
sg58
g62
sS'trial_loop.thisN'
p2041
I79
sg33
g1187
sg63
g64
sS'trial_loop.thisIndex'
p2042
g59
(g98
S'O\x00\x00\x00'
tRp2043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2044
I0
sg903
g1912
sS'block_loop.thisRepN'
p2045
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2046
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p2047
Nsg69
Vn
sS'block_loop.thisTrialN'
p2048
I0
sg39
F0.95024330386877409
sg34
g752
(S'\x07\xdf\n\x01\x10+\x0b\n!\xc0'
tRp2049
sa(dp2050
S'trial_loop.thisTrialN'
p2051
I80
sg894
g1194
sS'block_loop.thisIndex'
p2052
g888
sg38
S'left'
p2053
sg58
g62
sS'trial_loop.thisN'
p2054
I80
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2055
g59
(g98
S'P\x00\x00\x00'
tRp2056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2057
I0
sg903
g1201
sS'block_loop.thisRepN'
p2058
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2059
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2060
Nsg69
Vn
sS'block_loop.thisTrialN'
p2061
I0
sg39
F1.0501002409691864
sg34
g752
(S'\x07\xdf\n\x01\x10+\x11\t\xc0\x18'
tRp2062
sa(dp2063
S'trial_loop.thisTrialN'
p2064
I81
sg894
g1162
sS'block_loop.thisIndex'
p2065
g888
sg38
S'left'
p2066
sg58
g62
sS'trial_loop.thisN'
p2067
I81
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p2068
g59
(g98
S'Q\x00\x00\x00'
tRp2069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2070
I0
sg903
g1169
sS'block_loop.thisRepN'
p2071
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2072
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2073
Nsg69
Vn
sS'block_loop.thisTrialN'
p2074
I0
sg39
F0.91678374750699732
sg34
g752
(S'\x07\xdf\n\x01\x10+\x17\x0b\x088'
tRp2075
sa(dp2076
S'trial_loop.thisTrialN'
p2077
I82
sg894
g1471
sS'block_loop.thisIndex'
p2078
g888
sg38
S'right'
p2079
sg58
g62
sS'trial_loop.thisN'
p2080
I82
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p2081
g59
(g98
S'R\x00\x00\x00'
tRp2082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2083
I0
sg903
g1478
sS'block_loop.thisRepN'
p2084
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2085
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2086
Nsg69
Vn
sS'block_loop.thisTrialN'
p2087
I0
sg39
F1.5167738260461192
sg34
g752
(S'\x07\xdf\n\x01\x10+\x1d\nh\x10'
tRp2088
sa(dp2089
S'trial_loop.thisTrialN'
p2090
I83
sg894
g1985
sS'block_loop.thisIndex'
p2091
g888
sg38
S'right'
p2092
sg58
g62
sS'trial_loop.thisN'
p2093
I83
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2094
g59
(g98
S'S\x00\x00\x00'
tRp2095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2096
I0
sg903
g1992
sS'block_loop.thisRepN'
p2097
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2098
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p2099
Nsg69
Vn
sS'block_loop.thisTrialN'
p2100
I0
sg39
F0.98345054722085479
sg34
g752
(S'\x07\xdf\n\x01\x10+$\x03\x95\xf8'
tRp2101
sa(dp2102
S'trial_loop.thisTrialN'
p2103
I84
sg894
g998
sS'block_loop.thisIndex'
p2104
g888
sg38
S'left'
p2105
sg58
g62
sS'trial_loop.thisN'
p2106
I84
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p2107
g59
(g98
S'T\x00\x00\x00'
tRp2108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2109
I0
sg903
g1006
sS'block_loop.thisRepN'
p2110
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2111
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p2112
Nsg69
Vn
sS'block_loop.thisTrialN'
p2113
I0
sg39
F1.5502028767659795
sg34
g752
(S'\x07\xdf\n\x01\x10+*\x03\xadh'
tRp2114
sa(dp2115
S'trial_loop.thisTrialN'
p2116
I85
sg894
g932
sS'block_loop.thisIndex'
p2117
g888
sg38
S'right'
p2118
sg58
g62
sS'trial_loop.thisN'
p2119
I85
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2120
g59
(g98
S'U\x00\x00\x00'
tRp2121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2122
I0
sg903
g939
sS'block_loop.thisRepN'
p2123
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2124
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2125
Nsg69
Vn
sS'block_loop.thisTrialN'
p2126
I0
sg39
F1.8164484135377279
sg34
g752
(S'\x07\xdf\n\x01\x10+0\x0c\x92\xc0'
tRp2127
sa(dp2128
S'trial_loop.thisTrialN'
p2129
I86
sg894
g964
sS'block_loop.thisIndex'
p2130
g888
sg38
S'right'
p2131
sg58
g62
sS'trial_loop.thisN'
p2132
I86
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2133
g59
(g98
S'V\x00\x00\x00'
tRp2134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2135
I0
sg903
g972
sS'block_loop.thisRepN'
p2136
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2137
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2138
Nsg69
Vn
sS'block_loop.thisTrialN'
p2139
I0
sg39
F0.81676401862569037
sg34
g752
(S'\x07\xdf\n\x01\x10+7\nA\x00'
tRp2140
sa(dp2141
S'trial_loop.thisTrialN'
p2142
I87
sg894
g1310
sS'block_loop.thisIndex'
p2143
g888
sg38
S'left'
p2144
sg58
g62
sS'trial_loop.thisN'
p2145
I87
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p2146
g59
(g98
S'W\x00\x00\x00'
tRp2147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2148
I0
sg903
g1317
sS'block_loop.thisRepN'
p2149
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2150
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p2151
Nsg69
Vn
sS'block_loop.thisTrialN'
p2152
I0
sg39
F1.5500774330103013
sg34
g752
(S'\x07\xdf\n\x01\x10,\x01\x07\xf7\x10'
tRp2153
sa(dp2154
S'trial_loop.thisTrialN'
p2155
I88
sg894
g1032
sS'block_loop.thisIndex'
p2156
g888
sg38
S'left'
p2157
sg58
g62
sS'trial_loop.thisN'
p2158
I88
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2159
g59
(g98
S'X\x00\x00\x00'
tRp2160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2161
I0
sg903
g1040
sS'block_loop.thisRepN'
p2162
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2163
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2164
Nsg69
Vn
sS'block_loop.thisTrialN'
p2165
I0
sg39
F1.3334423363558017
sg34
g752
(S'\x07\xdf\n\x01\x10,\x08\x01\x9a('
tRp2166
sa(dp2167
S'trial_loop.thisTrialN'
p2168
I89
sg894
S'27-hartleys_raspberries_jelly.png'
p2169
sS'block_loop.thisIndex'
p2170
g888
sg38
S'right'
p2171
sg58
g62
sS'trial_loop.thisN'
p2172
I89
sg33
g1085
sg63
g64
sS'trial_loop.thisIndex'
p2173
g59
(g98
S'Y\x00\x00\x00'
tRp2174
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2175
I0
sg903
S'51-mars.png'
p2176
sS'block_loop.thisRepN'
p2177
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2178
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F0.83354582745596417
sg34
g752
(S'\x07\xdf\n\x01\x10,\x0e\x07+\xf0'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1066
sS'block_loop.thisIndex'
p2184
g888
sg38
S'left'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1073
sS'block_loop.thisRepN'
p2190
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2191
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F1.3667821509516216
sg34
g752
(S'\x07\xdf\n\x01\x10,\x14\x05[\x18'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
g1572
sS'block_loop.thisIndex'
p2197
g888
sg38
S'right'
p2198
sg58
g62
sS'trial_loop.thisN'
p2199
I91
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p2200
g59
(g98
S'[\x00\x00\x00'
tRp2201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2202
I0
sg903
g1579
sS'block_loop.thisRepN'
p2203
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2204
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2205
Nsg69
Vn
sS'block_loop.thisTrialN'
p2206
I0
sg39
F1.0167815237291506
sg34
g752
(S'\x07\xdf\n\x01\x10,\x1a\x0be\xf8'
tRp2207
sa(dp2208
S'trial_loop.thisTrialN'
p2209
I92
sg894
g1310
sS'block_loop.thisIndex'
p2210
g888
sg38
S'left'
p2211
sg58
g62
sS'trial_loop.thisN'
p2212
I92
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p2213
g59
(g98
S'\\\x00\x00\x00'
tRp2214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2215
I0
sg903
g1317
sS'block_loop.thisRepN'
p2216
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2217
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p2218
Nsg69
Vn
sS'block_loop.thisTrialN'
p2219
I0
sg39
F1.0501093641505577
sg34
g752
(S'\x07\xdf\n\x01\x10, \x0c5\x00'
tRp2220
sa(dp2221
S'trial_loop.thisTrialN'
p2222
I93
sg894
g1572
sS'block_loop.thisIndex'
p2223
g888
sg38
S'right'
p2224
sg58
g62
sS'trial_loop.thisN'
p2225
I93
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p2226
g59
(g98
S']\x00\x00\x00'
tRp2227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2228
I0
sg903
g1579
sS'block_loop.thisRepN'
p2229
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2230
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2231
Nsg69
Vn
sS'block_loop.thisTrialN'
p2232
I0
sg39
F1.6167850019410253
sg34
g752
(S'\x07\xdf\n\x01\x10,&\r} '
tRp2233
sa(dp2234
S'trial_loop.thisTrialN'
p2235
I94
sg894
g1557
sS'block_loop.thisIndex'
p2236
g888
sg38
S'left'
p2237
sg58
g62
sS'trial_loop.thisN'
p2238
I94
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2239
g59
(g98
S'^\x00\x00\x00'
tRp2240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2241
I0
sg903
g1564
sS'block_loop.thisRepN'
p2242
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2243
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2244
Nsg69
Vn
sS'block_loop.thisTrialN'
p2245
I0
sg39
F1.0168975592096103
sg34
g752
(S'\x07\xdf\n\x01\x10,-\x08\x16P'
tRp2246
sa(dp2247
S'trial_loop.thisTrialN'
p2248
I95
sg894
g1516
sS'block_loop.thisIndex'
p2249
g888
sg38
S'left'
p2250
sg58
g62
sS'trial_loop.thisN'
p2251
I95
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2252
g59
(g98
S'_\x00\x00\x00'
tRp2253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2254
I0
sg903
g1523
sS'block_loop.thisRepN'
p2255
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2256
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2257
Nsg69
Vn
sS'block_loop.thisTrialN'
p2258
I0
sg39
F1.0667751375040098
sg34
g752
(S'\x07\xdf\n\x01\x10,3\x08\xe5X'
tRp2259
sa(dp2260
S'trial_loop.thisTrialN'
p2261
I96
sg894
g1280
sS'block_loop.thisIndex'
p2262
g888
sg38
S'left'
p2263
sg58
g62
sS'trial_loop.thisN'
p2264
I96
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p2265
g59
(g98
S'`\x00\x00\x00'
tRp2266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2267
I0
sg903
g1288
sS'block_loop.thisRepN'
p2268
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2269
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2270
Nsg69
Vn
sS'block_loop.thisTrialN'
p2271
I0
sg39
F1.0500936836797337
sg34
g752
(S'\x07\xdf\n\x01\x10,9\nh\x10'
tRp2272
sa(dp2273
S'trial_loop.thisTrialN'
p2274
I97
sg894
g1639
sS'block_loop.thisIndex'
p2275
g888
sg38
S'left'
p2276
sg58
g62
sS'trial_loop.thisN'
p2277
I97
sg33
g1503
sg63
g64
sS'trial_loop.thisIndex'
p2278
g59
(g98
S'a\x00\x00\x00'
tRp2279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2280
I0
sg903
g1646
sS'block_loop.thisRepN'
p2281
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2282
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p2283
Nsg69
Vn
sS'block_loop.thisTrialN'
p2284
I0
sg39
F1.2501114738843171
sg34
g752
(S'\x07\xdf\n\x01\x10-\x03\x0b\xb00'
tRp2285
sa(dp2286
S'trial_loop.thisTrialN'
p2287
I98
sg894
g1015
sS'block_loop.thisIndex'
p2288
g888
sg38
S'right'
p2289
sg58
g62
sS'trial_loop.thisN'
p2290
I98
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2291
g59
(g98
S'b\x00\x00\x00'
tRp2292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2293
I0
sg903
g1023
sS'block_loop.thisRepN'
p2294
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2295
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2296
Nsg69
Vn
sS'block_loop.thisTrialN'
p2297
I0
sg39
F1.2500758364549256
sg34
g752
(S'\x07\xdf\n\x01\x10-\n\x00\x90\x88'
tRp2298
sa(dp2299
S'trial_loop.thisTrialN'
p2300
I99
sg894
g1145
sS'block_loop.thisIndex'
p2301
g888
sg38
S'right'
p2302
sg58
g62
sS'trial_loop.thisN'
p2303
I99
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p2304
g59
(g98
S'c\x00\x00\x00'
tRp2305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2306
I0
sg903
g1153
sS'block_loop.thisRepN'
p2307
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2308
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p2309
Nsg69
Vn
sS'block_loop.thisTrialN'
p2310
I0
sg39
F1.5169810933439294
sg34
g752
(S'\x07\xdf\n\x01\x10-\x10\x04\xf1\xa0'
tRp2311
sa(dp2312
S'trial_loop.thisTrialN'
p2313
I100
sg894
g915
sS'block_loop.thisIndex'
p2314
g888
sg38
S'right'
p2315
sg58
g62
sS'trial_loop.thisN'
p2316
I100
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2317
g59
(g98
S'd\x00\x00\x00'
tRp2318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2319
I0
sg903
g923
sS'block_loop.thisRepN'
p2320
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2321
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2322
Nsg69
Vn
sS'block_loop.thisTrialN'
p2323
I0
sg39
F1.4666641767980764
sg34
g752
(S'\x07\xdf\n\x01\x10-\x16\r]\xe0'
tRp2324
sa(dp2325
S'trial_loop.thisTrialN'
p2326
I101
sg894
g947
sS'block_loop.thisIndex'
p2327
g888
sg38
S'left'
p2328
sg58
g62
sS'trial_loop.thisN'
p2329
I101
sg33
g958
sg63
g64
sS'trial_loop.thisIndex'
p2330
g59
(g98
S'e\x00\x00\x00'
tRp2331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2332
I0
sg903
g955
sS'block_loop.thisRepN'
p2333
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2334
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2335
Nsg69
Vn
sS'block_loop.thisTrialN'
p2336
I0
sg39
F1.0334475821837259
sg34
g752
(S'\x07\xdf\n\x01\x10-\x1d\x05\xd40'
tRp2337
sa(dp2338
S'trial_loop.thisTrialN'
p2339
I102
sg894
g1639
sS'block_loop.thisIndex'
p2340
g888
sg38
S'right'
p2341
sg58
g62
sS'trial_loop.thisN'
p2342
I102
sg33
g1503
sg63
g64
sS'trial_loop.thisIndex'
p2343
g59
(g98
S'f\x00\x00\x00'
tRp2344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2345
I0
sg903
g1646
sS'block_loop.thisRepN'
p2346
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2347
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p2348
Nsg69
Vn
sS'block_loop.thisTrialN'
p2349
I0
sg39
F1.6834532271568605
sg34
g752
(S'\x07\xdf\n\x01\x10-#\x06\xdd\xd0'
tRp2350
sa(dp2351
S'trial_loop.thisTrialN'
p2352
I103
sg894
g2169
sS'block_loop.thisIndex'
p2353
g888
sg38
S'right'
p2354
sg58
g62
sS'trial_loop.thisN'
p2355
I103
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p2356
g59
(g98
S'g\x00\x00\x00'
tRp2357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2358
I0
sg903
g2176
sS'block_loop.thisRepN'
p2359
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2360
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p2361
Nsg69
Vn
sS'block_loop.thisTrialN'
p2362
I0
sg39
F0.95011557931502466
sg34
g752
(S'\x07\xdf\n\x01\x10-*\x02i0'
tRp2363
sa(dp2364
S'trial_loop.thisTrialN'
p2365
I104
sg894
S'5-pineapple.png'
p2366
sS'block_loop.thisIndex'
p2367
g888
sg38
S'left'
p2368
sg58
g62
sS'trial_loop.thisN'
p2369
I104
sg33
g1213
sg63
g64
sS'trial_loop.thisIndex'
p2370
g59
(g98
S'h\x00\x00\x00'
tRp2371
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2372
I0
sg903
S'40-sardines.png'
p2373
sS'block_loop.thisRepN'
p2374
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2375
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p2376
Nsg69
Vn
sS'block_loop.thisTrialN'
p2377
I0
sg39
F1.2501873103356047
sg34
g752
(S'\x07\xdf\n\x01\x10-0\x02B '
tRp2378
sa(dp2379
S'trial_loop.thisTrialN'
p2380
I105
sg894
g1128
sS'block_loop.thisIndex'
p2381
g888
sg38
S'right'
p2382
sg58
g62
sS'trial_loop.thisN'
p2383
I105
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2384
g59
(g98
S'i\x00\x00\x00'
tRp2385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2386
I0
sg903
g1136
sS'block_loop.thisRepN'
p2387
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2388
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2389
Nsg69
Vn
sS'block_loop.thisTrialN'
p2390
I0
sg39
F0.91678061141283251
sg34
g752
(S'\x07\xdf\n\x01\x10-6\x06h\xa0'
tRp2391
sa(dp2392
S'trial_loop.thisTrialN'
p2393
I106
sg894
g1758
sS'block_loop.thisIndex'
p2394
g888
sg38
S'right'
p2395
sg58
g62
sS'trial_loop.thisN'
p2396
I106
sg33
g1368
sg63
g64
sS'trial_loop.thisIndex'
p2397
g59
(g98
S'j\x00\x00\x00'
tRp2398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2399
I0
sg903
g1765
sS'block_loop.thisRepN'
p2400
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2401
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2402
Nsg69
Vn
sS'block_loop.thisTrialN'
p2403
I0
sg39
F0.81679794545925688
sg34
g752
(S'\x07\xdf\n\x01\x10.\x00\x05\xc8x'
tRp2404
sa(dp2405
S'trial_loop.thisTrialN'
p2406
I107
sg894
g1162
sS'block_loop.thisIndex'
p2407
g888
sg38
S'left'
p2408
sg58
g62
sS'trial_loop.thisN'
p2409
I107
sg33
g975
sg63
g64
sS'trial_loop.thisIndex'
p2410
g59
(g98
S'k\x00\x00\x00'
tRp2411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2412
I0
sg903
g1169
sS'block_loop.thisRepN'
p2413
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2414
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2415
Nsg69
Vn
sS'block_loop.thisTrialN'
p2416
I0
sg39
F0.71687857158394763
sg34
g752
(S'\x07\xdf\n\x01\x10.\x06\x03~\x88'
tRp2417
sa(dp2418
S'trial_loop.thisTrialN'
p2419
I108
sg894
g1758
sS'block_loop.thisIndex'
p2420
g888
sg38
S'right'
p2421
sg58
g62
sS'trial_loop.thisN'
p2422
I108
sg33
g1368
sg63
g64
sS'trial_loop.thisIndex'
p2423
g59
(g98
S'l\x00\x00\x00'
tRp2424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2425
I0
sg903
g1765
sS'block_loop.thisRepN'
p2426
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2427
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2428
Nsg69
Vn
sS'block_loop.thisTrialN'
p2429
I0
sg39
F1.7833862858060456
sg34
g752
(S'\x07\xdf\n\x01\x10.\x0b\x0e\xcd\x10'
tRp2430
sa(dp2431
S'trial_loop.thisTrialN'
p2432
I109
sg894
g1015
sS'block_loop.thisIndex'
p2433
g888
sg38
S'right'
p2434
sg58
g62
sS'trial_loop.thisN'
p2435
I109
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2436
g59
(g98
S'm\x00\x00\x00'
tRp2437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2438
I0
sg903
g1023
sS'block_loop.thisRepN'
p2439
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2440
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2441
Nsg69
Vn
sS'block_loop.thisTrialN'
p2442
I0
sg39
F1.2668676237626642
sg34
g752
(S'\x07\xdf\n\x01\x10.\x12\x0c\x028'
tRp2443
sa(dp2444
S'trial_loop.thisTrialN'
p2445
I110
sg894
g1310
sS'block_loop.thisIndex'
p2446
g888
sg38
S'left'
p2447
sg58
g62
sS'trial_loop.thisN'
p2448
I110
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p2449
g59
(g98
S'n\x00\x00\x00'
tRp2450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2451
I0
sg903
g1317
sS'block_loop.thisRepN'
p2452
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2453
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p2454
Nsg69
Vn
sS'block_loop.thisTrialN'
p2455
I0
sg39
F0.816785971281206
sg34
g752
(S'\x07\xdf\n\x01\x10.\x19\x01[\xa8'
tRp2456
sa(dp2457
S'trial_loop.thisTrialN'
p2458
I111
sg894
g1280
sS'block_loop.thisIndex'
p2459
g888
sg38
S'right'
p2460
sg58
g62
sS'trial_loop.thisN'
p2461
I111
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p2462
g59
(g98
S'o\x00\x00\x00'
tRp2463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2464
I0
sg903
g1288
sS'block_loop.thisRepN'
p2465
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2466
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2467
Nsg69
Vn
sS'block_loop.thisTrialN'
p2468
I0
sg39
F1.0167627071677998
sg34
g752
(S'\x07\xdf\n\x01\x10.\x1e\x0eS\xf8'
tRp2469
sa(dp2470
S'trial_loop.thisTrialN'
p2471
I112
sg894
g1340
sS'block_loop.thisIndex'
p2472
g888
sg38
S'right'
p2473
sg58
g62
sS'trial_loop.thisN'
p2474
I112
sg33
g1351
sg63
g64
sS'trial_loop.thisIndex'
p2475
g59
(g98
S'p\x00\x00\x00'
tRp2476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2477
I0
sg903
g1348
sS'block_loop.thisRepN'
p2478
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2479
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2480
Nsg69
Vn
sS'block_loop.thisTrialN'
p2481
I0
sg39
F1.1835310593014583
sg34
g752
(S'\x07\xdf\n\x01\x10.$\x0f#\x00'
tRp2482
sa(dp2483
S'trial_loop.thisTrialN'
p2484
I113
sg894
g915
sS'block_loop.thisIndex'
p2485
g888
sg38
S'right'
p2486
sg58
g62
sS'trial_loop.thisN'
p2487
I113
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p2488
g59
(g98
S'q\x00\x00\x00'
tRp2489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2490
I0
sg903
g923
sS'block_loop.thisRepN'
p2491
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2492
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p2493
Nsg69
Vn
sS'block_loop.thisTrialN'
p2494
I0
sg39
F1.1333216252496641
sg34
g752
(S'\x07\xdf\n\x01\x10.+\x03K\xc0'
tRp2495
sa(dp2496
S'trial_loop.thisTrialN'
p2497
I114
sg894
g1128
sS'block_loop.thisIndex'
p2498
g888
sg38
S'right'
p2499
sg58
g62
sS'trial_loop.thisN'
p2500
I114
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2501
g59
(g98
S'r\x00\x00\x00'
tRp2502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2503
I0
sg903
g1136
sS'block_loop.thisRepN'
p2504
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2505
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2506
Nsg69
Vn
sS'block_loop.thisTrialN'
p2507
I0
sg39
F1.100219868694694
sg34
g752
(S'\x07\xdf\n\x01\x10.1\x05\xc4\x90'
tRp2508
sa(dp2509
S'trial_loop.thisTrialN'
p2510
I115
sg894
g1499
sS'block_loop.thisIndex'
p2511
g888
sg38
S'left'
p2512
sg58
g62
sS'trial_loop.thisN'
p2513
I115
sg33
g1503
sg63
g64
sS'trial_loop.thisIndex'
p2514
g59
(g98
S's\x00\x00\x00'
tRp2515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2516
I0
sg903
g1507
sS'block_loop.thisRepN'
p2517
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2518
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p2519
Nsg69
Vn
sS'block_loop.thisTrialN'
p2520
I0
sg39
F0.90009488109717495
sg34
g752
(S'\x07\xdf\n\x01\x10.7\x07\xc4H'
tRp2521
sa(dp2522
S'trial_loop.thisTrialN'
p2523
I116
sg894
S'45-chewy_nougat_redo.png'
p2524
sS'block_loop.thisIndex'
p2525
g888
sg38
S'left'
p2526
sg58
g62
sS'trial_loop.thisN'
p2527
I116
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p2528
g59
(g98
S't\x00\x00\x00'
tRp2529
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2530
I0
sg903
S'41-peanuts_redo.png'
p2531
sS'block_loop.thisRepN'
p2532
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2533
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F1.0835318575809652
sg34
g752
(S'\x07\xdf\n\x01\x10/\x01\x06\xab\x08'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1340
sS'block_loop.thisIndex'
p2539
g888
sg38
S'right'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1348
sS'block_loop.thisRepN'
p2545
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2546
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F1.7167708039924037
sg34
g752
(S'\x07\xdf\n\x01\x10/\x07\x08l@'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g1209
sS'block_loop.thisIndex'
p2552
g888
sg38
S'right'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1213
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g1217
sS'block_loop.thisRepN'
p2558
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2559
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F1.5500685949264152
sg34
g752
(S'\x07\xdf\n\x01\x10/\x0e\x04\xaf8'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1340
sS'block_loop.thisIndex'
p2565
g888
sg38
S'left'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1348
sS'block_loop.thisRepN'
p2571
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2572
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F0.96688398847254575
sg34
g752
(S'\x07\xdf\n\x01\x10/\x14\r\x98x'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g947
sS'block_loop.thisIndex'
p2578
g888
sg38
S'left'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g955
sS'block_loop.thisRepN'
p2584
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2585
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F0.96677992717377492
sg34
g752
(S'\x07\xdf\n\x01\x10/\x1a\r\xaf\xe8'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1128
sS'block_loop.thisIndex'
p2591
g888
sg38
S'right'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1139
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1136
sS'block_loop.thisRepN'
p2597
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2598
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F0.98345824490388623
sg34
g752
(S'\x07\xdf\n\x01\x10/ \r\x88\xd8'
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1209
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1213
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1217
sS'block_loop.thisRepN'
p2610
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2611
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F1.1167590578952513
sg34
g752
(S'\x07\xdf\n\x01\x10/&\r\xde\xc8'
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g981
sS'block_loop.thisIndex'
p2617
g888
sg38
S'left'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g989
sS'block_loop.thisRepN'
p2623
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2624
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F1.0834468979483063
sg34
g752
(S'\x07\xdf\n\x01\x10/-\x00\xd6\xd8'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1081
sS'block_loop.thisIndex'
p2630
g888
sg38
S'left'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1089
sS'block_loop.thisRepN'
p2636
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2637
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.0172077474053367
sg34
g752
(S'\x07\xdf\n\x01\x10/3\x02\x98\x10'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g2366
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1213
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g2373
sS'block_loop.thisRepN'
p2649
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2650
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.9334212960166042
sg34
g752
(S'\x07\xdf\n\x01\x10/9\x03g\x18'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g964
sS'block_loop.thisIndex'
p2656
g888
sg38
S'right'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g972
sS'block_loop.thisRepN'
p2662
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2663
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F1.2001021796422719
sg34
g752
(S'\x07\xdf\n\x01\x100\x04\x02\xfd\xa0'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1194
sS'block_loop.thisIndex'
p2669
g888
sg38
S'left'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1201
sS'block_loop.thisRepN'
p2675
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2676
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F1.066820753414504
sg34
g752
(S'\x07\xdf\n\x01\x100\n\x06l\x88'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g2366
sS'block_loop.thisIndex'
p2682
g888
sg38
S'left'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1220
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g2373
sS'block_loop.thisRepN'
p2688
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2689
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F1.1500181893461559
sg34
g752
(S'\x07\xdf\n\x01\x100\x10\x07\xef@'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1357
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1368
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1365
sS'block_loop.thisRepN'
p2701
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2702
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F1.8168441315719974
sg34
g752
(S'\x07\xdf\n\x01\x100\x16\n\xe1('
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1310
sS'block_loop.thisIndex'
p2708
g888
sg38
S'left'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1317
sS'block_loop.thisRepN'
p2714
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2715
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F1.1667789008170075
sg34
g752
(S'\x07\xdf\n\x01\x100\x1d\x08\x93P'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g1639
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g1503
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g1646
sS'block_loop.thisRepN'
p2727
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F1.2334340114539373
sg34
g752
(S'\x07\xdf\n\x01\x100#\x0b\x858'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1098
sS'block_loop.thisIndex'
p2734
g888
sg38
S'left'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1106
sS'block_loop.thisRepN'
p2740
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.2167653871038056
sg34
g752
(S'\x07\xdf\n\x01\x100*\x00e\x90'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g895
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g904
sS'block_loop.thisRepN'
p2753
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.1167576323969115
sg34
g752
(S'\x07\xdf\n\x01\x1000\x04M\x90'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1758
sS'block_loop.thisIndex'
p2760
g888
sg38
S'right'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1765
sS'block_loop.thisRepN'
p2766
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.0002181010786444
sg34
g752
(S'\x07\xdf\n\x01\x1006\x06\x87\xe0'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g2366
sS'block_loop.thisIndex'
p2773
g888
sg38
S'left'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1213
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g2373
sS'block_loop.thisRepN'
p2779
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.95010303494200343
sg34
g752
(S'\x07\xdf\n\x01\x101\x00\x07\x18h'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g1864
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g1871
sS'block_loop.thisRepN'
p2792
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.5500742969161365
sg34
g752
(S'\x07\xdf\n\x01\x101\x06\x06\xb6\xc0'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1280
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1288
sS'block_loop.thisRepN'
p2805
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F2.200063976317324
sg34
g752
(S'\x07\xdf\n\x01\x101\r\x00]\xc0'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1145
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1153
sS'block_loop.thisRepN'
p2818
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.116781010550767
sg34
g752
(S'\x07\xdf\n\x01\x101\x14\x03\xffp'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g2169
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g2176
sS'block_loop.thisRepN'
p2831
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.3168811944997287
sg34
g752
(S'\x07\xdf\n\x01\x101\x1a\x069\xc0'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1499
sS'block_loop.thisIndex'
p2838
g888
sg38
S'left'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1503
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1507
sS'block_loop.thisRepN'
p2844
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F1.066768580214557
sg34
g752
(S'\x07\xdf\n\x01\x101 \x0b\x90\xf0'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g2169
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g2176
sS'block_loop.thisRepN'
p2857
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F1.0334455864867778
sg34
g752
(S'\x07\xdf\n\x01\x101&\r\x13\xa8'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1905
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1181
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1912
sS'block_loop.thisRepN'
p2870
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.0834523148369044
sg34
g752
(S'\x07\xdf\n\x01\x101,\x0e!0'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1325
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1332
sS'block_loop.thisRepN'
p2883
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.0667822649920708
sg34
g752
(S'\x07\xdf\n\x01\x1013\x00\xa0('
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1758
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1765
sS'block_loop.thisRepN'
p2896
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.3001820645076805
sg34
g752
(S'\x07\xdf\n\x01\x1019\x02"\xe0'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1162
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g968
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1169
sS'block_loop.thisRepN'
p2909
I0
sg906
g968
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g975
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.95010645613365341
sg34
g752
(S'\x07\xdf\n\x01\x102\x03\x07;\x90'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g998
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1006
sS'block_loop.thisRepN'
p2922
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.0001049165985023
sg34
g752
(S'\x07\xdf\n\x01\x102\t\x07\x14\x80'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1325
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1332
sS'block_loop.thisRepN'
p2935
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.2667672687603044
sg34
g752
(S'\x07\xdf\n\x01\x102\x0f\x07jp'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1032
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1040
sS'block_loop.thisRepN'
p2948
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F1.283454709671787
sg34
g752
(S'\x07\xdf\n\x01\x102\x15\x0c\x06 '
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1098
sS'block_loop.thisIndex'
p2955
g888
sg38
S'left'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1106
sS'block_loop.thisRepN'
p2961
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.75021040339561296
sg34
g752
(S'\x07\xdf\n\x01\x102\x1c\x01\x9e\x10'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g1032
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g1040
sS'block_loop.thisRepN'
p2974
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.16688581310882
sg34
g752
(S'\x07\xdf\n\x01\x102!\r\xa40'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1128
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1136
sS'block_loop.thisRepN'
p2987
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.183408751639945
sg34
g752
(S'\x07\xdf\n\x01\x102(\x01S\xd8'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1177
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1181
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1185
sS'block_loop.thisRepN'
p3000
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F1.7001654717205383
sg34
g752
(S'\x07\xdf\n\x01\x102.\x04\xc2\xc0'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g2524
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g2531
sS'block_loop.thisRepN'
p3013
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F1.3667667555819207
sg34
g752
(S'\x07\xdf\n\x01\x1025\x00\x88\xb8'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1374
sS'block_loop.thisIndex'
p3020
g888
sg38
S'left'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1382
sS'block_loop.thisRepN'
p3026
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.3835585428896593
sg34
g752
(S'\x07\xdf\n\x01\x102;\x06\xd2\x18'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g981
sS'block_loop.thisIndex'
p3033
g888
sg38
S'right'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g989
sS'block_loop.thisRepN'
p3039
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.2501071973929356
sg34
g752
(S'\x07\xdf\n\x01\x103\x05\r\x17\x90'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g895
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g904
sS'block_loop.thisRepN'
p3052
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.1331608291620796
sg34
g752
(S'\x07\xdf\n\x01\x103\x0c\x026h'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1081
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1089
sS'block_loop.thisRepN'
p3065
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.1334379458239709
sg34
g752
(S'\x07\xdf\n\x01\x103\x12\x04\xaf8'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1325
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1332
sS'block_loop.thisRepN'
p3078
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.0833935843511426
sg34
g752
(S'\x07\xdf\n\x01\x103\x18\x07(\x08'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1985
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1992
sS'block_loop.thisRepN'
p3091
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.3668867824453628
sg34
g752
(S'\x07\xdf\n\x01\x103\x1e\x08\xed('
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1032
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1043
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1040
sS'block_loop.thisRepN'
p3104
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.0000775470507506
sg34
g752
(S'\x07\xdf\n\x01\x103$\x0f2\xa0'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1194
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1201
sS'block_loop.thisRepN'
p3117
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F0.93343441058823373
sg34
g752
(S'\x07\xdf\n\x01\x103+\x00FP'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1357
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1365
sS'block_loop.thisRepN'
p3130
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F1.4834297349589178
sg34
g752
(S'\x07\xdf\n\x01\x1030\x0f&\xe8'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1471
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1478
sS'block_loop.thisRepN'
p3143
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.90013764601098956
sg34
g752
(S'\x07\xdf\n\x01\x1037\x07\xd3\xe8'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g1864
sS'block_loop.thisIndex'
p3150
g888
sg38
S'right'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g1385
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g1871
sS'block_loop.thisRepN'
p3156
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.93354730997452862
sg34
g752
(S'\x07\xdf\n\x01\x104\x01\x06\xba\xa8'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g2524
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g2531
sS'block_loop.thisRepN'
p3169
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F0.78344330569234444
sg34
g752
(S'\x07\xdf\n\x01\x104\x07\x06\x1eh'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g981
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g989
sS'block_loop.thisRepN'
p3182
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F1.2001266981933441
sg34
g752
(S'\x07\xdf\n\x01\x104\r\x03Wx'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1905
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1187
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1912
sS'block_loop.thisRepN'
p3195
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.9834388581402891
sg34
g752
(S'\x07\xdf\n\x01\x104\x13\x07\x00\xf8'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g2524
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1291
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g2531
sS'block_loop.thisRepN'
p3208
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.76687446614960209
sg34
g752
(S'\x07\xdf\n\x01\x104\x1a\x07O\x18'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g998
sS'block_loop.thisIndex'
p3215
g888
sg38
S'right'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1009
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1006
sS'block_loop.thisRepN'
p3221
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F0.88363637503789505
sg34
g752
(S'\x07\xdf\n\x01\x104 \x04\x12\xf8'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g915
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g923
sS'block_loop.thisRepN'
p3234
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.4999586605808872
sg34
g752
(S'\x07\xdf\n\x01\x104&\x02\xf9\xb8'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1145
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1149
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1153
sS'block_loop.thisRepN'
p3247
I0
sg906
g1149
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g1156
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.95009961374671548
sg34
g752
(S'\x07\xdf\n\x01\x104,\n\xec\xe0'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1572
sS'block_loop.thisIndex'
p3254
g888
sg38
S'right'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1579
sS'block_loop.thisRepN'
p3260
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.0834397704602452
sg34
g752
(S'\x07\xdf\n\x01\x1042\n\xc5\xd0'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1357
sS'block_loop.thisIndex'
p3267
g888
sg38
S'right'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1361
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1365
sS'block_loop.thisRepN'
p3273
I0
sg906
g1361
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1368
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.95010303493836545
sg34
g752
(S'\x07\xdf\n\x01\x1048\x0c\x87\x08'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g1471
sS'block_loop.thisIndex'
p3280
g888
sg38
S'left'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g1478
sS'block_loop.thisRepN'
p3286
I0
sg906
g1036
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1043
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.16688581310882
sg34
g752
(S'\x07\xdf\n\x01\x105\x02\x0cc\xe0'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1864
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1385
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1871
sS'block_loop.thisRepN'
p3299
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.366775878763292
sg34
g752
(S'\x07\xdf\n\x01\x105\t\x00\x13\x88'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1049
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1060
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1057
sS'block_loop.thisRepN'
p3312
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.63344992000202183
sg34
g752
(S'\x07\xdf\n\x01\x105\x0f\x06\x1eh'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g947
sS'block_loop.thisIndex'
p3319
g888
sg38
S'left'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g955
sS'block_loop.thisRepN'
p3325
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.85008957824538811
sg34
g752
(S'\x07\xdf\n\x01\x105\x15\x018\x80'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1430
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1053
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1437
sS'block_loop.thisRepN'
p3338
I0
sg906
g1053
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1060
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.0001052016996255
sg34
g752
(S'\x07\xdf\n\x01\x105\x1a\x0e\xa9\xe8'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1864
sS'block_loop.thisIndex'
p3345
g888
sg38
S'left'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1385
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1871
sS'block_loop.thisRepN'
p3351
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F0.81679566466482356
sg34
g752
(S'\x07\xdf\n\x01\x105 \x0e\xfb\xf0'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1639
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1503
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1646
sS'block_loop.thisRepN'
p3364
I0
sg906
g1503
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1510
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.65019152981039952
sg34
g752
(S'\x07\xdf\n\x01\x105&\x0c\xb2\x00'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g895
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g904
sS'block_loop.thisRepN'
p3377
I0
sg906
g899
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F0.94984929643032956
sg34
g752
(S'\x07\xdf\n\x01\x105,\x08\x06\xb0'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1516
sS'block_loop.thisIndex'
p3384
g888
sg38
S'left'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1344
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1523
sS'block_loop.thisRepN'
p3390
I0
sg906
g1344
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g1351
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F0.75012629905540962
sg34
g752
(S'\x07\xdf\n\x01\x1052\x07\xa5\x08'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1325
sS'block_loop.thisIndex'
p3397
g888
sg38
S'right'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1332
sS'block_loop.thisRepN'
p3403
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.85015001933061285
sg34
g752
(S'\x07\xdf\n\x01\x1058\x04h\xe8'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1985
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1992
sS'block_loop.thisRepN'
p3416
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.1667729137298011
sg34
g752
(S'\x07\xdf\n\x01\x106\x02\x02\x98\x10'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1374
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1385
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1382
sS'block_loop.thisRepN'
p3429
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.050210859550134
sg34
g752
(S'\x07\xdf\n\x01\x106\x08\x05\xc8x'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1557
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1564
sS'block_loop.thisRepN'
p3442
I0
sg906
g1132
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F0.96680159473180538
sg34
g752
(S'\x07\xdf\n\x01\x106\x0e\x07\x10\x98'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1066
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1073
sS'block_loop.thisRepN'
p3455
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.2168104328120535
sg34
g752
(S'\x07\xdf\n\x01\x106\x14\x06\xe9\x88'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1985
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1992
sS'block_loop.thisRepN'
p3468
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.5167872257225099
sg34
g752
(S'\x07\xdf\n\x01\x106\x1a\n\xd1\x88'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g981
sS'block_loop.thisIndex'
p3475
g888
sg38
S'left'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g985
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g989
sS'block_loop.thisRepN'
p3481
I0
sg906
g985
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g992
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.70011928560779779
sg34
g752
(S'\x07\xdf\n\x01\x106!\x03\xfb\x88'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1572
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g951
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1579
sS'block_loop.thisRepN'
p3494
I0
sg906
g951
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g958
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.0335393842069607
sg34
g752
(S'\x07\xdf\n\x01\x106&\x0f\x0b\x90'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1098
sS'block_loop.thisIndex'
p3501
g888
sg38
S'left'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1106
sS'block_loop.thisRepN'
p3507
I0
sg906
g1108
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.0834366343660804
sg34
g752
(S'\x07\xdf\n\x01\x106-\x00\xd2\xf0'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g2169
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1091
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g2176
sS'block_loop.thisRepN'
p3520
I0
sg906
g1091
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g1085
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.8501947799413756
sg34
g752
(S'\x07\xdf\n\x01\x1063\x02\x98\x10'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1905
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1187
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1912
sS'block_loop.thisRepN'
p3533
I0
sg906
g1187
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1181
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.2834313315142936
sg34
g752
(S'\x07\xdf\n\x01\x1069\x00\xc78'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g2366
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1213
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g2373
sS'block_loop.thisRepN'
p3546
I0
sg906
g1213
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1220
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F3.3833652454668481
sg34
g752
(S'\x07\xdf\n\x01\x107\x03\x05\xa1h'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1194
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1201
sS'block_loop.thisRepN'
p3559
I0
sg906
g1019
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1026
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.2001974028571567
sg34
g752
(S'\x07\xdf\n\x01\x107\x0b\x0c\x19\xa8'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g915
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g925
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g923
sS'block_loop.thisRepN'
p3572
I0
sg906
g925
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g919
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F1.1333316037307668
sg34
g752
(S'\x07\xdf\n\x01\x107\x12\x00Bh'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g1066
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g1002
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g1073
sS'block_loop.thisRepN'
p3585
I0
sg906
g1002
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g1009
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F1.2001917008710734
sg34
g752
(S'\x07\xdf\n\x01\x107\x18\x02\xf9\xb8'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g2524
sS'block_loop.thisIndex'
p3592
g888
sg38
S'left'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1284
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g2531
sS'block_loop.thisRepN'
p3598
I0
sg906
g1284
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g1291
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F1.0167823790288821
sg34
g752
(S'\x07\xdf\n\x01\x107\x1e\x06d\xb8'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1374
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1378
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1382
sS'block_loop.thisRepN'
p3611
I0
sg906
g1378
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1385
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.68347090332099469
sg34
g752
(S'\x07\xdf\n\x01\x107$\x073\xc0'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F12.000043335116061
sg56
Vl
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vl
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'2-steamed_puddings.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'right'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'20-fruit_pastilles.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'20-fruit_pastilles.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'2-steamed_puddings.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.600104973615089
sg34
g752
(S'\x07\xdf\n\x01\x107;\x03\x8e('
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'49-yorkie.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'49-yorkie.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'35-raisins.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
S'35-raisins.png'
p3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3664
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.0499665293245926
sg34
g752
(S'\x07\xdf\n\x01\x108\x05\x0c\xec\x98'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'46-pistachios.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'left'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'29-beans.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'29-beans.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'46-pistachios.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.78352056764197187
sg34
g752
(S'\x07\xdf\n\x01\x108\x0b\x0e4\xb8'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'36-fig_rolls.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'36-fig_rolls.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'34-hula_hoops_bbq_beef_redo.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.2334351518511539
sg34
g752
(S'\x07\xdf\n\x01\x108\x11\x0bq\xb0'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'3-ellas_strawberries_apples.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'left'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'13-mccoys_steak_crisps.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'13-mccoys_steak_crisps.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
S'3-ellas_strawberries_apples.png'
p3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3715
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.83355266984290211
sg34
g752
(S'\x07\xdf\n\x01\x108\x18\x00R\x08'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'16-skips_prawn.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'16-skips_prawn.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
S'42-mrkipling_lemon_slices.png'
p3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3732
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F0.8333100502131856
sg34
g752
(S'\x07\xdf\n\x01\x108\x1d\r\x88\xd8'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'7-olives.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'right'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'7-olives.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'22-daim.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3748
I1
sg3646
S'22-daim.png'
p3749
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F0.98346223629778251
sg34
g752
(S'\x07\xdf\n\x01\x108#\x0by\x80'
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'35-raisins.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'left'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p3759
g59
(g98
S'\x07\x00\x00\x00'
tRp3760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3761
I0
sg3641
S'49-yorkie.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3764
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p3765
Nsg69
Vn
sS'block_loop.thisTrialN'
p3766
I0
sg39
F0.93346605662736692
sg34
g752
(S'\x07\xdf\n\x01\x108)\x0b\xcfp'
tRp3767
sa(dp3768
S'trial_loop.thisTrialN'
p3769
I8
sg3632
S'31-hobnobs.png'
p3770
sS'block_loop.thisIndex'
p3771
g3626
sg38
S'right'
p3772
sg58
g62
sS'trial_loop.thisN'
p3773
I8
sg33
S'25-kitkat.png'
p3774
sg63
g64
sS'trial_loop.thisIndex'
p3775
g59
(g98
S'\x08\x00\x00\x00'
tRp3776
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3777
I0
sg3641
S'25-kitkat.png'
p3778
sS'block_loop.thisRepN'
p3779
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3780
I1
sg3646
S'31-hobnobs.png'
p3781
sg55
g11
sS'block_loop.thisTrial'
p3782
Nsg69
Vn
sS'block_loop.thisTrialN'
p3783
I0
sg39
F1.2000845034744998
sg34
g752
(S'\x07\xdf\n\x01\x108/\x0b/H'
tRp3784
sa(dp3785
S'trial_loop.thisTrialN'
p3786
I9
sg3632
S'45-chewy_nougat_redo.png'
p3787
sS'block_loop.thisIndex'
p3788
g3626
sg38
S'right'
p3789
sg58
g62
sS'trial_loop.thisN'
p3790
I9
sg33
S'45-chewy_nougat_redo.png'
p3791
sg63
g64
sS'trial_loop.thisIndex'
p3792
g59
(g98
S'\t\x00\x00\x00'
tRp3793
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3794
I0
sg3641
S'41-peanuts_redo.png'
p3795
sS'block_loop.thisRepN'
p3796
I1
sg3644
S'41-peanuts_redo.png'
p3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3798
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p3799
Nsg69
Vn
sS'block_loop.thisTrialN'
p3800
I0
sg39
F0.98353750255409977
sg34
g752
(S'\x07\xdf\n\x01\x1085\x0e\xd8\xc8'
tRp3801
sa(dp3802
S'trial_loop.thisTrialN'
p3803
I10
sg3632
S'27-hartleys_raspberries_jelly.png'
p3804
sS'block_loop.thisIndex'
p3805
g3626
sg38
S'left'
p3806
sg58
g62
sS'trial_loop.thisN'
p3807
I10
sg33
S'51-mars.png'
p3808
sg63
g64
sS'trial_loop.thisIndex'
p3809
g59
(g98
S'\n\x00\x00\x00'
tRp3810
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3811
I0
sg3641
S'51-mars.png'
p3812
sS'block_loop.thisRepN'
p3813
I1
sg3644
S'27-hartleys_raspberries_jelly.png'
p3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3815
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p3816
Nsg69
Vn
sS'block_loop.thisTrialN'
p3817
I0
sg39
F0.96685718912704033
sg34
g752
(S'\x07\xdf\n\x01\x108;\x0e\xf08'
tRp3818
sa(dp3819
S'trial_loop.thisTrialN'
p3820
I11
sg3632
S'50-polo.png'
p3821
sS'block_loop.thisIndex'
p3822
g3626
sg38
S'right'
p3823
sg58
g62
sS'trial_loop.thisN'
p3824
I11
sg33
S'48-twix.png'
p3825
sg63
g64
sS'trial_loop.thisIndex'
p3826
g59
(g98
S'\x0b\x00\x00\x00'
tRp3827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3828
I0
sg3641
S'48-twix.png'
p3829
sS'block_loop.thisRepN'
p3830
I1
sg3644
S'50-polo.png'
p3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3832
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p3833
Nsg69
Vn
sS'block_loop.thisTrialN'
p3834
I0
sg39
F0.75011917156734853
sg34
g752
(S'\x07\xdf\n\x01\x109\x05\x0f\x07\xa8'
tRp3835
sa(dp3836
S'trial_loop.thisTrialN'
p3837
I12
sg3632
S'19-caramello_redo.png'
p3838
sS'block_loop.thisIndex'
p3839
g3626
sg38
S'left'
p3840
sg58
g62
sS'trial_loop.thisN'
p3841
I12
sg33
S'19-caramello_redo.png'
p3842
sg63
g64
sS'trial_loop.thisIndex'
p3843
g59
(g98
S'\x0c\x00\x00\x00'
tRp3844
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3845
I0
sg3641
S'30-spaghetti_hoops.png'
p3846
sS'block_loop.thisRepN'
p3847
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3848
I1
sg3646
S'30-spaghetti_hoops.png'
p3849
sg55
g11
sS'block_loop.thisTrial'
p3850
Nsg69
Vn
sS'block_loop.thisTrialN'
p3851
I0
sg39
F0.95009875844698399
sg34
g752
(S'\x07\xdf\n\x01\x109\x0b\x0b\xcb\x88'
tRp3852
sa(dp3853
S'trial_loop.thisTrialN'
p3854
I13
sg3632
g3633
sS'block_loop.thisIndex'
p3855
g3626
sg38
S'right'
p3856
sg58
g62
sS'trial_loop.thisN'
p3857
I13
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3858
g59
(g98
S'\r\x00\x00\x00'
tRp3859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3860
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3861
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3862
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3863
Nsg69
Vn
sS'block_loop.thisTrialN'
p3864
I0
sg39
F1.2667615667705832
sg34
g752
(S'\x07\xdf\n\x01\x109\x11\x0bi\xe0'
tRp3865
sa(dp3866
S'trial_loop.thisTrialN'
p3867
I14
sg3632
S'42-mrkipling_lemon_slices.png'
p3868
sS'block_loop.thisIndex'
p3869
g3626
sg38
S'right'
p3870
sg58
g62
sS'trial_loop.thisN'
p3871
I14
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p3872
g59
(g98
S'\x0e\x00\x00\x00'
tRp3873
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3874
I0
sg3641
S'16-skips_prawn.png'
p3875
sS'block_loop.thisRepN'
p3876
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3877
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p3878
Nsg69
Vn
sS'block_loop.thisTrialN'
p3879
I0
sg39
F0.68333462578448234
sg34
g752
(S'\x07\xdf\n\x01\x109\x18\x00\xc3P'
tRp3880
sa(dp3881
S'trial_loop.thisTrialN'
p3882
I15
sg3632
S'13-mccoys_steak_crisps.png'
p3883
sS'block_loop.thisIndex'
p3884
g3626
sg38
S'right'
p3885
sg58
g62
sS'trial_loop.thisN'
p3886
I15
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p3887
g59
(g98
S'\x0f\x00\x00\x00'
tRp3888
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3889
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3890
sS'block_loop.thisRepN'
p3891
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3892
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3893
Nsg69
Vn
sS'block_loop.thisTrialN'
p3894
I0
sg39
F0.80022055293375161
sg34
g752
(S'\x07\xdf\n\x01\x109\x1d\x0b\xd3X'
tRp3895
sa(dp3896
S'trial_loop.thisTrialN'
p3897
I16
sg3632
S'1-treacle_cookies.png'
p3898
sS'block_loop.thisIndex'
p3899
g3626
sg38
S'left'
p3900
sg58
g62
sS'trial_loop.thisN'
p3901
I16
sg33
S'1-treacle_cookies.png'
p3902
sg63
g64
sS'trial_loop.thisIndex'
p3903
g59
(g98
S'\x10\x00\x00\x00'
tRp3904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3905
I0
sg3641
S'21-nakd_banana_crunch.png'
p3906
sS'block_loop.thisRepN'
p3907
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3908
I1
sg3646
S'21-nakd_banana_crunch.png'
p3909
sg55
g11
sS'block_loop.thisTrial'
p3910
Nsg69
Vn
sS'block_loop.thisTrialN'
p3911
I0
sg39
F0.78347694742842577
sg34
g752
(S'\x07\xdf\n\x01\x109#\tN\xd0'
tRp3912
sa(dp3913
S'trial_loop.thisTrialN'
p3914
I17
sg3632
S'26-walkers_smoky_bacon.png'
p3915
sS'block_loop.thisIndex'
p3916
g3626
sg38
S'right'
p3917
sg58
g62
sS'trial_loop.thisN'
p3918
I17
sg33
S'44-crunch.png'
p3919
sg63
g64
sS'trial_loop.thisIndex'
p3920
g59
(g98
S'\x11\x00\x00\x00'
tRp3921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3922
I0
sg3641
S'44-crunch.png'
p3923
sS'block_loop.thisRepN'
p3924
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3925
I1
sg3646
S'26-walkers_smoky_bacon.png'
p3926
sg55
g11
sS'block_loop.thisTrial'
p3927
Nsg69
Vn
sS'block_loop.thisTrialN'
p3928
I0
sg39
F0.75011917157098651
sg34
g752
(S'\x07\xdf\n\x01\x109)\x06MH'
tRp3929
sa(dp3930
S'trial_loop.thisTrialN'
p3931
I18
sg3632
g3883
sS'block_loop.thisIndex'
p3932
g3626
sg38
S'right'
p3933
sg58
g62
sS'trial_loop.thisN'
p3934
I18
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p3935
g59
(g98
S'\x12\x00\x00\x00'
tRp3936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3937
I0
sg3641
g3890
sS'block_loop.thisRepN'
p3938
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3939
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p3940
Nsg69
Vn
sS'block_loop.thisTrialN'
p3941
I0
sg39
F0.76676641346057295
sg34
g752
(S'\x07\xdf\n\x01\x109/\x03\r@'
tRp3942
sa(dp3943
S'trial_loop.thisTrialN'
p3944
I19
sg3632
g3687
sS'block_loop.thisIndex'
p3945
g3626
sg38
S'left'
p3946
sg58
g62
sS'trial_loop.thisN'
p3947
I19
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p3948
g59
(g98
S'\x13\x00\x00\x00'
tRp3949
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3950
I0
sg3641
g3695
sS'block_loop.thisRepN'
p3951
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3952
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p3953
Nsg69
Vn
sS'block_loop.thisTrialN'
p3954
I0
sg39
F1.050108223753341
sg34
g752
(S'\x07\xdf\n\x01\x1095\x00\x0f\xa0'
tRp3955
sa(dp3956
S'trial_loop.thisTrialN'
p3957
I20
sg3632
S'44-crunch.png'
p3958
sS'block_loop.thisIndex'
p3959
g3626
sg38
S'left'
p3960
sg58
g62
sS'trial_loop.thisN'
p3961
I20
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p3962
g59
(g98
S'\x14\x00\x00\x00'
tRp3963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3964
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3965
sS'block_loop.thisRepN'
p3966
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3967
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p3968
Nsg69
Vn
sS'block_loop.thisTrialN'
p3969
I0
sg39
F1.1834632056343253
sg34
g752
(S'\x07\xdf\n\x01\x109;\x01W\xc0'
tRp3970
sa(dp3971
S'trial_loop.thisTrialN'
p3972
I21
sg3632
S'25-kitkat.png'
p3973
sS'block_loop.thisIndex'
p3974
g3626
sg38
S'left'
p3975
sg58
g62
sS'trial_loop.thisN'
p3976
I21
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p3977
g59
(g98
S'\x15\x00\x00\x00'
tRp3978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3979
I0
sg3641
S'31-hobnobs.png'
p3980
sS'block_loop.thisRepN'
p3981
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3982
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p3983
Nsg69
Vn
sS'block_loop.thisTrialN'
p3984
I0
sg39
F0.81726607875316404
sg34
g752
(S'\x07\xdf\n\x01\x10:\x05\x04\x84@'
tRp3985
sa(dp3986
S'trial_loop.thisTrialN'
p3987
I22
sg3632
S'40-sardines.png'
p3988
sS'block_loop.thisIndex'
p3989
g3626
sg38
S'right'
p3990
sg58
g62
sS'trial_loop.thisN'
p3991
I22
sg33
S'5-pineapple.png'
p3992
sg63
g64
sS'trial_loop.thisIndex'
p3993
g59
(g98
S'\x16\x00\x00\x00'
tRp3994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3995
I0
sg3641
S'5-pineapple.png'
p3996
sS'block_loop.thisRepN'
p3997
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p3998
I1
sg3646
S'40-sardines.png'
p3999
sg55
g11
sS'block_loop.thisTrial'
p4000
Nsg69
Vn
sS'block_loop.thisTrialN'
p4001
I0
sg39
F1.000099214608781
sg34
g752
(S'\x07\xdf\n\x01\x10:\x0b\x02:P'
tRp4002
sa(dp4003
S'trial_loop.thisTrialN'
p4004
I23
sg3632
g3721
sS'block_loop.thisIndex'
p4005
g3626
sg38
S'left'
p4006
sg58
g62
sS'trial_loop.thisN'
p4007
I23
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4008
g59
(g98
S'\x17\x00\x00\x00'
tRp4009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4010
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4011
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4012
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4013
Nsg69
Vn
sS'block_loop.thisTrialN'
p4014
I0
sg39
F0.91667284382128855
sg34
g752
(S'\x07\xdf\n\x01\x10:\x11\x02\xce\xc0'
tRp4015
sa(dp4016
S'trial_loop.thisTrialN'
p4017
I24
sg3632
S'41-peanuts_redo.png'
p4018
sS'block_loop.thisIndex'
p4019
g3626
sg38
S'left'
p4020
sg58
g62
sS'trial_loop.thisN'
p4021
I24
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p4022
g59
(g98
S'\x18\x00\x00\x00'
tRp4023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4024
I0
sg3641
S'45-chewy_nougat_redo.png'
p4025
sS'block_loop.thisRepN'
p4026
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4027
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p4028
Nsg69
Vn
sS'block_loop.thisTrialN'
p4029
I0
sg39
F0.78341451064989087
sg34
g752
(S'\x07\xdf\n\x01\x10:\x17\x02.\x98'
tRp4030
sa(dp4031
S'trial_loop.thisTrialN'
p4032
I25
sg3632
S'10-bounty_redo.png'
p4033
sS'block_loop.thisIndex'
p4034
g3626
sg38
S'right'
p4035
sg58
g62
sS'trial_loop.thisN'
p4036
I25
sg33
S'10-bounty_redo.png'
p4037
sg63
g64
sS'trial_loop.thisIndex'
p4038
g59
(g98
S'\x19\x00\x00\x00'
tRp4039
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4040
I0
sg3641
S'4-corn.png'
p4041
sS'block_loop.thisRepN'
p4042
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4043
I1
sg3646
S'4-corn.png'
p4044
sg55
g11
sS'block_loop.thisTrial'
p4045
Nsg69
Vn
sS'block_loop.thisTrialN'
p4046
I0
sg39
F1.1500923152016185
sg34
g752
(S'\x07\xdf\n\x01\x10:\x1c\x0eoP'
tRp4047
sa(dp4048
S'trial_loop.thisTrialN'
p4049
I26
sg3632
S'18-mms.png'
p4050
sS'block_loop.thisIndex'
p4051
g3626
sg38
S'right'
p4052
sg58
g62
sS'trial_loop.thisN'
p4053
I26
sg33
S'18-mms.png'
p4054
sg63
g64
sS'trial_loop.thisIndex'
p4055
g59
(g98
S'\x1a\x00\x00\x00'
tRp4056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4057
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p4058
sS'block_loop.thisRepN'
p4059
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4060
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p4061
sg55
g11
sS'block_loop.thisTrial'
p4062
Nsg69
Vn
sS'block_loop.thisTrialN'
p4063
I0
sg39
F1.3501973458369321
sg34
g752
(S'\x07\xdf\n\x01\x10:#\x02\x1e\xf8'
tRp4064
sa(dp4065
S'trial_loop.thisTrialN'
p4066
I27
sg3632
g3721
sS'block_loop.thisIndex'
p4067
g3626
sg38
S'right'
p4068
sg58
g62
sS'trial_loop.thisN'
p4069
I27
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4070
g59
(g98
S'\x1b\x00\x00\x00'
tRp4071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4072
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4073
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4074
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4075
Nsg69
Vn
sS'block_loop.thisTrialN'
p4076
I0
sg39
F1.3999797009200847
sg34
g752
(S'\x07\xdf\n\x01\x10:)\x07\xef@'
tRp4077
sa(dp4078
S'trial_loop.thisTrialN'
p4079
I28
sg3632
S'43-mrporky_pork_crackles_redo.png'
p4080
sS'block_loop.thisIndex'
p4081
g3626
sg38
S'right'
p4082
sg58
g62
sS'trial_loop.thisN'
p4083
I28
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4084
g59
(g98
S'\x1c\x00\x00\x00'
tRp4085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4086
I0
sg3641
S'18-mms.png'
p4087
sS'block_loop.thisRepN'
p4088
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4089
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4090
Nsg69
Vn
sS'block_loop.thisTrialN'
p4091
I0
sg39
F1.0501421505832695
sg34
g752
(S'\x07\xdf\n\x01\x10:/\x0es8'
tRp4092
sa(dp4093
S'trial_loop.thisTrialN'
p4094
I29
sg3632
S'29-beans.png'
p4095
sS'block_loop.thisIndex'
p4096
g3626
sg38
S'right'
p4097
sg58
g62
sS'trial_loop.thisN'
p4098
I29
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4099
g59
(g98
S'\x1d\x00\x00\x00'
tRp4100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4101
I0
sg3641
S'46-pistachios.png'
p4102
sS'block_loop.thisRepN'
p4103
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4104
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4105
Nsg69
Vn
sS'block_loop.thisTrialN'
p4106
I0
sg39
F0.71682554308790714
sg34
g752
(S'\x07\xdf\n\x01\x10:6\x00y\x18'
tRp4107
sa(dp4108
S'trial_loop.thisTrialN'
p4109
I30
sg3632
g3633
sS'block_loop.thisIndex'
p4110
g3626
sg38
S'right'
p4111
sg58
g62
sS'trial_loop.thisN'
p4112
I30
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4113
g59
(g98
S'\x1e\x00\x00\x00'
tRp4114
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4115
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4116
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4117
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4118
Nsg69
Vn
sS'block_loop.thisTrialN'
p4119
I0
sg39
F1.3334143966094416
sg34
g752
(S'\x07\xdf\n\x01\x10:;\x0c\x028'
tRp4120
sa(dp4121
S'trial_loop.thisTrialN'
p4122
I31
sg3632
g3704
sS'block_loop.thisIndex'
p4123
g3626
sg38
S'left'
p4124
sg58
g62
sS'trial_loop.thisN'
p4125
I31
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4126
g59
(g98
S'\x1f\x00\x00\x00'
tRp4127
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4128
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4129
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4130
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4131
Nsg69
Vn
sS'block_loop.thisTrialN'
p4132
I0
sg39
F0.93355016096757026
sg34
g752
(S'\x07\xdf\n\x01\x10;\x06\x02Q\xc0'
tRp4133
sa(dp4134
S'trial_loop.thisTrialN'
p4135
I32
sg3632
g3973
sS'block_loop.thisIndex'
p4136
g3626
sg38
S'left'
p4137
sg58
g62
sS'trial_loop.thisN'
p4138
I32
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4139
g59
(g98
S' \x00\x00\x00'
tRp4140
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4141
I0
sg3641
g3980
sS'block_loop.thisRepN'
p4142
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4143
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4144
Nsg69
Vn
sS'block_loop.thisTrialN'
p4145
I0
sg39
F0.96686688250701991
sg34
g752
(S'\x07\xdf\n\x01\x10;\x0c\x01\xb1\x98'
tRp4146
sa(dp4147
S'trial_loop.thisTrialN'
p4148
I33
sg3632
S'20-fruit_pastilles.png'
p4149
sS'block_loop.thisIndex'
p4150
g3626
sg38
S'left'
p4151
sg58
g62
sS'trial_loop.thisN'
p4152
I33
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4153
g59
(g98
S'!\x00\x00\x00'
tRp4154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4155
I0
sg3641
S'2-steamed_puddings.png'
p4156
sS'block_loop.thisRepN'
p4157
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4158
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4159
Nsg69
Vn
sS'block_loop.thisTrialN'
p4160
I0
sg39
F1.0167835194297368
sg34
g752
(S'\x07\xdf\n\x01\x10;\x12\x01\xc9\x08'
tRp4161
sa(dp4162
S'trial_loop.thisTrialN'
p4163
I34
sg3632
S'22-daim.png'
p4164
sS'block_loop.thisIndex'
p4165
g3626
sg38
S'right'
p4166
sg58
g62
sS'trial_loop.thisN'
p4167
I34
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4168
g59
(g98
S'"\x00\x00\x00'
tRp4169
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4170
I0
sg3641
S'7-olives.png'
p4171
sS'block_loop.thisRepN'
p4172
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4173
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4174
Nsg69
Vn
sS'block_loop.thisTrialN'
p4175
I0
sg39
F0.81679509446621523
sg34
g752
(S'\x07\xdf\n\x01\x10;\x18\x02\x98\x10'
tRp4176
sa(dp4177
S'trial_loop.thisTrialN'
p4178
I35
sg3632
g3883
sS'block_loop.thisIndex'
p4179
g3626
sg38
S'right'
p4180
sg58
g62
sS'trial_loop.thisN'
p4181
I35
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4182
g59
(g98
S'#\x00\x00\x00'
tRp4183
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4184
I0
sg3641
g3890
sS'block_loop.thisRepN'
p4185
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4186
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4187
Nsg69
Vn
sS'block_loop.thisTrialN'
p4188
I0
sg39
F0.85012692627424258
sg34
g752
(S'\x07\xdf\n\x01\x10;\x1e\x00N '
tRp4189
sa(dp4190
S'trial_loop.thisTrialN'
p4191
I36
sg3632
g3755
sS'block_loop.thisIndex'
p4192
g3626
sg38
S'left'
p4193
sg58
g62
sS'trial_loop.thisN'
p4194
I36
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4195
g59
(g98
S'$\x00\x00\x00'
tRp4196
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4197
I0
sg3641
g3762
sS'block_loop.thisRepN'
p4198
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4199
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4200
Nsg69
Vn
sS'block_loop.thisTrialN'
p4201
I0
sg39
F1.1167624790869013
sg34
g752
(S'\x07\xdf\n\x01\x10;#\r\xbf\x88'
tRp4202
sa(dp4203
S'trial_loop.thisTrialN'
p4204
I37
sg3632
g3770
sS'block_loop.thisIndex'
p4205
g3626
sg38
S'right'
p4206
sg58
g62
sS'trial_loop.thisN'
p4207
I37
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4208
g59
(g98
S'%\x00\x00\x00'
tRp4209
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4210
I0
sg3641
g3778
sS'block_loop.thisRepN'
p4211
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4212
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4213
Nsg69
Vn
sS'block_loop.thisTrialN'
p4214
I0
sg39
F1.7667527286866971
sg34
g752
(S'\x07\xdf\n\x01\x10;*\x00\xbb\x80'
tRp4215
sa(dp4216
S'trial_loop.thisTrialN'
p4217
I38
sg3632
g3821
sS'block_loop.thisIndex'
p4218
g3626
sg38
S'left'
p4219
sg58
g62
sS'trial_loop.thisN'
p4220
I38
sg33
g3831
sg63
g64
sS'trial_loop.thisIndex'
p4221
g59
(g98
S'&\x00\x00\x00'
tRp4222
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4223
I0
sg3641
g3829
sS'block_loop.thisRepN'
p4224
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4225
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p4226
Nsg69
Vn
sS'block_loop.thisTrialN'
p4227
I0
sg39
F0.90018183642678196
sg34
g752
(S'\x07\xdf\n\x01\x10;0\x0c\xf4h'
tRp4228
sa(dp4229
S'trial_loop.thisTrialN'
p4230
I39
sg3632
S'8-liquorice_catherine_wheels.png'
p4231
sS'block_loop.thisIndex'
p4232
g3626
sg38
S'right'
p4233
sg58
g62
sS'trial_loop.thisN'
p4234
I39
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4235
sg63
g64
sS'trial_loop.thisIndex'
p4236
g59
(g98
S"'\x00\x00\x00"
tRp4237
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4238
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p4239
sS'block_loop.thisRepN'
p4240
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4241
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p4242
sg55
g11
sS'block_loop.thisTrial'
p4243
Nsg69
Vn
sS'block_loop.thisTrialN'
p4244
I0
sg39
F1.3668388857404352
sg34
g752
(S'\x07\xdf\n\x01\x10;6\x0b\xdb('
tRp4245
sa(dp4246
S'trial_loop.thisTrialN'
p4247
I40
sg3632
S'21-nakd_banana_crunch.png'
p4248
sS'block_loop.thisIndex'
p4249
g3626
sg38
S'right'
p4250
sg58
g62
sS'trial_loop.thisN'
p4251
I40
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4252
g59
(g98
S'(\x00\x00\x00'
tRp4253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4254
I0
sg3641
S'1-treacle_cookies.png'
p4255
sS'block_loop.thisRepN'
p4256
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4257
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4258
Nsg69
Vn
sS'block_loop.thisTrialN'
p4259
I0
sg39
F1.3001318870046816
sg34
g752
(S'\x07\xdf\n\x01\x11\x00\x01\x02\xe2H'
tRp4260
sa(dp4261
S'trial_loop.thisTrialN'
p4262
I41
sg3632
S'36-fig_rolls.png'
p4263
sS'block_loop.thisIndex'
p4264
g3626
sg38
S'left'
p4265
sg58
g62
sS'trial_loop.thisN'
p4266
I41
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4267
g59
(g98
S')\x00\x00\x00'
tRp4268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4269
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4270
sS'block_loop.thisRepN'
p4271
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4272
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4273
Nsg69
Vn
sS'block_loop.thisTrialN'
p4274
I0
sg39
F0.98353322606271831
sg34
g752
(S'\x07\xdf\n\x01\x11\x00\x07\x07\xfa\xf8'
tRp4275
sa(dp4276
S'trial_loop.thisTrialN'
p4277
I42
sg3632
g3883
sS'block_loop.thisIndex'
p4278
g3626
sg38
S'right'
p4279
sg58
g62
sS'trial_loop.thisN'
p4280
I42
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4281
g59
(g98
S'*\x00\x00\x00'
tRp4282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4283
I0
sg3641
g3890
sS'block_loop.thisRepN'
p4284
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4285
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4286
Nsg69
Vn
sS'block_loop.thisTrialN'
p4287
I0
sg39
F0.85011438189758337
sg34
g752
(S'\x07\xdf\n\x01\x11\x00\r\x08\x12h'
tRp4288
sa(dp4289
S'trial_loop.thisTrialN'
p4290
I43
sg3632
S'48-twix.png'
p4291
sS'block_loop.thisIndex'
p4292
g3626
sg38
S'left'
p4293
sg58
g62
sS'trial_loop.thisN'
p4294
I43
sg33
g3831
sg63
g64
sS'trial_loop.thisIndex'
p4295
g59
(g98
S'+\x00\x00\x00'
tRp4296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4297
I0
sg3641
S'50-polo.png'
p4298
sS'block_loop.thisRepN'
p4299
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4300
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p4301
Nsg69
Vn
sS'block_loop.thisTrialN'
p4302
I0
sg39
F0.933438401985768
sg34
g752
(S'\x07\xdf\n\x01\x11\x00\x13\x06|('
tRp4303
sa(dp4304
S'trial_loop.thisTrialN'
p4305
I44
sg3632
g3704
sS'block_loop.thisIndex'
p4306
g3626
sg38
S'left'
p4307
sg58
g62
sS'trial_loop.thisN'
p4308
I44
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4309
g59
(g98
S',\x00\x00\x00'
tRp4310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4311
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4312
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4313
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4314
Nsg69
Vn
sS'block_loop.thisTrialN'
p4315
I0
sg39
F1.2334246031678049
sg34
g752
(S'\x07\xdf\n\x01\x11\x00\x19\x05\xdf\xe8'
tRp4316
sa(dp4317
S'trial_loop.thisTrialN'
p4318
I45
sg3632
g4231
sS'block_loop.thisIndex'
p4319
g3626
sg38
S'right'
p4320
sg58
g62
sS'trial_loop.thisN'
p4321
I45
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p4322
g59
(g98
S'-\x00\x00\x00'
tRp4323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4324
I0
sg3641
g4239
sS'block_loop.thisRepN'
p4325
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4326
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p4327
Nsg69
Vn
sS'block_loop.thisTrialN'
p4328
I0
sg39
F1.4834365773494937
sg34
g752
(S'\x07\xdf\n\x01\x11\x00\x1f\n\x02\x80'
tRp4329
sa(dp4330
S'trial_loop.thisTrialN'
p4331
I46
sg3632
g3787
sS'block_loop.thisIndex'
p4332
g3626
sg38
S'right'
p4333
sg58
g62
sS'trial_loop.thisN'
p4334
I46
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p4335
g59
(g98
S'.\x00\x00\x00'
tRp4336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4337
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4338
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4339
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p4340
Nsg69
Vn
sS'block_loop.thisTrialN'
p4341
I0
sg39
F1.950130119388632
sg34
g752
(S'\x07\xdf\n\x01\x11\x00&\x02t\xe8'
tRp4342
sa(dp4343
S'trial_loop.thisTrialN'
p4344
I47
sg3632
S'23-crunchie_redo.png'
p4345
sS'block_loop.thisIndex'
p4346
g3626
sg38
S'right'
p4347
sg58
g62
sS'trial_loop.thisN'
p4348
I47
sg33
S'33-ambrosia_rice.png'
p4349
sg63
g64
sS'trial_loop.thisIndex'
p4350
g59
(g98
S'/\x00\x00\x00'
tRp4351
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4352
I0
sg3641
S'33-ambrosia_rice.png'
p4353
sS'block_loop.thisRepN'
p4354
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4355
I1
sg3646
S'23-crunchie_redo.png'
p4356
sg55
g11
sS'block_loop.thisTrial'
p4357
Nsg69
Vn
sS'block_loop.thisTrialN'
p4358
I0
sg39
F1.4000997277871647
sg34
g752
(S'\x07\xdf\n\x01\x11\x00-\x02I\xf0'
tRp4359
sa(dp4360
S'trial_loop.thisTrialN'
p4361
I48
sg3632
S'51-mars.png'
p4362
sS'block_loop.thisIndex'
p4363
g3626
sg38
S'right'
p4364
sg58
g62
sS'trial_loop.thisN'
p4365
I48
sg33
g3814
sg63
g64
sS'trial_loop.thisIndex'
p4366
g59
(g98
S'0\x00\x00\x00'
tRp4367
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4368
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4369
sS'block_loop.thisRepN'
p4370
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4371
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p4372
Nsg69
Vn
sS'block_loop.thisTrialN'
p4373
I0
sg39
F0.95011643461475614
sg34
g752
(S'\x07\xdf\n\x01\x11\x003\x08\xcd\xe8'
tRp4374
sa(dp4375
S'trial_loop.thisTrialN'
p4376
I49
sg3632
g4050
sS'block_loop.thisIndex'
p4377
g3626
sg38
S'left'
p4378
sg58
g62
sS'trial_loop.thisN'
p4379
I49
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p4380
g59
(g98
S'1\x00\x00\x00'
tRp4381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4382
I0
sg3641
g4058
sS'block_loop.thisRepN'
p4383
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4384
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4385
Nsg69
Vn
sS'block_loop.thisTrialN'
p4386
I0
sg39
F1.2834364633090445
sg34
g752
(S'\x07\xdf\n\x01\x11\x009\x08\xaa\xc0'
tRp4387
sa(dp4388
S'trial_loop.thisTrialN'
p4389
I50
sg3632
g4248
sS'block_loop.thisIndex'
p4390
g3626
sg38
S'right'
p4391
sg58
g62
sS'trial_loop.thisN'
p4392
I50
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4393
g59
(g98
S'2\x00\x00\x00'
tRp4394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4395
I0
sg3641
g4255
sS'block_loop.thisRepN'
p4396
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4397
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4398
Nsg69
Vn
sS'block_loop.thisTrialN'
p4399
I0
sg39
F0.96678078246986843
sg34
g752
(S'\x07\xdf\n\x01\x11\x01\x03\r\x84\xf0'
tRp4400
sa(dp4401
S'trial_loop.thisTrialN'
p4402
I51
sg3632
g4018
sS'block_loop.thisIndex'
p4403
g3626
sg38
S'left'
p4404
sg58
g62
sS'trial_loop.thisN'
p4405
I51
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p4406
g59
(g98
S'3\x00\x00\x00'
tRp4407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4408
I0
sg3641
g4025
sS'block_loop.thisRepN'
p4409
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4410
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p4411
Nsg69
Vn
sS'block_loop.thisTrialN'
p4412
I0
sg39
F1.0502080085570924
sg34
g752
(S'\x07\xdf\n\x01\x11\x01\t\r\x9c`'
tRp4413
sa(dp4414
S'trial_loop.thisTrialN'
p4415
I52
sg3632
g3670
sS'block_loop.thisIndex'
p4416
g3626
sg38
S'left'
p4417
sg58
g62
sS'trial_loop.thisN'
p4418
I52
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4419
g59
(g98
S'4\x00\x00\x00'
tRp4420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4421
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4422
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4423
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4424
Nsg69
Vn
sS'block_loop.thisTrialN'
p4425
I0
sg39
F1.4167600842520187
sg34
g752
(S'\x07\xdf\n\x01\x11\x01\x0f\x0e\xa6\x00'
tRp4426
sa(dp4427
S'trial_loop.thisTrialN'
p4428
I53
sg3632
g3958
sS'block_loop.thisIndex'
p4429
g3626
sg38
S'left'
p4430
sg58
g62
sS'trial_loop.thisN'
p4431
I53
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p4432
g59
(g98
S'5\x00\x00\x00'
tRp4433
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4434
I0
sg3641
g3965
sS'block_loop.thisRepN'
p4435
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4436
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p4437
Nsg69
Vn
sS'block_loop.thisTrialN'
p4438
I0
sg39
F1.2000959074539423
sg34
g752
(S'\x07\xdf\n\x01\x11\x01\x16\x06`\xd0'
tRp4439
sa(dp4440
S'trial_loop.thisTrialN'
p4441
I54
sg3632
g4345
sS'block_loop.thisIndex'
p4442
g3626
sg38
S'right'
p4443
sg58
g62
sS'trial_loop.thisN'
p4444
I54
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p4445
g59
(g98
S'6\x00\x00\x00'
tRp4446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4447
I0
sg3641
g4353
sS'block_loop.thisRepN'
p4448
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4449
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p4450
Nsg69
Vn
sS'block_loop.thisTrialN'
p4451
I0
sg39
F0.80015840125270188
sg34
g752
(S'\x07\xdf\n\x01\x11\x01\x1c\n\nP'
tRp4452
sa(dp4453
S'trial_loop.thisTrialN'
p4454
I55
sg3632
S'4-corn.png'
p4455
sS'block_loop.thisIndex'
p4456
g3626
sg38
S'right'
p4457
sg58
g62
sS'trial_loop.thisN'
p4458
I55
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4459
g59
(g98
S'7\x00\x00\x00'
tRp4460
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4461
I0
sg3641
S'10-bounty_redo.png'
p4462
sS'block_loop.thisRepN'
p4463
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4464
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4465
Nsg69
Vn
sS'block_loop.thisTrialN'
p4466
I0
sg39
F1.5834360641674721
sg34
g752
(S'\x07\xdf\n\x01\x11\x01"\x07GH'
tRp4467
sa(dp4468
S'trial_loop.thisTrialN'
p4469
I56
sg3632
g4164
sS'block_loop.thisIndex'
p4470
g3626
sg38
S'right'
p4471
sg58
g62
sS'trial_loop.thisN'
p4472
I56
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4473
g59
(g98
S'8\x00\x00\x00'
tRp4474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4475
I0
sg3641
g4171
sS'block_loop.thisRepN'
p4476
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4477
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4478
Nsg69
Vn
sS'block_loop.thisTrialN'
p4479
I0
sg39
F0.90021861425702809
sg34
g752
(S'\x07\xdf\n\x01\x11\x01)\x01\xa1\xf8'
tRp4480
sa(dp4481
S'trial_loop.thisTrialN'
p4482
I57
sg3632
g3653
sS'block_loop.thisIndex'
p4483
g3626
sg38
S'right'
p4484
sg58
g62
sS'trial_loop.thisN'
p4485
I57
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p4486
g59
(g98
S'9\x00\x00\x00'
tRp4487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4488
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4489
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4490
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p4491
Nsg69
Vn
sS'block_loop.thisTrialN'
p4492
I0
sg39
F1.3667966910252289
sg34
g752
(S'\x07\xdf\n\x01\x11\x01/\x00\x88\xb8'
tRp4493
sa(dp4494
S'trial_loop.thisTrialN'
p4495
I58
sg3632
g3787
sS'block_loop.thisIndex'
p4496
g3626
sg38
S'left'
p4497
sg58
g62
sS'trial_loop.thisN'
p4498
I58
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p4499
g59
(g98
S':\x00\x00\x00'
tRp4500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4501
I0
sg3641
g3795
sS'block_loop.thisRepN'
p4502
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4503
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p4504
Nsg69
Vn
sS'block_loop.thisTrialN'
p4505
I0
sg39
F1.1167596280938596
sg34
g752
(S'\x07\xdf\n\x01\x11\x015\x06\x93\x98'
tRp4506
sa(dp4507
S'trial_loop.thisTrialN'
p4508
I59
sg3632
g3973
sS'block_loop.thisIndex'
p4509
g3626
sg38
S'left'
p4510
sg58
g62
sS'trial_loop.thisN'
p4511
I59
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4512
g59
(g98
S';\x00\x00\x00'
tRp4513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4514
I0
sg3641
g3980
sS'block_loop.thisRepN'
p4515
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4516
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4517
Nsg69
Vn
sS'block_loop.thisTrialN'
p4518
I0
sg39
F0.91678346240587416
sg34
g752
(S'\x07\xdf\n\x01\x11\x01;\x08\xd1\xd0'
tRp4519
sa(dp4520
S'trial_loop.thisTrialN'
p4521
I60
sg3632
S'30-spaghetti_hoops.png'
p4522
sS'block_loop.thisIndex'
p4523
g3626
sg38
S'right'
p4524
sg58
g62
sS'trial_loop.thisN'
p4525
I60
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4526
g59
(g98
S'<\x00\x00\x00'
tRp4527
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4528
I0
sg3641
S'19-caramello_redo.png'
p4529
sS'block_loop.thisRepN'
p4530
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4531
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4532
Nsg69
Vn
sS'block_loop.thisTrialN'
p4533
I0
sg39
F0.91680883625667775
sg34
g752
(S'\x07\xdf\n\x01\x11\x02\x05\x081\xa8'
tRp4534
sa(dp4535
S'trial_loop.thisTrialN'
p4536
I61
sg3632
g4455
sS'block_loop.thisIndex'
p4537
g3626
sg38
S'left'
p4538
sg58
g62
sS'trial_loop.thisN'
p4539
I61
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4540
g59
(g98
S'=\x00\x00\x00'
tRp4541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4542
I0
sg3641
g4462
sS'block_loop.thisRepN'
p4543
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4544
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4545
Nsg69
Vn
sS'block_loop.thisTrialN'
p4546
I0
sg39
F1.3335826052825723
sg34
g752
(S'\x07\xdf\n\x01\x11\x02\x0b\x07S\x00'
tRp4547
sa(dp4548
S'trial_loop.thisTrialN'
p4549
I62
sg3632
g3838
sS'block_loop.thisIndex'
p4550
g3626
sg38
S'right'
p4551
sg58
g62
sS'trial_loop.thisN'
p4552
I62
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4553
g59
(g98
S'>\x00\x00\x00'
tRp4554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4555
I0
sg3641
g3846
sS'block_loop.thisRepN'
p4556
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4557
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4558
Nsg69
Vn
sS'block_loop.thisTrialN'
p4559
I0
sg39
F2.350079029565677
sg34
g752
(S'\x07\xdf\n\x01\x11\x02\x11\x0c\xe4\xc8'
tRp4560
sa(dp4561
S'trial_loop.thisTrialN'
p4562
I63
sg3632
S'5-pineapple.png'
p4563
sS'block_loop.thisIndex'
p4564
g3626
sg38
S'left'
p4565
sg58
g62
sS'trial_loop.thisN'
p4566
I63
sg33
g3992
sg63
g64
sS'trial_loop.thisIndex'
p4567
g59
(g98
S'?\x00\x00\x00'
tRp4568
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4569
I0
sg3641
S'40-sardines.png'
p4570
sS'block_loop.thisRepN'
p4571
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4572
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p4573
Nsg69
Vn
sS'block_loop.thisTrialN'
p4574
I0
sg39
F0.80009482407695032
sg34
g752
(S'\x07\xdf\n\x01\x11\x02\x19\x03\xa9\x80'
tRp4575
sa(dp4576
S'trial_loop.thisTrialN'
p4577
I64
sg3632
g4362
sS'block_loop.thisIndex'
p4578
g3626
sg38
S'left'
p4579
sg58
g62
sS'trial_loop.thisN'
p4580
I64
sg33
g3814
sg63
g64
sS'trial_loop.thisIndex'
p4581
g59
(g98
S'@\x00\x00\x00'
tRp4582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4583
I0
sg3641
g4369
sS'block_loop.thisRepN'
p4584
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4585
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p4586
Nsg69
Vn
sS'block_loop.thisTrialN'
p4587
I0
sg39
F0.95008592897283961
sg34
g752
(S'\x07\xdf\n\x01\x11\x02\x1f\x01!\x10'
tRp4588
sa(dp4589
S'trial_loop.thisTrialN'
p4590
I65
sg3632
g4291
sS'block_loop.thisIndex'
p4591
g3626
sg38
S'left'
p4592
sg58
g62
sS'trial_loop.thisN'
p4593
I65
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4594
g59
(g98
S'A\x00\x00\x00'
tRp4595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4596
I0
sg3641
g4298
sS'block_loop.thisRepN'
p4597
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4598
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p4599
Nsg69
Vn
sS'block_loop.thisTrialN'
p4600
I0
sg39
F0.75011232918404858
sg34
g752
(S'\x07\xdf\n\x01\x11\x02%\x00\xbfh'
tRp4601
sa(dp4602
S'trial_loop.thisTrialN'
p4603
I66
sg3632
S'33-ambrosia_rice.png'
p4604
sS'block_loop.thisIndex'
p4605
g3626
sg38
S'left'
p4606
sg58
g62
sS'trial_loop.thisN'
p4607
I66
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p4608
g59
(g98
S'B\x00\x00\x00'
tRp4609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4610
I0
sg3641
S'23-crunchie_redo.png'
p4611
sS'block_loop.thisRepN'
p4612
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4613
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p4614
Nsg69
Vn
sS'block_loop.thisTrialN'
p4615
I0
sg39
F0.76671794655339909
sg34
g752
(S'\x07\xdf\n\x01\x11\x02*\x0c\xc5\x88'
tRp4616
sa(dp4617
S'trial_loop.thisTrialN'
p4618
I67
sg3632
g4455
sS'block_loop.thisIndex'
p4619
g3626
sg38
S'right'
p4620
sg58
g62
sS'trial_loop.thisN'
p4621
I67
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p4622
g59
(g98
S'C\x00\x00\x00'
tRp4623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4624
I0
sg3641
g4462
sS'block_loop.thisRepN'
p4625
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4626
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p4627
Nsg69
Vn
sS'block_loop.thisTrialN'
p4628
I0
sg39
F0.85009499513762421
sg34
g752
(S'\x07\xdf\n\x01\x11\x020\t\xc4\x00'
tRp4629
sa(dp4630
S'trial_loop.thisTrialN'
p4631
I68
sg3632
g3687
sS'block_loop.thisIndex'
p4632
g3626
sg38
S'right'
p4633
sg58
g62
sS'trial_loop.thisN'
p4634
I68
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4635
g59
(g98
S'D\x00\x00\x00'
tRp4636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4637
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4638
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4639
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4640
Nsg69
Vn
sS'block_loop.thisTrialN'
p4641
I0
sg39
F1.1334256865484349
sg34
g752
(S'\x07\xdf\n\x01\x11\x026\x07\xf3('
tRp4642
sa(dp4643
S'trial_loop.thisTrialN'
p4644
I69
sg3632
g4291
sS'block_loop.thisIndex'
p4645
g3626
sg38
S'right'
p4646
sg58
g62
sS'trial_loop.thisN'
p4647
I69
sg33
g3831
sg63
g64
sS'trial_loop.thisIndex'
p4648
g59
(g98
S'E\x00\x00\x00'
tRp4649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4650
I0
sg3641
g4298
sS'block_loop.thisRepN'
p4651
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4652
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p4653
Nsg69
Vn
sS'block_loop.thisTrialN'
p4654
I0
sg39
F0.85011751799174817
sg34
g752
(S'\x07\xdf\n\x01\x11\x03\x00\nk\xf8'
tRp4655
sa(dp4656
S'trial_loop.thisTrialN'
p4657
I70
sg3632
g3883
sS'block_loop.thisIndex'
p4658
g3626
sg38
S'right'
p4659
sg58
g62
sS'trial_loop.thisN'
p4660
I70
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p4661
g59
(g98
S'F\x00\x00\x00'
tRp4662
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4663
I0
sg3641
g3890
sS'block_loop.thisRepN'
p4664
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4665
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p4666
Nsg69
Vn
sS'block_loop.thisTrialN'
p4667
I0
sg39
F0.91677547962171957
sg34
g752
(S'\x07\xdf\n\x01\x11\x03\x06\x08\x9b '
tRp4668
sa(dp4669
S'trial_loop.thisTrialN'
p4670
I71
sg3632
g4522
sS'block_loop.thisIndex'
p4671
g3626
sg38
S'right'
p4672
sg58
g62
sS'trial_loop.thisN'
p4673
I71
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4674
g59
(g98
S'G\x00\x00\x00'
tRp4675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4676
I0
sg3641
g4529
sS'block_loop.thisRepN'
p4677
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4678
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4679
Nsg69
Vn
sS'block_loop.thisTrialN'
p4680
I0
sg39
F0.96722154621966183
sg34
g752
(S'\x07\xdf\n\x01\x11\x03\x0c\x07\xfa\xf8'
tRp4681
sa(dp4682
S'trial_loop.thisTrialN'
p4683
I72
sg3632
g4362
sS'block_loop.thisIndex'
p4684
g3626
sg38
S'right'
p4685
sg58
g62
sS'trial_loop.thisN'
p4686
I72
sg33
g3814
sg63
g64
sS'trial_loop.thisIndex'
p4687
g59
(g98
S'H\x00\x00\x00'
tRp4688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4689
I0
sg3641
g4369
sS'block_loop.thisRepN'
p4690
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4691
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p4692
Nsg69
Vn
sS'block_loop.thisTrialN'
p4693
I0
sg39
F0.65012481653684517
sg34
g752
(S'\x07\xdf\n\x01\x11\x03\x12\x07\xd7\xd0'
tRp4694
sa(dp4695
S'trial_loop.thisTrialN'
p4696
I73
sg3632
g3988
sS'block_loop.thisIndex'
p4697
g3626
sg38
S'right'
p4698
sg58
g62
sS'trial_loop.thisN'
p4699
I73
sg33
g3992
sg63
g64
sS'trial_loop.thisIndex'
p4700
g59
(g98
S'I\x00\x00\x00'
tRp4701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4702
I0
sg3641
g3996
sS'block_loop.thisRepN'
p4703
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4704
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p4705
Nsg69
Vn
sS'block_loop.thisTrialN'
p4706
I0
sg39
F0.88346702596754767
sg34
g752
(S'\x07\xdf\n\x01\x11\x03\x18\x02\xee\x00'
tRp4707
sa(dp4708
S'trial_loop.thisTrialN'
p4709
I74
sg3632
g4164
sS'block_loop.thisIndex'
p4710
g3626
sg38
S'right'
p4711
sg58
g62
sS'trial_loop.thisN'
p4712
I74
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p4713
g59
(g98
S'J\x00\x00\x00'
tRp4714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4715
I0
sg3641
g4171
sS'block_loop.thisRepN'
p4716
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4717
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4718
Nsg69
Vn
sS'block_loop.thisTrialN'
p4719
I0
sg39
F0.66678203691117233
sg34
g752
(S'\x07\xdf\n\x01\x11\x03\x1e\x01\xd4\xc0'
tRp4720
sa(dp4721
S'trial_loop.thisTrialN'
p4722
I75
sg3632
g3687
sS'block_loop.thisIndex'
p4723
g3626
sg38
S'right'
p4724
sg58
g62
sS'trial_loop.thisN'
p4725
I75
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4726
g59
(g98
S'K\x00\x00\x00'
tRp4727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4728
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4729
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4730
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4731
Nsg69
Vn
sS'block_loop.thisTrialN'
p4732
I0
sg39
F0.75012230766151333
sg34
g752
(S'\x07\xdf\n\x01\x11\x03#\x0ck\xb0'
tRp4733
sa(dp4734
S'trial_loop.thisTrialN'
p4735
I76
sg3632
g4095
sS'block_loop.thisIndex'
p4736
g3626
sg38
S'right'
p4737
sg58
g62
sS'trial_loop.thisN'
p4738
I76
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4739
g59
(g98
S'L\x00\x00\x00'
tRp4740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4741
I0
sg3641
g4102
sS'block_loop.thisRepN'
p4742
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4743
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4744
Nsg69
Vn
sS'block_loop.thisTrialN'
p4745
I0
sg39
F0.65011512315686559
sg34
g752
(S'\x07\xdf\n\x01\x11\x03)\t/\x90'
tRp4746
sa(dp4747
S'trial_loop.thisTrialN'
p4748
I77
sg3632
g4164
sS'block_loop.thisIndex'
p4749
g3626
sg38
S'right'
p4750
sg58
g62
sS'trial_loop.thisN'
p4751
I77
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p4752
g59
(g98
S'M\x00\x00\x00'
tRp4753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4754
I0
sg3641
g4171
sS'block_loop.thisRepN'
p4755
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4756
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p4757
Nsg69
Vn
sS'block_loop.thisTrialN'
p4758
I0
sg39
F0.66684447368970723
sg34
g752
(S'\x07\xdf\n\x01\x11\x03/\x04E\xc0'
tRp4759
sa(dp4760
S'trial_loop.thisTrialN'
p4761
I78
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4762
sS'block_loop.thisIndex'
p4763
g3626
sg38
S'left'
p4764
sg58
g62
sS'trial_loop.thisN'
p4765
I78
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p4766
g59
(g98
S'N\x00\x00\x00'
tRp4767
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4768
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4769
sS'block_loop.thisRepN'
p4770
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4771
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p4772
Nsg69
Vn
sS'block_loop.thisTrialN'
p4773
I0
sg39
F0.98345254291780293
sg34
g752
(S'\x07\xdf\n\x01\x11\x034\x0f\x1b0'
tRp4774
sa(dp4775
S'trial_loop.thisTrialN'
p4776
I79
sg3632
g4248
sS'block_loop.thisIndex'
p4777
g3626
sg38
S'right'
p4778
sg58
g62
sS'trial_loop.thisN'
p4779
I79
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p4780
g59
(g98
S'O\x00\x00\x00'
tRp4781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4782
I0
sg3641
g4255
sS'block_loop.thisRepN'
p4783
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4784
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p4785
Nsg69
Vn
sS'block_loop.thisTrialN'
p4786
I0
sg39
F0.76678465982695343
sg34
g752
(S'\x07\xdf\n\x01\x11\x03:\x0f2\xa0'
tRp4787
sa(dp4788
S'trial_loop.thisTrialN'
p4789
I80
sg3632
g3838
sS'block_loop.thisIndex'
p4790
g3626
sg38
S'left'
p4791
sg58
g62
sS'trial_loop.thisN'
p4792
I80
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4793
g59
(g98
S'P\x00\x00\x00'
tRp4794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4795
I0
sg3641
g3846
sS'block_loop.thisRepN'
p4796
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4797
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p4798
Nsg69
Vn
sS'block_loop.thisTrialN'
p4799
I0
sg39
F0.9501121581197367
sg34
g752
(S'\x07\xdf\n\x01\x11\x04\x04\x0c1\x18'
tRp4800
sa(dp4801
S'trial_loop.thisTrialN'
p4802
I81
sg3632
S'6-sour_patch_kids.png'
p4803
sS'block_loop.thisIndex'
p4804
g3626
sg38
S'right'
p4805
sg58
g62
sS'trial_loop.thisN'
p4806
I81
sg33
S'38-maltesers.png'
p4807
sg63
g64
sS'trial_loop.thisIndex'
p4808
g59
(g98
S'Q\x00\x00\x00'
tRp4809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4810
I0
sg3641
S'38-maltesers.png'
p4811
sS'block_loop.thisRepN'
p4812
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4813
I1
sg3646
S'6-sour_patch_kids.png'
p4814
sg55
g11
sS'block_loop.thisTrial'
p4815
Nsg69
Vn
sS'block_loop.thisTrialN'
p4816
I0
sg39
F0.88316909704371938
sg34
g752
(S'\x07\xdf\n\x01\x11\x04\n\x0c\n\x08'
tRp4817
sa(dp4818
S'trial_loop.thisTrialN'
p4819
I82
sg3632
g3958
sS'block_loop.thisIndex'
p4820
g3626
sg38
S'left'
p4821
sg58
g62
sS'trial_loop.thisN'
p4822
I82
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p4823
g59
(g98
S'R\x00\x00\x00'
tRp4824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4825
I0
sg3641
g3965
sS'block_loop.thisRepN'
p4826
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4827
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vn
sS'block_loop.thisTrialN'
p4829
I0
sg39
F0.90011398275964893
sg34
g752
(S'\x07\xdf\n\x01\x11\x04\x10\n\xb60'
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g4080
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'right'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g4087
sS'block_loop.thisRepN'
p4839
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4840
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vn
sS'block_loop.thisTrialN'
p4842
I0
sg39
F0.71688740966419573
sg34
g752
(S'\x07\xdf\n\x01\x11\x04\x16\t\x9c\xf0'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g3868
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'right'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g3875
sS'block_loop.thisRepN'
p4852
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4853
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vn
sS'block_loop.thisTrialN'
p4855
I0
sg39
F0.733325673660147
sg34
g752
(S'\x07\xdf\n\x01\x11\x04\x1c\x05\xe3\xd0'
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
g4231
sS'block_loop.thisIndex'
p4859
g3626
sg38
S'right'
p4860
sg58
g62
sS'trial_loop.thisN'
p4861
I85
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p4862
g59
(g98
S'U\x00\x00\x00'
tRp4863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4864
I0
sg3641
g4239
sS'block_loop.thisRepN'
p4865
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4866
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p4867
Nsg69
Vn
sS'block_loop.thisTrialN'
p4868
I0
sg39
F0.70014066806834307
sg34
g752
(S'\x07\xdf\n\x01\x11\x04"\x02.\x98'
tRp4869
sa(dp4870
S'trial_loop.thisTrialN'
p4871
I86
sg3632
g3770
sS'block_loop.thisIndex'
p4872
g3626
sg38
S'right'
p4873
sg58
g62
sS'trial_loop.thisN'
p4874
I86
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p4875
g59
(g98
S'V\x00\x00\x00'
tRp4876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4877
I0
sg3641
g3778
sS'block_loop.thisRepN'
p4878
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4879
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vn
sS'block_loop.thisTrialN'
p4881
I0
sg39
F0.80009767506999196
sg34
g752
(S"\x07\xdf\n\x01\x11\x04'\r} "
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g3821
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'right'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g3831
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g3829
sS'block_loop.thisRepN'
p4891
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4892
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vn
sS'block_loop.thisTrialN'
p4894
I0
sg39
F0.71678220797184622
sg34
g752
(S'\x07\xdf\n\x01\x11\x04-\n\xf4\xb0'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g4095
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'right'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g4102
sS'block_loop.thisRepN'
p4904
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4905
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vn
sS'block_loop.thisTrialN'
p4907
I0
sg39
F0.61677616386077716
sg34
g752
(S'\x07\xdf\n\x01\x11\x043\x07\x00\xf8'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g4563
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'left'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g3999
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g4570
sS'block_loop.thisRepN'
p4917
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4918
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vn
sS'block_loop.thisTrialN'
p4920
I0
sg39
F0.91707198304720805
sg34
g752
(S'\x07\xdf\n\x01\x11\x049\x01\xdc\x90'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
g4803
sS'block_loop.thisIndex'
p4924
g3626
sg38
S'right'
p4925
sg58
g62
sS'trial_loop.thisN'
p4926
I90
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p4927
g59
(g98
S'Z\x00\x00\x00'
tRp4928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4929
I0
sg3641
g4811
sS'block_loop.thisRepN'
p4930
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4931
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p4932
Nsg69
Vn
sS'block_loop.thisTrialN'
p4933
I0
sg39
F1.0332400297884305
sg34
g752
(S'\x07\xdf\n\x01\x11\x05\x03\x00\xfd\xe8'
tRp4934
sa(dp4935
S'trial_loop.thisTrialN'
p4936
I91
sg3632
g3988
sS'block_loop.thisIndex'
p4937
g3626
sg38
S'right'
p4938
sg58
g62
sS'trial_loop.thisN'
p4939
I91
sg33
g3992
sg63
g64
sS'trial_loop.thisIndex'
p4940
g59
(g98
S'[\x00\x00\x00'
tRp4941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4942
I0
sg3641
g3996
sS'block_loop.thisRepN'
p4943
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4944
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p4945
Nsg69
Vn
sS'block_loop.thisTrialN'
p4946
I0
sg39
F0.80012076812636224
sg34
g752
(S'\x07\xdf\n\x01\x11\x05\t\x02\x0bp'
tRp4947
sa(dp4948
S'trial_loop.thisTrialN'
p4949
I92
sg3632
g3915
sS'block_loop.thisIndex'
p4950
g3626
sg38
S'right'
p4951
sg58
g62
sS'trial_loop.thisN'
p4952
I92
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p4953
g59
(g98
S'\\\x00\x00\x00'
tRp4954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4955
I0
sg3641
g3923
sS'block_loop.thisRepN'
p4956
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4957
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p4958
Nsg69
Vn
sS'block_loop.thisTrialN'
p4959
I0
sg39
F0.96678163776959991
sg34
g752
(S'\x07\xdf\n\x01\x11\x05\x0e\x0e\xc5@'
tRp4960
sa(dp4961
S'trial_loop.thisTrialN'
p4962
I93
sg3632
g4080
sS'block_loop.thisIndex'
p4963
g3626
sg38
S'right'
p4964
sg58
g62
sS'trial_loop.thisN'
p4965
I93
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4966
g59
(g98
S']\x00\x00\x00'
tRp4967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4968
I0
sg3641
g4087
sS'block_loop.thisRepN'
p4969
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4970
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vn
sS'block_loop.thisTrialN'
p4972
I0
sg39
F0.78344872258094256
sg34
g752
(S'\x07\xdf\n\x01\x11\x05\x14\x0e\x9e0'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
g4362
sS'block_loop.thisIndex'
p4976
g3626
sg38
S'right'
p4977
sg58
g62
sS'trial_loop.thisN'
p4978
I94
sg33
g3814
sg63
g64
sS'trial_loop.thisIndex'
p4979
g59
(g98
S'^\x00\x00\x00'
tRp4980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4981
I0
sg3641
g4369
sS'block_loop.thisRepN'
p4982
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4983
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p4984
Nsg69
Vn
sS'block_loop.thisTrialN'
p4985
I0
sg39
F0.73339096143536153
sg34
g752
(S'\x07\xdf\n\x01\x11\x05\x1a\x0b\xdb('
tRp4986
sa(dp4987
S'trial_loop.thisTrialN'
p4988
I95
sg3632
g3915
sS'block_loop.thisIndex'
p4989
g3626
sg38
S'right'
p4990
sg58
g62
sS'trial_loop.thisN'
p4991
I95
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p4992
g59
(g98
S'_\x00\x00\x00'
tRp4993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4994
I0
sg3641
g3923
sS'block_loop.thisRepN'
p4995
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p4996
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p4997
Nsg69
Vn
sS'block_loop.thisTrialN'
p4998
I0
sg39
F0.76688102343541686
sg34
g752
(S'\x07\xdf\n\x01\x11\x05 \x08`\x88'
tRp4999
sa(dp5000
S'trial_loop.thisTrialN'
p5001
I96
sg3632
g4762
sS'block_loop.thisIndex'
p5002
g3626
sg38
S'left'
p5003
sg58
g62
sS'trial_loop.thisN'
p5004
I96
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p5005
g59
(g98
S'`\x00\x00\x00'
tRp5006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5007
I0
sg3641
g4769
sS'block_loop.thisRepN'
p5008
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5009
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vn
sS'block_loop.thisTrialN'
p5011
I0
sg39
F1.5834856714718626
sg34
g752
(S'\x07\xdf\n\x01\x11\x05&\x05_\x00'
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g3898
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'left'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5022
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vn
sS'block_loop.thisTrialN'
p5024
I0
sg39
F0.8500935696392844
sg34
g752
(S'\x07\xdf\n\x01\x11\x05,\x0e\xc1X'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g4263
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'left'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g4270
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F0.93344609966879943
sg34
g752
(S'\x07\xdf\n\x01\x11\x052\x0c\xf0\x80'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g3868
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'right'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g3875
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5048
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vn
sS'block_loop.thisTrialN'
p5050
I0
sg39
F1.583335138962866
sg34
g752
(S'\x07\xdf\n\x01\x11\x058\x0cPX'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
S'38-maltesers.png'
p5054
sS'block_loop.thisIndex'
p5055
g3626
sg38
S'left'
p5056
sg58
g62
sS'trial_loop.thisN'
p5057
I100
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5058
g59
(g98
S'd\x00\x00\x00'
tRp5059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5060
I0
sg3641
S'6-sour_patch_kids.png'
p5061
sS'block_loop.thisRepN'
p5062
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5063
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5064
Nsg69
Vn
sS'block_loop.thisTrialN'
p5065
I0
sg39
F0.8499464583255758
sg34
g752
(S'\x07\xdf\n\x01\x11\x06\x03\x06\xab\x08'
tRp5066
sa(dp5067
S'trial_loop.thisTrialN'
p5068
I101
sg3632
g4149
sS'block_loop.thisIndex'
p5069
g3626
sg38
S'left'
p5070
sg58
g62
sS'trial_loop.thisN'
p5071
I101
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5072
g59
(g98
S'e\x00\x00\x00'
tRp5073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5074
I0
sg3641
g4156
sS'block_loop.thisRepN'
p5075
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5076
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5077
Nsg69
Vn
sS'block_loop.thisTrialN'
p5078
I0
sg39
F1.2334437048302789
sg34
g752
(S'\x07\xdf\n\x01\x11\x06\t\x04\xda0'
tRp5079
sa(dp5080
S'trial_loop.thisTrialN'
p5081
I102
sg3632
g4080
sS'block_loop.thisIndex'
p5082
g3626
sg38
S'right'
p5083
sg58
g62
sS'trial_loop.thisN'
p5084
I102
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p5085
g59
(g98
S'f\x00\x00\x00'
tRp5086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5087
I0
sg3641
g4087
sS'block_loop.thisRepN'
p5088
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5089
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5090
Nsg69
Vn
sS'block_loop.thisTrialN'
p5091
I0
sg39
F0.76678608532529324
sg34
g752
(S'\x07\xdf\n\x01\x11\x06\x0f\x08\xc20'
tRp5092
sa(dp5093
S'trial_loop.thisTrialN'
p5094
I103
sg3632
g4033
sS'block_loop.thisIndex'
p5095
g3626
sg38
S'left'
p5096
sg58
g62
sS'trial_loop.thisN'
p5097
I103
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5098
g59
(g98
S'g\x00\x00\x00'
tRp5099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5100
I0
sg3641
g4041
sS'block_loop.thisRepN'
p5101
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5102
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5103
Nsg69
Vn
sS'block_loop.thisTrialN'
p5104
I0
sg39
F1.0001174609715235
sg34
g752
(S'\x07\xdf\n\x01\x11\x06\x15\x05\xc0\xa8'
tRp5105
sa(dp5106
S'trial_loop.thisTrialN'
p5107
I104
sg3632
g3738
sS'block_loop.thisIndex'
p5108
g3626
sg38
S'left'
p5109
sg58
g62
sS'trial_loop.thisN'
p5110
I104
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5111
g59
(g98
S'h\x00\x00\x00'
tRp5112
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5113
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5114
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5115
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5116
Nsg69
Vn
sS'block_loop.thisTrialN'
p5117
I0
sg39
F0.91679116009254358
sg34
g752
(S'\x07\xdf\n\x01\x11\x06\x1b\x06U\x18'
tRp5118
sa(dp5119
S'trial_loop.thisTrialN'
p5120
I105
sg3632
g4231
sS'block_loop.thisIndex'
p5121
g3626
sg38
S'right'
p5122
sg58
g62
sS'trial_loop.thisN'
p5123
I105
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p5124
g59
(g98
S'i\x00\x00\x00'
tRp5125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5126
I0
sg3641
g4239
sS'block_loop.thisRepN'
p5127
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5128
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p5129
Nsg69
Vn
sS'block_loop.thisTrialN'
p5130
I0
sg39
F1.0502031618671026
sg34
g752
(S'\x07\xdf\n\x01\x11\x06!\x05vp'
tRp5131
sa(dp5132
S'trial_loop.thisTrialN'
p5133
I106
sg3632
g4345
sS'block_loop.thisIndex'
p5134
g3626
sg38
S'right'
p5135
sg58
g62
sS'trial_loop.thisN'
p5136
I106
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p5137
g59
(g98
S'j\x00\x00\x00'
tRp5138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5139
I0
sg3641
g4353
sS'block_loop.thisRepN'
p5140
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5141
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p5142
Nsg69
Vn
sS'block_loop.thisTrialN'
p5143
I0
sg39
F1.0168345522288291
sg34
g752
(S"\x07\xdf\n\x01\x11\x06'\x06\xbe\x90"
tRp5144
sa(dp5145
S'trial_loop.thisTrialN'
p5146
I107
sg3632
g4248
sS'block_loop.thisIndex'
p5147
g3626
sg38
S'right'
p5148
sg58
g62
sS'trial_loop.thisN'
p5149
I107
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5150
g59
(g98
S'k\x00\x00\x00'
tRp5151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5152
I0
sg3641
g4255
sS'block_loop.thisRepN'
p5153
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5154
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5155
Nsg69
Vn
sS'block_loop.thisTrialN'
p5156
I0
sg39
F0.78343418251461117
sg34
g752
(S'\x07\xdf\n\x01\x11\x06-\x07\x8d\x98'
tRp5157
sa(dp5158
S'trial_loop.thisTrialN'
p5159
I108
sg3632
g3958
sS'block_loop.thisIndex'
p5160
g3626
sg38
S'left'
p5161
sg58
g62
sS'trial_loop.thisN'
p5162
I108
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p5163
g59
(g98
S'l\x00\x00\x00'
tRp5164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5165
I0
sg3641
g3965
sS'block_loop.thisRepN'
p5166
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5167
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5168
Nsg69
Vn
sS'block_loop.thisTrialN'
p5169
I0
sg39
F1.1001063991134288
sg34
g752
(S'\x07\xdf\n\x01\x11\x063\x04\xca\x90'
tRp5170
sa(dp5171
S'trial_loop.thisTrialN'
p5172
I109
sg3632
g3787
sS'block_loop.thisIndex'
p5173
g3626
sg38
S'left'
p5174
sg58
g62
sS'trial_loop.thisN'
p5175
I109
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p5176
g59
(g98
S'm\x00\x00\x00'
tRp5177
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5178
I0
sg3641
g3795
sS'block_loop.thisRepN'
p5179
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5180
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p5181
Nsg69
Vn
sS'block_loop.thisTrialN'
p5182
I0
sg39
F1.1167795850560651
sg34
g752
(S'\x07\xdf\n\x01\x11\x069\x06\xcaH'
tRp5183
sa(dp5184
S'trial_loop.thisTrialN'
p5185
I110
sg3632
g4563
sS'block_loop.thisIndex'
p5186
g3626
sg38
S'left'
p5187
sg58
g62
sS'trial_loop.thisN'
p5188
I110
sg33
g3999
sg63
g64
sS'trial_loop.thisIndex'
p5189
g59
(g98
S'n\x00\x00\x00'
tRp5190
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5191
I0
sg3641
g4570
sS'block_loop.thisRepN'
p5192
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5193
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p5194
Nsg69
Vn
sS'block_loop.thisTrialN'
p5195
I0
sg39
F1.2001911306688271
sg34
g752
(S'\x07\xdf\n\x01\x11\x07\x03\t\x04\x98'
tRp5196
sa(dp5197
S'trial_loop.thisTrialN'
p5198
I111
sg3632
g4095
sS'block_loop.thisIndex'
p5199
g3626
sg38
S'left'
p5200
sg58
g62
sS'trial_loop.thisN'
p5201
I111
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p5202
g59
(g98
S'o\x00\x00\x00'
tRp5203
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5204
I0
sg3641
g4102
sS'block_loop.thisRepN'
p5205
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5206
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5207
Nsg69
Vn
sS'block_loop.thisTrialN'
p5208
I0
sg39
F1.6667626501475752
sg34
g752
(S'\x07\xdf\n\x01\x11\x07\t\x0c\xae\x18'
tRp5209
sa(dp5210
S'trial_loop.thisTrialN'
p5211
I112
sg3632
g3988
sS'block_loop.thisIndex'
p5212
g3626
sg38
S'right'
p5213
sg58
g62
sS'trial_loop.thisN'
p5214
I112
sg33
g3992
sg63
g64
sS'trial_loop.thisIndex'
p5215
g59
(g98
S'p\x00\x00\x00'
tRp5216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5217
I0
sg3641
g3996
sS'block_loop.thisRepN'
p5218
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5219
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p5220
Nsg69
Vn
sS'block_loop.thisTrialN'
p5221
I0
sg39
F3.3500351242510078
sg34
g752
(S'\x07\xdf\n\x01\x11\x07\x10\x07\xfa\xf8'
tRp5222
sa(dp5223
S'trial_loop.thisTrialN'
p5224
I113
sg3632
g4291
sS'block_loop.thisIndex'
p5225
g3626
sg38
S'right'
p5226
sg58
g62
sS'trial_loop.thisN'
p5227
I113
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5228
g59
(g98
S'q\x00\x00\x00'
tRp5229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5230
I0
sg3641
g4298
sS'block_loop.thisRepN'
p5231
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5232
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p5233
Nsg69
Vn
sS'block_loop.thisTrialN'
p5234
I0
sg39
F1.2834444460895611
sg34
g752
(S'\x07\xdf\n\x01\x11\x07\x18\r\xfa '
tRp5235
sa(dp5236
S'trial_loop.thisTrialN'
p5237
I114
sg3632
g4080
sS'block_loop.thisIndex'
p5238
g3626
sg38
S'right'
p5239
sg58
g62
sS'trial_loop.thisN'
p5240
I114
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p5241
g59
(g98
S'r\x00\x00\x00'
tRp5242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5243
I0
sg3641
g4087
sS'block_loop.thisRepN'
p5244
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5245
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5246
Nsg69
Vn
sS'block_loop.thisTrialN'
p5247
I0
sg39
F1.300113355540816
sg34
g752
(S'\x07\xdf\n\x01\x11\x07\x1f\x03\x92\x10'
tRp5248
sa(dp5249
S'trial_loop.thisTrialN'
p5250
I115
sg3632
g3868
sS'block_loop.thisIndex'
p5251
g3626
sg38
S'left'
p5252
sg58
g62
sS'trial_loop.thisN'
p5253
I115
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5254
g59
(g98
S's\x00\x00\x00'
tRp5255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5256
I0
sg3641
g3875
sS'block_loop.thisRepN'
p5257
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5258
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5259
Nsg69
Vn
sS'block_loop.thisTrialN'
p5260
I0
sg39
F2.1338456380362913
sg34
g752
(S'\x07\xdf\n\x01\x11\x07%\x08\xaa\xc0'
tRp5261
sa(dp5262
S'trial_loop.thisTrialN'
p5263
I116
sg3632
g4149
sS'block_loop.thisIndex'
p5264
g3626
sg38
S'right'
p5265
sg58
g62
sS'trial_loop.thisN'
p5266
I116
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5267
g59
(g98
S't\x00\x00\x00'
tRp5268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5269
I0
sg3641
g4156
sS'block_loop.thisRepN'
p5270
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5271
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5272
Nsg69
Vn
sS'block_loop.thisTrialN'
p5273
I0
sg39
F0.90011369765852578
sg34
g752
(S'\x07\xdf\n\x01\x11\x07,\x0b\x1b\xc0'
tRp5274
sa(dp5275
S'trial_loop.thisTrialN'
p5276
I117
sg3632
g3973
sS'block_loop.thisIndex'
p5277
g3626
sg38
S'left'
p5278
sg58
g62
sS'trial_loop.thisN'
p5279
I117
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5280
g59
(g98
S'u\x00\x00\x00'
tRp5281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5282
I0
sg3641
g3980
sS'block_loop.thisRepN'
p5283
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5284
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5285
Nsg69
Vn
sS'block_loop.thisTrialN'
p5286
I0
sg39
F1.3500738977782021
sg34
g752
(S'\x07\xdf\n\x01\x11\x072\n\x02\x80'
tRp5287
sa(dp5288
S'trial_loop.thisTrialN'
p5289
I118
sg3632
g4604
sS'block_loop.thisIndex'
p5290
g3626
sg38
S'left'
p5291
sg58
g62
sS'trial_loop.thisN'
p5292
I118
sg33
g4356
sg63
g64
sS'trial_loop.thisIndex'
p5293
g59
(g98
S'v\x00\x00\x00'
tRp5294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5295
I0
sg3641
g4611
sS'block_loop.thisRepN'
p5296
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5297
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p5298
Nsg69
Vn
sS'block_loop.thisTrialN'
p5299
I0
sg39
F0.80008598599306424
sg34
g752
(S'\x07\xdf\n\x01\x11\x079\x00\xcb '
tRp5300
sa(dp5301
S'trial_loop.thisTrialN'
p5302
I119
sg3632
g4522
sS'block_loop.thisIndex'
p5303
g3626
sg38
S'right'
p5304
sg58
g62
sS'trial_loop.thisN'
p5305
I119
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5306
g59
(g98
S'w\x00\x00\x00'
tRp5307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5308
I0
sg3641
g4529
sS'block_loop.thisRepN'
p5309
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5310
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p5311
Nsg69
Vn
sS'block_loop.thisTrialN'
p5312
I0
sg39
F0.85010012692509918
sg34
g752
(S'\x07\xdf\n\x01\x11\x08\x02\r\x88\xd8'
tRp5313
sa(dp5314
S'trial_loop.thisTrialN'
p5315
I120
sg3632
g4033
sS'block_loop.thisIndex'
p5316
g3626
sg38
S'right'
p5317
sg58
g62
sS'trial_loop.thisN'
p5318
I120
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5319
g59
(g98
S'x\x00\x00\x00'
tRp5320
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5321
I0
sg3641
g4041
sS'block_loop.thisRepN'
p5322
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5323
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5324
Nsg69
Vn
sS'block_loop.thisTrialN'
p5325
I0
sg39
F0.93348658378818072
sg34
g752
(S'\x07\xdf\n\x01\x11\x08\x08\x0b\xb8\x00'
tRp5326
sa(dp5327
S'trial_loop.thisTrialN'
p5328
I121
sg3632
g4803
sS'block_loop.thisIndex'
p5329
g3626
sg38
S'right'
p5330
sg58
g62
sS'trial_loop.thisN'
p5331
I121
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5332
g59
(g98
S'y\x00\x00\x00'
tRp5333
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5334
I0
sg3641
g4811
sS'block_loop.thisRepN'
p5335
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5336
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5337
Nsg69
Vn
sS'block_loop.thisTrialN'
p5338
I0
sg39
F0.91656564642835292
sg34
g752
(S'\x07\xdf\n\x01\x11\x08\x0e\x0b\x17\xd8'
tRp5339
sa(dp5340
S'trial_loop.thisTrialN'
p5341
I122
sg3632
g3988
sS'block_loop.thisIndex'
p5342
g3626
sg38
S'right'
p5343
sg58
g62
sS'trial_loop.thisN'
p5344
I122
sg33
g3999
sg63
g64
sS'trial_loop.thisIndex'
p5345
g59
(g98
S'z\x00\x00\x00'
tRp5346
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5347
I0
sg3641
g3996
sS'block_loop.thisRepN'
p5348
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5349
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p5350
Nsg69
Vn
sS'block_loop.thisTrialN'
p5351
I0
sg39
F0.86680780989991035
sg34
g752
(S'\x07\xdf\n\x01\x11\x08\x14\nw\xb0'
tRp5352
sa(dp5353
S'trial_loop.thisTrialN'
p5354
I123
sg3632
g4604
sS'block_loop.thisIndex'
p5355
g3626
sg38
S'left'
p5356
sg58
g62
sS'trial_loop.thisN'
p5357
I123
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p5358
g59
(g98
S'{\x00\x00\x00'
tRp5359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5360
I0
sg3641
g4611
sS'block_loop.thisRepN'
p5361
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5362
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p5363
Nsg69
Vn
sS'block_loop.thisTrialN'
p5364
I0
sg39
F0.76682172275104676
sg34
g752
(S'\x07\xdf\n\x01\x11\x08\x1a\x08\xe5X'
tRp5365
sa(dp5366
S'trial_loop.thisTrialN'
p5367
I124
sg3632
g4095
sS'block_loop.thisIndex'
p5368
g3626
sg38
S'left'
p5369
sg58
g62
sS'trial_loop.thisN'
p5370
I124
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5371
g59
(g98
S'|\x00\x00\x00'
tRp5372
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5373
I0
sg3641
g4102
sS'block_loop.thisRepN'
p5374
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5375
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5376
Nsg69
Vn
sS'block_loop.thisTrialN'
p5377
I0
sg39
F1.6169055990103516
sg34
g752
(S'\x07\xdf\n\x01\x11\x08 \x05\xe3\xd0'
tRp5378
sa(dp5379
S'trial_loop.thisTrialN'
p5380
I125
sg3632
g3898
sS'block_loop.thisIndex'
p5381
g3626
sg38
S'left'
p5382
sg58
g62
sS'trial_loop.thisN'
p5383
I125
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5384
g59
(g98
S'}\x00\x00\x00'
tRp5385
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5386
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5387
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5388
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5389
Nsg69
Vn
sS'block_loop.thisTrialN'
p5390
I0
sg39
F0.75010463149737916
sg34
g752
(S"\x07\xdf\n\x01\x11\x08'\x00}\x00"
tRp5391
sa(dp5392
S'trial_loop.thisTrialN'
p5393
I126
sg3632
g4362
sS'block_loop.thisIndex'
p5394
g3626
sg38
S'right'
p5395
sg58
g62
sS'trial_loop.thisN'
p5396
I126
sg33
g3814
sg63
g64
sS'trial_loop.thisIndex'
p5397
g59
(g98
S'~\x00\x00\x00'
tRp5398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5399
I0
sg3641
g4369
sS'block_loop.thisRepN'
p5400
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5401
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p5402
Nsg69
Vn
sS'block_loop.thisTrialN'
p5403
I0
sg39
F0.86677331286773551
sg34
g752
(S'\x07\xdf\n\x01\x11\x08,\x0c\x83 '
tRp5404
sa(dp5405
S'trial_loop.thisTrialN'
p5406
I127
sg3632
g3670
sS'block_loop.thisIndex'
p5407
g3626
sg38
S'left'
p5408
sg58
g62
sS'trial_loop.thisN'
p5409
I127
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5410
g59
(g98
S'\x7f\x00\x00\x00'
tRp5411
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5412
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5413
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5414
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5415
Nsg69
Vn
sS'block_loop.thisTrialN'
p5416
I0
sg39
F0.6334296779386932
sg34
g752
(S'\x07\xdf\n\x01\x11\x082\n\xec\xe0'
tRp5417
sa(dp5418
S'trial_loop.thisTrialN'
p5419
I128
sg3632
g3687
sS'block_loop.thisIndex'
p5420
g3626
sg38
S'right'
p5421
sg58
g62
sS'trial_loop.thisN'
p5422
I128
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5423
g59
(g98
S'\x80\x00\x00\x00'
tRp5424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5425
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5426
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5427
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5428
Nsg69
Vn
sS'block_loop.thisTrialN'
p5429
I0
sg39
F1.5167781025411387
sg34
g752
(S'\x07\xdf\n\x01\x11\x088\x05\xc8x'
tRp5430
sa(dp5431
S'trial_loop.thisTrialN'
p5432
I129
sg3632
g4762
sS'block_loop.thisIndex'
p5433
g3626
sg38
S'left'
p5434
sg58
g62
sS'trial_loop.thisN'
p5435
I129
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p5436
g59
(g98
S'\x81\x00\x00\x00'
tRp5437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5438
I0
sg3641
g4769
sS'block_loop.thisRepN'
p5439
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5440
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p5441
Nsg69
Vn
sS'block_loop.thisTrialN'
p5442
I0
sg39
F0.85021017531471443
sg34
g752
(S'\x07\xdf\n\x01\x11\t\x02\x0e4\xb8'
tRp5443
sa(dp5444
S'trial_loop.thisTrialN'
p5445
I130
sg3632
g3721
sS'block_loop.thisIndex'
p5446
g3626
sg38
S'right'
p5447
sg58
g62
sS'trial_loop.thisN'
p5448
I130
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5449
g59
(g98
S'\x82\x00\x00\x00'
tRp5450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5451
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5452
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5453
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5454
Nsg69
Vn
sS'block_loop.thisTrialN'
p5455
I0
sg39
F1.0666633785185695
sg34
g752
(S'\x07\xdf\n\x01\x11\t\x08\x0cc\xe0'
tRp5456
sa(dp5457
S'trial_loop.thisTrialN'
p5458
I131
sg3632
g3738
sS'block_loop.thisIndex'
p5459
g3626
sg38
S'left'
p5460
sg58
g62
sS'trial_loop.thisN'
p5461
I131
sg33
g3749
sg63
g64
sS'trial_loop.thisIndex'
p5462
g59
(g98
S'\x83\x00\x00\x00'
tRp5463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5464
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5465
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5466
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5467
Nsg69
Vn
sS'block_loop.thisTrialN'
p5468
I0
sg39
F1.4834434197364317
sg34
g752
(S'\x07\xdf\n\x01\x11\t\x0e\r\xea\x80'
tRp5469
sa(dp5470
S'trial_loop.thisTrialN'
p5471
I132
sg3632
g4803
sS'block_loop.thisIndex'
p5472
g3626
sg38
S'right'
p5473
sg58
g62
sS'trial_loop.thisN'
p5474
I132
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5475
g59
(g98
S'\x84\x00\x00\x00'
tRp5476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5477
I0
sg3641
g4811
sS'block_loop.thisRepN'
p5478
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5479
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5480
Nsg69
Vn
sS'block_loop.thisTrialN'
p5481
I0
sg39
F1.5998329887443106
sg34
g752
(S'\x07\xdf\n\x01\x11\t\x15\x06\x9bh'
tRp5482
sa(dp5483
S'trial_loop.thisTrialN'
p5484
I133
sg3632
g4033
sS'block_loop.thisIndex'
p5485
g3626
sg38
S'right'
p5486
sg58
g62
sS'trial_loop.thisN'
p5487
I133
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p5488
g59
(g98
S'\x85\x00\x00\x00'
tRp5489
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5490
I0
sg3641
g4041
sS'block_loop.thisRepN'
p5491
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5492
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p5493
Nsg69
Vn
sS'block_loop.thisTrialN'
p5494
I0
sg39
F1.4500873544711794
sg34
g752
(S'\x07\xdf\n\x01\x11\t\x1c\x00\xf6\x18'
tRp5495
sa(dp5496
S'trial_loop.thisTrialN'
p5497
I134
sg3632
g5054
sS'block_loop.thisIndex'
p5498
g3626
sg38
S'left'
p5499
sg58
g62
sS'trial_loop.thisN'
p5500
I134
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5501
g59
(g98
S'\x86\x00\x00\x00'
tRp5502
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5503
I0
sg3641
g5061
sS'block_loop.thisRepN'
p5504
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5505
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5506
Nsg69
Vn
sS'block_loop.thisTrialN'
p5507
I0
sg39
F1.4166195302241249
sg34
g752
(S'\x07\xdf\n\x01\x11\t"\x08l@'
tRp5508
sa(dp5509
S'trial_loop.thisTrialN'
p5510
I135
sg3632
g4018
sS'block_loop.thisIndex'
p5511
g3626
sg38
S'left'
p5512
sg58
g62
sS'trial_loop.thisN'
p5513
I135
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p5514
g59
(g98
S'\x87\x00\x00\x00'
tRp5515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5516
I0
sg3641
g4025
sS'block_loop.thisRepN'
p5517
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5518
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p5519
Nsg69
Vn
sS'block_loop.thisTrialN'
p5520
I0
sg39
F1.2002096621363307
sg34
g752
(S'\x07\xdf\n\x01\x11\t(\x0f.\xb8'
tRp5521
sa(dp5522
S'trial_loop.thisTrialN'
p5523
I136
sg3632
g4263
sS'block_loop.thisIndex'
p5524
g3626
sg38
S'left'
p5525
sg58
g62
sS'trial_loop.thisN'
p5526
I136
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5527
g59
(g98
S'\x88\x00\x00\x00'
tRp5528
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5529
I0
sg3641
g4270
sS'block_loop.thisRepN'
p5530
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5531
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5532
Nsg69
Vn
sS'block_loop.thisTrialN'
p5533
I0
sg39
F0.91676806703617331
sg34
g752
(S'\x07\xdf\n\x01\x11\t/\x03\x95\xf8'
tRp5534
sa(dp5535
S'trial_loop.thisTrialN'
p5536
I137
sg3632
g4563
sS'block_loop.thisIndex'
p5537
g3626
sg38
S'left'
p5538
sg58
g62
sS'trial_loop.thisN'
p5539
I137
sg33
g3992
sg63
g64
sS'trial_loop.thisIndex'
p5540
g59
(g98
S'\x89\x00\x00\x00'
tRp5541
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5542
I0
sg3641
g4570
sS'block_loop.thisRepN'
p5543
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F0.90011084666548413
sg34
g752
(S'\x07\xdf\n\x01\x11\t5\x02\xbb8'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3755
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3762
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.2001053157364368
sg34
g752
(S'\x07\xdf\n\x01\x11\t;\x01\xa1\xf8'
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3770
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3778
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F2.1000918590434594
sg34
g752
(S'\x07\xdf\n\x01\x11\n\x05\x05Kx'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g3804
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3814
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g3812
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.78355905606804299
sg34
g752
(S'\x07\xdf\n\x01\x11\n\x0c\x07C`'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g3704
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F0.80011193004247616
sg34
g752
(S'\x07\xdf\n\x01\x11\n\x12\x04\x80X'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g4604
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'left'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g4611
sS'block_loop.thisRepN'
p5608
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.7167736549890833
sg34
g752
(S'\x07\xdf\n\x01\x11\n\x18\x01\xf7\xe8'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g3670
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F0.71673716225632234
sg34
g752
(S'\x07\xdf\n\x01\x11\n\x1d\r\x84\xf0'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3898
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3906
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.68352279141981853
sg34
g752
(S'\x07\xdf\n\x01\x11\n#\t\x918'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4604
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4611
sS'block_loop.thisRepN'
p5647
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.81676686961873202
sg34
g752
(S'\x07\xdf\n\x01\x11\n)\x05_\x00'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g3915
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g3923
sS'block_loop.thisRepN'
p5660
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.9505007486732211
sg34
g752
(S'\x07\xdf\n\x01\x11\n/\x03\x15\x10'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3755
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3762
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.71676424670658889
sg34
g752
(S'\x07\xdf\n\x01\x11\n5\x02\xb3h'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3821
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3831
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3829
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.95012812369168387
sg34
g752
(S'\x07\xdf\n\x01\x11\n:\x0e<\x88'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g4050
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'left'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g4058
sS'block_loop.thisRepN'
p5699
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.85012493058093241
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b\x04\r\xda\xe0'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g3838
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'left'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g3846
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F0.81678312028816435
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b\n\x0c\n\x08'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4248
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3909
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4255
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.98344912172251497
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b\x10\t\xc0\x18'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g5054
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g4814
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g5061
sS'block_loop.thisRepN'
p5738
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.76661702134879306
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b\x16\n\x16\x08'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3915
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'left'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3923
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.93343754668603651
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b\x1c\x07\x14\x80'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3633
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'right'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.1334359501306608
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b"\x06tX'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3770
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3781
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3778
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F1.0001223076651513
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b(\t+\xa8'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3721
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F1.4333229367075546
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b.\t}\xb0'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4018
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4025
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.76687760224376689
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b5\x01w\x00'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g4803
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'right'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g4814
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g4811
sS'block_loop.thisRepN'
p5816
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.91646244042931357
sg34
g752
(S'\x07\xdf\n\x01\x11\x0b:\r\xbb\xa0'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4050
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'left'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g4061
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4058
sS'block_loop.thisRepN'
p5829
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F1.2834555649715185
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c\x04\x0c\xdc\xf8'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4263
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4270
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.98344398993140203
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c\x0b\x02t\xe8'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g3973
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'left'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3774
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g3980
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3774
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3781
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.76677468134221272
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c\x11\x02\xca\xd8'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3804
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3812
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F1.0336212077490927
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c\x16\x0e\xcd\x10'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4345
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4353
sS'block_loop.thisRepN'
p5881
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.0167724005514174
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c\x1d\x00\x98X'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4231
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4239
sS'block_loop.thisRepN'
p5894
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.93354103778619901
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c#\x01g`'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g5054
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g5061
sS'block_loop.thisRepN'
p5907
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.83314611803143634
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c)\x01\x01\xd0'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4164
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4171
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.0334307613156852
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c.\x0e8\xa0'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g3838
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g3846
sS'block_loop.thisRepN'
p5933
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F3.216825257986784
sg34
g752
(S'\x07\xdf\n\x01\x11\x0c5\x00\x00\x00'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g3738
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'left'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.71679076095097116
sg34
g752
(S'\x07\xdf\n\x01\x11\r\x01\x03\x9d\xc8'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4762
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4769
sS'block_loop.thisRepN'
p5959
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.88344108191813575
sg34
g752
(S'\x07\xdf\n\x01\x11\r\x06\x0f*\xd0'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g4050
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g4058
sS'block_loop.thisRepN'
p5972
I1
sg3644
g4054
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g4061
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.65015902847153484
sg34
g752
(S'\x07\xdf\n\x01\x11\r\x0c\r\xd3\x10'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g3787
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g3795
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.66677633492145105
sg34
g752
(S"\x07\xdf\n\x01\x11\r\x12\t'\xc0"
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3633
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F1.1501034340799379
sg34
g752
(S'\x07\xdf\n\x01\x11\r\x18\x04|p'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4522
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'right'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4529
sS'block_loop.thisRepN'
p6011
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F0.93354673977592029
sg34
g752
(S'\x07\xdf\n\x01\x11\r\x1e\x073\xc0'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g3670
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'right'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g3678
sS'block_loop.thisRepN'
p6024
I1
sg3644
g3674
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.7834384590023546
sg34
g752
(S'\x07\xdf\n\x01\x11\r$\x06\xce0'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g5054
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'left'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g4807
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g5061
sS'block_loop.thisRepN'
p6037
I1
sg3644
g4807
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g4814
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.79984821305333753
sg34
g752
(S'\x07\xdf\n\x01\x11\r+\x04\x07@'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g3958
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g3919
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g3965
sS'block_loop.thisRepN'
p6050
I1
sg3644
g3919
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g3926
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.0001086228876375
sg34
g752
(S'\x07\xdf\n\x01\x11\r1\x01~\xd0'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4149
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4156
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.3167523295487626
sg34
g752
(S'\x07\xdf\n\x01\x11\r7\x01\xd4\xc0'
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g4455
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g4462
sS'block_loop.thisRepN'
p6076
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.80021827213568031
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e\x01\x07f\x88'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g4149
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g4156
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3637
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.85010440341648064
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e\x07\x04\x9f\x98'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4018
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3797
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4025
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3797
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3791
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F0.9168764048263256
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e\r\x03\r@'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3804
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'left'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3808
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3812
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F1.1834395423793467
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e\x13\x022\x80'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g3821
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3831
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g3829
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.0667757077026181
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e\x19\x05b\xe8'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g3804
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'right'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3814
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g3812
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3814
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g3808
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.70010588593504508
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e\x1f\x07$ '
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3868
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'left'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3875
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3731
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.8499789596608025
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e%\x02\xf1\xe8'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3653
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F0.71691249841751414
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e+\x01!\x10'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3704
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'left'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3714
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3714
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g3708
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.93351822982731392
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e0\x0c\xae\x18'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g4033
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g4041
sS'block_loop.thisRepN'
p6193
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F1.1001018375209242
sg34
g752
(S'\x07\xdf\n\x01\x11\x0e6\x0c\r\xf0'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g3653
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6206
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.0334433056923444
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f\x00\x0e\r\xa8'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4455
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'right'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g4037
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4462
sS'block_loop.thisRepN'
p6219
I1
sg3644
g4037
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g4044
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F1.1835296338067565
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f\x06\x0f\x17H'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4291
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4298
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3831
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3825
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.8667661853833124
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f\r\x03@\x08'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4762
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'left'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g4235
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4769
sS'block_loop.thisRepN'
p6245
I1
sg3644
g4235
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g4242
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F1.1000944249353779
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f\x13\x01\xad\xb0'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3653
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3661
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.80020658306239056
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f\x19\x03\xadh'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g3738
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g3746
sS'block_loop.thisRepN'
p6271
I1
sg3644
g3742
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g3749
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.1334313885345182
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f\x1f\x01$\xf8'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g4263
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g4270
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3691
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.4335370463923027
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f%\x03\x9d\xc8'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3898
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'left'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3902
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3906
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3902
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3909
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F0.88344564350700239
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f+\n\xd9X'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4522
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4529
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3842
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3849
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.1835424632809008
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f1\t\x85\x80'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4563
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3992
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4570
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3992
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3999
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.1167733128677355
sg34
g752
(S'\x07\xdf\n\x01\x11\x0f7\x0c\xf0\x80'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g3755
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'left'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g3663
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g3762
sS'block_loop.thisRepN'
p6336
I1
sg3644
g3663
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g3657
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F0.88344222231535241
sg34
g752
(S'\x07\xdf\n\x01\x11\x10\x01\x0f.\xb8'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4345
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g4349
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4353
sS'block_loop.thisRepN'
p6349
I1
sg3644
g4349
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g4356
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.3338905126875034
sg34
g752
(S'\x07\xdf\n\x01\x11\x10\x07\r\xd6\xf8'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F75.481947788026446
sg56
Vl
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vl
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'38-maltesers.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'6-sour_patch_kids.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'6-sour_patch_kids.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
S'38-maltesers.png'
p6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.96649425752548268
sg34
g752
(S'\x07\xdf\n\x01\x11\x11"\x0c1\x18'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'36-fig_rolls.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'36-fig_rolls.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F1.2334419942380919
sg34
g752
(S'\x07\xdf\n\x01\x11\x11(\x0c\r\xf0'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'10-bounty_redo.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'right'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'10-bounty_redo.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'4-corn.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6418
I2
sg6385
S'4-corn.png'
p6419
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.91684561408692389
sg34
g752
(S'\x07\xdf\n\x01\x11\x11/\x00\xeeH'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'29-beans.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'29-beans.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'46-pistachios.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6385
S'46-pistachios.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.95012042600501445
sg34
g752
(S'\x07\xdf\n\x01\x11\x115\x00\x13\x88'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'21-nakd_banana_crunch.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'1-treacle_cookies.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'1-treacle_cookies.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6385
S'21-nakd_banana_crunch.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F1.0168063273813459
sg34
g752
(S'\x07\xdf\n\x01\x11\x11:\x0f.\xb8'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'2-steamed_puddings.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'20-fruit_pastilles.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'20-fruit_pastilles.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6385
S'2-steamed_puddings.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F1.1834566483485105
sg34
g752
(S'\x07\xdf\n\x01\x11\x12\x05\x00\xbb\x80'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'36-fig_rolls.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p6480
g59
(g98
S'\x06\x00\x00\x00'
tRp6481
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6482
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6483
sS'block_loop.thisRepN'
p6484
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6485
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p6486
Nsg69
Vn
sS'block_loop.thisTrialN'
p6487
I0
sg39
F1.3500895782453881
sg34
g752
(S'\x07\xdf\n\x01\x11\x12\x0b\x03\xeb\xe8'
tRp6488
sa(dp6489
S'trial_loop.thisTrialN'
p6490
I7
sg6370
S'41-peanuts_redo.png'
p6491
sS'block_loop.thisIndex'
p6492
g6364
sg38
S'left'
p6493
sg58
g62
sS'trial_loop.thisN'
p6494
I7
sg33
S'41-peanuts_redo.png'
p6495
sg63
g64
sS'trial_loop.thisIndex'
p6496
g59
(g98
S'\x07\x00\x00\x00'
tRp6497
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6498
I0
sg6379
S'45-chewy_nougat_redo.png'
p6499
sS'block_loop.thisRepN'
p6500
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6501
I2
sg6385
S'45-chewy_nougat_redo.png'
p6502
sg55
g11
sS'block_loop.thisTrial'
p6503
Nsg69
Vn
sS'block_loop.thisTrialN'
p6504
I0
sg39
F0.78345442457430181
sg34
g752
(S'\x07\xdf\n\x01\x11\x12\x11\t\xb8H'
tRp6505
sa(dp6506
S'trial_loop.thisTrialN'
p6507
I8
sg6370
g6442
sS'block_loop.thisIndex'
p6508
g6364
sg38
S'right'
p6509
sg58
g62
sS'trial_loop.thisN'
p6510
I8
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6511
g59
(g98
S'\x08\x00\x00\x00'
tRp6512
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6513
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6514
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6515
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p6516
Nsg69
Vn
sS'block_loop.thisTrialN'
p6517
I0
sg39
F0.66677091803285293
sg34
g752
(S'\x07\xdf\n\x01\x11\x12\x17\x06\xf5@'
tRp6518
sa(dp6519
S'trial_loop.thisTrialN'
p6520
I9
sg6370
S'4-corn.png'
p6521
sS'block_loop.thisIndex'
p6522
g6364
sg38
S'left'
p6523
sg58
g62
sS'trial_loop.thisN'
p6524
I9
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6525
g59
(g98
S'\t\x00\x00\x00'
tRp6526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6527
I0
sg6379
S'10-bounty_redo.png'
p6528
sS'block_loop.thisRepN'
p6529
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6530
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p6531
Nsg69
Vn
sS'block_loop.thisTrialN'
p6532
I0
sg39
F1.5668643736316881
sg34
g752
(S'\x07\xdf\n\x01\x11\x12\x1d\x02\x84\x88'
tRp6533
sa(dp6534
S'trial_loop.thisTrialN'
p6535
I10
sg6370
S'51-mars.png'
p6536
sS'block_loop.thisIndex'
p6537
g6364
sg38
S'right'
p6538
sg58
g62
sS'trial_loop.thisN'
p6539
I10
sg33
S'51-mars.png'
p6540
sg63
g64
sS'trial_loop.thisIndex'
p6541
g59
(g98
S'\n\x00\x00\x00'
tRp6542
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6543
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6544
sS'block_loop.thisRepN'
p6545
I2
sg6382
S'27-hartleys_raspberries_jelly.png'
p6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6547
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p6548
Nsg69
Vn
sS'block_loop.thisTrialN'
p6549
I0
sg39
F0.88352661175304092
sg34
g752
(S'\x07\xdf\n\x01\x11\x12#\x0b\xa8`'
tRp6550
sa(dp6551
S'trial_loop.thisTrialN'
p6552
I11
sg6370
S'7-olives.png'
p6553
sS'block_loop.thisIndex'
p6554
g6364
sg38
S'left'
p6555
sg58
g62
sS'trial_loop.thisN'
p6556
I11
sg33
S'7-olives.png'
p6557
sg63
g64
sS'trial_loop.thisIndex'
p6558
g59
(g98
S'\x0b\x00\x00\x00'
tRp6559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6560
I0
sg6379
S'22-daim.png'
p6561
sS'block_loop.thisRepN'
p6562
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6563
I2
sg6385
S'22-daim.png'
p6564
sg55
g11
sS'block_loop.thisTrial'
p6565
Nsg69
Vn
sS'block_loop.thisTrialN'
p6566
I0
sg39
F1.8333277263773198
sg34
g752
(S'\x07\xdf\n\x01\x11\x12)\nT\x88'
tRp6567
sa(dp6568
S'trial_loop.thisTrialN'
p6569
I12
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6570
sS'block_loop.thisIndex'
p6571
g6364
sg38
S'right'
p6572
sg58
g62
sS'trial_loop.thisN'
p6573
I12
sg33
S'18-mms.png'
p6574
sg63
g64
sS'trial_loop.thisIndex'
p6575
g59
(g98
S'\x0c\x00\x00\x00'
tRp6576
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6577
I0
sg6379
S'18-mms.png'
p6578
sS'block_loop.thisRepN'
p6579
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6580
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6581
sg55
g11
sS'block_loop.thisTrial'
p6582
Nsg69
Vn
sS'block_loop.thisTrialN'
p6583
I0
sg39
F0.88348527233392815
sg34
g752
(S'\x07\xdf\n\x01\x11\x120\x08AH'
tRp6584
sa(dp6585
S'trial_loop.thisTrialN'
p6586
I13
sg6370
S'20-fruit_pastilles.png'
p6587
sS'block_loop.thisIndex'
p6588
g6364
sg38
S'left'
p6589
sg58
g62
sS'trial_loop.thisN'
p6590
I13
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6591
g59
(g98
S'\r\x00\x00\x00'
tRp6592
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6593
I0
sg6379
S'2-steamed_puddings.png'
p6594
sS'block_loop.thisRepN'
p6595
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6596
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p6597
Nsg69
Vn
sS'block_loop.thisTrialN'
p6598
I0
sg39
F0.80012418931801221
sg34
g752
(S'\x07\xdf\n\x01\x11\x126\x06\xe9\x88'
tRp6599
sa(dp6600
S'trial_loop.thisTrialN'
p6601
I14
sg6370
S'25-kitkat.png'
p6602
sS'block_loop.thisIndex'
p6603
g6364
sg38
S'left'
p6604
sg58
g62
sS'trial_loop.thisN'
p6605
I14
sg33
S'25-kitkat.png'
p6606
sg63
g64
sS'trial_loop.thisIndex'
p6607
g59
(g98
S'\x0e\x00\x00\x00'
tRp6608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6609
I0
sg6379
S'31-hobnobs.png'
p6610
sS'block_loop.thisRepN'
p6611
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6612
I2
sg6385
S'31-hobnobs.png'
p6613
sg55
g11
sS'block_loop.thisTrial'
p6614
Nsg69
Vn
sS'block_loop.thisTrialN'
p6615
I0
sg39
F1.0502080085570924
sg34
g752
(S'\x07\xdf\n\x01\x11\x13\x00\x04a\x18'
tRp6616
sa(dp6617
S'trial_loop.thisTrialN'
p6618
I15
sg6370
S'35-raisins.png'
p6619
sS'block_loop.thisIndex'
p6620
g6364
sg38
S'left'
p6621
sg58
g62
sS'trial_loop.thisN'
p6622
I15
sg33
S'35-raisins.png'
p6623
sg63
g64
sS'trial_loop.thisIndex'
p6624
g59
(g98
S'\x0f\x00\x00\x00'
tRp6625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6626
I0
sg6379
S'49-yorkie.png'
p6627
sS'block_loop.thisRepN'
p6628
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6629
I2
sg6385
S'49-yorkie.png'
p6630
sg55
g11
sS'block_loop.thisTrial'
p6631
Nsg69
Vn
sS'block_loop.thisTrialN'
p6632
I0
sg39
F0.71687400999144302
sg34
g752
(S'\x07\xdf\n\x01\x11\x13\x06\x05\xa98'
tRp6633
sa(dp6634
S'trial_loop.thisTrialN'
p6635
I16
sg6370
S'3-ellas_strawberries_apples.png'
p6636
sS'block_loop.thisIndex'
p6637
g6364
sg38
S'left'
p6638
sg58
g62
sS'trial_loop.thisN'
p6639
I16
sg33
S'3-ellas_strawberries_apples.png'
p6640
sg63
g64
sS'trial_loop.thisIndex'
p6641
g59
(g98
S'\x10\x00\x00\x00'
tRp6642
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6643
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6644
sS'block_loop.thisRepN'
p6645
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6646
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6647
sg55
g11
sS'block_loop.thisTrial'
p6648
Nsg69
Vn
sS'block_loop.thisTrialN'
p6649
I0
sg39
F1.0168610664768494
sg34
g752
(S'\x07\xdf\n\x01\x11\x13\x0c\x01\xf4\x00'
tRp6650
sa(dp6651
S'trial_loop.thisTrialN'
p6652
I17
sg6370
S'6-sour_patch_kids.png'
p6653
sS'block_loop.thisIndex'
p6654
g6364
sg38
S'right'
p6655
sg58
g62
sS'trial_loop.thisN'
p6656
I17
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p6657
g59
(g98
S'\x11\x00\x00\x00'
tRp6658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6659
I0
sg6379
S'38-maltesers.png'
p6660
sS'block_loop.thisRepN'
p6661
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6662
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p6663
Nsg69
Vn
sS'block_loop.thisTrialN'
p6664
I0
sg39
F1.2831807291040604
sg34
g752
(S'\x07\xdf\n\x01\x11\x13\x12\x02\xc3\x08'
tRp6665
sa(dp6666
S'trial_loop.thisTrialN'
p6667
I18
sg6370
S'5-pineapple.png'
p6668
sS'block_loop.thisIndex'
p6669
g6364
sg38
S'left'
p6670
sg58
g62
sS'trial_loop.thisN'
p6671
I18
sg33
S'5-pineapple.png'
p6672
sg63
g64
sS'trial_loop.thisIndex'
p6673
g59
(g98
S'\x12\x00\x00\x00'
tRp6674
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6675
I0
sg6379
S'40-sardines.png'
p6676
sS'block_loop.thisRepN'
p6677
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6678
I2
sg6385
S'40-sardines.png'
p6679
sg55
g11
sS'block_loop.thisTrial'
p6680
Nsg69
Vn
sS'block_loop.thisTrialN'
p6681
I0
sg39
F1.1834338403896254
sg34
g752
(S'\x07\xdf\n\x01\x11\x13\x18\x07^\xb8'
tRp6682
sa(dp6683
S'trial_loop.thisTrialN'
p6684
I19
sg6370
g6476
sS'block_loop.thisIndex'
p6685
g6364
sg38
S'left'
p6686
sg58
g62
sS'trial_loop.thisN'
p6687
I19
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6688
g59
(g98
S'\x13\x00\x00\x00'
tRp6689
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6690
I0
sg6379
g6483
sS'block_loop.thisRepN'
p6691
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6692
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p6693
Nsg69
Vn
sS'block_loop.thisTrialN'
p6694
I0
sg39
F0.71688170767811243
sg34
g752
(S'\x07\xdf\n\x01\x11\x13\x1e\n\xc9\xb8'
tRp6695
sa(dp6696
S'trial_loop.thisTrialN'
p6697
I20
sg6370
S'49-yorkie.png'
p6698
sS'block_loop.thisIndex'
p6699
g6364
sg38
S'right'
p6700
sg58
g62
sS'trial_loop.thisN'
p6701
I20
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p6702
g59
(g98
S'\x14\x00\x00\x00'
tRp6703
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6704
I0
sg6379
S'35-raisins.png'
p6705
sS'block_loop.thisRepN'
p6706
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6707
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p6708
Nsg69
Vn
sS'block_loop.thisTrialN'
p6709
I0
sg39
F0.56677285670593847
sg34
g752
(S'\x07\xdf\n\x01\x11\x13$\x07\x14\x80'
tRp6710
sa(dp6711
S'trial_loop.thisTrialN'
p6712
I21
sg6370
S'31-hobnobs.png'
p6713
sS'block_loop.thisIndex'
p6714
g6364
sg38
S'left'
p6715
sg58
g62
sS'trial_loop.thisN'
p6716
I21
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p6717
g59
(g98
S'\x15\x00\x00\x00'
tRp6718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6719
I0
sg6379
S'25-kitkat.png'
p6720
sS'block_loop.thisRepN'
p6721
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6722
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p6723
Nsg69
Vn
sS'block_loop.thisTrialN'
p6724
I0
sg39
F0.7834444460895611
sg34
g752
(S'\x07\xdf\n\x01\x11\x13*\x00\xfa\x00'
tRp6725
sa(dp6726
S'trial_loop.thisTrialN'
p6727
I22
sg6370
S'33-ambrosia_rice.png'
p6728
sS'block_loop.thisIndex'
p6729
g6364
sg38
S'left'
p6730
sg58
g62
sS'trial_loop.thisN'
p6731
I22
sg33
S'23-crunchie_redo.png'
p6732
sg63
g64
sS'trial_loop.thisIndex'
p6733
g59
(g98
S'\x16\x00\x00\x00'
tRp6734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6735
I0
sg6379
S'23-crunchie_redo.png'
p6736
sS'block_loop.thisRepN'
p6737
I2
sg6382
S'33-ambrosia_rice.png'
p6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6739
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p6740
Nsg69
Vn
sS'block_loop.thisTrialN'
p6741
I0
sg39
F0.71687857158394763
sg34
g752
(S'\x07\xdf\n\x01\x11\x13/\r>\xa0'
tRp6742
sa(dp6743
S'trial_loop.thisTrialN'
p6744
I23
sg6370
S'18-mms.png'
p6745
sS'block_loop.thisIndex'
p6746
g6364
sg38
S'left'
p6747
sg58
g62
sS'trial_loop.thisN'
p6748
I23
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p6749
g59
(g98
S'\x17\x00\x00\x00'
tRp6750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6751
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6752
sS'block_loop.thisRepN'
p6753
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6754
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p6755
Nsg69
Vn
sS'block_loop.thisTrialN'
p6756
I0
sg39
F0.88345191569533199
sg34
g752
(S'\x07\xdf\n\x01\x11\x135\t\x85\x80'
tRp6757
sa(dp6758
S'trial_loop.thisTrialN'
p6759
I24
sg6370
g6408
sS'block_loop.thisIndex'
p6760
g6364
sg38
S'right'
p6761
sg58
g62
sS'trial_loop.thisN'
p6762
I24
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6763
g59
(g98
S'\x18\x00\x00\x00'
tRp6764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6765
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6766
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6767
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p6768
Nsg69
Vn
sS'block_loop.thisTrialN'
p6769
I0
sg39
F1.1167704618710559
sg34
g752
(S'\x07\xdf\n\x01\x11\x13;\x08-\xc0'
tRp6770
sa(dp6771
S'trial_loop.thisTrialN'
p6772
I25
sg6370
S'42-mrkipling_lemon_slices.png'
p6773
sS'block_loop.thisIndex'
p6774
g6364
sg38
S'left'
p6775
sg58
g62
sS'trial_loop.thisN'
p6776
I25
sg33
S'42-mrkipling_lemon_slices.png'
p6777
sg63
g64
sS'trial_loop.thisIndex'
p6778
g59
(g98
S'\x19\x00\x00\x00'
tRp6779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6780
I0
sg6379
S'16-skips_prawn.png'
p6781
sS'block_loop.thisRepN'
p6782
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6783
I2
sg6385
S'16-skips_prawn.png'
p6784
sg55
g11
sS'block_loop.thisTrial'
p6785
Nsg69
Vn
sS'block_loop.thisTrialN'
p6786
I0
sg39
F1.4667648169015592
sg34
g752
(S'\x07\xdf\n\x01\x11\x14\x05\nk\xf8'
tRp6787
sa(dp6788
S'trial_loop.thisTrialN'
p6789
I26
sg6370
g6713
sS'block_loop.thisIndex'
p6790
g6364
sg38
S'right'
p6791
sg58
g62
sS'trial_loop.thisN'
p6792
I26
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p6793
g59
(g98
S'\x1a\x00\x00\x00'
tRp6794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6795
I0
sg6379
g6720
sS'block_loop.thisRepN'
p6796
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6797
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p6798
Nsg69
Vn
sS'block_loop.thisTrialN'
p6799
I0
sg39
F1.050090832686692
sg34
g752
(S'\x07\xdf\n\x01\x11\x14\x0c\x02\xde`'
tRp6800
sa(dp6801
S'trial_loop.thisTrialN'
p6802
I27
sg6370
S'46-pistachios.png'
p6803
sS'block_loop.thisIndex'
p6804
g6364
sg38
S'right'
p6805
sg58
g62
sS'trial_loop.thisN'
p6806
I27
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6807
g59
(g98
S'\x1b\x00\x00\x00'
tRp6808
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6809
I0
sg6379
S'29-beans.png'
p6810
sS'block_loop.thisRepN'
p6811
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6812
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p6813
Nsg69
Vn
sS'block_loop.thisTrialN'
p6814
I0
sg39
F1.1667734839247714
sg34
g752
(S'\x07\xdf\n\x01\x11\x14\x12\x04&\x80'
tRp6815
sa(dp6816
S'trial_loop.thisTrialN'
p6817
I28
sg6370
g6521
sS'block_loop.thisIndex'
p6818
g6364
sg38
S'right'
p6819
sg58
g62
sS'trial_loop.thisN'
p6820
I28
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p6821
g59
(g98
S'\x1c\x00\x00\x00'
tRp6822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6823
I0
sg6379
g6528
sS'block_loop.thisRepN'
p6824
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6825
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p6826
Nsg69
Vn
sS'block_loop.thisTrialN'
p6827
I0
sg39
F1.4167683521372965
sg34
g752
(S'\x07\xdf\n\x01\x11\x14\x18\x07V\xe8'
tRp6828
sa(dp6829
S'trial_loop.thisTrialN'
p6830
I29
sg6370
g6745
sS'block_loop.thisIndex'
p6831
g6364
sg38
S'left'
p6832
sg58
g62
sS'trial_loop.thisN'
p6833
I29
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p6834
g59
(g98
S'\x1d\x00\x00\x00'
tRp6835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6836
I0
sg6379
g6752
sS'block_loop.thisRepN'
p6837
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6838
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p6839
Nsg69
Vn
sS'block_loop.thisTrialN'
p6840
I0
sg39
F1.183426142706594
sg34
g752
(S'\x07\xdf\n\x01\x11\x14\x1e\x0e\x19`'
tRp6841
sa(dp6842
S'trial_loop.thisTrialN'
p6843
I30
sg6370
S'16-skips_prawn.png'
p6844
sS'block_loop.thisIndex'
p6845
g6364
sg38
S'right'
p6846
sg58
g62
sS'trial_loop.thisN'
p6847
I30
sg33
g6784
sg63
g64
sS'trial_loop.thisIndex'
p6848
g59
(g98
S'\x1e\x00\x00\x00'
tRp6849
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6850
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6851
sS'block_loop.thisRepN'
p6852
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6853
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p6854
Nsg69
Vn
sS'block_loop.thisTrialN'
p6855
I0
sg39
F1.3500402560421207
sg34
g752
(S'\x07\xdf\n\x01\x11\x14%\x02\x03\xa0'
tRp6856
sa(dp6857
S'trial_loop.thisTrialN'
p6858
I31
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6859
sS'block_loop.thisIndex'
p6860
g6364
sg38
S'left'
p6861
sg58
g62
sS'trial_loop.thisN'
p6862
I31
sg33
S'8-liquorice_catherine_wheels.png'
p6863
sg63
g64
sS'trial_loop.thisIndex'
p6864
g59
(g98
S'\x1f\x00\x00\x00'
tRp6865
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6866
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6867
sS'block_loop.thisRepN'
p6868
I2
sg6382
S'17-jacobs_mini_cheddars_redo.png'
p6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6870
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p6871
Nsg69
Vn
sS'block_loop.thisTrialN'
p6872
I0
sg39
F0.80009796017111512
sg34
g752
(S'\x07\xdf\n\x01\x11\x14+\x08\x0e\x80'
tRp6873
sa(dp6874
S'trial_loop.thisTrialN'
p6875
I32
sg6370
g6425
sS'block_loop.thisIndex'
p6876
g6364
sg38
S'left'
p6877
sg58
g62
sS'trial_loop.thisN'
p6878
I32
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6879
g59
(g98
S' \x00\x00\x00'
tRp6880
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6881
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6882
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6883
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p6884
Nsg69
Vn
sS'block_loop.thisTrialN'
p6885
I0
sg39
F0.91676122465287335
sg34
g752
(S'\x07\xdf\n\x01\x11\x141\x05\x89\xf8'
tRp6886
sa(dp6887
S'trial_loop.thisTrialN'
p6888
I33
sg6370
g6587
sS'block_loop.thisIndex'
p6889
g6364
sg38
S'left'
p6890
sg58
g62
sS'trial_loop.thisN'
p6891
I33
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6892
g59
(g98
S'!\x00\x00\x00'
tRp6893
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6894
I0
sg6379
g6594
sS'block_loop.thisRepN'
p6895
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6896
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p6897
Nsg69
Vn
sS'block_loop.thisTrialN'
p6898
I0
sg39
F0.71676852319797035
sg34
g752
(S'\x07\xdf\n\x01\x11\x147\x04\xabP'
tRp6899
sa(dp6900
S'trial_loop.thisTrialN'
p6901
I34
sg6370
g6668
sS'block_loop.thisIndex'
p6902
g6364
sg38
S'left'
p6903
sg58
g62
sS'trial_loop.thisN'
p6904
I34
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p6905
g59
(g98
S'"\x00\x00\x00'
tRp6906
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6907
I0
sg6379
g6676
sS'block_loop.thisRepN'
p6908
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6909
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p6910
Nsg69
Vn
sS'block_loop.thisTrialN'
p6911
I0
sg39
F0.86678443174241693
sg34
g752
(S'\x07\xdf\n\x01\x11\x15\x01\x00\xf6\x18'
tRp6912
sa(dp6913
S'trial_loop.thisTrialN'
p6914
I35
sg6370
S'22-daim.png'
p6915
sS'block_loop.thisIndex'
p6916
g6364
sg38
S'right'
p6917
sg58
g62
sS'trial_loop.thisN'
p6918
I35
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p6919
g59
(g98
S'#\x00\x00\x00'
tRp6920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6921
I0
sg6379
S'7-olives.png'
p6922
sS'block_loop.thisRepN'
p6923
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6924
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p6925
Nsg69
Vn
sS'block_loop.thisTrialN'
p6926
I0
sg39
F1.2500966487132246
sg34
g752
(S'\x07\xdf\n\x01\x11\x15\x06\x0e\xa6\x00'
tRp6927
sa(dp6928
S'trial_loop.thisTrialN'
p6929
I36
sg6370
g6536
sS'block_loop.thisIndex'
p6930
g6364
sg38
S'right'
p6931
sg58
g62
sS'trial_loop.thisN'
p6932
I36
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p6933
g59
(g98
S'$\x00\x00\x00'
tRp6934
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6935
I0
sg6379
g6544
sS'block_loop.thisRepN'
p6936
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6937
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p6938
Nsg69
Vn
sS'block_loop.thisTrialN'
p6939
I0
sg39
F0.80023993969734875
sg34
g752
(S'\x07\xdf\n\x01\x11\x15\r\x03\xc0\xf0'
tRp6940
sa(dp6941
S'trial_loop.thisTrialN'
p6942
I37
sg6370
g6653
sS'block_loop.thisIndex'
p6943
g6364
sg38
S'left'
p6944
sg58
g62
sS'trial_loop.thisN'
p6945
I37
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p6946
g59
(g98
S'%\x00\x00\x00'
tRp6947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6948
I0
sg6379
g6660
sS'block_loop.thisRepN'
p6949
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6950
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p6951
Nsg69
Vn
sS'block_loop.thisTrialN'
p6952
I0
sg39
F1.3665050342860923
sg34
g752
(S'\x07\xdf\n\x01\x11\x15\x13\x00\xfd\xe8'
tRp6953
sa(dp6954
S'trial_loop.thisTrialN'
p6955
I38
sg6370
g6773
sS'block_loop.thisIndex'
p6956
g6364
sg38
S'left'
p6957
sg58
g62
sS'trial_loop.thisN'
p6958
I38
sg33
g6784
sg63
g64
sS'trial_loop.thisIndex'
p6959
g59
(g98
S'&\x00\x00\x00'
tRp6960
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6961
I0
sg6379
g6781
sS'block_loop.thisRepN'
p6962
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6963
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p6964
Nsg69
Vn
sS'block_loop.thisTrialN'
p6965
I0
sg39
F1.5334167914479622
sg34
g752
(S'\x07\xdf\n\x01\x11\x15\x19\x07GH'
tRp6966
sa(dp6967
S'trial_loop.thisTrialN'
p6968
I39
sg6370
g6602
sS'block_loop.thisIndex'
p6969
g6364
sg38
S'left'
p6970
sg58
g62
sS'trial_loop.thisN'
p6971
I39
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p6972
g59
(g98
S"'\x00\x00\x00"
tRp6973
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6974
I0
sg6379
g6610
sS'block_loop.thisRepN'
p6975
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6976
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p6977
Nsg69
Vn
sS'block_loop.thisTrialN'
p6978
I0
sg39
F1.016780383335572
sg34
g752
(S'\x07\xdf\n\x01\x11\x15 \x00\xaf\xc8'
tRp6979
sa(dp6980
S'trial_loop.thisTrialN'
p6981
I40
sg6370
g6371
sS'block_loop.thisIndex'
p6982
g6364
sg38
S'left'
p6983
sg58
g62
sS'trial_loop.thisN'
p6984
I40
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p6985
g59
(g98
S'(\x00\x00\x00'
tRp6986
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6987
I0
sg6379
g6380
sS'block_loop.thisRepN'
p6988
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p6989
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p6990
Nsg69
Vn
sS'block_loop.thisTrialN'
p6991
I0
sg39
F0.78316590393296792
sg34
g752
(S'\x07\xdf\n\x01\x11\x15&\x01@P'
tRp6992
sa(dp6993
S'trial_loop.thisTrialN'
p6994
I41
sg6370
g6745
sS'block_loop.thisIndex'
p6995
g6364
sg38
S'left'
p6996
sg58
g62
sS'trial_loop.thisN'
p6997
I41
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p6998
g59
(g98
S')\x00\x00\x00'
tRp6999
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7000
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7001
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7002
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7003
Nsg69
Vn
sS'block_loop.thisTrialN'
p7004
I0
sg39
F0.78332327882526442
sg34
g752
(S'\x07\xdf\n\x01\x11\x15+\r\xbf\x88'
tRp7005
sa(dp7006
S'trial_loop.thisTrialN'
p7007
I42
sg6370
S'40-sardines.png'
p7008
sS'block_loop.thisIndex'
p7009
g6364
sg38
S'right'
p7010
sg58
g62
sS'trial_loop.thisN'
p7011
I42
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p7012
g59
(g98
S'*\x00\x00\x00'
tRp7013
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7014
I0
sg6379
S'5-pineapple.png'
p7015
sS'block_loop.thisRepN'
p7016
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7017
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p7018
Nsg69
Vn
sS'block_loop.thisTrialN'
p7019
I0
sg39
F0.93344353377324296
sg34
g752
(S'\x07\xdf\n\x01\x11\x151\n\xf8\x98'
tRp7020
sa(dp7021
S'trial_loop.thisTrialN'
p7022
I43
sg6370
g6698
sS'block_loop.thisIndex'
p7023
g6364
sg38
S'right'
p7024
sg58
g62
sS'trial_loop.thisN'
p7025
I43
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7026
g59
(g98
S'+\x00\x00\x00'
tRp7027
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7028
I0
sg6379
g6705
sS'block_loop.thisRepN'
p7029
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7030
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p7031
Nsg69
Vn
sS'block_loop.thisTrialN'
p7032
I0
sg39
F0.716856618928432
sg34
g752
(S'\x07\xdf\n\x01\x11\x157\n\x96\xf0'
tRp7033
sa(dp7034
S'trial_loop.thisTrialN'
p7035
I44
sg6370
g6844
sS'block_loop.thisIndex'
p7036
g6364
sg38
S'left'
p7037
sg58
g62
sS'trial_loop.thisN'
p7038
I44
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7039
g59
(g98
S',\x00\x00\x00'
tRp7040
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7041
I0
sg6379
g6851
sS'block_loop.thisRepN'
p7042
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7043
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p7044
Nsg69
Vn
sS'block_loop.thisTrialN'
p7045
I0
sg39
F1.2166715893836226
sg34
g752
(S'\x07\xdf\n\x01\x11\x16\x01\x06\xa38'
tRp7046
sa(dp7047
S'trial_loop.thisTrialN'
p7048
I45
sg6370
g6619
sS'block_loop.thisIndex'
p7049
g6364
sg38
S'left'
p7050
sg58
g62
sS'trial_loop.thisN'
p7051
I45
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7052
g59
(g98
S'-\x00\x00\x00'
tRp7053
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7054
I0
sg6379
g6627
sS'block_loop.thisRepN'
p7055
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7056
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p7057
Nsg69
Vn
sS'block_loop.thisTrialN'
p7058
I0
sg39
F0.68344096787768649
sg34
g752
(S'\x07\xdf\n\x01\x11\x16\x07\n\x8b8'
tRp7059
sa(dp7060
S'trial_loop.thisTrialN'
p7061
I46
sg6370
S'8-liquorice_catherine_wheels.png'
p7062
sS'block_loop.thisIndex'
p7063
g6364
sg38
S'left'
p7064
sg58
g62
sS'trial_loop.thisN'
p7065
I46
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7066
g59
(g98
S'.\x00\x00\x00'
tRp7067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7068
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p7069
sS'block_loop.thisRepN'
p7070
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7071
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7072
Nsg69
Vn
sS'block_loop.thisTrialN'
p7073
I0
sg39
F0.63345704748644494
sg34
g752
(S'\x07\xdf\n\x01\x11\x16\r\x06\x1a\x80'
tRp7074
sa(dp7075
S'trial_loop.thisTrialN'
p7076
I47
sg6370
g6668
sS'block_loop.thisIndex'
p7077
g6364
sg38
S'left'
p7078
sg58
g62
sS'trial_loop.thisN'
p7079
I47
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p7080
g59
(g98
S'/\x00\x00\x00'
tRp7081
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7082
I0
sg6379
g6676
sS'block_loop.thisRepN'
p7083
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7084
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p7085
Nsg69
Vn
sS'block_loop.thisTrialN'
p7086
I0
sg39
F0.66687811542215059
sg34
g752
(S'\x07\xdf\n\x01\x11\x16\x13\x014\x98'
tRp7087
sa(dp7088
S'trial_loop.thisTrialN'
p7089
I48
sg6370
g6425
sS'block_loop.thisIndex'
p7090
g6364
sg38
S'right'
p7091
sg58
g62
sS'trial_loop.thisN'
p7092
I48
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7093
g59
(g98
S'0\x00\x00\x00'
tRp7094
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7095
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7096
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7097
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7098
Nsg69
Vn
sS'block_loop.thisTrialN'
p7099
I0
sg39
F1.0501179171333206
sg34
g752
(S'\x07\xdf\n\x01\x11\x16\x18\x0b\xcb\x88'
tRp7100
sa(dp7101
S'trial_loop.thisTrialN'
p7102
I49
sg6370
g6713
sS'block_loop.thisIndex'
p7103
g6364
sg38
S'right'
p7104
sg58
g62
sS'trial_loop.thisN'
p7105
I49
sg33
g6613
sg63
g64
sS'trial_loop.thisIndex'
p7106
g59
(g98
S'1\x00\x00\x00'
tRp7107
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7108
I0
sg6379
g6720
sS'block_loop.thisRepN'
p7109
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7110
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7111
Nsg69
Vn
sS'block_loop.thisTrialN'
p7112
I0
sg39
F1.033623488547164
sg34
g752
(S'\x07\xdf\n\x01\x11\x16\x1e\r\x13\xa8'
tRp7113
sa(dp7114
S'trial_loop.thisTrialN'
p7115
I50
sg6370
S'13-mccoys_steak_crisps.png'
p7116
sS'block_loop.thisIndex'
p7117
g6364
sg38
S'right'
p7118
sg58
g62
sS'trial_loop.thisN'
p7119
I50
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p7120
g59
(g98
S'2\x00\x00\x00'
tRp7121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7122
I0
sg6379
S'3-ellas_strawberries_apples.png'
p7123
sS'block_loop.thisRepN'
p7124
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7125
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p7126
Nsg69
Vn
sS'block_loop.thisTrialN'
p7127
I0
sg39
F1.0001274394526263
sg34
g752
(S'\x07\xdf\n\x01\x11\x16$\x0e\x1dH'
tRp7128
sa(dp7129
S'trial_loop.thisTrialN'
p7130
I51
sg6370
g6553
sS'block_loop.thisIndex'
p7131
g6364
sg38
S'left'
p7132
sg58
g62
sS'trial_loop.thisN'
p7133
I51
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7134
g59
(g98
S'3\x00\x00\x00'
tRp7135
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7136
I0
sg6379
g6561
sS'block_loop.thisRepN'
p7137
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7138
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7139
Nsg69
Vn
sS'block_loop.thisTrialN'
p7140
I0
sg39
F0.78344330569234444
sg34
g752
(S'\x07\xdf\n\x01\x11\x16*\x0e\xad\xd0'
tRp7141
sa(dp7142
S'trial_loop.thisTrialN'
p7143
I52
sg6370
S'48-twix.png'
p7144
sS'block_loop.thisIndex'
p7145
g6364
sg38
S'right'
p7146
sg58
g62
sS'trial_loop.thisN'
p7147
I52
sg33
S'50-polo.png'
p7148
sg63
g64
sS'trial_loop.thisIndex'
p7149
g59
(g98
S'4\x00\x00\x00'
tRp7150
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7151
I0
sg6379
S'50-polo.png'
p7152
sS'block_loop.thisRepN'
p7153
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7154
I2
sg6385
S'48-twix.png'
p7155
sg55
g11
sS'block_loop.thisTrial'
p7156
Nsg69
Vn
sS'block_loop.thisTrialN'
p7157
I0
sg39
F1.3332538856229803
sg34
g752
(S'\x07\xdf\n\x01\x11\x160\x0b\xacH'
tRp7158
sa(dp7159
S'trial_loop.thisTrialN'
p7160
I53
sg6370
g6915
sS'block_loop.thisIndex'
p7161
g6364
sg38
S'right'
p7162
sg58
g62
sS'trial_loop.thisN'
p7163
I53
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7164
g59
(g98
S'5\x00\x00\x00'
tRp7165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7166
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7167
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7168
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7169
Nsg69
Vn
sS'block_loop.thisTrialN'
p7170
I0
sg39
F0.85006334909849102
sg34
g752
(S'\x07\xdf\n\x01\x11\x167\x02:P'
tRp7171
sa(dp7172
S'trial_loop.thisTrialN'
p7173
I54
sg6370
S'50-polo.png'
p7174
sS'block_loop.thisIndex'
p7175
g6364
sg38
S'left'
p7176
sg58
g62
sS'trial_loop.thisN'
p7177
I54
sg33
g7148
sg63
g64
sS'trial_loop.thisIndex'
p7178
g59
(g98
S'6\x00\x00\x00'
tRp7179
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7180
I0
sg6379
S'48-twix.png'
p7181
sS'block_loop.thisRepN'
p7182
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7183
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg69
Vn
sS'block_loop.thisTrialN'
p7185
I0
sg39
F0.88343623522814596
sg34
g752
(S'\x07\xdf\n\x01\x11\x17\x01\x00ix'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I55
sg6370
g6553
sS'block_loop.thisIndex'
p7189
g6364
sg38
S'left'
p7190
sg58
g62
sS'trial_loop.thisN'
p7191
I55
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7192
g59
(g98
S'7\x00\x00\x00'
tRp7193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7194
I0
sg6379
g6561
sS'block_loop.thisRepN'
p7195
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7196
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7197
Nsg69
Vn
sS'block_loop.thisTrialN'
p7198
I0
sg39
F0.80008399029975408
sg34
g752
(S'\x07\xdf\n\x01\x11\x17\x06\x0eS\xf8'
tRp7199
sa(dp7200
S'trial_loop.thisTrialN'
p7201
I56
sg6370
g6698
sS'block_loop.thisIndex'
p7202
g6364
sg38
S'right'
p7203
sg58
g62
sS'trial_loop.thisN'
p7204
I56
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7205
g59
(g98
S'8\x00\x00\x00'
tRp7206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7207
I0
sg6379
g6705
sS'block_loop.thisRepN'
p7208
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7209
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p7210
Nsg69
Vn
sS'block_loop.thisTrialN'
p7211
I0
sg39
F1.0167795280358405
sg34
g752
(S'\x07\xdf\n\x01\x11\x17\x0c\x0b\xcfp'
tRp7212
sa(dp7213
S'trial_loop.thisTrialN'
p7214
I57
sg6370
g6521
sS'block_loop.thisIndex'
p7215
g6364
sg38
S'left'
p7216
sg58
g62
sS'trial_loop.thisN'
p7217
I57
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7218
g59
(g98
S'9\x00\x00\x00'
tRp7219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7220
I0
sg6379
g6528
sS'block_loop.thisRepN'
p7221
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7222
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p7223
Nsg69
Vn
sS'block_loop.thisTrialN'
p7224
I0
sg39
F1.2667649879658711
sg34
g752
(S'\x07\xdf\n\x01\x11\x17\x12\x0c\x9ex'
tRp7225
sa(dp7226
S'trial_loop.thisTrialN'
p7227
I58
sg6370
g6653
sS'block_loop.thisIndex'
p7228
g6364
sg38
S'left'
p7229
sg58
g62
sS'trial_loop.thisN'
p7230
I58
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7231
g59
(g98
S':\x00\x00\x00'
tRp7232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7233
I0
sg6379
g6660
sS'block_loop.thisRepN'
p7234
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7235
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7236
Nsg69
Vn
sS'block_loop.thisTrialN'
p7237
I0
sg39
F0.9164986480573134
sg34
g752
(S'\x07\xdf\n\x01\x11\x17\x19\x01\xf7\xe8'
tRp7238
sa(dp7239
S'trial_loop.thisTrialN'
p7240
I59
sg6370
g6570
sS'block_loop.thisIndex'
p7241
g6364
sg38
S'right'
p7242
sg58
g62
sS'trial_loop.thisN'
p7243
I59
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7244
g59
(g98
S';\x00\x00\x00'
tRp7245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7246
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7247
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7248
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7249
Nsg69
Vn
sS'block_loop.thisTrialN'
p7250
I0
sg39
F0.61690018212175346
sg34
g752
(S'\x07\xdf\n\x01\x11\x17\x1f\x01\x1d('
tRp7251
sa(dp7252
S'trial_loop.thisTrialN'
p7253
I60
sg6370
g6859
sS'block_loop.thisIndex'
p7254
g6364
sg38
S'left'
p7255
sg58
g62
sS'trial_loop.thisN'
p7256
I60
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7257
g59
(g98
S'<\x00\x00\x00'
tRp7258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7259
I0
sg6379
g6867
sS'block_loop.thisRepN'
p7260
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7261
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7262
Nsg69
Vn
sS'block_loop.thisTrialN'
p7263
I0
sg39
F0.81676458882066072
sg34
g752
(S'\x07\xdf\n\x01\x11\x17$\n\xfc\x80'
tRp7264
sa(dp7265
S'trial_loop.thisTrialN'
p7266
I61
sg6370
S'30-spaghetti_hoops.png'
p7267
sS'block_loop.thisIndex'
p7268
g6364
sg38
S'right'
p7269
sg58
g62
sS'trial_loop.thisN'
p7270
I61
sg33
S'19-caramello_redo.png'
p7271
sg63
g64
sS'trial_loop.thisIndex'
p7272
g59
(g98
S'=\x00\x00\x00'
tRp7273
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7274
I0
sg6379
S'19-caramello_redo.png'
p7275
sS'block_loop.thisRepN'
p7276
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7277
I2
sg6385
S'30-spaghetti_hoops.png'
p7278
sg55
g11
sS'block_loop.thisTrial'
p7279
Nsg69
Vn
sS'block_loop.thisTrialN'
p7280
I0
sg39
F1.166746684575628
sg34
g752
(S'\x07\xdf\n\x01\x11\x17*\x08\xb2\x90'
tRp7281
sa(dp7282
S'trial_loop.thisTrialN'
p7283
I62
sg6370
g6728
sS'block_loop.thisIndex'
p7284
g6364
sg38
S'left'
p7285
sg58
g62
sS'trial_loop.thisN'
p7286
I62
sg33
g6732
sg63
g64
sS'trial_loop.thisIndex'
p7287
g59
(g98
S'>\x00\x00\x00'
tRp7288
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7289
I0
sg6379
g6736
sS'block_loop.thisRepN'
p7290
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7291
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7292
Nsg69
Vn
sS'block_loop.thisTrialN'
p7293
I0
sg39
F0.85020304782665335
sg34
g752
(S'\x07\xdf\n\x01\x11\x170\x0b\xe2\xf8'
tRp7294
sa(dp7295
S'trial_loop.thisTrialN'
p7296
I63
sg6370
g6915
sS'block_loop.thisIndex'
p7297
g6364
sg38
S'right'
p7298
sg58
g62
sS'trial_loop.thisN'
p7299
I63
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7300
g59
(g98
S'?\x00\x00\x00'
tRp7301
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7302
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7303
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7304
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7305
Nsg69
Vn
sS'block_loop.thisTrialN'
p7306
I0
sg39
F0.68354730997452862
sg34
g752
(S'\x07\xdf\n\x01\x11\x176\n\x12 '
tRp7307
sa(dp7308
S'trial_loop.thisTrialN'
p7309
I64
sg6370
g7116
sS'block_loop.thisIndex'
p7310
g6364
sg38
S'right'
p7311
sg58
g62
sS'trial_loop.thisN'
p7312
I64
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7313
g59
(g98
S'@\x00\x00\x00'
tRp7314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7315
I0
sg6379
g7123
sS'block_loop.thisRepN'
p7316
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7317
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg69
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F1.5002084076986648
sg34
g752
(S'\x07\xdf\n\x01\x11\x18\x00\x05\xa5P'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I65
sg6370
g6844
sS'block_loop.thisIndex'
p7323
g6364
sg38
S'right'
p7324
sg58
g62
sS'trial_loop.thisN'
p7325
I65
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7326
g59
(g98
S'A\x00\x00\x00'
tRp7327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7328
I0
sg6379
g6851
sS'block_loop.thisRepN'
p7329
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7330
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p7331
Nsg69
Vn
sS'block_loop.thisTrialN'
p7332
I0
sg39
F1.1166803704472841
sg34
g752
(S'\x07\xdf\n\x01\x11\x18\x06\r\xd3\x10'
tRp7333
sa(dp7334
S'trial_loop.thisTrialN'
p7335
I66
sg6370
g6803
sS'block_loop.thisIndex'
p7336
g6364
sg38
S'right'
p7337
sg58
g62
sS'trial_loop.thisN'
p7338
I66
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7339
g59
(g98
S'B\x00\x00\x00'
tRp7340
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7341
I0
sg6379
g6810
sS'block_loop.thisRepN'
p7342
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7343
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7344
Nsg69
Vn
sS'block_loop.thisTrialN'
p7345
I0
sg39
F0.95010759653087007
sg34
g752
(S'\x07\xdf\n\x01\x11\x18\r\x00\xcb '
tRp7346
sa(dp7347
S'trial_loop.thisTrialN'
p7348
I67
sg6370
S'45-chewy_nougat_redo.png'
p7349
sS'block_loop.thisIndex'
p7350
g6364
sg38
S'right'
p7351
sg58
g62
sS'trial_loop.thisN'
p7352
I67
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7353
g59
(g98
S'C\x00\x00\x00'
tRp7354
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7355
I0
sg6379
S'41-peanuts_redo.png'
p7356
sS'block_loop.thisRepN'
p7357
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7358
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p7359
Nsg69
Vn
sS'block_loop.thisTrialN'
p7360
I0
sg39
F0.68345265695825219
sg34
g752
(S'\x07\xdf\n\x01\x11\x18\x13\x00\xa7\xf8'
tRp7361
sa(dp7362
S'trial_loop.thisTrialN'
p7363
I68
sg6370
g6859
sS'block_loop.thisIndex'
p7364
g6364
sg38
S'left'
p7365
sg58
g62
sS'trial_loop.thisN'
p7366
I68
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7367
g59
(g98
S'D\x00\x00\x00'
tRp7368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7369
I0
sg6379
g6867
sS'block_loop.thisRepN'
p7370
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7371
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7372
Nsg69
Vn
sS'block_loop.thisTrialN'
p7373
I0
sg39
F0.81695902664796449
sg34
g752
(S'\x07\xdf\n\x01\x11\x18\x18\x0by\x80'
tRp7374
sa(dp7375
S'trial_loop.thisTrialN'
p7376
I69
sg6370
g6668
sS'block_loop.thisIndex'
p7377
g6364
sg38
S'left'
p7378
sg58
g62
sS'trial_loop.thisN'
p7379
I69
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p7380
g59
(g98
S'E\x00\x00\x00'
tRp7381
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7382
I0
sg6379
g6676
sS'block_loop.thisRepN'
p7383
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7384
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p7385
Nsg69
Vn
sS'block_loop.thisTrialN'
p7386
I0
sg39
F0.75010406129877083
sg34
g752
(S'\x07\xdf\n\x01\x11\x18\x1e\t/\x90'
tRp7387
sa(dp7388
S'trial_loop.thisTrialN'
p7389
I70
sg6370
g6425
sS'block_loop.thisIndex'
p7390
g6364
sg38
S'left'
p7391
sg58
g62
sS'trial_loop.thisN'
p7392
I70
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7393
g59
(g98
S'F\x00\x00\x00'
tRp7394
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7395
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7396
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7397
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p7398
Nsg69
Vn
sS'block_loop.thisTrialN'
p7399
I0
sg39
F0.7335973734370782
sg34
g752
(S'\x07\xdf\n\x01\x11\x18$\x05\xf3p'
tRp7400
sa(dp7401
S'trial_loop.thisTrialN'
p7402
I71
sg6370
g7349
sS'block_loop.thisIndex'
p7403
g6364
sg38
S'right'
p7404
sg58
g62
sS'trial_loop.thisN'
p7405
I71
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p7406
g59
(g98
S'G\x00\x00\x00'
tRp7407
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7408
I0
sg6379
g7356
sS'block_loop.thisRepN'
p7409
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7410
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p7411
Nsg69
Vn
sS'block_loop.thisTrialN'
p7412
I0
sg39
F0.71677308478683699
sg34
g752
(S'\x07\xdf\n\x01\x11\x18*\x02x\xd0'
tRp7413
sa(dp7414
S'trial_loop.thisTrialN'
p7415
I72
sg6370
g6553
sS'block_loop.thisIndex'
p7416
g6364
sg38
S'left'
p7417
sg58
g62
sS'trial_loop.thisN'
p7418
I72
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7419
g59
(g98
S'H\x00\x00\x00'
tRp7420
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7421
I0
sg6379
g6561
sS'block_loop.thisRepN'
p7422
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7423
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7424
Nsg69
Vn
sS'block_loop.thisTrialN'
p7425
I0
sg39
F0.68345864404545864
sg34
g752
(S'\x07\xdf\n\x01\x11\x18/\r\xc7X'
tRp7426
sa(dp7427
S'trial_loop.thisTrialN'
p7428
I73
sg6370
g6602
sS'block_loop.thisIndex'
p7429
g6364
sg38
S'left'
p7430
sg58
g62
sS'trial_loop.thisN'
p7431
I73
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7432
g59
(g98
S'I\x00\x00\x00'
tRp7433
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7434
I0
sg6379
g6610
sS'block_loop.thisRepN'
p7435
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7436
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7437
Nsg69
Vn
sS'block_loop.thisTrialN'
p7438
I0
sg39
F0.80010964924804284
sg34
g752
(S'\x07\xdf\n\x01\x11\x185\t\x95 '
tRp7439
sa(dp7440
S'trial_loop.thisTrialN'
p7441
I74
sg6370
g6915
sS'block_loop.thisIndex'
p7442
g6364
sg38
S'right'
p7443
sg58
g62
sS'trial_loop.thisN'
p7444
I74
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p7445
g59
(g98
S'J\x00\x00\x00'
tRp7446
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7447
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7448
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7449
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p7450
Nsg69
Vn
sS'block_loop.thisTrialN'
p7451
I0
sg39
F1.1002064690183033
sg34
g752
(S'\x07\xdf\n\x01\x11\x18;\x06\xd2\x18'
tRp7452
sa(dp7453
S'trial_loop.thisTrialN'
p7454
I75
sg6370
g6653
sS'block_loop.thisIndex'
p7455
g6364
sg38
S'right'
p7456
sg58
g62
sS'trial_loop.thisN'
p7457
I75
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p7458
g59
(g98
S'K\x00\x00\x00'
tRp7459
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7460
I0
sg6379
g6660
sS'block_loop.thisRepN'
p7461
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7462
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7463
Nsg69
Vn
sS'block_loop.thisTrialN'
p7464
I0
sg39
F0.84984268212429015
sg34
g752
(S'\x07\xdf\n\x01\x11\x19\x05\t\x0ch'
tRp7465
sa(dp7466
S'trial_loop.thisTrialN'
p7467
I76
sg6370
g6391
sS'block_loop.thisIndex'
p7468
g6364
sg38
S'right'
p7469
sg58
g62
sS'trial_loop.thisN'
p7470
I76
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7471
g59
(g98
S'L\x00\x00\x00'
tRp7472
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7473
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7474
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7475
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p7476
Nsg69
Vn
sS'block_loop.thisTrialN'
p7477
I0
sg39
F1.5167741111436044
sg34
g752
(S'\x07\xdf\n\x01\x11\x19\x0b\x07;\x90'
tRp7478
sa(dp7479
S'trial_loop.thisTrialN'
p7480
I77
sg6370
S'23-crunchie_redo.png'
p7481
sS'block_loop.thisIndex'
p7482
g6364
sg38
S'right'
p7483
sg58
g62
sS'trial_loop.thisN'
p7484
I77
sg33
g6732
sg63
g64
sS'trial_loop.thisIndex'
p7485
g59
(g98
S'M\x00\x00\x00'
tRp7486
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7487
I0
sg6379
S'33-ambrosia_rice.png'
p7488
sS'block_loop.thisRepN'
p7489
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7490
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7491
Nsg69
Vn
sS'block_loop.thisTrialN'
p7492
I0
sg39
F0.80014443138134084
sg34
g752
(S'\x07\xdf\n\x01\x11\x19\x12\x00ix'
tRp7493
sa(dp7494
S'trial_loop.thisTrialN'
p7495
I78
sg6370
g6442
sS'block_loop.thisIndex'
p7496
g6364
sg38
S'right'
p7497
sg58
g62
sS'trial_loop.thisN'
p7498
I78
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7499
g59
(g98
S'N\x00\x00\x00'
tRp7500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7501
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7502
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7503
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7504
Nsg69
Vn
sS'block_loop.thisTrialN'
p7505
I0
sg39
F1.2501006401034829
sg34
g752
(S'\x07\xdf\n\x01\x11\x19\x17\r#H'
tRp7506
sa(dp7507
S'trial_loop.thisTrialN'
p7508
I79
sg6370
S'44-crunch.png'
p7509
sS'block_loop.thisIndex'
p7510
g6364
sg38
S'left'
p7511
sg58
g62
sS'trial_loop.thisN'
p7512
I79
sg33
S'44-crunch.png'
p7513
sg63
g64
sS'trial_loop.thisIndex'
p7514
g59
(g98
S'O\x00\x00\x00'
tRp7515
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7516
I0
sg6379
S'26-walkers_smoky_bacon.png'
p7517
sS'block_loop.thisRepN'
p7518
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7519
I2
sg6385
S'26-walkers_smoky_bacon.png'
p7520
sg55
g11
sS'block_loop.thisTrial'
p7521
Nsg69
Vn
sS'block_loop.thisTrialN'
p7522
I0
sg39
F1.1668798260216136
sg34
g752
(S'\x07\xdf\n\x01\x11\x19\x1e\x02\x03\xa0'
tRp7523
sa(dp7524
S'trial_loop.thisTrialN'
p7525
I80
sg6370
g6521
sS'block_loop.thisIndex'
p7526
g6364
sg38
S'right'
p7527
sg58
g62
sS'trial_loop.thisN'
p7528
I80
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7529
g59
(g98
S'P\x00\x00\x00'
tRp7530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7531
I0
sg6379
g6528
sS'block_loop.thisRepN'
p7532
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7533
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p7534
Nsg69
Vn
sS'block_loop.thisTrialN'
p7535
I0
sg39
F1.4334201556157495
sg34
g752
(S'\x07\xdf\n\x01\x11\x19$\x054\x08'
tRp7536
sa(dp7537
S'trial_loop.thisTrialN'
p7538
I81
sg6370
g7008
sS'block_loop.thisIndex'
p7539
g6364
sg38
S'right'
p7540
sg58
g62
sS'trial_loop.thisN'
p7541
I81
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p7542
g59
(g98
S'Q\x00\x00\x00'
tRp7543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7544
I0
sg6379
g7015
sS'block_loop.thisRepN'
p7545
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7546
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p7547
Nsg69
Vn
sS'block_loop.thisTrialN'
p7548
I0
sg39
F0.91676207994896686
sg34
g752
(S'\x07\xdf\n\x01\x11\x19*\x0c1\x18'
tRp7549
sa(dp7550
S'trial_loop.thisTrialN'
p7551
I82
sg6370
g7062
sS'block_loop.thisIndex'
p7552
g6364
sg38
S'right'
p7553
sg58
g62
sS'trial_loop.thisN'
p7554
I82
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7555
g59
(g98
S'R\x00\x00\x00'
tRp7556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7557
I0
sg6379
g7069
sS'block_loop.thisRepN'
p7558
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7559
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7560
Nsg69
Vn
sS'block_loop.thisTrialN'
p7561
I0
sg39
F0.91677975611310103
sg34
g752
(S'\x07\xdf\n\x01\x11\x190\x0b\x94\xd8'
tRp7562
sa(dp7563
S'trial_loop.thisTrialN'
p7564
I83
sg6370
g6745
sS'block_loop.thisIndex'
p7565
g6364
sg38
S'left'
p7566
sg58
g62
sS'trial_loop.thisN'
p7567
I83
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7568
g59
(g98
S'S\x00\x00\x00'
tRp7569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7570
I0
sg6379
g6752
sS'block_loop.thisRepN'
p7571
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7572
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7573
Nsg69
Vn
sS'block_loop.thisTrialN'
p7574
I0
sg39
F0.63345676238895976
sg34
g752
(S'\x07\xdf\n\x01\x11\x196\n\xb60'
tRp7575
sa(dp7576
S'trial_loop.thisTrialN'
p7577
I84
sg6370
S'1-treacle_cookies.png'
p7578
sS'block_loop.thisIndex'
p7579
g6364
sg38
S'left'
p7580
sg58
g62
sS'trial_loop.thisN'
p7581
I84
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7582
g59
(g98
S'T\x00\x00\x00'
tRp7583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7584
I0
sg6379
S'21-nakd_banana_crunch.png'
p7585
sS'block_loop.thisRepN'
p7586
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7587
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7588
Nsg69
Vn
sS'block_loop.thisTrialN'
p7589
I0
sg39
F0.6501213953451952
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a\x00\x05\x91\xc8'
tRp7590
sa(dp7591
S'trial_loop.thisTrialN'
p7592
I85
sg6370
g6698
sS'block_loop.thisIndex'
p7593
g6364
sg38
S'right'
p7594
sg58
g62
sS'trial_loop.thisN'
p7595
I85
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p7596
g59
(g98
S'U\x00\x00\x00'
tRp7597
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7598
I0
sg6379
g6705
sS'block_loop.thisRepN'
p7599
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7600
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p7601
Nsg69
Vn
sS'block_loop.thisTrialN'
p7602
I0
sg39
F0.6336090054937813
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a\x06\x00\xe6x'
tRp7603
sa(dp7604
S'trial_loop.thisTrialN'
p7605
I86
sg6370
g6371
sS'block_loop.thisIndex'
p7606
g6364
sg38
S'left'
p7607
sg58
g62
sS'trial_loop.thisN'
p7608
I86
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7609
g59
(g98
S'V\x00\x00\x00'
tRp7610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7611
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7612
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7613
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7614
Nsg69
Vn
sS'block_loop.thisTrialN'
p7615
I0
sg39
F0.89984998066938715
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a\x0b\x0b\x04P'
tRp7616
sa(dp7617
S'trial_loop.thisTrialN'
p7618
I87
sg6370
g7578
sS'block_loop.thisIndex'
p7619
g6364
sg38
S'left'
p7620
sg58
g62
sS'trial_loop.thisN'
p7621
I87
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7622
g59
(g98
S'W\x00\x00\x00'
tRp7623
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7624
I0
sg6379
g7585
sS'block_loop.thisRepN'
p7625
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7626
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7627
Nsg69
Vn
sS'block_loop.thisTrialN'
p7628
I0
sg39
F0.7834444460895611
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a\x11\t\xeb\x10'
tRp7629
sa(dp7630
S'trial_loop.thisTrialN'
p7631
I88
sg6370
g6653
sS'block_loop.thisIndex'
p7632
g6364
sg38
S'right'
p7633
sg58
g62
sS'trial_loop.thisN'
p7634
I88
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p7635
g59
(g98
S'X\x00\x00\x00'
tRp7636
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7637
I0
sg6379
g6660
sS'block_loop.thisRepN'
p7638
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7639
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p7640
Nsg69
Vn
sS'block_loop.thisTrialN'
p7641
I0
sg39
F0.61650446408748394
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a\x17\x07(\x08'
tRp7642
sa(dp7643
S'trial_loop.thisTrialN'
p7644
I89
sg6370
g7481
sS'block_loop.thisIndex'
p7645
g6364
sg38
S'right'
p7646
sg58
g62
sS'trial_loop.thisN'
p7647
I89
sg33
g6738
sg63
g64
sS'trial_loop.thisIndex'
p7648
g59
(g98
S'Y\x00\x00\x00'
tRp7649
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7650
I0
sg6379
g7488
sS'block_loop.thisRepN'
p7651
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7652
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7653
Nsg69
Vn
sS'block_loop.thisTrialN'
p7654
I0
sg39
F1.1001018375245621
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a\x1d\x01\xc5 '
tRp7655
sa(dp7656
S'trial_loop.thisTrialN'
p7657
I90
sg6370
g6668
sS'block_loop.thisIndex'
p7658
g6364
sg38
S'left'
p7659
sg58
g62
sS'trial_loop.thisN'
p7660
I90
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p7661
g59
(g98
S'Z\x00\x00\x00'
tRp7662
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7663
I0
sg6379
g6676
sS'block_loop.thisRepN'
p7664
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7665
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p7666
Nsg69
Vn
sS'block_loop.thisTrialN'
p7667
I0
sg39
F0.78341422554876772
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a#\x03\xc4\xd8'
tRp7668
sa(dp7669
S'trial_loop.thisTrialN'
p7670
I91
sg6370
g7578
sS'block_loop.thisIndex'
p7671
g6364
sg38
S'left'
p7672
sg58
g62
sS'trial_loop.thisN'
p7673
I91
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7674
g59
(g98
S'[\x00\x00\x00'
tRp7675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7676
I0
sg6379
g7585
sS'block_loop.thisRepN'
p7677
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7678
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7679
Nsg69
Vn
sS'block_loop.thisTrialN'
p7680
I0
sg39
F0.63344592860812554
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a)\x00\xfd\xe8'
tRp7681
sa(dp7682
S'trial_loop.thisTrialN'
p7683
I92
sg6370
g6728
sS'block_loop.thisIndex'
p7684
g6364
sg38
S'right'
p7685
sg58
g62
sS'trial_loop.thisN'
p7686
I92
sg33
g6738
sg63
g64
sS'trial_loop.thisIndex'
p7687
g59
(g98
S'\\\x00\x00\x00'
tRp7688
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7689
I0
sg6379
g6736
sS'block_loop.thisRepN'
p7690
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7691
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p7692
Nsg69
Vn
sS'block_loop.thisTrialN'
p7693
I0
sg39
F0.71678705465819803
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a.\x0bZ@'
tRp7694
sa(dp7695
S'trial_loop.thisTrialN'
p7696
I93
sg6370
g7174
sS'block_loop.thisIndex'
p7697
g6364
sg38
S'left'
p7698
sg58
g62
sS'trial_loop.thisN'
p7699
I93
sg33
g7148
sg63
g64
sS'trial_loop.thisIndex'
p7700
g59
(g98
S']\x00\x00\x00'
tRp7701
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7702
I0
sg6379
g7181
sS'block_loop.thisRepN'
p7703
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7704
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p7705
Nsg69
Vn
sS'block_loop.thisTrialN'
p7706
I0
sg39
F0.8167614527301339
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a4\x07f\x88'
tRp7707
sa(dp7708
S'trial_loop.thisTrialN'
p7709
I94
sg6370
g6773
sS'block_loop.thisIndex'
p7710
g6364
sg38
S'right'
p7711
sg58
g62
sS'trial_loop.thisN'
p7712
I94
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7713
g59
(g98
S'^\x00\x00\x00'
tRp7714
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7715
I0
sg6379
g6781
sS'block_loop.thisRepN'
p7716
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7717
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p7718
Nsg69
Vn
sS'block_loop.thisTrialN'
p7719
I0
sg39
F1.100045958031842
sg34
g752
(S'\x07\xdf\n\x01\x11\x1a:\x05\x1c\x98'
tRp7720
sa(dp7721
S'trial_loop.thisTrialN'
p7722
I95
sg6370
g6459
sS'block_loop.thisIndex'
p7723
g6364
sg38
S'right'
p7724
sg58
g62
sS'trial_loop.thisN'
p7725
I95
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7726
g59
(g98
S'_\x00\x00\x00'
tRp7727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7728
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7729
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7730
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p7731
Nsg69
Vn
sS'block_loop.thisTrialN'
p7732
I0
sg39
F0.91673613589955494
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b\x04\x07\x18h'
tRp7733
sa(dp7734
S'trial_loop.thisTrialN'
p7735
I96
sg6370
S'27-hartleys_raspberries_jelly.png'
p7736
sS'block_loop.thisIndex'
p7737
g6364
sg38
S'left'
p7738
sg58
g62
sS'trial_loop.thisN'
p7739
I96
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p7740
g59
(g98
S'`\x00\x00\x00'
tRp7741
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7742
I0
sg6379
S'51-mars.png'
p7743
sS'block_loop.thisRepN'
p7744
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7745
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p7746
Nsg69
Vn
sS'block_loop.thisTrialN'
p7747
I0
sg39
F0.94996191071186331
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b\n\x06|('
tRp7748
sa(dp7749
S'trial_loop.thisTrialN'
p7750
I97
sg6370
g6713
sS'block_loop.thisIndex'
p7751
g6364
sg38
S'right'
p7752
sg58
g62
sS'trial_loop.thisN'
p7753
I97
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7754
g59
(g98
S'a\x00\x00\x00'
tRp7755
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7756
I0
sg6379
g6720
sS'block_loop.thisRepN'
p7757
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7758
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7759
Nsg69
Vn
sS'block_loop.thisTrialN'
p7760
I0
sg39
F0.95056917253896245
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b\x10\x06\x1a\x80'
tRp7761
sa(dp7762
S'trial_loop.thisTrialN'
p7763
I98
sg6370
g7267
sS'block_loop.thisIndex'
p7764
g6364
sg38
S'right'
p7765
sg58
g62
sS'trial_loop.thisN'
p7766
I98
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p7767
g59
(g98
S'b\x00\x00\x00'
tRp7768
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7769
I0
sg6379
g7275
sS'block_loop.thisRepN'
p7770
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7771
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p7772
Nsg69
Vn
sS'block_loop.thisTrialN'
p7773
I0
sg39
F1.0834386300630285
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b\x16\x05\xf3p'
tRp7774
sa(dp7775
S'trial_loop.thisTrialN'
p7776
I99
sg6370
g6713
sS'block_loop.thisIndex'
p7777
g6364
sg38
S'right'
p7778
sg58
g62
sS'trial_loop.thisN'
p7779
I99
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p7780
g59
(g98
S'c\x00\x00\x00'
tRp7781
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7782
I0
sg6379
g6720
sS'block_loop.thisRepN'
p7783
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7784
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7785
Nsg69
Vn
sS'block_loop.thisTrialN'
p7786
I0
sg39
F0.90011455295825726
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b\x1c\x07\xb4\xa8'
tRp7787
sa(dp7788
S'trial_loop.thisTrialN'
p7789
I100
sg6370
g6408
sS'block_loop.thisIndex'
p7790
g6364
sg38
S'left'
p7791
sg58
g62
sS'trial_loop.thisN'
p7792
I100
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7793
g59
(g98
S'd\x00\x00\x00'
tRp7794
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7795
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7796
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7797
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p7798
Nsg69
Vn
sS'block_loop.thisTrialN'
p7799
I0
sg39
F1.5834206687977712
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b"\x06\x9bh'
tRp7800
sa(dp7801
S'trial_loop.thisTrialN'
p7802
I101
sg6370
g7578
sS'block_loop.thisIndex'
p7803
g6364
sg38
S'left'
p7804
sg58
g62
sS'trial_loop.thisN'
p7805
I101
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7806
g59
(g98
S'e\x00\x00\x00'
tRp7807
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7808
I0
sg6379
g7585
sS'block_loop.thisRepN'
p7809
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7810
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p7811
Nsg69
Vn
sS'block_loop.thisTrialN'
p7812
I0
sg39
F0.6334556219917431
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b)\x00\xbb\x80'
tRp7813
sa(dp7814
S'trial_loop.thisTrialN'
p7815
I102
sg6370
g6570
sS'block_loop.thisIndex'
p7816
g6364
sg38
S'right'
p7817
sg58
g62
sS'trial_loop.thisN'
p7818
I102
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p7819
g59
(g98
S'f\x00\x00\x00'
tRp7820
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7821
I0
sg6379
g6578
sS'block_loop.thisRepN'
p7822
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7823
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p7824
Nsg69
Vn
sS'block_loop.thisTrialN'
p7825
I0
sg39
F0.63345733258756809
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b.\x0b\x13\xf0'
tRp7826
sa(dp7827
S'trial_loop.thisTrialN'
p7828
I103
sg6370
g7062
sS'block_loop.thisIndex'
p7829
g6364
sg38
S'right'
p7830
sg58
g62
sS'trial_loop.thisN'
p7831
I103
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7832
g59
(g98
S'g\x00\x00\x00'
tRp7833
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7834
I0
sg6379
g7069
sS'block_loop.thisRepN'
p7835
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7836
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7837
Nsg69
Vn
sS'block_loop.thisTrialN'
p7838
I0
sg39
F0.90010257878020639
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b4\x05\xef\x88'
tRp7839
sa(dp7840
S'trial_loop.thisTrialN'
p7841
I104
sg6370
g7174
sS'block_loop.thisIndex'
p7842
g6364
sg38
S'left'
p7843
sg58
g62
sS'trial_loop.thisN'
p7844
I104
sg33
g7155
sg63
g64
sS'trial_loop.thisIndex'
p7845
g59
(g98
S'h\x00\x00\x00'
tRp7846
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7847
I0
sg6379
g7181
sS'block_loop.thisRepN'
p7848
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7849
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p7850
Nsg69
Vn
sS'block_loop.thisTrialN'
p7851
I0
sg39
F0.90010257878020639
sg34
g752
(S'\x07\xdf\n\x01\x11\x1b:\x04\xd6H'
tRp7852
sa(dp7853
S'trial_loop.thisTrialN'
p7854
I105
sg6370
g6521
sS'block_loop.thisIndex'
p7855
g6364
sg38
S'right'
p7856
sg58
g62
sS'trial_loop.thisN'
p7857
I105
sg33
g6419
sg63
g64
sS'trial_loop.thisIndex'
p7858
g59
(g98
S'i\x00\x00\x00'
tRp7859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7860
I0
sg6379
g6528
sS'block_loop.thisRepN'
p7861
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7862
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p7863
Nsg69
Vn
sS'block_loop.thisTrialN'
p7864
I0
sg39
F1.2501796126489353
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c\x04\x03\xbd\x08'
tRp7865
sa(dp7866
S'trial_loop.thisTrialN'
p7867
I106
sg6370
g6636
sS'block_loop.thisIndex'
p7868
g6364
sg38
S'left'
p7869
sg58
g62
sS'trial_loop.thisN'
p7870
I106
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7871
g59
(g98
S'j\x00\x00\x00'
tRp7872
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7873
I0
sg6379
g6644
sS'block_loop.thisRepN'
p7874
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7875
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p7876
Nsg69
Vn
sS'block_loop.thisTrialN'
p7877
I0
sg39
F0.71678990565487766
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c\n\x08\x1e '
tRp7878
sa(dp7879
S'trial_loop.thisTrialN'
p7880
I107
sg6370
S'26-walkers_smoky_bacon.png'
p7881
sS'block_loop.thisIndex'
p7882
g6364
sg38
S'right'
p7883
sg58
g62
sS'trial_loop.thisN'
p7884
I107
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p7885
g59
(g98
S'k\x00\x00\x00'
tRp7886
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7887
I0
sg6379
S'44-crunch.png'
p7888
sS'block_loop.thisRepN'
p7889
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7890
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p7891
Nsg69
Vn
sS'block_loop.thisTrialN'
p7892
I0
sg39
F0.91676065445062704
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c\x10\x04e\x00'
tRp7893
sa(dp7894
S'trial_loop.thisTrialN'
p7895
I108
sg6370
g6773
sS'block_loop.thisIndex'
p7896
g6364
sg38
S'left'
p7897
sg58
g62
sS'trial_loop.thisN'
p7898
I108
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7899
g59
(g98
S'l\x00\x00\x00'
tRp7900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7901
I0
sg6379
g6781
sS'block_loop.thisRepN'
p7902
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7903
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p7904
Nsg69
Vn
sS'block_loop.thisTrialN'
p7905
I0
sg39
F0.81676373352456721
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c\x16\x03\x8a@'
tRp7906
sa(dp7907
S'trial_loop.thisTrialN'
p7908
I109
sg6370
g6636
sS'block_loop.thisIndex'
p7909
g6364
sg38
S'left'
p7910
sg58
g62
sS'trial_loop.thisN'
p7911
I109
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p7912
g59
(g98
S'm\x00\x00\x00'
tRp7913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7914
I0
sg6379
g6644
sS'block_loop.thisRepN'
p7915
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7916
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p7917
Nsg69
Vn
sS'block_loop.thisTrialN'
p7918
I0
sg39
F0.88340230839094147
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c\x1c\x01@P'
tRp7919
sa(dp7920
S'trial_loop.thisTrialN'
p7921
I110
sg6370
g6619
sS'block_loop.thisIndex'
p7922
g6364
sg38
S'left'
p7923
sg58
g62
sS'trial_loop.thisN'
p7924
I110
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7925
g59
(g98
S'n\x00\x00\x00'
tRp7926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7927
I0
sg6379
g6627
sS'block_loop.thisRepN'
p7928
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7929
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p7930
Nsg69
Vn
sS'block_loop.thisTrialN'
p7931
I0
sg39
F0.71678220796820824
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c"\x00\'\x10'
tRp7932
sa(dp7933
S'trial_loop.thisTrialN'
p7934
I111
sg6370
g6391
sS'block_loop.thisIndex'
p7935
g6364
sg38
S'right'
p7936
sg58
g62
sS'trial_loop.thisN'
p7937
I111
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7938
g59
(g98
S'o\x00\x00\x00'
tRp7939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7940
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vn
sS'block_loop.thisTrialN'
p7944
I0
sg39
F0.88341969946122845
sg34
g752
(S"\x07\xdf\n\x01\x11\x1c'\x0bq\xb0"
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g6602
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'left'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g6613
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g6610
sS'block_loop.thisRepN'
p7954
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vn
sS'block_loop.thisTrialN'
p7957
I0
sg39
F0.68344923576296424
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c-\n\x1d\xd8'
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
g6476
sS'block_loop.thisIndex'
p7961
g6364
sg38
S'left'
p7962
sg58
g62
sS'trial_loop.thisN'
p7963
I113
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p7964
g59
(g98
S'q\x00\x00\x00'
tRp7965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7966
I0
sg6379
g6483
sS'block_loop.thisRepN'
p7967
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7968
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p7969
Nsg69
Vn
sS'block_loop.thisTrialN'
p7970
I0
sg39
F0.63346388987338287
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c3\x05\xeb\xa0'
tRp7971
sa(dp7972
S'trial_loop.thisTrialN'
p7973
I114
sg6370
g7736
sS'block_loop.thisIndex'
p7974
g6364
sg38
S'right'
p7975
sg58
g62
sS'trial_loop.thisN'
p7976
I114
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p7977
g59
(g98
S'r\x00\x00\x00'
tRp7978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7979
I0
sg6379
g7743
sS'block_loop.thisRepN'
p7980
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7981
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p7982
Nsg69
Vn
sS'block_loop.thisTrialN'
p7983
I0
sg39
F0.81687178621723433
sg34
g752
(S'\x07\xdf\n\x01\x11\x1c9\x00\xc78'
tRp7984
sa(dp7985
S'trial_loop.thisTrialN'
p7986
I115
sg6370
g7062
sS'block_loop.thisIndex'
p7987
g6364
sg38
S'right'
p7988
sg58
g62
sS'trial_loop.thisN'
p7989
I115
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p7990
g59
(g98
S's\x00\x00\x00'
tRp7991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7992
I0
sg6379
g7069
sS'block_loop.thisRepN'
p7993
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p7994
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p7995
Nsg69
Vn
sS'block_loop.thisTrialN'
p7996
I0
sg39
F0.7834569904662203
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d\x02\r\xbf\x88'
tRp7997
sa(dp7998
S'trial_loop.thisTrialN'
p7999
I116
sg6370
g7116
sS'block_loop.thisIndex'
p8000
g6364
sg38
S'right'
p8001
sg58
g62
sS'trial_loop.thisN'
p8002
I116
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8003
g59
(g98
S't\x00\x00\x00'
tRp8004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8005
I0
sg6379
g7123
sS'block_loop.thisRepN'
p8006
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8007
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p8008
Nsg69
Vn
sS'block_loop.thisTrialN'
p8009
I0
sg39
F0.86676675557828275
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d\x08\n\xfc\x80'
tRp8010
sa(dp8011
S'trial_loop.thisTrialN'
p8012
I117
sg6370
g7481
sS'block_loop.thisIndex'
p8013
g6364
sg38
S'right'
p8014
sg58
g62
sS'trial_loop.thisN'
p8015
I117
sg33
g6738
sg63
g64
sS'trial_loop.thisIndex'
p8016
g59
(g98
S'u\x00\x00\x00'
tRp8017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8018
I0
sg6379
g7488
sS'block_loop.thisRepN'
p8019
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8020
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8021
Nsg69
Vn
sS'block_loop.thisTrialN'
p8022
I0
sg39
F1.0000878106329765
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d\x0e\tj('
tRp8023
sa(dp8024
S'trial_loop.thisTrialN'
p8025
I118
sg6370
g7267
sS'block_loop.thisIndex'
p8026
g6364
sg38
S'right'
p8027
sg58
g62
sS'trial_loop.thisN'
p8028
I118
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8029
g59
(g98
S'v\x00\x00\x00'
tRp8030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8031
I0
sg6379
g7275
sS'block_loop.thisRepN'
p8032
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8033
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8034
Nsg69
Vn
sS'block_loop.thisTrialN'
p8035
I0
sg39
F0.94993739216079121
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d\x14\t\xfa\xb0'
tRp8036
sa(dp8037
S'trial_loop.thisTrialN'
p8038
I119
sg6370
g6728
sS'block_loop.thisIndex'
p8039
g6364
sg38
S'left'
p8040
sg58
g62
sS'trial_loop.thisN'
p8041
I119
sg33
g6738
sg63
g64
sS'trial_loop.thisIndex'
p8042
g59
(g98
S'w\x00\x00\x00'
tRp8043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8044
I0
sg6379
g6736
sS'block_loop.thisRepN'
p8045
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8046
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8047
Nsg69
Vn
sS'block_loop.thisTrialN'
p8048
I0
sg39
F0.95010160944366362
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d\x1a\t\x99\x08'
tRp8049
sa(dp8050
S'trial_loop.thisTrialN'
p8051
I120
sg6370
g7008
sS'block_loop.thisIndex'
p8052
g6364
sg38
S'right'
p8053
sg58
g62
sS'trial_loop.thisN'
p8054
I120
sg33
g6679
sg63
g64
sS'trial_loop.thisIndex'
p8055
g59
(g98
S'x\x00\x00\x00'
tRp8056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8057
I0
sg6379
g7015
sS'block_loop.thisRepN'
p8058
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8059
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p8060
Nsg69
Vn
sS'block_loop.thisTrialN'
p8061
I0
sg39
F0.80023680360318394
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d \tq\xf8'
tRp8062
sa(dp8063
S'trial_loop.thisTrialN'
p8064
I121
sg6370
g7509
sS'block_loop.thisIndex'
p8065
g6364
sg38
S'left'
p8066
sg58
g62
sS'trial_loop.thisN'
p8067
I121
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p8068
g59
(g98
S'y\x00\x00\x00'
tRp8069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8070
I0
sg6379
g7517
sS'block_loop.thisRepN'
p8071
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8072
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p8073
Nsg69
Vn
sS'block_loop.thisTrialN'
p8074
I0
sg39
F0.78342962091846857
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d&\x06\xe9\x88'
tRp8075
sa(dp8076
S'trial_loop.thisTrialN'
p8077
I122
sg6370
g6619
sS'block_loop.thisIndex'
p8078
g6364
sg38
S'left'
p8079
sg58
g62
sS'trial_loop.thisN'
p8080
I122
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p8081
g59
(g98
S'z\x00\x00\x00'
tRp8082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8083
I0
sg6379
g6627
sS'block_loop.thisRepN'
p8084
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8085
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p8086
Nsg69
Vn
sS'block_loop.thisTrialN'
p8087
I0
sg39
F0.63340801038066274
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d,\x04&\x80'
tRp8088
sa(dp8089
S'trial_loop.thisTrialN'
p8090
I123
sg6370
g7349
sS'block_loop.thisIndex'
p8091
g6364
sg38
S'right'
p8092
sg58
g62
sS'trial_loop.thisN'
p8093
I123
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8094
g59
(g98
S'{\x00\x00\x00'
tRp8095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8096
I0
sg6379
g7356
sS'block_loop.thisRepN'
p8097
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8098
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p8099
Nsg69
Vn
sS'block_loop.thisTrialN'
p8100
I0
sg39
F0.95012185150335426
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d1\x0eDX'
tRp8101
sa(dp8102
S'trial_loop.thisTrialN'
p8103
I124
sg6370
S'19-caramello_redo.png'
p8104
sS'block_loop.thisIndex'
p8105
g6364
sg38
S'left'
p8106
sg58
g62
sS'trial_loop.thisN'
p8107
I124
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8108
g59
(g98
S'|\x00\x00\x00'
tRp8109
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8110
I0
sg6379
S'30-spaghetti_hoops.png'
p8111
sS'block_loop.thisRepN'
p8112
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.70009619255142752
sg34
g752
(S'\x07\xdf\n\x01\x11\x1d7\x0e\x1dH'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6587
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'left'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6594
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.95017972669302253
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e\x01\t\xee\xf8'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6803
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6810
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.70021878531406401
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e\x07\t\xc7\xe8'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6491
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6499
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.65012510163796833
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e\r\x05\x95\xb0'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g7008
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g7015
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.8834382309250941
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e\x13\x00\xaf\xc8'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g7481
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6738
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g7488
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F0.71678505896488787
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e\x18\x0e\xd8\xc8'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g7349
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g7356
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.61677787445660215
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e\x1e\n\xe1('
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g7736
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'left'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g7743
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.83344547244996647
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e$\x05\x82('
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6570
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6578
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.783574736538867
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e*\x03\xb1P'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6553
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'left'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6561
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.3500892931479029
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e0\x00\xaf\xc8'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6408
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.83341667740387493
sg34
g752
(S'\x07\xdf\n\x01\x11\x1e6\x06\xba\xa8'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6476
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6402
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6483
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.66680398956668796
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f\x00\x04\xaf8'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6636
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'left'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6644
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F2.01675786047781
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f\x06\x00\x03\xe8'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6425
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F0.60024951903687906
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f\r\x00\xcb '
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6536
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'right'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6544
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.78343617820792133
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f\x12\no\xe0'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g7174
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g7148
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g7181
sS'block_loop.thisRepN'
p8307
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.78344872258094256
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f\x18\x07\xa8\xf0'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6408
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6412
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6385
g6419
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F0.88344051171952742
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f\x1e\x04\xe5\xe8'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g7509
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'left'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g7517
sS'block_loop.thisRepN'
p8333
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F0.66678574320030748
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f$\x03\x92\x10'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6698
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'right'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6705
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F0.81675318484485615
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f)\x0e)\x00'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g7144
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g7148
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g7152
sS'block_loop.thisRepN'
p8359
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.93354075268507586
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f/\x0b\xdf\x10'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g6371
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.0665091397204378
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f5\x0by\x80'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7881
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7888
sS'block_loop.thisRepN'
p8385
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.93345807384685031
sg34
g752
(S'\x07\xdf\n\x01\x11\x1f;\r\x00 '
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6859
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6867
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.81678169479346252
sg34
g752
(S'\x07\xdf\n\x01\x11 \x05\x0c_\xf8'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g6459
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'right'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.98345339821389643
sg34
g752
(S'\x07\xdf\n\x01\x11 \x0b\n\x16\x08'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g7736
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g7743
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.60010497361872694
sg34
g752
(S'\x07\xdf\n\x01\x11 \x11\nk\xf8'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7008
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'right'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6672
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7015
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6672
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6385
g6679
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F1.0168736108535086
sg34
g752
(S'\x07\xdf\n\x01\x11 \x17\x04\xca\x90'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6859
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6869
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6867
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F0.65006352015916491
sg34
g752
(S'\x07\xdf\n\x01\x11 \x1d\x05\x99\x98'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g7144
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'left'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g7155
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g7152
sS'block_loop.thisRepN'
p8463
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.76677040485083126
sg34
g752
(S'\x07\xdf\n\x01\x11 #\x00\xb3\xb0'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g8104
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g7278
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g8111
sS'block_loop.thisRepN'
p8476
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.1500934555988351
sg34
g752
(S'\x07\xdf\n\x01\x11 (\x0c\xf4h'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6491
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6502
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6499
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.95008279287867481
sg34
g752
(S'\x07\xdf\n\x01\x11 /\x00e\x90'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6459
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.78344045469930279
sg34
g752
(S'\x07\xdf\n\x01\x11 5\x00Bh'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g7881
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7888
sS'block_loop.thisRepN'
p8515
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.85060218705621082
sg34
g752
(S'\x07\xdf\n\x01\x11 :\x0c\xc1\xa0'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6602
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6606
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6610
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6606
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6385
g6613
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F1.3834265418445284
sg34
g752
(S'\x07\xdf\n\x01\x11!\x04\n\xf0\xc8'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6491
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'left'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6502
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6499
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.80011535123776412
sg34
g752
(S'\x07\xdf\n\x01\x11!\x0b\x01\xf7\xe8'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6459
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.81678568618372083
sg34
g752
(S'\x07\xdf\n\x01\x11!\x10\x0e\xb1\xb8'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6570
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6578
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F1.1001257858770259
sg34
g752
(S'\x07\xdf\n\x01\x11!\x16\x0cg\xc8'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6476
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6483
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F1.1835986278747441
sg34
g752
(S'\x07\xdf\n\x01\x11!\x1c\x0eg\x80'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g7267
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'right'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g7275
sS'block_loop.thisRepN'
p8593
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.81676686961873202
sg34
g752
(S'\x07\xdf\n\x01\x11!#\x02\x90@'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g6728
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6738
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g6736
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F0.64996088435509591
sg34
g752
(S'\x07\xdf\n\x01\x11!)\x00FP'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g7116
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6647
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g7123
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.68345636324738734
sg34
g752
(S'\x07\xdf\n\x01\x11!.\n\xa2\xa8'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6844
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'left'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6851
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.84993790534281288
sg34
g752
(S'\x07\xdf\n\x01\x11!4\x06pp'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g7267
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g7275
sS'block_loop.thisRepN'
p8645
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.71678078246986843
sg34
g752
(S'\x07\xdf\n\x01\x11!:\x04\x9f\x98'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6587
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6594
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.76688244893739466
sg34
g752
(S'\x07\xdf\n\x01\x11"\x04\x00\xab\xe0'
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g8104
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g8111
sS'block_loop.thisRepN'
p8671
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.90011996985049336
sg34
g752
(S'\x07\xdf\n\x01\x11"\t\x0c\xec\x98'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g7144
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g7148
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g7152
sS'block_loop.thisRepN'
p8684
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.78344359079346759
sg34
g752
(S'\x07\xdf\n\x01\x11"\x0f\x0b\xd3X'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7062
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6863
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7069
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6869
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6385
g6863
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F0.88342369085148675
sg34
g752
(S'\x07\xdf\n\x01\x11"\x15\t\x10P'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g8104
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'left'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g8111
sS'block_loop.thisRepN'
p8710
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.95018286278354935
sg34
g752
(S'\x07\xdf\n\x01\x11"\x1b\x07\xf7\x10'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6442
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F0.88345847298478475
sg34
g752
(S'\x07\xdf\n\x01\x11"!\x07\x95h'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6391
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'right'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.88355398130079266
sg34
g752
(S'\x07\xdf\n\x01\x11"\'\x06=\xa8'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7116
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7123
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.63346845146588748
sg34
g752
(S'\x07\xdf\n\x01\x11"-\x05$h'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g7578
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'left'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g7585
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.68346149503850029
sg34
g752
(S'\x07\xdf\n\x01\x11"3\x00\x00\x00'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g7481
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6738
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g7488
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6738
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6385
g6732
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.65011084666548413
sg34
g752
(S'\x07\xdf\n\x01\x11"8\n\xd5p'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6536
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6544
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.70022135121325846
sg34
g752
(S'\x07\xdf\n\x01\x11#\x02\x06* '
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6844
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'left'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6784
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6851
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.66666913752851542
sg34
g752
(S'\x07\xdf\n\x01\x11#\x08\x01\xf7\xe8'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6536
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'right'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6540
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6544
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.55023138671094785
sg34
g752
(S'\x07\xdf\n\x01\x11#\r\x0c\xc9p'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7144
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'right'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g7148
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7152
sS'block_loop.thisRepN'
p8827
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.73342118197615491
sg34
g752
(S'\x07\xdf\n\x01\x11#\x13\x069\xc0'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6619
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6627
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6623
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6385
g6630
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.66676977763199829
sg34
g752
(S'\x07\xdf\n\x01\x11#\x19\x02\xbf '
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7736
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6546
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7743
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6546
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6385
g6540
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F0.65008775360911386
sg34
g752
(S'\x07\xdf\n\x01\x11#\x1e\r\x90\xa8'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g6371
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'left'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6383
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6383
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6385
g6375
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F0.81652054369624238
sg34
g752
(S'\x07\xdf\n\x01\x11#$\x08\xaa\xc0'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7881
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'left'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7888
sS'block_loop.thisRepN'
p8879
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.65012253574241186
sg34
g752
(S'\x07\xdf\n\x01\x11#*\x06`\xd0'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g6587
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g6594
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6463
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6385
g6470
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.80034314569638809
sg34
g752
(S'\x07\xdf\n\x01\x11#0\x01w\x00'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g8104
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g8111
sS'block_loop.thisRepN'
p8905
I2
sg6382
g7271
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6385
g7278
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.71677907187768142
sg34
g752
(S'\x07\xdf\n\x01\x11#5\x0e0\xd0'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g6745
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6574
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g6752
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6574
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6385
g6581
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.66688296211577835
sg34
g752
(S'\x07\xdf\n\x01\x11#;\n{\x98'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6915
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6557
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6922
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6557
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6385
g6564
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.78343931430208613
sg34
g752
(S'\x07\xdf\n\x01\x11$\x05\x05\xd0H'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g6442
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6446
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6385
g6453
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.83343435357164708
sg34
g752
(S'\x07\xdf\n\x01\x11$\x0b\x03\r@'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g7349
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'right'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g7356
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.68344182317741797
sg34
g752
(S'\x07\xdf\n\x01\x11$\x11\x00\xfd\xe8'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7174
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g7148
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7181
sS'block_loop.thisRepN'
p8970
I2
sg6382
g7148
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6385
g7155
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F1.0006024151334714
sg34
g752
(S'\x07\xdf\n\x01\x11$\x16\x0b\xd3X'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6773
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6781
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6777
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6385
g6784
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F1.2998262603941839
sg34
g752
(S'\x07\xdf\n\x01\x11$\x1c\x0cc\xe0'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6803
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'right'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6810
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.75010235069930786
sg34
g752
(S'\x07\xdf\n\x01\x11$#\x02:P'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g7881
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g7888
sS'block_loop.thisRepN'
p9009
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.91678830909950193
sg34
g752
(S'\x07\xdf\n\x01\x11$(\x0e<\x88'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6391
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6399
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6395
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6385
g6402
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.0332525741650898
sg34
g752
(S'\x07\xdf\n\x01\x11$.\ra\xc8'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7509
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g7520
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7517
sS'block_loop.thisRepN'
p9035
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.76685964097850956
sg34
g752
(S'\x07\xdf\n\x01\x11$4\x0ekh'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6803
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6810
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6429
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6385
g6436
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F1.0000923722218431
sg34
g752
(S'\x07\xdf\n\x01\x11$:\x0bm\xc8'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6491
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'left'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6495
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6499
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6495
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6385
g6502
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F1.0167755366455822
sg34
g752
(S'\x07\xdf\n\x01\x11%\x04\x0b\xfeP'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6636
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6644
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6640
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6385
g6647
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.83343121747748228
sg34
g752
(S'\x07\xdf\n\x01\x11%\n\x0c\x8e\xd8'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7509
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g7513
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7517
sS'block_loop.thisRepN'
p9087
I2
sg6382
g7513
sg56
Vl
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6385
g7520
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.66678089651395567
sg34
g752
(S'\x07\xdf\n\x01\x11%\x10\n\xbe\x00'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vl
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I114
sg56
Vl
sg57
Vn
sg42
I486
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I114
sg55
g11
sg56
Vl
sg45
F1.55
sg42
I486
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g525
sg51
F29.859999999999999
sg46
F0.15999999999999895
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I80446288
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\n\xd7#>\x00\x00\x00\x00\x00\x00\x00\x00\n\xd7\xa3=\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\xd7#>\x9a\x99\x99>\x00\x00\x00\x00\x00\x00\x00\x00\xecQ8>\n\xd7#>\xecQ8>\n\xd7#>\n\xd7#=\x00\x00\x00\x00\x8f\xc2u=\x00\x00\x00\x00\xecQ8>\x00\x00\x00\x00\x00\x00\x00\x00\n\xd7\xa3<)\\\x0f>\x00\x00\x00\x00\xcd\xccL>\x1f\x85\xeb>\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x8f\xc2\xf5=\x00\x00\x00\x00\x00\x00\x00\x00\x8f\xc2\xf5='
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\xbaI\x94@T\xe3]@B`E@\x0e-\x92@\x9a\x99\x8dA\xfc\xa9)@!\xb0j@\xee|7@b\x10 @\x0e-2@\x87\x16\x11@d;\x9b@\x08\xac\x0eA/\xdd,@\xdb\xf9>@D\x8b\xd0@\x0e-B@\x96CS@\x7fj.A\x19\x04DA!\xb0*@\xcb\xa1\xc1@1\x08\xa8@j\xbc\x8dA\xdb\xf9.@\x87\x16\x11@\x10X\xcd@D\x8b\x98@\xbaI4@\xdd$\x0eAD\x8b@AT\xe3-@\xfe\xd4\xcc@\xdd$\xe2@\xdb\xf9\x1e@\x19\x04(AffVA\x98n\x86@\xee|\xc7@D\x8b\x98@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x98A\x00\x00\xc8A\x00\x00\xb8A\x00\x00\x10A\x00\x00\x00\x00\x00\x00PA\x00\x00\xd8A\x00\x00\x00A\x00\x00\x1cB\x00\x00 A\x00\x00\x88A\x00\x00\x90A\x00\x00\x80A\x00\x00\xe0A\x00\x00\x00@\x00\x00\x08B\x00\x00\xc0A\x00\x00\x14B\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xe0@\x00\x00\x18B\x00\x00@@\x00\x00\x80@\x00\x00\xf8A\x00\x00\xe8A\x00\x00@A\x00\x00\xd0A\x00\x00\xf0A\x00\x00\x00B\x00\x00\x04B\x00\x00\xa8A\x00\x00pA\x00\x00\xa0A\x00\x000A\x00\x00\xb0A\x00\x00`A\x00\x00\x10B\x00\x00\x80?\x00\x00\x0cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x9a\x99\xd9?ff\xe6?ff\xe6?33\xb3?\x9a\x99\xd9?ff\xa6?\xcd\xcc\x8c?33\xf3?33\xb3?ff\xe6?\xcd\xcc\x8c?\xcd\xcc\xcc?\xcd\xcc\xcc?ff\xe6?\xcd\xcc\xcc?\x00\x00\x80?\x9a\x99\xd9?\x9a\x99\xd9?ff\xe6?33\xb3?ff\xa6?ff\xe6?\x00\x00\xc0?\x00\x00\xc0?\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\x80?33\xb3?ff\xa6?\xcd\xcc\xcc?33\xb3?\xcd\xcc\x8c?ff\xa6?\x00\x00\x80?\x9a\x99\xd9?ff\xa6?\xcd\xcc\xcc?33\xb3?\x00\x00\x80?ff\xa6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\x04\x00\x00\x00&\x00\x00\x00\x0e\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x13\x00\x00\x00\x12\x00\x00\x00\x14\x00\x00\x00\x07\x00\x00\x00\x03\x00\x00\x00\t\x00\x00\x00"\x00\x00\x00\x1a\x00\x00\x00\x05\x00\x00\x00$\x00\x00\x00 \x00\x00\x00\x0c\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x00\x00\x00\x00!\x00\x00\x00\x1f\x00\x00\x00#\x00\x00\x00\x02\x00\x00\x00\x10\x00\x00\x00\x01\x00\x00\x00\x1b\x00\x00\x00\x06\x00\x00\x00\r\x00\x00\x00\x19\x00\x00\x00\x1c\x00\x00\x00\x18\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x0f\x00\x00\x00\'\x00\x00\x00%\x00\x00\x00\x11\x00\x00\x00\x15\x00\x00\x00\x08\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g235
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g277
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g263
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g165
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g102
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g193
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g291
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g158
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g375
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g172
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g221
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g228
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g214
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g298
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g116
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g340
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g270
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g361
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g144
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g137
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g151
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g368
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g123
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g130
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g319
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g305
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g186
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g284
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g312
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g326
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g333
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g249
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g207
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g242
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g179
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g256
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g200
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g354
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g109
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g347
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I80446288
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xa0@ff\x86@\x00\x00\xc0@333@\x00\x00\x90@\x00\x00\xc0@\x00\x00\xc0@33S@\x00\x00`@ffF@33S@\xcd\xcc\x9c@33S@33S@ff\x96@\x00\x00`@\xcd\xcc\x9c@\x9a\x99y@\x00\x00\xc0@ff\x86@\x00\x00\xa0@33\x93@\x00\x00\xa0@fff@\x00\x00\x90@ff\x96@\x00\x00\x80@\xcd\xccl@\xcd\xccL@\xcd\xcc\x9c@33\xa3@33\x93@\xcd\xcc\x8c@ff\xb6@\x00\x00\x90@33\xb3@\x9a\x99\x89@ff\xa6@33\xb3@ff\x96@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xf3\xee^@\xda\xed.@V)"@)\xbc\x83@\xc4\x88\x90@\xae\x14\xb1?\xb7\x9f\xd9?54C@rVe@\x9d\xe1\xbd?\xd5\xd6\xdd?]\xf1\xae?&\xde-@\xe63\x03@\xdb\x9a\x99?\xca\x10a@\x9d\xad\xaa?\x17\xcf\x8c?\xbeC\xc4?^\x00 @8\x13a@\x9c\x11!@\xf3\xbe{?\xfc\xddM@?\x8a\x88?\x94\x02\x10@\xe8"\x12@\x8e\x89\xa8?\xd6N\x95?/\x9a\xb9?\xc6\xcd|@9\x04@?\x12\xbc\xdb?\xc1\xf0\x8e?\x8fxg@\x9e%\xe2?\xc5\xd3\xcc?\xcd\xac\x8a?th\x86?\xe5\xc0{?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc,@33\x83@\xcd\xccL@333@fff@fff@ffF@33\x83@\xcd\xcc,@\x9a\x99\x89@33S@\x00\x00`@33S@ff\x86@\xcd\xccL@\x9a\x99\x89@\xcd\xcc,@\xcd\xccL@fff@ff\x86@fff@\x00\x00@@ff\x86@\x9a\x999@33s@33s@\x00\x00@@\xcd\xccl@\xcd\xccL@ff\x86@\x9a\x99\x89@33s@fff@33\x83@333@\x00\x00\x80@\xcd\xcc,@fff@\xcd\xccl@\x00\x00@@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x00E{\x0c`\xdc\xc6\x0c\x80zz\x0c\xa0{z\x0c`}z\x0c\x00L\x15\x03\xe0zz\x0c@\xdf\xc6\x0c\xc0{z\x0c\xe0\xb5\xc8\x0c`\xb1\xc8\x0c\xe0A\x15\x03`xz\x0c\xa0wy\x0c\x80\xe0x\x0c`\xe0x\x0c\xa0\xdf\xc6\x0c\x00\xb6\xc8\x0c\xc0\xb6\xc8\x0c\xc0\xb5\xc8\x0c \xb7\xc8\x0c\x80\xb2\xc8\x0c\xa0.\x16\x03@*\x16\x03 ,\x16\x03\xe0)\x16\x03`-\x16\x03\x80%\x16\x03\xe0-\x16\x03 -\x16\x03 +\x16\x03\xa0,\x16\x03\xe0/\x16\x03\xa0/\x16\x03 .\x16\x03`+\x16\x03`.\x16\x03`,\x16\x03\xe0,\x16\x03\xa0-\x16\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xbaI\xbc@!\xb0\xca@B`\x05@B`\xf5?u\x938@P\x8d\xb7?u\x93\xe8?\x0e-\x12@u\x93\xe8?\x0e-r@\xd3M\xc2?!\xb0\n@\x06\x81\xb5?\xe9&\xd1?\xbaI\x04@\xbaI\x04@u\x93(@\x83\xc0\xea?/\xdd\\@u\x93\x08@\x91\xed\xcc?\xe9&\xd1?#\xdbY?P\x8d\xf7?\x0e-\xc2?\xb6\xf3\xdd?\xa8\xc6\x9b?\xd3Mb?\xd9\xcew?\x96C\x03@B`\x95?\xe9&\xf1?^\xba\xb9?\x91\xed\x8c?\xb6\xf3\xfd?\xa8\xc6\x9b?+\x87\xa6?\xc5 \xa0?\xf8S\xb3?m\xe7{?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I80446288
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'@c\x0b\r\xb0&\x17\x03 &\x17\x03\x90c\x0b\r\xb0&\x17\x03Xd\x0b\r\xe0c\x0b\r@c\x0b\r\xe0c\x0b\r\xb8c\x0b\r\x90c\x0b\r\x80&\x17\x03hc\x0b\r\x80&\x17\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'\xa8kY\x04h\xc9W\x02P\x1c\xfb\x04x;\xfa\x04\xd82\xfa\x04\x089\xfa\x04\xe00\xfa\x04@:\xfa\x04X7\xfa\x04\xd04\xfa\x04\xf0;\xfa\x04\x101\xfa\x04`2\xfa\x04P?\xfa\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g755
sg82
g788
sg83
g760
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g808
sg82
g809
sg83
g813
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g743
sg82
g819
sg83
g748
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g808
sg82
g828
sg83
g813
sg84
g832
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g797
sg82
g837
sg83
g802
sg84
g841
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g777
sg82
g846
sg83
g782
sg84
g850
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g855
sg82
g856
sg83
g860
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g766
sg82
g866
sg83
g771
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g855
sg82
g875
sg83
g860
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I80446288
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I80446288
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\x08\x84\r\r\xc0\x85\r\r\x08\x84\r\r\xe0\x90\r\r0\x84\r\rX\x84\r\r@6\r\r\x10\x91\r\r\x80\x84\r\r@\x91\r\r@6\r\r\x80\x18\x15\x03\x10\x86\r\r@\x91\r\r\xb06\r\r\xd0\x84\r\r0\x84\r\rX7\r\r\x10\x91\r\r\xf8\x84\r\r\x086\r\r\x00\x17\x15\x030\x84\r\r\x08\x84\r\r \x85\r\r\x086\r\r\xd0\x84\r\rX\x84\r\r\xe0\x19\x15\x03H\x85\r\rp\x85\r\r\xe0\x90\r\r\x00\x17\x15\x03\xd0\x84\r\r@\x91\r\r\xe0\x19\x15\x03x6\r\r\x80\x84\r\r@\x91\r\rp\x91\r\r@\x16\x15\x03\x086\r\r0\x92\r\r\xb06\r\r\xd0\x91\r\rx6\r\r\xf0\x92\r\r0\x84\r\r\xb06\r\r\xf0\x92\r\r8\x86\r\r\x086\r\r@6\r\r\x08\x84\r\r \x85\r\r@6\r\r8\x86\r\r`\x92\r\r\x80\x15\x15\x03@\x91\r\rp\x85\r\r@\x91\r\r\xe0\x19\x15\x03p\x91\r\r\xe0\x19\x15\x03\x10\x91\r\rp\x85\r\r0\x84\r\r\x80\x84\r\rX7\r\r`\x92\r\rH\x85\r\r\x00\x17\x15\x03\xb06\r\r\xa0\x91\r\r\xa8\x84\r\r\x08\x84\r\r\xa8\x84\r\r\x086\r\r\x00\x17\x15\x03\x10\x91\r\r\xe8\x85\r\r\xe86\r\r\x10\x86\r\r@6\r\r\x08\x84\r\r0\x84\r\r\xd0\x84\r\r\x80\x84\r\r\x80\x18\x15\x03@6\r\r\xe0\x90\r\r\xd0\x84\r\r\xe0\x90\r\r\xb06\r\r\xe0\x19\x15\x03\xc0\x92\r\rp\x91\r\r\x10\x91\r\r\xd0\x84\r\r\x086\r\r\xd0\x91\r\rp\x91\r\rx6\r\r\xf8\x84\r\r\xb06\r\r\x80\x15\x15\x03\xe8\x85\r\r\x80\x15\x15\x03\x10\x91\r\r\xd0\x84\r\r\xc0\x92\r\r@\x16\x15\x03\x086\r\r\xb06\r\rp\x91\r\r \x85\r\r\xe0\x19\x15\x03\xf8\x84\r\r\xe0\x19\x15\x03\xe0\x90\r\r 7\r\r\xf8\x84\r\rX\x84\r\rx6\r\r\xf8\x84\r\r0\x84\r\r\x10\x91\r\r8\x86\r\r\x80\x15\x15\x03\xd0\x84\r\rp\x91\r\r\xa8\x84\r\r\xa0\x91\r\rH\x85\r\r\xf8\x84\r\rp\x85\r\r\xc0\x92\r\r\xd0\x84\r\rx6\r\rp\x91\r\rx6\r\rX7\r\rX\x84\r\rH\x85\r\r0\x84\r\r@6\r\rX\x84\r\r\x80\x84\r\r\xa8\x84\r\r\xe86\r\r\xb06\r\rX7\r\r \x85\r\rp\x85\r\rX\x84\r\r\x08\x84\r\rx6\r\rX\x84\r\r\x10\x86\r\r\xe86\r\r\x10\x91\r\rH\x85\r\r\x80\x84\r\r`\x86\r\r\xc0\x92\r\rX\x84\r\r\x00\x17\x15\x03\xc0\x92\r\r\x00\x92\r\r\x086\r\r\xd0\x84\r\r\xe0\x90\r\rH\x85\r\r\x80\x84\r\r`\x86\r\r`\x92\r\r\xe0\x90\r\r@\x91\r\r`\x86\r\rp\x91\r\r\x08\x84\r\r\xe0\x19\x15\x03X\x84\r\r\x10\x86\r\r`\x86\r\r\xb06\r\r@6\r\r\xa8\x84\r\rX\x84\r\r\xe0\x90\r\r\x10\x86\r\rx6\r\r\x00\x17\x15\x03\xf8\x84\r\r\x10\x91\r\r\x086\r\r@6\r\r \x85\r\rp\x85\r\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S' \x01\xc9\x0c@\xcf\x16\x03\x80\xca\x16\x03\x00\xc3\x16\x03\x80\xc6\x16\x03`\xcc\x16\x03\xa0\xca\x16\x03\xc0\xc8\x16\x03@\xcc\x16\x03@\xc9\x16\x03 \xc3\x16\x03 \xc6\x16\x03`\xc6\x16\x03\xe0\xcd\x16\x03@\xca\x16\x03\xe0\xcf\x16\x03`\xcd\x16\x03\xe0\xc9\x16\x03\xa0\xce\x16\x03`\xc3\x16\x03\xa0\xcf\x16\x03\xe0\xca\x16\x03\x80\xc0\x16\x03`\xca\x16\x03\xe0\xcb\x16\x03\xc0\xcb\x16\x03\x00\xcb\x16\x03`\xcf\x16\x03@\xcb\x16\x03 \xc9\x16\x03\xe0\xcc\x16\x03\xc0\xca\x16\x03 \xc8\x16\x03\xa0\xc9\x16\x03 \xcb\x16\x03\x80\xc9\x16\x03\xa0\xcb\x16\x03\x80\xce\x16\x03`\xc8\x16\x03 \xca\x16\x03\x00\xc9\x16\x03`\xc9\x16\x03`\xcb\x16\x03\x80\xcb\x16\x03\x80\xcd\x16\x03\xc0\xc9\x16\x03\xa0\xc8\x16\x03\x80\xcc\x16\x03@\xc8\x16\x03\x80\x08\xc9\x0c\x00\xd9\xc5\x0c\xc0\xd0\xc5\x0c \xd0\xc5\x0c\xe0\xd0\xc5\x0c@\xd1\xc5\x0c\xa0\xd2\xc5\x0c\xa0v\xc9\x0c\x00\xd1\xc5\x0c\x00\xdb\xc5\x0c\xc0\xda\xc5\x0c\xe0\xc8\x16\x03\xa0\xd0\xc5\x0c\xc0r\xc9\x0c\x00cm\x0c@cm\x0c `m\x0c\xc0gm\x0c\x80cm\x0c\x80bm\x0c\xe0gm\x0c\x00km\x0c km\x0c\xc0km\x0c\xe0km\x0c\x80km\x0c gm\x0c@gm\x0c\x80gm\x0c\xe0bm\x0c`gm\x0c@`m\x0c`mm\x0c\xa0bm\x0c@km\x0c\xa0lm\x0c\x00fm\x0c\x00lm\x0c fm\x0c\x80lm\x0c\xc0bm\x0c`fm\x0c`lm\x0c@fm\x0c\x80fm\x0c@mm\x0c mm\x0c\xe0om\x0c\xe0\xd2\xc5\x0c\x80\xcf\x16\x03\xa0R\xbb\x04@R\xbb\x04\xe0R\xbb\x04\xc0R\xbb\x04 S\xbb\x04\x00S\xbb\x04 R\xbb\x04\x80S\xbb\x04`S\xbb\x04\xe0P\xbb\x04\xa0S\xbb\x04\x00T\xbb\x04\xe0S\xbb\x04@T\xbb\x04 T\xbb\x04\x80T\xbb\x04\xa0T\xbb\x04\xc0T\xbb\x04\xe0T\xbb\x04\x00Q\xbb\x04\x80R\xbb\x04\x00U\xbb\x04 U\xbb\x04\x80U\xbb\x04`U\xbb\x04\xc0S\xbb\x04\xa0U\xbb\x04\xc0U\xbb\x04 V\xbb\x04\x00V\xbb\x04\xa0P\xbb\x04\x80V\xbb\x04`V\xbb\x04\xc0V\xbb\x04\xa0V\xbb\x04@S\xbb\x04\xe0V\xbb\x04\x00W\xbb\x04 W\xbb\x04\x80W\xbb\x04`W\xbb\x04`R\xbb\x04\xe0W\xbb\x04\xc0W\xbb\x04@Q\xbb\x04\x00X\xbb\x04 X\xbb\x04@X\xbb\x04\xa0X\xbb\x04\x80X\xbb\x04\xe0X\xbb\x04\xc0X\xbb\x04 Y\xbb\x04@Y\xbb\x04`Y\xbb\x04\x80Y\xbb\x04\xa0Y\xbb\x04`Q\xbb\x04\x80Q\xbb\x04\xc0Y\xbb\x04\xe0Y\xbb\x04@Z\xbb\x04`Z\xbb\x04@U\xbb\x04\xa0Z\xbb\x04\x80Z\xbb\x04 Q\xbb\x04\x00[\xbb\x04\xe0Z\xbb\x04\xa0Q\xbb\x04`[\xbb\x04\x80[\xbb\x04\xa0[\xbb\x04`T\xbb\x04\xe0[\xbb\x04\x00\\\xbb\x04\xc0Q\xbb\x04\x00Z\xbb\x04 \\\xbb\x04@\\\xbb\x04`\\\xbb\x04\x80\\\xbb\x04\xe0\\\xbb\x04\xc0\\\xbb\x04 [\xbb\x04\x00]\xbb\x04`]\xbb\x04\x80]\xbb\x04@V\xbb\x04\xa0W\xbb\x04\xe0]\xbb\x04\xc0]\xbb\x04 ^\xbb\x04\x00^\xbb\x04 Z\xbb\x04@^\xbb\x04`^\xbb\x04\x80^\xbb\x04\xe0^\xbb\x04\xc0^\xbb\x04 _\xbb\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\x05\xa4\xea?\x8b2\x03@|r\x97?\xcb$\xe2?\xb0\x06\xc0?\xc7F\xc4?\xa9\xad\xaa?{\x8b\xc8?\x8c\xcf\xcc?5G\x14@\xa8\xcb{?\x1e\xe1\x9d?\x8cz\xf7?\xbe\x9a\t@\xea\x06\xc0?-\x01P@\x00\x7fw?\xa24\x03@\x83\xbe\xbb?wG\x14@2\xff\xdf?\x8b9\xb3?\xbf%\xa2?\x89\x0b\x91?\x17\xa2I@\xe6\x0f\xb1?l\x12!@\x9cX\xd5?B\xe0\xfd?2\xbf\x0b@\xa14\x03@S\xe1\xbd?\xc7G\xa4?\x94\xf1\xee?^\xc2\xbb?\x94\x03\xa0?\x97X\x95?\xddw\xd7?\x9b\x14\x91?\xea\xf2\xee?\xa9\x9c\xf9?\xd4\xa9\xca?\x8c\x9c\xd9?\x07\xf2\xce?G\x17\xd1?yy\x17@0lf?\xebl\xa6?\xc0G\x84?\xf3\x18\xd1?HW\xf5?\x9a2\xf3?\xd2%\xc2?aO\xd5?\xf9J\xa4?\xa9\x04\xa0?\x06T\x15@\x00\x8a\x08@\xd1\xcd\x1c@t\x9cI@\xcb3c@\xa1\x9c\xf9?W\x9c\x99?\xcb\x15\x91?\x176Q?>\xe1\x9d?\xfa\xbe\xbb?\xd3\x8b\x88?]&\xc2?\xbatf?9\x03\xa0?\xe6&\xc2?g\'b?h|\x97?\ru\xd7?98\x93?\x86lw?\xf7\x8fH?\x9c\x10\xd1?%Cs?\xafi\x86?W\xb2j?\xa5%\xc2?j\xc3{?\x0cm\xc6?b\x81\xe8?r\x17Q?\xf0h\xc6?=\xae\xaa?BcU?\xb8\xf2\xae?\xe6%\x82?\xfci\x86?\xd0\xf2\xce?\xb3)\x82?\x16\x8c\x88?xi\x86?\xa7\x03\xa0?|\x02\xa0?p,\xc2?\xa7\xbb\xbb?\x03H\x84?e{\xd7?\xc6:s?#\x06\xa0?"\xb2j?\xac\x19Q?[\x857?\x00F\xe4?\xb8(\xa2?\xe3\x18Q?H%\x82?\xf2}\x97?\xaf\x10\x91?\x01\xd4\x8c?\x9elf?,\xb1\x8a?%\xbf\xdb?\xa6h\xc6?\xb6\x85w?\xe4~w?\xeb\xc3{?\xf6\xf1\x8e?c\xae\x8a?\xdd3\x82?Yz\xf7?\xf3\x9c\x99?\x95\x8d\x88?\xcc3\x93?Y\x8e\xe8?\x03Y\x95?*\xe1\x9d?\xf8\xbe\x9b?\xea\xf1\x8e?&\x07\x80?\xf49s?\xd6h\xc6?\xd9\xcd\x0c@\xae\xf2\x8e?\x90\x8f\xa8?\xdf\x8b\x88?\xf2G\x84?\x91\xae\x8a?R\x8c\x88?^l\xa6?-:s?p\x03\x80?n%\xa2?>H\xa4?\xca\r@?\x84\\\x95?\xf0y\x97?\x06\x9f\xd9?7\xf2\xae?r\x18\xb1?\x83\x03\xa0?j\x0b\x91?\x7f\x14\x91?\xa4\xac\x8a?%\xf6\xae?\x8b\x02\x80?\x8f\xf5n?\x07\xe1\xbd?lof?\xf5\xfcn?\xbe\x8fH?\xc0\x9d\x99?S\xe1\xfd?\xe3QD?\xfe5b?\xa5\xfe\xbf?\xba9s?(\xae\x8a?\xf49s?\x84\\\x95?\x83\xf2\xae?\xc6)"?x\x9fY?r\x03\x80?\x85\x19Q?\xf4r&?S)s?G\x08@?o\xa3Y?\xd1X\x95?Om\x86?O\x80w?r\xc0\x9b?\x15&\xc2?\x04;3?\x05K\x84?\r\xae\x8a?]\xa6Y?zG\xa4?\x0e\x89X@\x12\xa0\x99?\x03\x11\x91?\xe2\x9f\x99?\xed%\x82?\xf3\xf7.?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\xa0=\xfa\x04\x80<\xfa\x04\xd8[\xf3\x04HU\xf3\x04pQ\xf3\x04\x80V\xf3\x04\x10]\xf3\x04pW\xf3\x04XT\xf3\x04XZ\xf3\x04\xc0X\xf3\x04\x00^\xf3\x040U\xf3\x04\xf0^\xf3\x04\x00U\xf3\x04\x18X\xf3\x04\x18[\xf3\x04\xa8X\xf3\x04@W\xf3\x04\xc8\\\xf3\x04\x18R\xf3\x04\x10T\xf3\x040^\xf3\x04\x80_\xf3\x04P\\\xf3\x04\xa0W\xf3\x04\xf0[\xf3\x04xR\xf3\x04 S\xf3\x04\x80\\\xf3\x04\xe8]\xf3\x04\x98V\xf3\x04hV\xf3\x04\xd0Q\xf3\x04\x18^\xf3\x04\x90^\xf3\x04\xe0S\xf3\x04x^\xf3\x04\xc0^\xf3\x04\x10Q\xf3\x04(Q\xf3\x04\x80Y\xf3\x04\xe0Y\xf3\x04\xe8Q\xf3\x04\xb8T\xf3\x04 \\\xf3\x04\xe0_\xf3\x04\xf8V\xf3\x04P_\xf3\x04\xc0[\xf3\x04PV\xf3\x04\xa8^\xf3\x04H^\xf3\x04\x08_\xf3\x04\x08\\\xf3\x04@Z\xf3\x04xX\xf3\x04\x88Q\xf3\x04\xd8^\xf3\x04\xf8Y\xf3\x048\\\xf3\x04X]\xf3\x04(W\xf3\x04\xd0W\xf3\x04XQ\xf3\x04\x00[\xf3\x04\xd0T\xf3\x04\x08S\xf3\x04(T\xf3\x04\xe8Z\xf3\x04h_\xf3\x04h\\\xf3\x048Y\xf3\x04 Y\xf3\x04\x88W\xf3\x04(Z\xf3\x04XW\xf3\x04\x90[\xf3\x04\xe8T\xf3\x04\xb0_\xf3\x04\xb0\\\xf3\x04\xc8P\xf3\x04\xf8\\\xf3\x04HR\xf3\x04\xa0]\xf3\x04\x90X\xf3\x04\x98Y\xf3\x04HX\xf3\x04p]\xf3\x04@T\xf3\x04\xe8W\xf3\x04PY\xf3\x04\x00X\xf3\x04\x98_\xf3\x04\x08s\xd7\x04\x00r\xd7\x04`r\xd7\x04\x98|\xd7\x04\xb0|\xd7\x04\x18r\xd7\x04\xd8r\xd7\x04\x98\x7f\xd7\x04\xc0r\xd7\x04\xd0q\xd7\x04hs\xd7\x04\x88w\xd7\x04@t\xd7\x04x{\xd7\x04\xf8y\xd7\x04\xa0q\xd7\x04\xf8s\xd7\x04\x80p\xd7\x04\xb0p\xd7\x04(t\xd7\x04hp\xd7\x04\x88z\xd7\x04Ps\xd7\x04(}\xd7\x04\xc8v\xd7\x04\xb0s\xd7\x04\x10t\xd7\x04Pp\xd7\x04\xb0\x7f\xd7\x04hy\xd7\x04xu\xd7\x04\xc8p\xd7\x04\x08y\xd7\x04\xe8q\xd7\x04\x80s\xd7\x04\xe8w\xd7\x04\x00u\xd7\x04Pv\xd7\x04P|\xd7\x04\xa8r\xd7\x04 |\xd7\x04@z\xd7\x04\x88}\xd7\x04Xt\xd7\x04(w\xd7\x04\x80v\xd7\x04\x90{\xd7\x04\x18~\xd7\x04pq\xd7\x04\x08\x7f\xd7\x04\x80y\xd7\x04H~\xd7\x04\xa8x\xd7\x04\x18u\xd7\x04\xc0u\xd7\x04\x88T\xf3\x04\x98P\xf3\x040X\xf3\x04\xa0Z\xf3\x04\xb8Q\xf3\x04\x88]\xf3\x04\x00R\xf3\x04`[\xf3\x04\x90R\xf3\x04\xa8[\xf3\x04hY\xf3\x04\xe0\\\xf3\x040R\xf3\x04\x10W\xf3\x04`U\xf3\x048_\xf3\x04\x88Z\xf3\x04 P\xf3\x04\x80S\xf3\x04\xc8V\xf3\x04\xc0R\xf3\x04\xa8R\xf3\x04pT\xf3\x04\xa0Q\xf3\x04(]\xf3\x048P\xf3\x04\xb8]\xf3\x04`R\xf3\x04hS\xf3\x04\xf8P\xf3\x04PS\xf3\x04hP\xf3\x04\xb8W\xf3\x04\xb0Y\xf3\x04`X\xf3\x04\x80P\xf3\x04 _\xf3\x04\xe0V\xf3\x04x[\xf3\x04PP\xf3\x040[\xf3\x04\x98\\\xf3\x04\xe0P\xf3\x04\xd0Z\xf3\x04\xf0X\xf3\x04\xf0R\xf3\x048S\xf3\x04@Q\xf3\x04\x18U\xf3\x04\xd8X\xf3\x04\xb0V\xf3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g985
sg894
g981
sg908
g992
sg903
g989
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1002
sg894
g998
sg908
g1009
sg903
g1006
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1002
sg894
g1066
sg908
g1009
sg903
g1073
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1091
sg894
g1081
sg908
g1085
sg903
g1089
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1149
sg894
g1145
sg908
g1156
sg903
g1153
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g968
sg894
g1162
sg908
g975
sg903
g1169
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1187
sg894
g1177
sg908
g1181
sg903
g1185
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1019
sg894
g1194
sg908
g1026
sg903
g1201
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1213
sg894
g1209
sg908
g1220
sg903
g1217
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g925
sg894
g1226
sg908
g919
sg903
g1233
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1187
sg894
g1177
sg908
g1181
sg903
g1185
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g925
sg894
g1226
sg908
g919
sg903
g1233
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1149
sg894
g1310
sg908
g1156
sg903
g1317
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g985
sg894
g1325
sg908
g992
sg903
g1332
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1187
sg894
g1177
sg908
g1181
sg903
g1185
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1149
sg894
g1145
sg908
g1156
sg903
g1153
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1053
sg894
g1430
sg908
g1060
sg903
g1437
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g1091
sg894
g1081
sg908
g1085
sg903
g1089
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1036
sg894
g1471
sg908
g1043
sg903
g1478
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1503
sg894
g1499
sg908
g1510
sg903
g1507
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1344
sg894
g1516
sg908
g1351
sg903
g1523
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g925
sg894
g1226
sg908
g919
sg903
g1233
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1132
sg894
g1557
sg908
g1139
sg903
g1564
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g951
sg894
g1572
sg908
g958
sg903
g1579
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1091
sg894
g1081
sg908
g1085
sg903
g1089
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1503
sg894
g1499
sg908
g1510
sg903
g1507
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1132
sg894
g1557
sg908
g1139
sg903
g1564
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1503
sg894
g1639
sg908
g1510
sg903
g1646
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1213
sg894
g1209
sg908
g1220
sg903
g1217
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g925
sg894
g1226
sg908
g919
sg903
g1233
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1002
sg894
g998
sg908
g1009
sg903
g1006
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1002
sg894
g1066
sg908
g1009
sg903
g1073
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1213
sg894
g1209
sg908
g1220
sg903
g1217
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1053
sg894
g1430
sg908
g1060
sg903
g1437
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1361
sg894
g1758
sg908
g1368
sg903
g1765
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1053
sg894
g1430
sg908
g1060
sg903
g1437
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1053
sg894
g1430
sg908
g1060
sg903
g1437
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1344
sg894
g1516
sg908
g1351
sg903
g1523
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1503
sg894
g1499
sg908
g1510
sg903
g1507
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1344
sg894
g1516
sg908
g1351
sg903
g1523
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1378
sg894
g1864
sg908
g1385
sg903
g1871
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g968
sg894
g1162
sg908
g975
sg903
g1169
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1036
sg894
g1471
sg908
g1043
sg903
g1478
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1187
sg894
g1905
sg908
g1181
sg903
g1912
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1187
sg894
g1177
sg908
g1181
sg903
g1185
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1132
sg894
g1557
sg908
g1139
sg903
g1564
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1108
sg894
g1985
sg908
g1102
sg903
g1992
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g925
sg894
g1226
sg908
g919
sg903
g1233
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1187
sg894
g1905
sg908
g1181
sg903
g1912
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1019
sg894
g1194
sg908
g1026
sg903
g1201
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g968
sg894
g1162
sg908
g975
sg903
g1169
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1036
sg894
g1471
sg908
g1043
sg903
g1478
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1108
sg894
g1985
sg908
g1102
sg903
g1992
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1002
sg894
g998
sg908
g1009
sg903
g1006
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g899
sg894
g932
sg908
g909
sg903
g939
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1149
sg894
g1310
sg908
g1156
sg903
g1317
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1091
sg894
g2169
sg908
g1085
sg903
g2176
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1002
sg894
g1066
sg908
g1009
sg903
g1073
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g951
sg894
g1572
sg908
g958
sg903
g1579
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1149
sg894
g1310
sg908
g1156
sg903
g1317
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g951
sg894
g1572
sg908
g958
sg903
g1579
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1132
sg894
g1557
sg908
g1139
sg903
g1564
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1344
sg894
g1516
sg908
g1351
sg903
g1523
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1503
sg894
g1639
sg908
g1510
sg903
g1646
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1149
sg894
g1145
sg908
g1156
sg903
g1153
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1503
sg894
g1639
sg908
g1510
sg903
g1646
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1091
sg894
g2169
sg908
g1085
sg903
g2176
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1213
sg894
g2366
sg908
g1220
sg903
g2373
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1361
sg894
g1758
sg908
g1368
sg903
g1765
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g968
sg894
g1162
sg908
g975
sg903
g1169
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1361
sg894
g1758
sg908
g1368
sg903
g1765
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1019
sg894
g1015
sg908
g1026
sg903
g1023
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1149
sg894
g1310
sg908
g1156
sg903
g1317
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1503
sg894
g1499
sg908
g1510
sg903
g1507
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1284
sg894
g2524
sg908
g1291
sg903
g2531
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1213
sg894
g1209
sg908
g1220
sg903
g1217
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1344
sg894
g1340
sg908
g1351
sg903
g1348
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1213
sg894
g1209
sg908
g1220
sg903
g1217
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g985
sg894
g981
sg908
g992
sg903
g989
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1091
sg894
g1081
sg908
g1085
sg903
g1089
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1213
sg894
g2366
sg908
g1220
sg903
g2373
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g968
sg894
g964
sg908
g975
sg903
g972
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1019
sg894
g1194
sg908
g1026
sg903
g1201
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1213
sg894
g2366
sg908
g1220
sg903
g2373
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1149
sg894
g1310
sg908
g1156
sg903
g1317
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g1503
sg894
g1639
sg908
g1510
sg903
g1646
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g1361
sg894
g1758
sg908
g1368
sg903
g1765
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1213
sg894
g2366
sg908
g1220
sg903
g2373
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g1378
sg894
g1864
sg908
g1385
sg903
g1871
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1284
sg894
g1280
sg908
g1291
sg903
g1288
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1149
sg894
g1145
sg908
g1156
sg903
g1153
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g1091
sg894
g2169
sg908
g1085
sg903
g2176
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1503
sg894
g1499
sg908
g1510
sg903
g1507
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1091
sg894
g2169
sg908
g1085
sg903
g2176
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1187
sg894
g1905
sg908
g1181
sg903
g1912
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g985
sg894
g1325
sg908
g992
sg903
g1332
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1361
sg894
g1758
sg908
g1368
sg903
g1765
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g968
sg894
g1162
sg908
g975
sg903
g1169
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1002
sg894
g998
sg908
g1009
sg903
g1006
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g985
sg894
g1325
sg908
g992
sg903
g1332
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1187
sg894
g1177
sg908
g1181
sg903
g1185
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g1284
sg894
g2524
sg908
g1291
sg903
g2531
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g985
sg894
g981
sg908
g992
sg903
g989
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1091
sg894
g1081
sg908
g1085
sg903
g1089
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g985
sg894
g1325
sg908
g992
sg903
g1332
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1108
sg894
g1985
sg908
g1102
sg903
g1992
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1036
sg894
g1032
sg908
g1043
sg903
g1040
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1019
sg894
g1194
sg908
g1026
sg903
g1201
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1036
sg894
g1471
sg908
g1043
sg903
g1478
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g1378
sg894
g1864
sg908
g1385
sg903
g1871
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1284
sg894
g2524
sg908
g1291
sg903
g2531
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g985
sg894
g981
sg908
g992
sg903
g989
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1187
sg894
g1905
sg908
g1181
sg903
g1912
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1284
sg894
g2524
sg908
g1291
sg903
g2531
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1002
sg894
g998
sg908
g1009
sg903
g1006
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1149
sg894
g1145
sg908
g1156
sg903
g1153
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g951
sg894
g1572
sg908
g958
sg903
g1579
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1361
sg894
g1357
sg908
g1368
sg903
g1365
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1036
sg894
g1471
sg908
g1043
sg903
g1478
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1378
sg894
g1864
sg908
g1385
sg903
g1871
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1053
sg894
g1049
sg908
g1060
sg903
g1057
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g951
sg894
g947
sg908
g958
sg903
g955
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1053
sg894
g1430
sg908
g1060
sg903
g1437
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1378
sg894
g1864
sg908
g1385
sg903
g1871
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1503
sg894
g1639
sg908
g1510
sg903
g1646
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1344
sg894
g1516
sg908
g1351
sg903
g1523
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g985
sg894
g1325
sg908
g992
sg903
g1332
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1108
sg894
g1985
sg908
g1102
sg903
g1992
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1132
sg894
g1557
sg908
g1139
sg903
g1564
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1002
sg894
g1066
sg908
g1009
sg903
g1073
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1108
sg894
g1985
sg908
g1102
sg903
g1992
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g985
sg894
g981
sg908
g992
sg903
g989
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g951
sg894
g1572
sg908
g958
sg903
g1579
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1091
sg894
g2169
sg908
g1085
sg903
g2176
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1187
sg894
g1905
sg908
g1181
sg903
g1912
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1213
sg894
g2366
sg908
g1220
sg903
g2373
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1019
sg894
g1194
sg908
g1026
sg903
g1201
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g925
sg894
g915
sg908
g919
sg903
g923
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g1002
sg894
g1066
sg908
g1009
sg903
g1073
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1284
sg894
g2524
sg908
g1291
sg903
g2531
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1378
sg894
g1374
sg908
g1385
sg903
g1382
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I80446288
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'p\x87z\x120\xb9z\x12\xa0\xb7z\x12\xc8\xb7z\x12`\x88z\x12\x80\xb9z\x12\xf0\xb7z\x12x\xb7z\x12\x18\xb8z\x12\x90\x88z\x12\xc0_\xbb\x04\x80_\xbb\x04\xa0\x87z\x12p\x87z\x12`\\z\x12(\\z\x12\xd0\x87z\x12h\xb8z\x12(\\z\x12\xc8\xb7z\x12h\xb8z\x12\x18\xb8z\x12\x90\xb8z\x12`\\z\x12@\xb8z\x12\xb8\xb8z\x12`_\xbb\x04`\\z\x12`_\xbb\x04\xa0\xb7z\x12p\x87z\x12(\\z\x12\x18\xb8z\x120\x88z\x12\xf0\xb7z\x12(\\z\x12x\xb7z\x12\x18\xb8z\x12@W\xbb\x04\xd0\\z\x12\xd0\x87z\x12\xc8\xb7z\x12(\\z\x12@W\xbb\x04(\\z\x12\xd0\\z\x12@\xb8z\x12\x00\x88z\x12\x98\\z\x12@]z\x12\xd0\x87z\x12@\xb8z\x12\xa0\xb7z\x12h\xb8z\x12\x00\x88z\x12\xb8\xb8z\x12\xf0\xb7z\x12x\xb7z\x12@\xb8z\x12\x18\xb8z\x12\xa0\x87z\x12\xb8\xb8z\x12\xa0\x87z\x12\x90\xb8z\x12\x98\\z\x12\x80_\xbb\x04\x00\x88z\x12\xb8\xb8z\x12\xc8\xb7z\x12@W\xbb\x04(\\z\x12\xa0\x87z\x12\x98\\z\x12\x90\xb8z\x12\xa0_\xbb\x04\xc8\xb7z\x12\xa0\xb7z\x12\xf0\xb7z\x12\xd0\\z\x12\xd0\x87z\x12\xa0\x87z\x12\xe0\xb8z\x12h\xb8z\x12`_\xbb\x04`\\z\x12\xd0\\z\x12\x18\xb8z\x12@W\xbb\x04\xa0\xb7z\x12\xd0\xb9z\x12\xe0\xb8z\x12\x90\xb8z\x12h\xb8z\x12`_\xbb\x04\x98\\z\x12h\xb8z\x12\xd0\\z\x12\xf0\x88z\x12\xc8\xb7z\x12\x80\xb9z\x12\xe0\xb8z\x12p\x87z\x12@]z\x12\xb8\xb8z\x12\xf0\xb7z\x12\xd0\\z\x12\x00\x88z\x12\xd0\x87z\x12h\xb8z\x12@\xb8z\x12\xd0\xb9z\x12X\xb9z\x12\x90\xb8z\x12\x80_\xbb\x04@]z\x12`\\z\x120\x88z\x12\x18\xb8z\x12P\x89z\x12\xa0\x87z\x12\xb8\xb8z\x12\xe0\xb8z\x12\xd0\xb9z\x12\x00\x88z\x12\xa0\xb7z\x12\xd0\x87z\x12\x98\\z\x12\xa0\xb7z\x12\xc8\xb7z\x12\xd0\\z\x12`\\z\x12\xa0_\xbb\x04\xe0\xb8z\x12\xb8\xb8z\x12\xe0\xb8z\x12@\xb8z\x12\x08]z\x12\x90\xb8z\x12x\xb7z\x12\x18\xb8z\x12\x98\\z\x12(\\z\x12\x00\x88z\x12\xa0\xb7z\x12\xd0\x87z\x12\x00\x88z\x12h\xb8z\x120\xb9z\x12@W\xbb\x04`_\xbb\x04\xa0\x87z\x12\xf0\x88z\x12\x80\x89z\x12h\xb8z\x120\x88z\x12\xa8\xb9z\x12`\\z\x12@\xb8z\x12\x80\x89z\x12@]z\x12\x08]z\x12\x18\xb8z\x12\xc0_\xbb\x04\x00\x88z\x12\xd0\\z\x12\xe0\xb8z\x12\xf0\xb7z\x12\xa0\x87z\x12\xf0\xb7z\x12\xd0\\z\x12`_\xbb\x04@\xb8z\x12p\x87z\x12\xa0\x87z\x12\xa0\xb7z\x12\xe0\xb8z\x12h\xb8z\x12p\x87z\x12\xb8\xb8z\x12p\x87z\x12@\xb8z\x12\xc0_\xbb\x04@W\xbb\x04\x98\\z\x12`\\z\x12x\xb7z\x12(\\z\x12\xb8\xb8z\x12x\xb7z\x12\xb8\xb8z\x12\x80_\xbb\x04\xd0\\z\x12x\xb7z\x12\xf0\xb7z\x12\x08]z\x12\xd0\x87z\x12\xa0\x87z\x12\x90\xb8z\x12x\xb7z\x12\x00\x88z\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xe0\xd1z\x12`@\x15\x03\xa0\xd0z\x12\x00\xd1z\x12 \xd0z\x12\xe0\xd2z\x12\x00\xd2z\x12\xc0\xd0z\x12@\xd3\xc5\x0c\x00B\x15\x03\x80\xd1z\x12@\xd3z\x12`\xd1z\x12\x80\xd2z\x12\xe0\xd0z\x12`\xd3z\x12\x80\xd3z\x12\xc0\xd3z\x12 \xd2z\x12 \xd4z\x12\x00\xd4z\x12 \xd1z\x12\x80\xd4z\x12`\xd4z\x12\xc0\xd4z\x12\xe0\xd4z\x12@\xd1z\x12 \xd5z\x12@\xd5z\x12@\xd2z\x12\x80\xd5z\x12`\xd5z\x12@\xd0z\x12\xe0\xd5z\x12\xc0\xd5z\x12\xa0\xd2z\x12@\xd6z\x12 \xd6z\x12@\xd4z\x12`\xd6z\x12\xc0\xd6z\x12\xe0\xd6z\x12\x00\xd7z\x12 \xd7z\x12\x00\xd5z\x12\xc0\xd1z\x12\x80\xd7z\x12\xa0\xd7z\x12\xc0\xd7z\x12\x80\xd0z\x12\x00\xd8z\x12 \xd8z\x12@\xd8z\x12\xa0\xd1z\x12\x00\xd3z\x12\xa0\xd8z\x12\xc0\xd8z\x12`\xd0z\x12\x00\xd9z\x12 \xd9z\x12@\xd9z\x12`\xd9z\x12\x80\xd9z\x12@\xd7z\x12`\xd7z\x12\xa0\xd9z\x12\xc0\xd9z\x12 \xdaz\x12@\xdaz\x12\xa0\xd6z\x12\x80\xd8z\x12 \xcd\x16\x03`\xc5\x16\x03\x00\xc6\x16\x03\xc0\xcd\x16\x03@\xc4\x16\x03\xe0\xc4\x16\x03\x00\xcd\x16\x03 \xc5\x16\x03\xc0\xc4\x16\x03\x00\xca\x16\x03@\xcd\x16\x03\x00\xc4\x16\x03\x80\xc4\x16\x03\xc0@\x17\x03 @\x17\x03\x00A\x17\x03 B\x17\x03 C\x17\x03\xe0B\x17\x03\xa0A\x17\x03\xc0B\x17\x03\xe0@\x17\x03\x80A\x17\x03\xc0A\x17\x03\x00C\x17\x03\xa0\xcd\x16\x03\x00B\x17\x03 A\x17\x03@C\x17\x03\x80B\x17\x03\xa0B\x17\x03\x80@\x17\x03\xc0\xcc\x16\x03@@\x17\x03\xe0A\x17\x03\xc0\xcf\x16\x03`A\x17\x03`bm\x0c\x80qy\x0c\xa0gm\x0c@ry\x0c\xe0\xdf\xb8\x04\xc0+\x16\x03`/\x16\x03\xc0-\x16\x03@-\x16\x03\x80,\x16\x03\x80*\x16\x03\xc0/\x16\x03 /\x16\x03\x00gm\x0c@/\x16\x03 bm\x0c\x00{z\x0c\x00tz\x0c\xc0uz\x0c@tz\x0c\x00vz\x0c\x00uz\x0c\xa0tz\x0c`tz\x0c\x00zz\x0c@{z\x0c\xc0yz\x0c\x00rz\x0c uz\x0c@uz\x0c\xe0tz\x0c\x00)\x16\x03\xc0sz\x0c@A\x17\x03`\xd1\xc5\x0c\x80\xd0\xc5\x0c\x00\xd3\xc5\x0c`\xda\xc5\x0c \xd3\xc5\x0c\x80tz\x0c\xc0\xd2\xc5\x0c\x00\xd7\xc5\x0c\xa0\xc5\x16\x03\xa0A{\x0c\xe0K{\x0c\xc0J{\x0c\x00K{\x0c\x00L{\x0c\xc0G{\x0c`N{\x0c\xe0F{\x0c\x00C{\x0c\x00A{\x0c\xa0J{\x0c\xa0K{\x0c\x80D{\x0c\xe0B{\x0c L{\x0c C{\x0c`C{\x0c\xc0D{\x0c\x80C{\x0c\xc0K{\x0c\xe0D{\x0c\xe0O{\x0c A{\x0c`A{\x0c\xc0@{\x0c@\xd0\xc5\x0c\xa0]\xbb\x04\xe0\xb6\xc8\x0c\x80\xb0\xc8\x0c\xa0\xb5\xc8\x0c\x00\xb7\xc8\x0c\xc0\xb4\xc8\x0c\xa0\xb6\xc8\x0c\xe0\xb2\xc8\x0c \xbf\xc8\x0c`\xb0\xc8\x0c\xa0\xb0\xc8\x0c\xc0\xb0\xc8\x0c\xc0\xb3\xc8\x0c\x00B{\x0c\xe0uz\x0c\x80A\x15\x03\xc0A\x15\x03`A\x15\x03 I\x15\x03@B\x15\x03`\xb9\xc8\x0c\xc0K\x15\x03@\xb0\xc8\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'=\xd0\xcc?Ne\x86?\xce\x94H?4\xe1\x9d?\xb5cU?\xcfSU?.\xc4{?\xa2\xf7n?^\x9c\x99?\x1d\xc9{?\xf4\x83w?\xcf\x07@?\xac9s?>%\xa2?\x05\xef.?A\xdbL?\xf2\x91H?\xcf\x07@?\xceJD?\xf2i\x86?\xb9{\x97?Z8Q?@\x03\x80?\x12\xabj?\xda\x8dH?:6\x93?D\xd3\xac?\x892\xb3?\x0fk\x86?\xe1\x817?S\xad\xaa?%\xfdn?\x97\x84w?\xf6%\x82?|\x19Q?\xeb\xa1Y?\x13\xf2\x8e?\xf4$\xe2?Qrf?\x94\xf4\xae?\xb9j\xa6?\xd5\xc8{?\x19\xa1Y?\xd2\xf5n?\xdb\xe0\x9d?@\xe1\xbd?\xdd\x9d\xf9?x6\xb3?\xd5:s?\xa5G\xa4?\xf2~w?7m\x86?eX\xb5?\xbe\x9c\x99?.\xd7L?\x08\xae\xca?\xbatf?2\xf3\xae?\xfb\xf1\x8e?R\xb2j?\xfc\xb3j?\xd6\xb2\xaa?\xb2g\x16@\x04\xd3L?\xd58s?]\x07@?\xa1GD?\xd3\x9fY?\x18\x14\x91?M\xa1Y?\xcc\xb1j?\xd5\x9bw?\x94n&?\xe5*b?:\xb2*?\x04\x08@?\xf2m&?R\xb6*?\x8c\xc3{?\x00LD?\x8d:s?_\x17b?\xdfmf?\xef\x857?;\xbb;?k<3?4\xd3L?\n\x7f7?\x0b\xe5\x1d?;\xc5j?6A\x84?\xb7\xd4L?\x00\x7fw?\x18\x90H?\x83\xbf;?QRD?\xa9\xaf\xca?\xbb\x9fY?S\xf6n?\xba\xaa\xca?\x17\x96Y?|\xe1\x9d?\x18LD?\xd9\x03\x80?\xd3\xb2j?\x0fm\x86?\xa2\'\x82?%\x8fH?I\xd0\x8c?\xa2\xf2\x8e?\xdd\x9f\x99?{X\xd5?\xfafV@\xe8G\xa4?\x1dj\xa6?\xed\x90\x08@\xdamf?9\xcf\xac?o\xd2L?)\xa0Y?\xfa\xf8n?\x0c\xa4j?\x1e\xe7]?nND?\xc3\xf6\xce?\xdb\x06@?\xdb\xe4]?s("?\xc9%\xc2?`\xa7Y?m\x88\x88?y\xe1\xbd?T\xc7\xcc?v\x9c\xb9?\xcaS\xb5?x\xa0\x99?P\xb1j?\xaamf?\r\x9d\x99?\xe8g\x06@T\x97H?#\xd4L?z~7?\x16|7?Z\xfb.?\xa2\x17Q?\x04Ts?\xdd}7?\x99;s?\xca\xa1Y?\xb3\x18Q?R\xc3{?\x03AD?\xc3\xf5n?n\x14\x91?\x02\x04\x80? w\xb7?\x17RD?H\x9dj?FH\xa4?\xfc\xc2{?XKD?\xb3M\x84?\x99%\x82?\x8c\xfcn?\x10IU?vG\x84?w\xe0M@\x99\x7f7?2)b?\xd2p&?\xdb\xb1*?\x976\x93?\xeb\xfcn?\xb6G\xe4?\xda\xc2L?\x8f\x03\x80?W\x8b\xa8?\x1b\xdbL?q\xa0Y?i\xb8j?\xf2z\x97?\x1b\x8c\x88?$:3?9\x98Y?\x94\x877?\r\xfbn?#\xd0\x8c?\xdfG\x84?\xe6}\x97?d\xe4]?\xe5\xcf\x8c?W\xdaL?H\x14\x91?$~\xb7?~)b?R~\x97?n\xf2\x8e?E)b?\xed\xbc\xaa?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\x10q\xd7\x04\x98p\xd7\x04\xf0K\xd6\x04\x90N\xd6\x04\x08C\xd6\x040H\xd6\x04`B\xd6\x04\xb0O\xd6\x04\xc0N\xd6\x04hI\xd6\x04\x88J\xd6\x048@\xd6\x04@A\xd6\x04hO\xd6\x04(D\xd6\x04\x08F\xd6\x04\xa0D\xd6\x04\x80I\xd6\x04\x00B\xd6\x04\x98O\xd6\x04hF\xd6\x04\xe0I\xd6\x04hL\xd6\x04\xe8A\xd6\x04\xb0I\xd6\x04\xd0J\xd6\x04\x90K\xd6\x04\xa8N\xd6\x04PO\xd6\x04pJ\xd6\x04pG\xd6\x04\x10D\xd6\x040K\xd6\x04xN\xd6\x04\x00K\xd6\x04xE\xd6\x04\xf0N\xd6\x04\x10J\xd6\x04 O\xd6\x04\xa0A\xd6\x04\x08O\xd6\x04\x98L\xd6\x040N\xd6\x04XJ\xd6\x04XA\xd6\x04\xc0K\xd6\x04\x88D\xd6\x04(J\xd6\x04\xa8B\xd6\x04xH\xd6\x04\xd8N\xd6\x04 L\xd6\x04\xa0g\xf0\x04He\xf0\x04\xe8j\xf0\x04\xd0m\xf0\x04\x88j\xf0\x04\x98c\xf0\x04Pf\xf0\x04\xc0b\xf0\x04\x80c\xf0\x04xn\xf0\x04\x98i\xf0\x04\xe8g\xf0\x04xb\xf0\x04\xc8l\xf0\x04\xf86\xfa\x04\xd8;\xfa\x04 <\xfa\x04\x005\xfa\x04\xc08\xfa\x04\xb0<\xfa\x048<\xfa\x04\x00;\xfa\x04\xc8<\xfa\x04(7\xfa\x04`5\xfa\x04\xe8:\xfa\x04H;\xfa\x04\x905\xfa\x0402\xfa\x04\x98?\xfa\x04h6\xfa\x04\xd0=\xfa\x04@1\xfa\x04@4\xfa\x04\xd88\xfa\x04\xa01\xfa\x04\xf89\xfa\x04\xc0>\xfa\x04\x881\xfa\x04HN\xd6\x04\x10M\xd6\x048C\xd6\x04\xd8K\xd6\x04\x80O\xd6\x04\xc8O\xd6\x04\x80@\xd6\x04\xb0L\xd6\x04\x90E\xd6\x04h@\xd6\x04\xf0H\xd6\x04PC\xd6\x04HK\xd6\x04\xc8F\xd6\x04 I\xd6\x04\x88G\xd6\x04xK\xd6\x04@G\xd6\x04PF\xd6\x04\x18E\xd6\x048O\xd6\x04\xe0O\xd6\x04\xc0E\xd6\x04\x18B\xd6\x04\x98F\xd6\x04\xf8I\xd6\x04`E\xd6\x04@D\xd6\x04\xc8@\xd6\x04\x00H\xd6\x04`N\xd6\x04\x98C\xd6\x04@M\xd6\x04\x18H\xd6\x04\xb0@\xd6\x04\x88M\xd6\x048F\xd6\x04 @\xd6\x04\xc0H\xd6\x04\xc8L\xd6\x04\xb8J\xd6\x04 C\xd6\x04HH\xd6\x04\xc8C\xd6\x04\x08I\xd6\x04\xc8I\xd6\x04\x98I\xd6\x04(G\xd6\x04\xa8H\xd6\x048L\xd6\x04XM\xd6\x04\x08L\xd6\x048I\xd6\x04\xf8C\xd6\x04\xd8H\xd6\x04\xe0@\xd6\x04\x00E\xd6\x04\xa0G\xd6\x04\xb8D\xd6\x04`K\xd6\x04\x10G\xd6\x04hC\xd6\x04\xd0D\xd6\x04\xe0L\xd6\x04xB\xd6\x04\xf0B\xd6\x04\xa8K\xd6\x04pD\xd6\x04HE\xd6\x04\xf8L\xd6\x040B\xd6\x04\x98@\xd6\x04pA\xd6\x04\xd8B\xd6\x04\x90B\xd6\x04\x80C\xd6\x04(A\xd6\x04\xc0B\xd6\x04\xe8J\xd6\x04\xd8E\xd6\x04XD\xd6\x04\xf8@\xd6\x04\xb0F\xd6\x04(M\xd6\x04\x80L\xd6\x04\xa8E\xd6\x04XG\xd6\x04\xb8A\xd6\x04\x10A\xd6\x04\xa0J\xd6\x040E\xd6\x04\xe8D\xd6\x04\xb0C\xd6\x04P@\xd6\x04\xe0C\xd6\x04 F\xd6\x04\xe8G\xd6\x04PI\xd6\x04HB\xd6\x04\xd0G\xd6\x04\xf0E\xd6\x04\x90H\xd6\x04`H\xd6\x04\x80F\xd6\x04\x18K\xd6\x04\xd0A\xd6\x04\x88A\xd6\x04\xe0F\xd6\x04pM\xd6\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3663
sg3632
g3755
sg3646
g3657
sg3641
g3762
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3797
sg3632
g3787
sg3646
g3791
sg3641
g3795
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3814
sg3632
g3804
sg3646
g3808
sg3641
g3812
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3831
sg3632
g3821
sg3646
g3825
sg3641
g3829
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3731
sg3632
g3868
sg3646
g3725
sg3641
g3875
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3714
sg3632
g3883
sg3646
g3708
sg3641
g3890
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3714
sg3632
g3883
sg3646
g3708
sg3641
g3890
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3919
sg3632
g3958
sg3646
g3926
sg3641
g3965
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3774
sg3632
g3973
sg3646
g3781
sg3641
g3980
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3992
sg3632
g3988
sg3646
g3999
sg3641
g3996
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3797
sg3632
g4018
sg3646
g3791
sg3641
g4025
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3674
sg3632
g4095
sg3646
g3681
sg3641
g4102
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3774
sg3632
g3973
sg3646
g3781
sg3641
g3980
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3637
sg3632
g4149
sg3646
g3647
sg3641
g4156
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3742
sg3632
g4164
sg3646
g3749
sg3641
g4171
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3714
sg3632
g3883
sg3646
g3708
sg3641
g3890
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3663
sg3632
g3755
sg3646
g3657
sg3641
g3762
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3831
sg3632
g3821
sg3646
g3825
sg3641
g3829
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g4235
sg3632
g4231
sg3646
g4242
sg3641
g4239
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3902
sg3632
g4248
sg3646
g3909
sg3641
g4255
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3691
sg3632
g4263
sg3646
g3698
sg3641
g4270
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3714
sg3632
g3883
sg3646
g3708
sg3641
g3890
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3831
sg3632
g4291
sg3646
g3825
sg3641
g4298
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4235
sg3632
g4231
sg3646
g4242
sg3641
g4239
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3797
sg3632
g3787
sg3646
g3791
sg3641
g3795
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g4349
sg3632
g4345
sg3646
g4356
sg3641
g4353
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3814
sg3632
g4362
sg3646
g3808
sg3641
g4369
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3902
sg3632
g4248
sg3646
g3909
sg3641
g4255
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3797
sg3632
g4018
sg3646
g3791
sg3641
g4025
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3919
sg3632
g3958
sg3646
g3926
sg3641
g3965
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4349
sg3632
g4345
sg3646
g4356
sg3641
g4353
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g4037
sg3632
g4455
sg3646
g4044
sg3641
g4462
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3742
sg3632
g4164
sg3646
g3749
sg3641
g4171
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3797
sg3632
g3787
sg3646
g3791
sg3641
g3795
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3774
sg3632
g3973
sg3646
g3781
sg3641
g3980
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3842
sg3632
g4522
sg3646
g3849
sg3641
g4529
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4037
sg3632
g4455
sg3646
g4044
sg3641
g4462
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3992
sg3632
g4563
sg3646
g3999
sg3641
g4570
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3814
sg3632
g4362
sg3646
g3808
sg3641
g4369
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3831
sg3632
g4291
sg3646
g3825
sg3641
g4298
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g4349
sg3632
g4604
sg3646
g4356
sg3641
g4611
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g4037
sg3632
g4455
sg3646
g4044
sg3641
g4462
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3831
sg3632
g4291
sg3646
g3825
sg3641
g4298
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3714
sg3632
g3883
sg3646
g3708
sg3641
g3890
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3842
sg3632
g4522
sg3646
g3849
sg3641
g4529
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3814
sg3632
g4362
sg3646
g3808
sg3641
g4369
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3992
sg3632
g3988
sg3646
g3999
sg3641
g3996
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3742
sg3632
g4164
sg3646
g3749
sg3641
g4171
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3674
sg3632
g4095
sg3646
g3681
sg3641
g4102
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3742
sg3632
g4164
sg3646
g3749
sg3641
g4171
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g4235
sg3632
g4762
sg3646
g4242
sg3641
g4769
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3902
sg3632
g4248
sg3646
g3909
sg3641
g4255
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3919
sg3632
g3958
sg3646
g3926
sg3641
g3965
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g3731
sg3632
g3868
sg3646
g3725
sg3641
g3875
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g4235
sg3632
g4231
sg3646
g4242
sg3641
g4239
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3831
sg3632
g3821
sg3646
g3825
sg3641
g3829
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3674
sg3632
g4095
sg3646
g3681
sg3641
g4102
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3992
sg3632
g4563
sg3646
g3999
sg3641
g4570
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3992
sg3632
g3988
sg3646
g3999
sg3641
g3996
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3814
sg3632
g4362
sg3646
g3808
sg3641
g4369
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g4235
sg3632
g4762
sg3646
g4242
sg3641
g4769
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3691
sg3632
g4263
sg3646
g3698
sg3641
g4270
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3731
sg3632
g3868
sg3646
g3725
sg3641
g3875
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g4807
sg3632
g5054
sg3646
g4814
sg3641
g5061
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3637
sg3632
g4149
sg3646
g3647
sg3641
g4156
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4235
sg3632
g4231
sg3646
g4242
sg3641
g4239
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g4349
sg3632
g4345
sg3646
g4356
sg3641
g4353
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3902
sg3632
g4248
sg3646
g3909
sg3641
g4255
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3919
sg3632
g3958
sg3646
g3926
sg3641
g3965
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3797
sg3632
g3787
sg3646
g3791
sg3641
g3795
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3992
sg3632
g4563
sg3646
g3999
sg3641
g4570
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3674
sg3632
g4095
sg3646
g3681
sg3641
g4102
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3992
sg3632
g3988
sg3646
g3999
sg3641
g3996
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3831
sg3632
g4291
sg3646
g3825
sg3641
g4298
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g4054
sg3632
g4080
sg3646
g4061
sg3641
g4087
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3731
sg3632
g3868
sg3646
g3725
sg3641
g3875
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3637
sg3632
g4149
sg3646
g3647
sg3641
g4156
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3774
sg3632
g3973
sg3646
g3781
sg3641
g3980
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g4349
sg3632
g4604
sg3646
g4356
sg3641
g4611
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3842
sg3632
g4522
sg3646
g3849
sg3641
g4529
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3992
sg3632
g3988
sg3646
g3999
sg3641
g3996
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g4349
sg3632
g4604
sg3646
g4356
sg3641
g4611
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3674
sg3632
g4095
sg3646
g3681
sg3641
g4102
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3814
sg3632
g4362
sg3646
g3808
sg3641
g4369
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g4235
sg3632
g4762
sg3646
g4242
sg3641
g4769
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g4807
sg3632
g5054
sg3646
g4814
sg3641
g5061
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3797
sg3632
g4018
sg3646
g3791
sg3641
g4025
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3691
sg3632
g4263
sg3646
g3698
sg3641
g4270
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3992
sg3632
g4563
sg3646
g3999
sg3641
g4570
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3663
sg3632
g3755
sg3646
g3657
sg3641
g3762
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3814
sg3632
g3804
sg3646
g3808
sg3641
g3812
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g4349
sg3632
g4604
sg3646
g4356
sg3641
g4611
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g4349
sg3632
g4604
sg3646
g4356
sg3641
g4611
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3663
sg3632
g3755
sg3646
g3657
sg3641
g3762
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3831
sg3632
g3821
sg3646
g3825
sg3641
g3829
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3902
sg3632
g4248
sg3646
g3909
sg3641
g4255
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g4807
sg3632
g5054
sg3646
g4814
sg3641
g5061
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3919
sg3632
g3915
sg3646
g3926
sg3641
g3923
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3774
sg3632
g3770
sg3646
g3781
sg3641
g3778
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3797
sg3632
g4018
sg3646
g3791
sg3641
g4025
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g4807
sg3632
g4803
sg3646
g4814
sg3641
g4811
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3691
sg3632
g4263
sg3646
g3698
sg3641
g4270
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3774
sg3632
g3973
sg3646
g3781
sg3641
g3980
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3814
sg3632
g3804
sg3646
g3808
sg3641
g3812
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g4349
sg3632
g4345
sg3646
g4356
sg3641
g4353
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g4235
sg3632
g4231
sg3646
g4242
sg3641
g4239
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g4807
sg3632
g5054
sg3646
g4814
sg3641
g5061
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3742
sg3632
g4164
sg3646
g3749
sg3641
g4171
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g3842
sg3632
g3838
sg3646
g3849
sg3641
g3846
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g4235
sg3632
g4762
sg3646
g4242
sg3641
g4769
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g4054
sg3632
g4050
sg3646
g4061
sg3641
g4058
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3797
sg3632
g3787
sg3646
g3791
sg3641
g3795
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g3842
sg3632
g4522
sg3646
g3849
sg3641
g4529
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g4807
sg3632
g5054
sg3646
g4814
sg3641
g5061
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g3919
sg3632
g3958
sg3646
g3926
sg3641
g3965
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3637
sg3632
g4149
sg3646
g3647
sg3641
g4156
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g4037
sg3632
g4455
sg3646
g4044
sg3641
g4462
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3637
sg3632
g4149
sg3646
g3647
sg3641
g4156
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3797
sg3632
g4018
sg3646
g3791
sg3641
g4025
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3814
sg3632
g3804
sg3646
g3808
sg3641
g3812
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3831
sg3632
g3821
sg3646
g3825
sg3641
g3829
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3814
sg3632
g3804
sg3646
g3808
sg3641
g3812
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3731
sg3632
g3868
sg3646
g3725
sg3641
g3875
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3714
sg3632
g3704
sg3646
g3708
sg3641
g3712
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g4037
sg3632
g4033
sg3646
g4044
sg3641
g4041
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g4037
sg3632
g4455
sg3646
g4044
sg3641
g4462
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3831
sg3632
g4291
sg3646
g3825
sg3641
g4298
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g4235
sg3632
g4762
sg3646
g4242
sg3641
g4769
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3663
sg3632
g3653
sg3646
g3657
sg3641
g3661
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g3742
sg3632
g3738
sg3646
g3749
sg3641
g3746
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3691
sg3632
g4263
sg3646
g3698
sg3641
g4270
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3902
sg3632
g3898
sg3646
g3909
sg3641
g3906
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3842
sg3632
g4522
sg3646
g3849
sg3641
g4529
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3992
sg3632
g4563
sg3646
g3999
sg3641
g4570
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g3663
sg3632
g3755
sg3646
g3657
sg3641
g3762
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g4349
sg3632
g4345
sg3646
g4356
sg3641
g4353
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I80446288
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\x10\r\xbe\x12\xc0\x10\xbf\x12\xe8\x10\xbf\x12\x10\x11\xbf\x12P\x0c\xbe\x12\x80\x0c\xbe\x12\x18\x02\xbf\x128\x11\xbf\x12P\x0c\xbe\x12\xe8\x10\xbf\x12\x80\x1d\x15\x03`\x11\xbf\x12\x00\x19\x15\x03\x80\x0c\xbe\x12\x88\x11\xbf\x12\xb0\x11\xbf\x12p\x01\xbf\x12\x98\x10\xbf\x12\xd8\x11\xbf\x12\xc0\x10\xbf\x12\xb0\x11\xbf\x12\x88\x11\xbf\x12\x00\x0e\xbe\x12\x00\x19\x15\x03\xe8\x10\xbf\x12\xa8\x01\xbf\x12\x88\x11\xbf\x12\x10\x11\xbf\x12`\x16\x15\x03\x00\x19\x15\x03\xf0\x12\xbf\x12\x88\x02\xbf\x12\x10\x11\xbf\x12\x80\x0c\xbe\x12\xd8\x11\xbf\x12`\x11\xbf\x128\x01\xbf\x12\x98\x10\xbf\x12\xf0\x12\xbf\x12\x88\x11\xbf\x12\x10\r\xbe\x12\x00\x19\x15\x03\xd8\x11\xbf\x12\xb0\x11\xbf\x12\xa8\x01\xbf\x12\xb0\x11\xbf\x12\xe0\x01\xbf\x12\xd8\x11\xbf\x12\x10\x11\xbf\x12x\x12\xbf\x12p\x01\xbf\x12`\x11\xbf\x12\xa0\x13\x15\x03`\x11\xbf\x12\xa0\x13\x15\x03`\x11\xbf\x12\xb0\x11\xbf\x12\xe8\x10\xbf\x12\x10\r\xbe\x12\x00\x19\x15\x03\xe0\x01\xbf\x12\xe0\x0c\xbe\x12\x00\x0e\xbe\x12`\x11\xbf\x12\xd0\r\xbe\x12\xa8\x01\xbf\x12\x10\x11\xbf\x128\x11\xbf\x12\xe0\x01\xbf\x12\xd8\x11\xbf\x12\x10\x11\xbf\x128\x11\xbf\x12`\x11\xbf\x12\x88\x11\xbf\x12`\x11\xbf\x12\x98\x10\xbf\x12\x18\x02\xbf\x12\x00\x0e\xbe\x12P\x0c\xbe\x12\x00\x12\xbf\x12`\x16\x15\x03\xd8\x11\xbf\x12\xe0\x01\xbf\x12\x00\x19\x15\x03P\x0c\xbe\x12\xa0\x12\xbf\x12\x10\r\xbe\x12P\x0c\xbe\x12\x98\x10\xbf\x12\xb0\x0c\xbe\x12\xd8\x11\xbf\x12P\x0c\xbe\x12\xb0\x0c\xbe\x12\xa0\x13\x15\x03\xa8\x01\xbf\x12\x80\x0c\xbe\x128\x01\xbf\x12\x88\x11\xbf\x12\xe0\x0c\xbe\x12\x88\x11\xbf\x12\xe8\x10\xbf\x12P\x0c\xbe\x12\x00\x19\x15\x03\xe0\x01\xbf\x12\x00\x1c\x15\x03`\x16\x15\x03\xd0\r\xbe\x12\x00\x12\xbf\x12\xa8\x01\xbf\x12\xd0\r\xbe\x12\xb0\x11\xbf\x12\xc0\x10\xbf\x12x\x12\xbf\x12\x18\x02\xbf\x128\x01\xbf\x12\xe0\x01\xbf\x12\xd0\r\xbe\x12\xb0\x0c\xbe\x12\xe0\x0c\xbe\x12\xb0\x0c\xbe\x12\xc8\x12\xbf\x12\x00\x12\xbf\x12\xa0\x12\xbf\x128\x11\xbf\x12\xe0\x0c\xbe\x12\x80\x0c\xbe\x12\x10\x11\xbf\x128\x11\xbf\x12\xd8\x11\xbf\x12\xb0\x0c\xbe\x128\x11\xbf\x128\x01\xbf\x12\x00\x19\x15\x03`\x11\xbf\x12\xe8\x10\xbf\x12\x18\x02\xbf\x12p\x01\xbf\x12\x10\x11\xbf\x128\x01\xbf\x12\xa0\x13\x15\x03\xe8\x10\xbf\x12\x00\x12\xbf\x12\xb0\x11\xbf\x12\xa0\x13\x15\x03\x98\x10\xbf\x12\x00\x12\xbf\x12\xe0\x01\xbf\x12p\r\xbe\x128\x01\xbf\x12\xd8\x11\xbf\x12\xe0\x01\xbf\x12\x00\x1c\x15\x030\x0e\xbe\x12\xa0\r\xbe\x12\x80\x0c\xbe\x12\x00\x12\xbf\x12\x88\x11\xbf\x12\xa0\r\xbe\x12p\r\xbe\x12\x00\x19\x15\x03\xc0\x10\xbf\x12\xe0\x0c\xbe\x12\xb0\x0c\xbe\x12\xd0\r\xbe\x12\xa8\x01\xbf\x12\xe0\x0c\xbe\x12p\r\xbe\x12\xe0\x0c\xbe\x12\xa0\x13\x15\x03\x88\x02\xbf\x12\xe0\x0c\xbe\x12P\x0c\xbe\x12\xc0\x10\xbf\x12p\x01\xbf\x12P\x0c\xbe\x12\xb0\x0c\xbe\x12\x80\x1d\x15\x03\xf0\x12\xbf\x12\x80\x1d\x15\x03\xa0\x13\x15\x03\xb0\x11\xbf\x128\x01\xbf\x12\x98\x10\xbf\x12\x00\x12\xbf\x12\x80\x0c\xbe\x12\xe0\x0c\xbe\x12\x00\x19\x15\x03`\x11\xbf\x12@\r\xbe\x128\x11\xbf\x12\xa0\x13\x15\x03\xa8\x01\xbf\x12\x10\x11\xbf\x12\x00\x12\xbf\x12\xc0\x10\xbf\x12`\x0e\xbe\x12\x10\x11\xbf\x128\x11\xbf\x12p\x01\xbf\x12\x00\x12\xbf\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\xe0r\xc9\x0c\xa0}\xc9\x0c\xe0A{\x0c@\xeb\xbf\x12\xe0\xec\xbf\x12\x00\xec\xbf\x12`\xec\xbf\x12 \xed\xbf\x12`\xed\xbf\x12\x00\xed\xbf\x12\x80\xed\xbf\x12\xc0\xec\xbf\x12\xe0\xea\xbf\x12\xa0\xed\xbf\x12\xc0\xed\xbf\x12 \xee\xbf\x12\x00\xee\xbf\x12\xa0\xea\xbf\x12@\xee\xbf\x12`\xee\xbf\x12\xc0\xee\xbf\x12\xe0\xee\xbf\x12`\xeb\xbf\x12 \xef\xbf\x12@\xef\xbf\x12\x00\xeb\xbf\x12@\xec\xbf\x12`\xef\xbf\x12\x80\xef\xbf\x12\xa0\xee\xbf\x12 \xeb\xbf\x12\x80\xec\xbf\x12\xc0\xeb\xbf\x12@\xed\xbf\x12\x80\xeb\xbf\x12\xe0\xed\xbf\x12\xc0\xea\xbf\x12 \xec\xbf\x12\xe0\xef\xbf\x12\xc0\xef\xbf\x12\x00\xef\xbf\x12\xc0s\xc9\x0c\x80\xee\xbf\x12\xa0\xec\xbf\x12\xa0\xeb\xbf\x12\xe0\xeb\xbf\x12\x80\x10\xd4\x12\xe0\x11\xd4\x12@\x11\xd4\x12\xc0\x12\xd4\x12`\x12\xd4\x12\xa0\x12\xd4\x12\xe0@\x15\x03 \x11\xd4\x12 \x13\xd4\x12\x00\x12\xd4\x12`\x10\xd4\x12@\x13\xd4\x12\x80\x13\xd4\x12\xe0\x12\xd4\x12\xa0\x10\xd4\x12\x00\x14\xd4\x12@\x10\xd4\x12\xc0\x10\xd4\x12 \x14\xd4\x12\xe0\x13\xd4\x12`\x14\xd4\x12\x00\x11\xd4\x12\xe0\x14\xd4\x12\x00\x15\xd4\x12\x80\x11\xd4\x12 \x15\xd4\x12\xc0\x14\xd4\x12\x80\x14\xd4\x12\xa0\x15\xd4\x12\xc0\x15\xd4\x12 \x10\xd4\x12\x00\x13\xd4\x12`\x11\xd4\x12\x80\x12\xd4\x12\xa0\x14\xd4\x12\x80\x16\xd4\x12\xa0\x16\xd4\x12\xa0\x11\xd4\x12\xe0\x10\xd4\x12`\x16\xd4\x12 \x17\xd4\x12@\x17\xd4\x12\xc0\x13\xd4\x12`\x13\xd4\x12\xa0\x17\xd4\x12\xc0\x17\xd4\x12`\x17\xd4\x12\xe0\x17\xd4\x12\x80\x17\xd4\x12@\x15\xd4\x12@\x18\xd4\x12\xe0\x16\xd4\x12\xa0\x18\xd4\x12\x80\x15\xd4\x12@\x16\xd4\x12`\x18\xd4\x12\xc0\x18\xd4\x12\xe0\x15\xd4\x12`\x19\xd4\x12\x80\x19\xd4\x12\x00\x18\xd4\x12\xc0\x11\xd4\x12\xc0\x16\xd4\x12\x00\x17\xd4\x12\x00\x16\xd4\x12\x00\x19\xd4\x12\xa0\x19\xd4\x12 \x12\xd4\x12`\x15\xd4\x12\x00\x1a\xd4\x12@\x19\xd4\x12`\x1a\xd4\x12@\x14\xd4\x12 \x18\xd4\x12`\x1b\xd4\x12\x80\x1b\xd4\x12@\x1b\xd4\x12\xc0\x19\xd4\x12\xc0\x1b\xd4\x12 \x19\xd4\x12@\x1a\xd4\x12\xe0\x18\xd4\x12\xe0\x1b\xd4\x12\x80\x18\xd4\x12\xe0\x19\xd4\x12\x00\x1c\xd4\x12\xc0\x1c\xd4\x12`\x1c\xd4\x12 \x1b\xd4\x12 \x16\xd4\x12`\x1d\xd4\x12\x80\x1d\xd4\x12\xa0\x13\xd4\x12\x00\x1b\xd4\x12\x00\x1d\xd4\x12 \x1c\xd4\x12\x80\x1c\xd4\x12\xc0\x1a\xd4\x12 \x1d\xd4\x12\x80\x1e\xd4\x12\xa0\x1a\xd4\x12@\x12\xd4\x12\xa0\x1d\xd4\x12@\x1e\xd4\x12 \x1f\xd4\x12\xc0\x1e\xd4\x12@\x1c\xd4\x12\x80\x1f\xd4\x12\x00\x1e\xd4\x12\xc0\x1d\xd4\x12`\x1f\xd4\x12\xe0\x1d\xd4\x12\xa0\x1e\xd4\x12\xe0\x1f\xd4\x12\x80\x1a\xd4\x12\xa0\x1c\xd4\x12\xe0\x1a\xd4\x12\x00\x1f\xd4\x12@\x1f\xd4\x12 \x1a\xd4\x12\xc0\x1f\xd4\x12\xa0\x1b\xd4\x12\xe0\x1e\xd4\x12@\x1d\xd4\x12\xe0\x1c\xd4\x12\xa0\x1f\xd4\x12`\x1e\xd4\x12\x80\x90\xfe\x12\xe0\x91\xfe\x12@\x91\xfe\x12\xc0\x92\xfe\x12`\x92\xfe\x12\xa0\x92\xfe\x12\x80\x92\xfe\x12\xa0\x90\xfe\x12\xe0\x92\xfe\x12\x00\x93\xfe\x12 \x93\xfe\x12@\x93\xfe\x12`\x93\xfe\x12\x80\x93\xfe\x12\xe0\x93\xfe\x12\xc0\x93\xfe\x12 \x94\xfe\x12@\x94\xfe\x12 \x1c\x15\x03`\x90\xfe\x12\xa0\x91\xfe\x12 \x92\xfe\x12\xa0\x93\xfe\x12\xa0\x94\xfe\x12`\x94\xfe\x12@\x95\xfe\x12`\x95\xfe\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'+lw?m\xe1\x9d?e\xb6j?\x18;s?\xb6&\x82?\x82{\x97?\xbc\xcf\xac?x\x90H?\x80\xb1*?\x03\x8f\xc8?\xcd.b?|\xaa\xea?\x17,b?\xf0\xd4L?7m\x86?\x0e\x857?\x81(\x82?D?\xa4?\xc3z\x97?\x8f\x857?\x07\x18\x11?\xd1\x8fH?[\x857?\xe8)b?V\xf2\x8e?\xf3\xbe\xbb?`i\x86?\xd5X\x95?\xaaX\xb5?\x82z\x97?\x1e\xce\xac?8\xd3L?\xdd\xb0j?$~7?\x96\xe5]?+\x03\xa0?\x86\xdcL?\xa3\xe9\xae?\x00G\xc4?\xdc%\x82?\x90}H?\xe0\x87H?(\xf6n?\xea\x837?\xe5\xbb\x9b?\xfd\xf5.?>*"?\x86\xb8*?Dj\x86?\xc6M\x84?-\x04\x80?\xbe\x8fH?\x10\xa8\xaa?\xc0\x9dY?\xe1(b?N\xd2L?\xd5%\x82?[%\xa2?\xa8\x9fj?,\xed\x1d?|\x17Q?\xf5W\x95?\xe8\xa6Y?\xf5\xfc.?\xd4\x06\xc0?b\xef\x8e?@:s?\xc1\xf6.?:$Q?\xd2\x06@?\n\xcd;?q~7?%\xf7.?\xfc\xd3L?\x91\xd3\x8c?J\x8fY?\xa7%\xc2?D\xd6L?L\x03\xa0?Q\\\x95?Pz\xb7?\xeb\xb0j?\x14\xb2j?9*"?[n&?34"?\x91\\f?\xd1\x8fH?=\xd3\x1d?#\xd0\x8c?\xd6\x8dH?\x83)"?[\x7f7?G\x17Q?N\xce\x8c?8\xafj?\xb40s?\x80Xs?\x1e\xae\x8a?\xe8mf?\x87\xad\xca?&*"?B*"?\x1fmf?\x1fmf?\xe3\x05\xa0?\x8b\x7f7?\xd4\xb0j?n\x17Q?\xa7&b?\n\x7f7?\xcb\'b?\x87\xf6.?\xb1*"?\x82\x1eQ?\xa3\x90H?m\xe4]?\xe1\x02\x80?\x19/s?\xdc9s?R\xdcL?\xd8\x8eH?\x07\'"?0;s?\x8193?\xfb>s?\x8aA3?\x99n&?\x02)b?:\x7f7?(\xe5\x1d?\xaf\\U?[\x98H?\xba\xcf\xac?\xccZU?\xab\xb3*?\x90\x12\x01@\xf4\xa9\x19?F\x8fH?\x18\x90H?()b?x\xb2*?\xbd\x16Q?\x87\xfcn?_\x83\x88?\x1c\xf7n?\x9b\x18Q?\x9a\xc3{?{\xa0\x19?\xea(\x82?\x90j&?\x11KD?C6\x93?\xa08s?\x8e\x8fH?\x11\xc1Y?\x1f\x14\xb1?\\\xd4L?\xde\x18Q?\xec\xd0\x8c?)\x80\x97?\xa2\x17Q?\xd6c&?\xff\xf6.?\x88\x95Y?\xf2~7?hRD?Cnf?\xc2\x8fH?\x0e(b?/?s?V*b?\x980b?\xfd*"?U\xf7.?\xaam&?\xb5A3?\xd4\xaa*?\xf7\xdb\x0c?~\xc1;?m\xb1*?\'l&?~\x07Q?nn&?J\xe3L?\xd5~7?\xd8\xb8*?{\x8fH?\xf4[U?\x0b\xf6.?\xbd\x13\x80?\xb5`\xa6?\xb5\x06@?\xa3\xb2j?\x9fA\x84?\xeaPD?\x07\x03\x80?\xb3%\x82?\xc0[U?\'\xb2*?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xa0j\xf0\x04Hn\xf0\x04\xd8\x18\xf0\x04\x18\x1b\xf0\x04h\x1c\xf0\x04P\x19\xf0\x04\xa0\x1a\xf0\x04\x10\x1a\xf0\x04\xb0\x1c\xf0\x04\x88\x14\xf0\x04\xb0\xd9\x8a\x048\xd0\x8a\x04\xd8\xde\x8a\x04 \xd6\x8a\x04\xc0\xd8\x8a\x04\xe0\xd6\x8a\x04\x80\xd0\x8a\x04`\xd2\x8a\x04P\xd0\x8a\x04\xb0\xd3\x8a\x04\xb8\xd1\x8a\x04P\xd6\x8a\x04\xc8\xd0\x8a\x04\xc0\xd5\x8a\x04\xc8\xd9\x8a\x04(\xd1\x8a\x04@\xd1\x8a\x04\xe0\xd0\x8a\x04\xf8\xd0\x8a\x048\xd6\x8a\x04\xe0\xd3\x8a\x04p\xd1\x8a\x04P\xd9\x8a\x048\xd9\x8a\x04\xd0\xd1\x8a\x04h\xd6\x8a\x04\xa8\xd2\x8a\x04\x18\xd8\x8a\x04\xa0\xd7\x8a\x048\xd3\x8a\x04p\xd4\x8a\x04\x90\xd8\x8a\x04 \xd9\x8a\x04\x18\xdb\x8a\x04(\xdd\x8a\x04\xb0\xdc\x8a\x04\xd8\xd5\x8a\x04\xe0\xd9\x8a\x04\xb8\xd7\x8a\x04x\xd8\x8a\x04\x80\xd9\x8a\x04H\xdb\x8a\x04 \xd0\x8a\x04H\xd8\x8a\x040\xd8\x8a\x04\x10\xd1\x8a\x048\xdc\x8a\x04\xe8\xd1\x8a\x04H\xd2\x8a\x04@\xd7\x8a\x04\xe8\xda\x8a\x040\xd2\x8a\x04\xa8\xd5\x8a\x04p\xd7\x8a\x04\xa0\xda\x8a\x04\x98\xd3\x8a\x04@\xdd\x8a\x04p\xda\x8a\x04(\xda\x8a\x04\xf0\xd5\x8a\x04\x10\xd4\x8a\x04\xf8\xd9\x8a\x04\xc8\xd3\x8a\x04\x80\xdc\x8a\x04\x18\xd2\x8a\x04\x88\xd7\x8a\x040\xde\x8a\x04\xc8\xd6\x8a\x04\x98\xd6\x8a\x04\xb0\xd0\x8a\x04X\xda\x8a\x04\xd8\xdb\x8a\x04\x80\xd3\x8a\x04\xa0\xd1\x8a\x04p\xdd\x8a\x04\xe8\xdd\x8a\x04\xf0\xd8\x8a\x04\x10\xdd\x8a\x04\x08\xd6\x8a\x04\xe8\xd7\x8a\x04P\xdf\x8a\x04\x80\xdf\x8a\x04\xb0\xd6\x8a\x04\x98\xdc\x8a\x04h\xd0\x8a\x04 \xdf\x8a\x04\x00\xdb\x8a\x04h\xd9\x8a\x04\x10\xda\x8a\x04 \xdc\x8a\x04\x88\xda\x8a\x04\xd0\xdd\x8a\x04h\xdc\x8a\x04X\xd1\x8a\x04h\xdf\x8a\x04\x88\xd1\x8a\x04\x90\xde\x8a\x04\x00\xde\x8a\x04\xf0\xde\x8a\x04x\xd2\x8a\x04\xb0\xdf\x8a\x04\xd0\xd7\x8a\x04\x08\xdc\x8a\x04\x90\xd5\x8a\x04\xa8\xd8\x8a\x04\x98\xdf\x8a\x04\xe0\xdc\x8a\x04\x90\xdb\x8a\x04X\xdd\x8a\x04\xc8\xdc\x8a\x04h\xd3\x8a\x04\xc0\xde\x8a\x04(\xd7\x8a\x04\xa8\xde\x8a\x04x\xde\x8a\x04\x98\xd0\x8a\x04@\xda\x8a\x04\xf8\xd6\x8a\x04X\xd7\x8a\x04\xb8\xda\x8a\x04\x00\xd8\x8a\x04\x08\xdf\x8a\x04\xd8\xd8\x8a\x04`\xd8\x8a\x04P\xdc\x8a\x040\xdb\x8a\x04\x98\xd9\x8a\x04\x10\xd7\x8a\x04x\xdb\x8a\x04H\xde\x8a\x04\xf8\xdc\x8a\x04\xe0\xdf\x8a\x04\x18\xde\x8a\x04\xb8\xdd\x8a\x04\x08\xd9\x8a\x04\xc0\xdb\x8a\x048\xdf\x8a\x04\xc8\xdf\x8a\x04\xf0\xdb\x8a\x04\x00\xd2\x8a\x04`\xdb\x8a\x04\x88\xdd\x8a\x04`\xde\x8a\x04P\xd3\x8a\x04 \xd3\x8a\x04\xa8\x15\xf0\x04\xc8\x10\xf0\x04H\x15\xf0\x04@\x11\xf0\x04h\x13\xf0\x04 \x13\xf0\x04P\x13\xf0\x04p\x11\xf0\x04\xa8\x12\xf0\x04\x18\x15\xf0\x04\xa0\x11\xf0\x04\xc0\x18\xf0\x04\x08\x19\xf0\x04\x80\x16\xf0\x04\x00\x12\xf0\x048\x19\xf0\x04\x98\x13\xf0\x04\xd0\x14\xf0\x04\x08\x16\xf0\x04\xb0\x13\xf0\x048\x10\xf0\x04\x00\x15\xf0\x04@\x1a\xf0\x04\x18\x1e\xf0\x04P\x10\xf0\x04\x90\x18\xf0\x04p\x17\xf0\x04\x98\x16\xf0\x04 \x19\xf0\x04X\x14\xf0\x04\xe0\x19\xf0\x04\xd8\x12\xf0\x04\xe8\x11\xf0\x04\xe8\x14\xf0\x04\x10\x14\xf0\x04h\x19\xf0\x04\xf8\x10\xf0\x04\x88\x1d\xf0\x04H\x12\xf0\x04\xd0\x11\xf0\x04(\x17\xf0\x04(\x1d\xf0\x04h\x10\xf0\x04\x80\x1c\xf0\x04p\x1d\xf0\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6412
sg6370
g6408
sg6385
g6419
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6395
sg6370
g6476
sg6385
g6402
sg6379
g6483
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6495
sg6370
g6491
sg6385
g6502
sg6379
g6499
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6412
sg6370
g6521
sg6385
g6419
sg6379
g6528
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6546
sg6370
g6536
sg6385
g6540
sg6379
g6544
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6463
sg6370
g6587
sg6385
g6470
sg6379
g6594
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6623
sg6370
g6619
sg6385
g6630
sg6379
g6627
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6640
sg6370
g6636
sg6385
g6647
sg6379
g6644
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6383
sg6370
g6653
sg6385
g6375
sg6379
g6660
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6672
sg6370
g6668
sg6385
g6679
sg6379
g6676
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6395
sg6370
g6476
sg6385
g6402
sg6379
g6483
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6623
sg6370
g6698
sg6385
g6630
sg6379
g6705
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6606
sg6370
g6713
sg6385
g6613
sg6379
g6720
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6738
sg6370
g6728
sg6385
g6732
sg6379
g6736
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6574
sg6370
g6745
sg6385
g6581
sg6379
g6752
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6412
sg6370
g6408
sg6385
g6419
sg6379
g6416
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6777
sg6370
g6773
sg6385
g6784
sg6379
g6781
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6606
sg6370
g6713
sg6385
g6613
sg6379
g6720
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6429
sg6370
g6803
sg6385
g6436
sg6379
g6810
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6412
sg6370
g6521
sg6385
g6419
sg6379
g6528
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6574
sg6370
g6745
sg6385
g6581
sg6379
g6752
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6777
sg6370
g6844
sg6385
g6784
sg6379
g6851
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6869
sg6370
g6859
sg6385
g6863
sg6379
g6867
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6463
sg6370
g6587
sg6385
g6470
sg6379
g6594
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6672
sg6370
g6668
sg6385
g6679
sg6379
g6676
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6557
sg6370
g6915
sg6385
g6564
sg6379
g6922
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6546
sg6370
g6536
sg6385
g6540
sg6379
g6544
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6383
sg6370
g6653
sg6385
g6375
sg6379
g6660
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6777
sg6370
g6773
sg6385
g6784
sg6379
g6781
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6574
sg6370
g6745
sg6385
g6581
sg6379
g6752
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6672
sg6370
g7008
sg6385
g6679
sg6379
g7015
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6623
sg6370
g6698
sg6385
g6630
sg6379
g6705
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6777
sg6370
g6844
sg6385
g6784
sg6379
g6851
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6623
sg6370
g6619
sg6385
g6630
sg6379
g6627
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6869
sg6370
g7062
sg6385
g6863
sg6379
g7069
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6672
sg6370
g6668
sg6385
g6679
sg6379
g6676
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6606
sg6370
g6713
sg6385
g6613
sg6379
g6720
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6640
sg6370
g7116
sg6385
g6647
sg6379
g7123
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g7148
sg6370
g7144
sg6385
g7155
sg6379
g7152
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6557
sg6370
g6915
sg6385
g6564
sg6379
g6922
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g7148
sg6370
g7174
sg6385
g7155
sg6379
g7181
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6623
sg6370
g6698
sg6385
g6630
sg6379
g6705
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6412
sg6370
g6521
sg6385
g6419
sg6379
g6528
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6383
sg6370
g6653
sg6385
g6375
sg6379
g6660
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g6869
sg6370
g6859
sg6385
g6863
sg6379
g6867
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g7271
sg6370
g7267
sg6385
g7278
sg6379
g7275
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6738
sg6370
g6728
sg6385
g6732
sg6379
g6736
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6557
sg6370
g6915
sg6385
g6564
sg6379
g6922
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6640
sg6370
g7116
sg6385
g6647
sg6379
g7123
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6777
sg6370
g6844
sg6385
g6784
sg6379
g6851
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6429
sg6370
g6803
sg6385
g6436
sg6379
g6810
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6495
sg6370
g7349
sg6385
g6502
sg6379
g7356
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6869
sg6370
g6859
sg6385
g6863
sg6379
g6867
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6672
sg6370
g6668
sg6385
g6679
sg6379
g6676
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6495
sg6370
g7349
sg6385
g6502
sg6379
g7356
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6557
sg6370
g6915
sg6385
g6564
sg6379
g6922
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6383
sg6370
g6653
sg6385
g6375
sg6379
g6660
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6738
sg6370
g7481
sg6385
g6732
sg6379
g7488
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g7513
sg6370
g7509
sg6385
g7520
sg6379
g7517
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6412
sg6370
g6521
sg6385
g6419
sg6379
g6528
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6672
sg6370
g7008
sg6385
g6679
sg6379
g7015
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6869
sg6370
g7062
sg6385
g6863
sg6379
g7069
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6574
sg6370
g6745
sg6385
g6581
sg6379
g6752
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6446
sg6370
g7578
sg6385
g6453
sg6379
g7585
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6623
sg6370
g6698
sg6385
g6630
sg6379
g6705
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6446
sg6370
g7578
sg6385
g6453
sg6379
g7585
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6383
sg6370
g6653
sg6385
g6375
sg6379
g6660
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6738
sg6370
g7481
sg6385
g6732
sg6379
g7488
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6672
sg6370
g6668
sg6385
g6679
sg6379
g6676
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6446
sg6370
g7578
sg6385
g6453
sg6379
g7585
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6738
sg6370
g6728
sg6385
g6732
sg6379
g6736
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g7148
sg6370
g7174
sg6385
g7155
sg6379
g7181
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6777
sg6370
g6773
sg6385
g6784
sg6379
g6781
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6546
sg6370
g7736
sg6385
g6540
sg6379
g7743
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6606
sg6370
g6713
sg6385
g6613
sg6379
g6720
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g7271
sg6370
g7267
sg6385
g7278
sg6379
g7275
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6606
sg6370
g6713
sg6385
g6613
sg6379
g6720
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6412
sg6370
g6408
sg6385
g6419
sg6379
g6416
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6446
sg6370
g7578
sg6385
g6453
sg6379
g7585
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6869
sg6370
g7062
sg6385
g6863
sg6379
g7069
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g7148
sg6370
g7174
sg6385
g7155
sg6379
g7181
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6412
sg6370
g6521
sg6385
g6419
sg6379
g6528
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6640
sg6370
g6636
sg6385
g6647
sg6379
g6644
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g7513
sg6370
g7881
sg6385
g7520
sg6379
g7888
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6777
sg6370
g6773
sg6385
g6784
sg6379
g6781
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6640
sg6370
g6636
sg6385
g6647
sg6379
g6644
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6623
sg6370
g6619
sg6385
g6630
sg6379
g6627
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6395
sg6370
g6476
sg6385
g6402
sg6379
g6483
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6546
sg6370
g7736
sg6385
g6540
sg6379
g7743
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6869
sg6370
g7062
sg6385
g6863
sg6379
g7069
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6640
sg6370
g7116
sg6385
g6647
sg6379
g7123
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6738
sg6370
g7481
sg6385
g6732
sg6379
g7488
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g7271
sg6370
g7267
sg6385
g7278
sg6379
g7275
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6738
sg6370
g6728
sg6385
g6732
sg6379
g6736
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6672
sg6370
g7008
sg6385
g6679
sg6379
g7015
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g7513
sg6370
g7509
sg6385
g7520
sg6379
g7517
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6623
sg6370
g6619
sg6385
g6630
sg6379
g6627
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6495
sg6370
g7349
sg6385
g6502
sg6379
g7356
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g7271
sg6370
g8104
sg6385
g7278
sg6379
g8111
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6463
sg6370
g6587
sg6385
g6470
sg6379
g6594
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6429
sg6370
g6803
sg6385
g6436
sg6379
g6810
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6495
sg6370
g6491
sg6385
g6502
sg6379
g6499
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6672
sg6370
g7008
sg6385
g6679
sg6379
g7015
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6738
sg6370
g7481
sg6385
g6732
sg6379
g7488
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6495
sg6370
g7349
sg6385
g6502
sg6379
g7356
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6546
sg6370
g7736
sg6385
g6540
sg6379
g7743
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6557
sg6370
g6553
sg6385
g6564
sg6379
g6561
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6412
sg6370
g6408
sg6385
g6419
sg6379
g6416
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6395
sg6370
g6476
sg6385
g6402
sg6379
g6483
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6640
sg6370
g6636
sg6385
g6647
sg6379
g6644
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6429
sg6370
g6425
sg6385
g6436
sg6379
g6433
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6546
sg6370
g6536
sg6385
g6540
sg6379
g6544
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g7148
sg6370
g7174
sg6385
g7155
sg6379
g7181
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6412
sg6370
g6408
sg6385
g6419
sg6379
g6416
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g7513
sg6370
g7509
sg6385
g7520
sg6379
g7517
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6623
sg6370
g6698
sg6385
g6630
sg6379
g6705
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g7148
sg6370
g7144
sg6385
g7155
sg6379
g7152
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g7513
sg6370
g7881
sg6385
g7520
sg6379
g7888
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6869
sg6370
g6859
sg6385
g6863
sg6379
g6867
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6546
sg6370
g7736
sg6385
g6540
sg6379
g7743
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6672
sg6370
g7008
sg6385
g6679
sg6379
g7015
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6869
sg6370
g6859
sg6385
g6863
sg6379
g6867
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g7148
sg6370
g7144
sg6385
g7155
sg6379
g7152
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g7271
sg6370
g8104
sg6385
g7278
sg6379
g8111
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6495
sg6370
g6491
sg6385
g6502
sg6379
g6499
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g7513
sg6370
g7881
sg6385
g7520
sg6379
g7888
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6606
sg6370
g6602
sg6385
g6613
sg6379
g6610
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6495
sg6370
g6491
sg6385
g6502
sg6379
g6499
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6463
sg6370
g6459
sg6385
g6470
sg6379
g6467
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6574
sg6370
g6570
sg6385
g6581
sg6379
g6578
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6395
sg6370
g6476
sg6385
g6402
sg6379
g6483
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g7271
sg6370
g7267
sg6385
g7278
sg6379
g7275
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6738
sg6370
g6728
sg6385
g6732
sg6379
g6736
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6640
sg6370
g7116
sg6385
g6647
sg6379
g7123
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6777
sg6370
g6844
sg6385
g6784
sg6379
g6851
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g7271
sg6370
g7267
sg6385
g7278
sg6379
g7275
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6463
sg6370
g6587
sg6385
g6470
sg6379
g6594
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g7271
sg6370
g8104
sg6385
g7278
sg6379
g8111
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g7148
sg6370
g7144
sg6385
g7155
sg6379
g7152
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6869
sg6370
g7062
sg6385
g6863
sg6379
g7069
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g7271
sg6370
g8104
sg6385
g7278
sg6379
g8111
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6640
sg6370
g7116
sg6385
g6647
sg6379
g7123
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6446
sg6370
g7578
sg6385
g6453
sg6379
g7585
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6738
sg6370
g7481
sg6385
g6732
sg6379
g7488
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6546
sg6370
g6536
sg6385
g6540
sg6379
g6544
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6777
sg6370
g6844
sg6385
g6784
sg6379
g6851
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6546
sg6370
g6536
sg6385
g6540
sg6379
g6544
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g7148
sg6370
g7144
sg6385
g7155
sg6379
g7152
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6623
sg6370
g6619
sg6385
g6630
sg6379
g6627
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6546
sg6370
g7736
sg6385
g6540
sg6379
g7743
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6383
sg6370
g6371
sg6385
g6375
sg6379
g6380
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g7513
sg6370
g7881
sg6385
g7520
sg6379
g7888
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6463
sg6370
g6587
sg6385
g6470
sg6379
g6594
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g7271
sg6370
g8104
sg6385
g7278
sg6379
g8111
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6574
sg6370
g6745
sg6385
g6581
sg6379
g6752
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6557
sg6370
g6915
sg6385
g6564
sg6379
g6922
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6446
sg6370
g6442
sg6385
g6453
sg6379
g6450
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6495
sg6370
g7349
sg6385
g6502
sg6379
g7356
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g7148
sg6370
g7174
sg6385
g7155
sg6379
g7181
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6777
sg6370
g6773
sg6385
g6784
sg6379
g6781
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6429
sg6370
g6803
sg6385
g6436
sg6379
g6810
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g7513
sg6370
g7881
sg6385
g7520
sg6379
g7888
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6395
sg6370
g6391
sg6385
g6402
sg6379
g6399
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g7513
sg6370
g7509
sg6385
g7520
sg6379
g7517
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6429
sg6370
g6803
sg6385
g6436
sg6379
g6810
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6495
sg6370
g6491
sg6385
g6502
sg6379
g6499
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6640
sg6370
g6636
sg6385
g6647
sg6379
g6644
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g7513
sg6370
g7509
sg6385
g7520
sg6379
g7517
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.