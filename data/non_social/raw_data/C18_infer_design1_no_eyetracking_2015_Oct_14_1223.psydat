ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C18_infer_design1_no_eyetracking_2015_Oct_14_1223
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vy
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xcc#\xdb\xc5\x19\x05N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_14_1223
p66
sVparticipant
p67
VC18
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F0.61692294183012564
sg14
S'space'
p88
sg58
g62
sg57
Vy
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vy
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F16.083220576822896
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P8\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F10.768000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F2.0600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'#\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p102
sg21
F2
sg69
Vn
sa(dp103
g63
g64
sg20
F7.3840000000000003
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F2.0400000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x1c\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p109
sg21
F1.1000000000000001
sg69
Vn
sa(dp110
g63
g64
sg20
F2.984
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\x11\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p116
sg21
F1.3999999999999999
sg69
Vn
sa(dp117
g63
g64
sg20
F4.6340000000000003
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F2.5400000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x1b\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p123
sg21
F2
sg69
Vn
sa(dp124
g63
g64
sg20
F4.1340000000000003
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'\x06\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V7-olives.png
p130
sg21
F1.5
sg69
Vn
sa(dp131
g63
g64
sg20
F3.4340000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.49999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x13\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p137
sg21
F1.3999999999999999
sg69
Vn
sa(dp138
g63
g64
sg20
F10.484
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F2.2600000000000011
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\x1f\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p144
sg21
F1.1000000000000001
sg69
Vn
sa(dp145
g63
g64
sg20
F9.2170000000000005
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\t\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p151
sg21
F1
sg69
Vn
sa(dp152
g63
g64
sg20
F6.101
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F1.4399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\r\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p158
sg21
F1.3999999999999999
sg69
Vn
sa(dp159
g63
g64
sg20
F5.7839999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.97999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x1e\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p165
sg21
F1.6000000000000001
sg69
Vn
sa(dp166
g63
g64
sg20
F7.851
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F0.35999999999999899
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x18\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p172
sg21
F1.3999999999999999
sg69
Vn
sa(dp173
g63
g64
sg20
F5.6669999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x08\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p179
sg21
F1.3999999999999999
sg69
Vn
sa(dp180
g63
g64
sg20
F3.9340000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F0.31999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S'\x02\x00\x00\x00'
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p186
sg21
F1.8
sg69
Vn
sa(dp187
g63
g64
sg20
F2.9670000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.75999999999999979
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x0b\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p193
sg21
F1
sg69
Vn
sa(dp194
g63
g64
sg20
F4.484
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F1.6200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x17\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p200
sg21
F1
sg69
Vn
sa(dp201
g63
g64
sg20
F4.7169999999999996
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x1a\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V35-raisins.png
p207
sg21
F1.7
sg69
Vn
sa(dp208
g63
g64
sg20
F6.8339999999999996
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.71999999999999931
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x01\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p214
sg21
F1.3999999999999999
sg69
Vn
sa(dp215
g63
g64
sg20
F3.5840000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.97999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x10\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V22-daim.png
p221
sg21
F1.5
sg69
Vn
sa(dp222
g63
g64
sg20
F5.9669999999999996
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F0.15999999999999939
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x03\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V4-corn.png
p228
sg21
F1
sg69
Vn
sa(dp229
g63
g64
sg20
F3.2509999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F0.63999999999999946
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x19\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p235
sg21
F1.3
sg69
Vn
sa(dp236
g63
g64
sg20
F5.601
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.45999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x04\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p242
sg21
F1.3999999999999999
sg69
Vn
sa(dp243
g63
g64
sg20
F4.101
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.619999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'&\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V50-polo.png
p249
sg21
F1.8
sg69
Vn
sa(dp250
g63
g64
sg20
F5.4169999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.71999999999999886
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S"'\x00\x00\x00"
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V51-mars.png
p256
sg21
F2
sg69
Vn
sa(dp257
g63
g64
sg20
F3.7010000000000001
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S' \x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p263
sg21
F1.6000000000000001
sg69
Vn
sa(dp264
g63
g64
sg20
F3.5009999999999999
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x0f\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p270
sg21
F1.1000000000000001
sg69
Vn
sa(dp271
g63
g64
sg20
F2.6840000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'\x07\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p277
sg21
F1.3
sg69
Vn
sa(dp278
g63
g64
sg20
F11.234
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F2.4600000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'\x00\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p284
sg21
F1.5
sg69
Vn
sa(dp285
g63
g64
sg20
F4.4509999999999996
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.45999999999999863
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x16\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p291
sg21
F1.8999999999999999
sg69
Vn
sa(dp292
g63
g64
sg20
F5.734
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F0.27999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x15\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V29-beans.png
p298
sg21
F1.7
sg69
Vn
sa(dp299
g63
g64
sg20
F2.4169999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F0.53999999999999959
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x0e\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p305
sg21
F1.1000000000000001
sg69
Vn
sa(dp306
g63
g64
sg20
F6.468
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.57999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x12\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p312
sg21
F1.5
sg69
Vn
sa(dp313
g63
g64
sg20
F6.8170000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.45999999999999908
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'\x1d\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V40-sardines.png
p319
sg21
F1.6000000000000001
sg69
Vn
sa(dp320
g63
g64
sg20
F6.617
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F1.9600000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x05\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p326
sg21
F1.7
sg69
Vn
sa(dp327
g63
g64
sg20
F3.0339999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.2400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'$\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V48-twix.png
p333
sg21
F1.1000000000000001
sg69
Vn
sa(dp334
g63
g64
sg20
F10.167
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F1.0199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'"\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p340
sg21
F1.3
sg69
Vn
sa(dp341
g63
g64
sg20
F6.1669999999999998
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F0.51999999999999891
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\n\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p347
sg21
F1.7
sg69
Vn
sa(dp348
g63
g64
sg20
F2.3010000000000002
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.69999999999999951
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S'%\x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p354
sg21
F1.3
sg69
Vn
sa(dp355
g63
g64
sg20
F1.734
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'!\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V44-crunch.png
p361
sg21
F1.3
sg69
Vn
sa(dp362
g63
g64
sg20
F4.3840000000000003
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F2.3600000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x0c\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V18-mms.png
p368
sg21
F1.3999999999999999
sg69
Vn
sa(dp369
g63
g64
sg20
F4.0170000000000003
sg56
Vr
sg57
Vy
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F0.33999999999999875
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x14\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p375
sg21
F1.7
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F6.650485323407338
sg57
Vy
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'25-kitkat.png'
p380
sg26
F5.2000000000000002
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'31-hobnobs.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F2.6500114894752187
sg27
F5.7169999999999996
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p389
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'17-jacobs_mini_cheddars_redo.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F1.9833533757673649
sg27
F1.901
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p398
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'42-mrkipling_lemon_slices.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F3.2833732186327325
sg27
F3.6669999999999998
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'44-crunch.png'
p407
sg26
F4.8000000000000007
sg28
F4
sg58
g62
sg57
Vy
sg80
S'26-walkers_smoky_bacon.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'left'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.5833722492970992
sg27
F6.5510000000000002
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p416
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vy
sg80
S'36-fig_rolls.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.6000342688562341
sg27
F1.401
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p425
sg26
F5.3999999999999995
sg28
F4.0999999999999996
sg58
g62
sg57
Vy
sg80
S'33-ambrosia_rice.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'left'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.0833927763987958
sg27
F2.8170000000000002
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'29-beans.png'
p434
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'46-pistachios.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'right'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.4167206928577798
sg27
F3.7170000000000001
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p443
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vy
sg80
S'1-treacle_cookies.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F1.3001344525168861
sg27
F2.8170000000000002
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'48-twix.png'
p452
sg26
F3.8000000000000003
sg28
F3.3999999999999999
sg58
g62
sg57
Vy
sg80
S'50-polo.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'right'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F2.2501429769654351
sg27
F2.9009999999999998
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'5-pineapple.png'
p461
sg26
F4.0000000000000009
sg28
F3.1000000000000001
sg58
g62
sg57
Vy
sg80
S'40-sardines.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F2.1335670001749349
sg27
F2.1669999999999998
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p470
sg26
F4.4000000000000004
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'3-ellas_strawberries_apples.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'left'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.5501431480247447
sg27
F2.8170000000000002
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p479
sg26
F5.9999999999999982
sg28
F3.2000000000000002
sg58
g62
sg57
Vy
sg80
S'21-nakd_banana_crunch.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.9001131271388658
sg27
F1.8680000000000001
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'40-sardines.png'
p488
sg26
F5.2999999999999998
sg28
F4
sg58
g62
sg57
Vy
sg80
S'5-pineapple.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.7668469060240568
sg27
F1.5509999999999999
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p497
sg26
F4.2000000000000011
sg28
F3.1000000000000001
sg58
g62
sg57
Vy
sg80
S'20-fruit_pastilles.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F4.5833579943655423
sg27
F2.3839999999999999
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p506
sg26
F5.2999999999999998
sg28
F3.7000000000000002
sg58
g62
sg57
Vy
sg80
S'4-corn.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.4835130310034401
sg27
F2.0670000000000002
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p515
sg26
F5.0000000000000009
sg28
F3.3999999999999999
sg58
g62
sg57
Vy
sg80
S'44-crunch.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'right'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.3002128546413587
sg27
F3.7669999999999999
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'31-hobnobs.png'
p524
sg26
F5.9999999999999973
sg28
F3.7000000000000002
sg58
g62
sg57
Vy
sg80
S'25-kitkat.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.2837963050078542
sg27
F1.534
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p533
sg26
F4.2000000000000002
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'45-chewy_nougat_redo.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.7833763547173476
sg27
F5.5339999999999998
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'38-maltesers.png'
p542
sg26
F3.5
sg28
F3.5
sg58
g62
sg57
Vy
sg80
S'6-sour_patch_kids.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F1.0332704405741424
sg27
F1.151
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p551
sg26
F5.0000000000000009
sg28
F4
sg58
g62
sg57
Vy
sg80
S'2-steamed_puddings.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'left'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.6501568897792822
sg27
F1.3009999999999999
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p560
sg26
F5.9999999999999982
sg28
F3
sg58
g62
sg57
Vy
sg80
S'16-skips_prawn.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.3333039681738228
sg27
F2.5510000000000002
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'51-mars.png'
p569
sg26
F5.0000000000000009
sg28
F3.5
sg58
g62
sg57
Vy
sg80
S'27-hartleys_raspberries_jelly.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.8835808274588999
sg27
F2.5009999999999999
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p578
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg58
g62
sg57
Vy
sg80
S'8-liquorice_catherine_wheels.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.6001959197819815
sg27
F1.5509999999999999
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'35-raisins.png'
p587
sg26
F5.0000000000000009
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'49-yorkie.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'right'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F2.0000798276178102
sg27
F3.3010000000000002
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p596
sg26
F4.9000000000000021
sg28
F2.7999999999999998
sg58
g62
sg57
Vy
sg80
S'41-peanuts_redo.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'left'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.4833200192269942
sg27
F4.5510000000000002
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p605
sg26
F4.5
sg28
F4
sg58
g62
sg57
Vy
sg80
S'23-crunchie_redo.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F0.95019184287184544
sg27
F4.4509999999999996
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p614
sg26
F5.799999999999998
sg28
F3.6000000000000001
sg58
g62
sg57
Vy
sg80
S'13-mccoys_steak_crisps.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F2.7833324495277338
sg27
F3.2010000000000001
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'46-pistachios.png'
p623
sg26
F5.5999999999999988
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'29-beans.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F1.1000493790838846
sg27
F10.634
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'7-olives.png'
p632
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg58
g62
sg57
Vy
sg80
S'22-daim.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'right'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F1.9167095740112927
sg27
F1.8169999999999999
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p641
sg26
F5.6999999999999984
sg28
F4.0999999999999996
sg58
g62
sg57
Vy
sg80
S'19-caramello_redo.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'right'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F1.8666895885967278
sg27
F3.2010000000000001
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'18-mms.png'
p650
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg58
g62
sg57
Vy
sg80
S'43-mrporky_pork_crackles_redo.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F1.9001826912058277
sg27
F1.651
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p659
sg26
F5.799999999999998
sg28
F4.0999999999999996
sg58
g62
sg57
Vy
sg80
S'30-spaghetti_hoops.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'left'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.3835175355620777
sg27
F3.734
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'49-yorkie.png'
p668
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg58
g62
sg57
Vy
sg80
S'35-raisins.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F1.0500447889958195
sg27
F1.484
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p677
sg26
F3.6000000000000005
sg28
F3.1000000000000001
sg58
g62
sg57
Vy
sg80
S'38-maltesers.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'right'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F3.3499232229373774
sg27
F2.5169999999999999
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'4-corn.png'
p686
sg26
F5.8999999999999986
sg28
F2.8999999999999999
sg58
g62
sg57
Vy
sg80
S'10-bounty_redo.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.4166978849675615
sg27
F6.4009999999999998
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p695
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg58
g62
sg57
Vy
sg80
S'18-mms.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.0000692789685672
sg27
F1.651
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'22-daim.png'
p704
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'7-olives.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'left'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.4167061528278282
sg27
F1.6839999999999999
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p713
sg26
F5.2999999999999998
sg28
F3.8999999999999999
sg58
g62
sg57
Vy
sg80
S'51-mars.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.41671727167477
sg27
F10.967000000000001
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p722
sg26
F1
sg28
F3.1000000000000001
sg58
g62
sg57
Vy
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'right'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F2.5373778953508008e-05
sg27
F2.5510000000000002
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'50-polo.png'
p731
sg26
F3.2999999999999989
sg28
F4.2999999999999998
sg58
g62
sg57
Vy
sg80
S'48-twix.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'right'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F2.2834960961440629
sg27
F2.4510000000000001
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vy
sg58
g62
sg30
F414.84008960079927
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vy
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F20.716417233870288
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p743
sg82
S'9-yu_mango_pieces.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'9-yu_mango_pieces.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x0e\x0c(6\x07\xbcx'
tRp753
sa(dp754
g63
g64
sg81
S'53-cheestrings.png'
p755
sg82
S'47-picnic.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'47-picnic.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x0e\x0c)\x1a\x07nX'
tRp764
sa(dp765
g63
g64
sg81
S'11-snickers.png'
p766
sg82
S'54-frubes_yogurt.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'54-frubes_yogurt.png'
p771
sg33
g766
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x0e\x0c)&\x01,\xc8'
tRp775
sa(dp776
g63
g64
sg81
S'12-topic.png'
p777
sg82
S'39-mackerel.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'39-mackerel.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x0e\x0c)/\x0c%`'
tRp786
sa(dp787
g63
g64
sg81
S'32-hovis_crackers.png'
p788
sg82
S'24-food_doctor_apple_walnut_bar.png'
p789
sg56
Vr
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p792
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p794
sS'practice_loop.thisIndex'
p795
g59
(g98
S'\x04\x00\x00\x00'
tRp796
sg34
g752
(S'\x07\xdf\n\x0e\x0c)7\x0f\x0b\x90'
tRp797
sa(dp798
g63
g64
sg81
g743
sg82
S'37-nakd_cashew_cookie.png'
p799
sg56
Vr
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p802
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\n\x0e\x0c*\x03\x01\x86\xa0'
tRp806
sa(dp807
g63
g64
sg81
g777
sg82
S'12-topic.png'
p808
sg56
Vr
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p811
I0
sg83
g782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p812
sS'practice_loop.thisIndex'
p813
g59
(g98
S'\x06\x00\x00\x00'
tRp814
sg34
g752
(S'\x07\xdf\n\x0e\x0c*\r\x06Ex'
tRp815
sa(dp816
g63
g64
sg81
S'15-walnut_whip.png'
p817
sg82
S'28-maple_pecan.png'
p818
sg56
Vr
sS'practice_loop.thisN'
p819
I7
sS'practice_loop.thisTrialN'
p820
I7
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p821
I0
sg83
S'28-maple_pecan.png'
p822
sg33
g817
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p823
sS'practice_loop.thisIndex'
p824
g59
(g98
S'\x07\x00\x00\x00'
tRp825
sg34
g752
(S'\x07\xdf\n\x0e\x0c*\x14\r\x04\x08'
tRp826
sa(dp827
g63
g64
sg81
S'52-aero_mousse.png'
p828
sg82
S'52-aero_mousse.png'
p829
sg56
Vr
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p832
I0
sg83
S'14-discos_salt_vinegar.png'
p833
sg33
g828
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\n\x0e\x0c*!\x04]0'
tRp837
sa(dp838
g63
g64
sg81
g817
sg82
S'15-walnut_whip.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g822
sg33
g817
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S'\x07\xdf\n\x0e\x0c*(\x08w\xf8'
tRp846
sa(dp847
g63
g64
sg81
g755
sg82
S'53-cheestrings.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g760
sg33
g760
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x0e\x0c*1\x08\x7f\xc8'
tRp855
sa(dp856
g63
g64
sg81
g828
sg82
S'14-discos_salt_vinegar.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g833
sg33
g828
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x0e\x0c*8\x01kH'
tRp864
sa(dp865
g63
g64
sg81
g788
sg82
S'32-hovis_crackers.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g793
sg33
g788
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x0e\x0c+\x02\x0c\xf0\x80'
tRp873
sa(dp874
g63
g64
sg81
g766
sg82
S'11-snickers.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vy
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x0e\x0c+\x11\x08\x87\x98'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vy
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F58.965860578784486
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'43-mrporky_pork_crackles_redo.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'43-mrporky_pork_crackles_redo.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'18-mms.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
S'18-mms.png'
p907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
g899
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F3.033479702972727
sg34
g752
(S'\x07\xdf\n\x0e\x0c,\x1f\tV\xa0'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'38-maltesers.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'left'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'38-maltesers.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'6-sour_patch_kids.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p925
I0
sg909
S'6-sour_patch_kids.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F5.3998114927821916
sg34
g752
(S"\x07\xdf\n\x0e\x0c,'\nT\x88"
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'27-hartleys_raspberries_jelly.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'right'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'27-hartleys_raspberries_jelly.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'51-mars.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p942
I0
sg909
S'51-mars.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F2.0001719144770504
sg34
g752
(S'\x07\xdf\n\x0e\x0c,2\x01\xbdP'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'23-crunchie_redo.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'33-ambrosia_rice.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'33-ambrosia_rice.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p959
I0
sg909
S'23-crunchie_redo.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F2.4839098883044244
sg34
g752
(S'\x07\xdf\n\x0e\x0c,9\x02\x0bp'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'42-mrkipling_lemon_slices.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'right'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'42-mrkipling_lemon_slices.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'16-skips_prawn.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
S'16-skips_prawn.png'
p976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p977
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F2.9999791877994539
sg34
g752
(S'\x07\xdf\n\x0e\x0c-\x04\t\xf6\xc8'
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'3-ellas_strawberries_apples.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'left'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'13-mccoys_steak_crisps.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'13-mccoys_steak_crisps.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p993
I0
sg909
S'3-ellas_strawberries_apples.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F1.4668729640393394
sg34
g752
(S'\x07\xdf\n\x0e\x0c-\x0c\n{\x98'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'16-skips_prawn.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'right'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1004
g59
(g98
S'\x06\x00\x00\x00'
tRp1005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1006
I0
sg903
S'42-mrkipling_lemon_slices.png'
p1007
sS'block_loop.thisRepN'
p1008
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1009
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p1010
Nsg69
Vn
sS'block_loop.thisTrialN'
p1011
I0
sg39
F1.1000767485525103
sg34
g752
(S'\x07\xdf\n\x0e\x0c-\x13\x02\xee\x00'
tRp1012
sa(dp1013
S'trial_loop.thisTrialN'
p1014
I7
sg894
S'50-polo.png'
p1015
sS'block_loop.thisIndex'
p1016
g888
sg38
S'left'
p1017
sg58
g62
sS'trial_loop.thisN'
p1018
I7
sg33
S'48-twix.png'
p1019
sg63
g64
sS'trial_loop.thisIndex'
p1020
g59
(g98
S'\x07\x00\x00\x00'
tRp1021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1022
I0
sg903
S'48-twix.png'
p1023
sS'block_loop.thisRepN'
p1024
I0
sg906
S'50-polo.png'
p1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1026
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1027
Nsg69
Vn
sS'block_loop.thisTrialN'
p1028
I0
sg39
F4.0666905579323611
sg34
g752
(S'\x07\xdf\n\x0e\x0c-\x19\x04\xed\xb8'
tRp1029
sa(dp1030
S'trial_loop.thisTrialN'
p1031
I8
sg894
S'26-walkers_smoky_bacon.png'
p1032
sS'block_loop.thisIndex'
p1033
g888
sg38
S'right'
p1034
sg58
g62
sS'trial_loop.thisN'
p1035
I8
sg33
S'44-crunch.png'
p1036
sg63
g64
sS'trial_loop.thisIndex'
p1037
g59
(g98
S'\x08\x00\x00\x00'
tRp1038
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1039
I0
sg903
S'44-crunch.png'
p1040
sS'block_loop.thisRepN'
p1041
I0
sg906
S'26-walkers_smoky_bacon.png'
p1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1043
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1044
Nsg69
Vn
sS'block_loop.thisTrialN'
p1045
I0
sg39
F1.2337073257235716
sg34
g752
(S'\x07\xdf\n\x0e\x0c-"\x06`\xd0'
tRp1046
sa(dp1047
S'trial_loop.thisTrialN'
p1048
I9
sg894
g895
sS'block_loop.thisIndex'
p1049
g888
sg38
S'right'
p1050
sg58
g62
sS'trial_loop.thisN'
p1051
I9
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1052
g59
(g98
S'\t\x00\x00\x00'
tRp1053
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1054
I0
sg903
g904
sS'block_loop.thisRepN'
p1055
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1056
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1057
Nsg69
Vn
sS'block_loop.thisTrialN'
p1058
I0
sg39
F2.8167956167794728
sg34
g752
(S'\x07\xdf\n\x0e\x0c-(\n\x83h'
tRp1059
sa(dp1060
S'trial_loop.thisTrialN'
p1061
I10
sg894
S'36-fig_rolls.png'
p1062
sS'block_loop.thisIndex'
p1063
g888
sg38
S'left'
p1064
sg58
g62
sS'trial_loop.thisN'
p1065
I10
sg33
S'36-fig_rolls.png'
p1066
sg63
g64
sS'trial_loop.thisIndex'
p1067
g59
(g98
S'\n\x00\x00\x00'
tRp1068
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1069
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1070
sS'block_loop.thisRepN'
p1071
I0
sg906
S'34-hula_hoops_bbq_beef_redo.png'
p1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1073
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p1074
Nsg69
Vn
sS'block_loop.thisTrialN'
p1075
I0
sg39
F2.2835023683142026
sg34
g752
(S'\x07\xdf\n\x0e\x0c-0\x08-\xc0'
tRp1076
sa(dp1077
S'trial_loop.thisTrialN'
p1078
I11
sg894
S'35-raisins.png'
p1079
sS'block_loop.thisIndex'
p1080
g888
sg38
S'right'
p1081
sg58
g62
sS'trial_loop.thisN'
p1082
I11
sg33
S'49-yorkie.png'
p1083
sg63
g64
sS'trial_loop.thisIndex'
p1084
g59
(g98
S'\x0b\x00\x00\x00'
tRp1085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1086
I0
sg903
S'49-yorkie.png'
p1087
sS'block_loop.thisRepN'
p1088
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1089
I0
sg909
S'35-raisins.png'
p1090
sg55
g11
sS'block_loop.thisTrial'
p1091
Nsg69
Vn
sS'block_loop.thisTrialN'
p1092
I0
sg39
F2.5167201796807603
sg34
g752
(S'\x07\xdf\n\x0e\x0c-7\r\x00 '
tRp1093
sa(dp1094
S'trial_loop.thisTrialN'
p1095
I12
sg894
S'44-crunch.png'
p1096
sS'block_loop.thisIndex'
p1097
g888
sg38
S'left'
p1098
sg58
g62
sS'trial_loop.thisN'
p1099
I12
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p1100
g59
(g98
S'\x0c\x00\x00\x00'
tRp1101
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1102
I0
sg903
S'26-walkers_smoky_bacon.png'
p1103
sS'block_loop.thisRepN'
p1104
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1105
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1106
Nsg69
Vn
sS'block_loop.thisTrialN'
p1107
I0
sg39
F1.4834540155857212
sg34
g752
(S'\x07\xdf\n\x0e\x0c.\x03\x06&8'
tRp1108
sa(dp1109
S'trial_loop.thisTrialN'
p1110
I13
sg894
S'4-corn.png'
p1111
sS'block_loop.thisIndex'
p1112
g888
sg38
S'right'
p1113
sg58
g62
sS'trial_loop.thisN'
p1114
I13
sg33
S'4-corn.png'
p1115
sg63
g64
sS'trial_loop.thisIndex'
p1116
g59
(g98
S'\r\x00\x00\x00'
tRp1117
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1118
I0
sg903
S'10-bounty_redo.png'
p1119
sS'block_loop.thisRepN'
p1120
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1121
I0
sg909
S'10-bounty_redo.png'
p1122
sg55
g11
sS'block_loop.thisTrial'
p1123
Nsg69
Vn
sS'block_loop.thisTrialN'
p1124
I0
sg39
F1.8335579910581146
sg34
g752
(S'\x07\xdf\n\x0e\x0c.\t\x0e\x15x'
tRp1125
sa(dp1126
S'trial_loop.thisTrialN'
p1127
I14
sg894
S'2-steamed_puddings.png'
p1128
sS'block_loop.thisIndex'
p1129
g888
sg38
S'right'
p1130
sg58
g62
sS'trial_loop.thisN'
p1131
I14
sg33
S'2-steamed_puddings.png'
p1132
sg63
g64
sS'trial_loop.thisIndex'
p1133
g59
(g98
S'\x0e\x00\x00\x00'
tRp1134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1135
I0
sg903
S'20-fruit_pastilles.png'
p1136
sS'block_loop.thisRepN'
p1137
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1138
I0
sg909
S'20-fruit_pastilles.png'
p1139
sg55
g11
sS'block_loop.thisTrial'
p1140
Nsg69
Vn
sS'block_loop.thisTrialN'
p1141
I0
sg39
F2.1501432050445146
sg34
g752
(S'\x07\xdf\n\x0e\x0c.\x10\x0c\x028'
tRp1142
sa(dp1143
S'trial_loop.thisTrialN'
p1144
I15
sg894
g966
sS'block_loop.thisIndex'
p1145
g888
sg38
S'left'
p1146
sg58
g62
sS'trial_loop.thisN'
p1147
I15
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1148
g59
(g98
S'\x0f\x00\x00\x00'
tRp1149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1150
I0
sg903
g974
sS'block_loop.thisRepN'
p1151
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1152
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p1153
Nsg69
Vn
sS'block_loop.thisTrialN'
p1154
I0
sg39
F3.4666768161778236
sg34
g752
(S'\x07\xdf\n\x0e\x0c.\x17\x0e\xf08'
tRp1155
sa(dp1156
S'trial_loop.thisTrialN'
p1157
I16
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1158
sS'block_loop.thisIndex'
p1159
g888
sg38
S'right'
p1160
sg58
g62
sS'trial_loop.thisN'
p1161
I16
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1162
sg63
g64
sS'trial_loop.thisIndex'
p1163
g59
(g98
S'\x10\x00\x00\x00'
tRp1164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1165
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1166
sS'block_loop.thisRepN'
p1167
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1168
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1169
sg55
g11
sS'block_loop.thisTrial'
p1170
Nsg69
Vn
sS'block_loop.thisTrialN'
p1171
I0
sg39
F1.1668975965612844
sg34
g752
(S'\x07\xdf\n\x0e\x0c. \x07\x1cP'
tRp1172
sa(dp1173
S'trial_loop.thisTrialN'
p1174
I17
sg894
S'5-pineapple.png'
p1175
sS'block_loop.thisIndex'
p1176
g888
sg38
S'right'
p1177
sg58
g62
sS'trial_loop.thisN'
p1178
I17
sg33
S'5-pineapple.png'
p1179
sg63
g64
sS'trial_loop.thisIndex'
p1180
g59
(g98
S'\x11\x00\x00\x00'
tRp1181
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1182
I0
sg903
S'40-sardines.png'
p1183
sS'block_loop.thisRepN'
p1184
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1185
I0
sg909
S'40-sardines.png'
p1186
sg55
g11
sS'block_loop.thisTrial'
p1187
Nsg69
Vn
sS'block_loop.thisTrialN'
p1188
I0
sg39
F3.0168017178903028
sg34
g752
(S'\x07\xdf\n\x0e\x0c.&\nH\xd0'
tRp1189
sa(dp1190
S'trial_loop.thisTrialN'
p1191
I18
sg894
g1111
sS'block_loop.thisIndex'
p1192
g888
sg38
S'right'
p1193
sg58
g62
sS'trial_loop.thisN'
p1194
I18
sg33
g1122
sg63
g64
sS'trial_loop.thisIndex'
p1195
g59
(g98
S'\x12\x00\x00\x00'
tRp1196
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1197
I0
sg903
g1119
sS'block_loop.thisRepN'
p1198
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1199
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p1200
Nsg69
Vn
sS'block_loop.thisTrialN'
p1201
I0
sg39
F1.1001936389930052
sg34
g752
(S'\x07\xdf\n\x0e\x0c..\x0b\x0c '
tRp1202
sa(dp1203
S'trial_loop.thisTrialN'
p1204
I19
sg894
S'41-peanuts_redo.png'
p1205
sS'block_loop.thisIndex'
p1206
g888
sg38
S'right'
p1207
sg58
g62
sS'trial_loop.thisN'
p1208
I19
sg33
S'41-peanuts_redo.png'
p1209
sg63
g64
sS'trial_loop.thisIndex'
p1210
g59
(g98
S'\x13\x00\x00\x00'
tRp1211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1212
I0
sg903
S'45-chewy_nougat_redo.png'
p1213
sS'block_loop.thisRepN'
p1214
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1215
I0
sg909
S'45-chewy_nougat_redo.png'
p1216
sg55
g11
sS'block_loop.thisTrial'
p1217
Nsg69
Vn
sS'block_loop.thisTrialN'
p1218
I0
sg39
F1.7501178882857857
sg34
g752
(S'\x07\xdf\n\x0e\x0c.4\r\x0b\xd8'
tRp1219
sa(dp1220
S'trial_loop.thisTrialN'
p1221
I20
sg894
S'1-treacle_cookies.png'
p1222
sS'block_loop.thisIndex'
p1223
g888
sg38
S'left'
p1224
sg58
g62
sS'trial_loop.thisN'
p1225
I20
sg33
S'1-treacle_cookies.png'
p1226
sg63
g64
sS'trial_loop.thisIndex'
p1227
g59
(g98
S'\x14\x00\x00\x00'
tRp1228
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1229
I0
sg903
S'21-nakd_banana_crunch.png'
p1230
sS'block_loop.thisRepN'
p1231
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1232
I0
sg909
S'21-nakd_banana_crunch.png'
p1233
sg55
g11
sS'block_loop.thisTrial'
p1234
Nsg69
Vn
sS'block_loop.thisTrialN'
p1235
I0
sg39
F1.2835502648849797
sg34
g752
(S'\x07\xdf\n\x0e\x0c.;\t\xc7\xe8'
tRp1236
sa(dp1237
S'trial_loop.thisTrialN'
p1238
I21
sg894
g932
sS'block_loop.thisIndex'
p1239
g888
sg38
S'right'
p1240
sg58
g62
sS'trial_loop.thisN'
p1241
I21
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1242
g59
(g98
S'\x15\x00\x00\x00'
tRp1243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1244
I0
sg903
g940
sS'block_loop.thisRepN'
p1245
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1246
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p1247
Nsg69
Vn
sS'block_loop.thisTrialN'
p1248
I0
sg39
F4.733417665509478
sg34
g752
(S'\x07\xdf\n\x0e\x0c/\x05\x0e\xa2\x18'
tRp1249
sa(dp1250
S'trial_loop.thisTrialN'
p1251
I22
sg894
g1205
sS'block_loop.thisIndex'
p1252
g888
sg38
S'left'
p1253
sg58
g62
sS'trial_loop.thisN'
p1254
I22
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1255
g59
(g98
S'\x16\x00\x00\x00'
tRp1256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1257
I0
sg903
g1213
sS'block_loop.thisRepN'
p1258
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1259
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p1260
Nsg69
Vn
sS'block_loop.thisTrialN'
p1261
I0
sg39
F1.7005352441783543
sg34
g752
(S'\x07\xdf\n\x0e\x0c/\x0f\x0b\x0c '
tRp1262
sa(dp1263
S'trial_loop.thisTrialN'
p1264
I23
sg894
g895
sS'block_loop.thisIndex'
p1265
g888
sg38
S'right'
p1266
sg58
g62
sS'trial_loop.thisN'
p1267
I23
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1268
g59
(g98
S'\x17\x00\x00\x00'
tRp1269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1270
I0
sg903
g904
sS'block_loop.thisRepN'
p1271
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1272
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1273
Nsg69
Vn
sS'block_loop.thisTrialN'
p1274
I0
sg39
F2.0502717275094255
sg34
g752
(S'\x07\xdf\n\x0e\x0c/\x16\x07\x14\x80'
tRp1275
sa(dp1276
S'trial_loop.thisTrialN'
p1277
I24
sg894
g949
sS'block_loop.thisIndex'
p1278
g888
sg38
S'right'
p1279
sg58
g62
sS'trial_loop.thisN'
p1280
I24
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1281
g59
(g98
S'\x18\x00\x00\x00'
tRp1282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1283
I0
sg903
g957
sS'block_loop.thisRepN'
p1284
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1285
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1286
Nsg69
Vn
sS'block_loop.thisTrialN'
p1287
I0
sg39
F1.4168270346494864
sg34
g752
(S'\x07\xdf\n\x0e\x0c/\x1d\x08T\xd0'
tRp1288
sa(dp1289
S'trial_loop.thisTrialN'
p1290
I25
sg894
S'6-sour_patch_kids.png'
p1291
sS'block_loop.thisIndex'
p1292
g888
sg38
S'left'
p1293
sg58
g62
sS'trial_loop.thisN'
p1294
I25
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1295
g59
(g98
S'\x19\x00\x00\x00'
tRp1296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1297
I0
sg903
S'38-maltesers.png'
p1298
sS'block_loop.thisRepN'
p1299
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1300
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1301
Nsg69
Vn
sS'block_loop.thisTrialN'
p1302
I0
sg39
F2.2831554032750319
sg34
g752
(S'\x07\xdf\n\x0e\x0c/#\x0f\x17H'
tRp1303
sa(dp1304
S'trial_loop.thisTrialN'
p1305
I26
sg894
S'21-nakd_banana_crunch.png'
p1306
sS'block_loop.thisIndex'
p1307
g888
sg38
S'left'
p1308
sg58
g62
sS'trial_loop.thisN'
p1309
I26
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p1310
g59
(g98
S'\x1a\x00\x00\x00'
tRp1311
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1312
I0
sg903
S'1-treacle_cookies.png'
p1313
sS'block_loop.thisRepN'
p1314
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1315
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p1316
Nsg69
Vn
sS'block_loop.thisTrialN'
p1317
I0
sg39
F2.2835345844600852
sg34
g752
(S'\x07\xdf\n\x0e\x0c/+\x04\xa7h'
tRp1318
sa(dp1319
S'trial_loop.thisTrialN'
p1320
I27
sg894
S'31-hobnobs.png'
p1321
sS'block_loop.thisIndex'
p1322
g888
sg38
S'left'
p1323
sg58
g62
sS'trial_loop.thisN'
p1324
I27
sg33
S'31-hobnobs.png'
p1325
sg63
g64
sS'trial_loop.thisIndex'
p1326
g59
(g98
S'\x1b\x00\x00\x00'
tRp1327
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1328
I0
sg903
S'25-kitkat.png'
p1329
sS'block_loop.thisRepN'
p1330
I0
sg906
S'25-kitkat.png'
p1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1332
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p1333
Nsg69
Vn
sS'block_loop.thisTrialN'
p1334
I0
sg39
F1.2836127014861631
sg34
g752
(S'\x07\xdf\n\x0e\x0c/2\t}\xb0'
tRp1335
sa(dp1336
S'trial_loop.thisTrialN'
p1337
I28
sg894
S'13-mccoys_steak_crisps.png'
p1338
sS'block_loop.thisIndex'
p1339
g888
sg38
S'right'
p1340
sg58
g62
sS'trial_loop.thisN'
p1341
I28
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1342
g59
(g98
S'\x1c\x00\x00\x00'
tRp1343
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1344
I0
sg903
S'3-ellas_strawberries_apples.png'
p1345
sS'block_loop.thisRepN'
p1346
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1347
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p1348
Nsg69
Vn
sS'block_loop.thisTrialN'
p1349
I0
sg39
F2.7000728141915715
sg34
g752
(S'\x07\xdf\n\x0e\x0c/8\x0eW\xe0'
tRp1350
sa(dp1351
S'trial_loop.thisTrialN'
p1352
I29
sg894
S'7-olives.png'
p1353
sS'block_loop.thisIndex'
p1354
g888
sg38
S'right'
p1355
sg58
g62
sS'trial_loop.thisN'
p1356
I29
sg33
S'22-daim.png'
p1357
sg63
g64
sS'trial_loop.thisIndex'
p1358
g59
(g98
S'\x1d\x00\x00\x00'
tRp1359
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1360
I0
sg903
S'22-daim.png'
p1361
sS'block_loop.thisRepN'
p1362
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1363
I0
sg909
S'7-olives.png'
p1364
sg55
g11
sS'block_loop.thisTrial'
p1365
Nsg69
Vn
sS'block_loop.thisTrialN'
p1366
I0
sg39
F1.0335096383296332
sg34
g752
(S'\x07\xdf\n\x0e\x0c0\x04\nT\x88'
tRp1367
sa(dp1368
S'trial_loop.thisTrialN'
p1369
I30
sg894
g1205
sS'block_loop.thisIndex'
p1370
g888
sg38
S'right'
p1371
sg58
g62
sS'trial_loop.thisN'
p1372
I30
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1373
g59
(g98
S'\x1e\x00\x00\x00'
tRp1374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1375
I0
sg903
g1213
sS'block_loop.thisRepN'
p1376
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1377
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p1378
Nsg69
Vn
sS'block_loop.thisTrialN'
p1379
I0
sg39
F1.7167479482877752
sg34
g752
(S'\x07\xdf\n\x0e\x0c0\n\x0bb\x10'
tRp1380
sa(dp1381
S'trial_loop.thisTrialN'
p1382
I31
sg894
g1000
sS'block_loop.thisIndex'
p1383
g888
sg38
S'right'
p1384
sg58
g62
sS'trial_loop.thisN'
p1385
I31
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1386
g59
(g98
S'\x1f\x00\x00\x00'
tRp1387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1388
I0
sg903
g1007
sS'block_loop.thisRepN'
p1389
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1390
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p1391
Nsg69
Vn
sS'block_loop.thisTrialN'
p1392
I0
sg39
F1.6166318561236039
sg34
g752
(S'\x07\xdf\n\x0e\x0c0\x11\x07f\x88'
tRp1393
sa(dp1394
S'trial_loop.thisTrialN'
p1395
I32
sg894
S'19-caramello_redo.png'
p1396
sS'block_loop.thisIndex'
p1397
g888
sg38
S'left'
p1398
sg58
g62
sS'trial_loop.thisN'
p1399
I32
sg33
S'30-spaghetti_hoops.png'
p1400
sg63
g64
sS'trial_loop.thisIndex'
p1401
g59
(g98
S' \x00\x00\x00'
tRp1402
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1403
I0
sg903
S'30-spaghetti_hoops.png'
p1404
sS'block_loop.thisRepN'
p1405
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1406
I0
sg909
S'19-caramello_redo.png'
p1407
sg55
g11
sS'block_loop.thisTrial'
p1408
Nsg69
Vn
sS'block_loop.thisTrialN'
p1409
I0
sg39
F1.1506415574594939
sg34
g752
(S'\x07\xdf\n\x0e\x0c0\x18\x02:P'
tRp1410
sa(dp1411
S'trial_loop.thisTrialN'
p1412
I33
sg894
S'46-pistachios.png'
p1413
sS'block_loop.thisIndex'
p1414
g888
sg38
S'left'
p1415
sg58
g62
sS'trial_loop.thisN'
p1416
I33
sg33
S'29-beans.png'
p1417
sg63
g64
sS'trial_loop.thisIndex'
p1418
g59
(g98
S'!\x00\x00\x00'
tRp1419
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1420
I0
sg903
S'29-beans.png'
p1421
sS'block_loop.thisRepN'
p1422
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1423
I0
sg909
S'46-pistachios.png'
p1424
sg55
g11
sS'block_loop.thisTrial'
p1425
Nsg69
Vn
sS'block_loop.thisTrialN'
p1426
I0
sg39
F1.1168773260483249
sg34
g752
(S'\x07\xdf\n\x0e\x0c0\x1e\x04\xf1\xa0'
tRp1427
sa(dp1428
S'trial_loop.thisTrialN'
p1429
I34
sg894
S'33-ambrosia_rice.png'
p1430
sS'block_loop.thisIndex'
p1431
g888
sg38
S'left'
p1432
sg58
g62
sS'trial_loop.thisN'
p1433
I34
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1434
g59
(g98
S'"\x00\x00\x00'
tRp1435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1436
I0
sg903
S'23-crunchie_redo.png'
p1437
sS'block_loop.thisRepN'
p1438
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1439
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1440
Nsg69
Vn
sS'block_loop.thisTrialN'
p1441
I0
sg39
F1.4835024823537424
sg34
g752
(S'\x07\xdf\n\x0e\x0c0$\x07+\xf0'
tRp1442
sa(dp1443
S'trial_loop.thisTrialN'
p1444
I35
sg894
g1396
sS'block_loop.thisIndex'
p1445
g888
sg38
S'right'
p1446
sg58
g62
sS'trial_loop.thisN'
p1447
I35
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p1448
g59
(g98
S'#\x00\x00\x00'
tRp1449
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1450
I0
sg903
g1404
sS'block_loop.thisRepN'
p1451
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1452
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p1453
Nsg69
Vn
sS'block_loop.thisTrialN'
p1454
I0
sg39
F1.833506673303873
sg34
g752
(S'\x07\xdf\n\x0e\x0c0*\x0f\x1f\x18'
tRp1455
sa(dp1456
S'trial_loop.thisTrialN'
p1457
I36
sg894
g895
sS'block_loop.thisIndex'
p1458
g888
sg38
S'right'
p1459
sg58
g62
sS'trial_loop.thisN'
p1460
I36
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1461
g59
(g98
S'$\x00\x00\x00'
tRp1462
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1463
I0
sg903
g904
sS'block_loop.thisRepN'
p1464
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1465
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1466
Nsg69
Vn
sS'block_loop.thisTrialN'
p1467
I0
sg39
F0.95019127267460135
sg34
g752
(S'\x07\xdf\n\x0e\x0c01\r\x0b\xd8'
tRp1468
sa(dp1469
S'trial_loop.thisTrialN'
p1470
I37
sg894
S'48-twix.png'
p1471
sS'block_loop.thisIndex'
p1472
g888
sg38
S'left'
p1473
sg58
g62
sS'trial_loop.thisN'
p1474
I37
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1475
g59
(g98
S'%\x00\x00\x00'
tRp1476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1477
I0
sg903
S'50-polo.png'
p1478
sS'block_loop.thisRepN'
p1479
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1480
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1481
Nsg69
Vn
sS'block_loop.thisTrialN'
p1482
I0
sg39
F2.0005345599415705
sg34
g752
(S'\x07\xdf\n\x0e\x0c07\x0c\xe4\xc8'
tRp1483
sa(dp1484
S'trial_loop.thisTrialN'
p1485
I38
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1486
sS'block_loop.thisIndex'
p1487
g888
sg38
S'left'
p1488
sg58
g62
sS'trial_loop.thisN'
p1489
I38
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1490
g59
(g98
S'&\x00\x00\x00'
tRp1491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1492
I0
sg903
S'36-fig_rolls.png'
p1493
sS'block_loop.thisRepN'
p1494
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1495
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p1496
Nsg69
Vn
sS'block_loop.thisTrialN'
p1497
I0
sg39
F1.4667880046458777
sg34
g752
(S'\x07\xdf\n\x0e\x0c1\x02\r2\xe8'
tRp1498
sa(dp1499
S'trial_loop.thisTrialN'
p1500
I39
sg894
g1032
sS'block_loop.thisIndex'
p1501
g888
sg38
S'left'
p1502
sg58
g62
sS'trial_loop.thisN'
p1503
I39
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p1504
g59
(g98
S"'\x00\x00\x00"
tRp1505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1506
I0
sg903
g1040
sS'block_loop.thisRepN'
p1507
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1508
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1509
Nsg69
Vn
sS'block_loop.thisTrialN'
p1510
I0
sg39
F1.2001095919154068
sg34
g752
(S'\x07\xdf\n\x0e\x0c1\t\x05\xa98'
tRp1511
sa(dp1512
S'trial_loop.thisTrialN'
p1513
I40
sg894
g1128
sS'block_loop.thisIndex'
p1514
g888
sg38
S'left'
p1515
sg58
g62
sS'trial_loop.thisN'
p1516
I40
sg33
g1139
sg63
g64
sS'trial_loop.thisIndex'
p1517
g59
(g98
S'(\x00\x00\x00'
tRp1518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1519
I0
sg903
g1136
sS'block_loop.thisRepN'
p1520
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1521
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p1522
Nsg69
Vn
sS'block_loop.thisTrialN'
p1523
I0
sg39
F2.1335082698565202
sg34
g752
(S'\x07\xdf\n\x0e\x0c1\x0f\tR\xb8'
tRp1524
sa(dp1525
S'trial_loop.thisTrialN'
p1526
I41
sg894
g949
sS'block_loop.thisIndex'
p1527
g888
sg38
S'right'
p1528
sg58
g62
sS'trial_loop.thisN'
p1529
I41
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1530
g59
(g98
S')\x00\x00\x00'
tRp1531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1532
I0
sg903
g957
sS'block_loop.thisRepN'
p1533
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1534
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1535
Nsg69
Vn
sS'block_loop.thisTrialN'
p1536
I0
sg39
F1.0668542045491449
sg34
g752
(S'\x07\xdf\n\x0e\x0c1\x16\x0b\xc3\xb8'
tRp1537
sa(dp1538
S'trial_loop.thisTrialN'
p1539
I42
sg894
S'25-kitkat.png'
p1540
sS'block_loop.thisIndex'
p1541
g888
sg38
S'right'
p1542
sg58
g62
sS'trial_loop.thisN'
p1543
I42
sg33
g1331
sg63
g64
sS'trial_loop.thisIndex'
p1544
g59
(g98
S'*\x00\x00\x00'
tRp1545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1546
I0
sg903
S'31-hobnobs.png'
p1547
sS'block_loop.thisRepN'
p1548
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1549
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p1550
Nsg69
Vn
sS'block_loop.thisTrialN'
p1551
I0
sg39
F2.2838675796665484
sg34
g752
(S'\x07\xdf\n\x0e\x0c1\x1c\rJX'
tRp1552
sa(dp1553
S'trial_loop.thisTrialN'
p1554
I43
sg894
g1396
sS'block_loop.thisIndex'
p1555
g888
sg38
S'right'
p1556
sg58
g62
sS'trial_loop.thisN'
p1557
I43
sg33
g1407
sg63
g64
sS'trial_loop.thisIndex'
p1558
g59
(g98
S'+\x00\x00\x00'
tRp1559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1560
I0
sg903
g1404
sS'block_loop.thisRepN'
p1561
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1562
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p1563
Nsg69
Vn
sS'block_loop.thisTrialN'
p1564
I0
sg39
F1.566846221787273
sg34
g752
(S'\x07\xdf\n\x0e\x0c1$\x02\xdax'
tRp1565
sa(dp1566
S'trial_loop.thisTrialN'
p1567
I44
sg894
S'18-mms.png'
p1568
sS'block_loop.thisIndex'
p1569
g888
sg38
S'left'
p1570
sg58
g62
sS'trial_loop.thisN'
p1571
I44
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1572
g59
(g98
S',\x00\x00\x00'
tRp1573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1574
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1575
sS'block_loop.thisRepN'
p1576
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1577
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1578
Nsg69
Vn
sS'block_loop.thisTrialN'
p1579
I0
sg39
F1.1835208427060024
sg34
g752
(S'\x07\xdf\n\x0e\x0c1*\x0b\xfeP'
tRp1580
sa(dp1581
S'trial_loop.thisTrialN'
p1582
I45
sg894
S'22-daim.png'
p1583
sS'block_loop.thisIndex'
p1584
g888
sg38
S'left'
p1585
sg58
g62
sS'trial_loop.thisN'
p1586
I45
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p1587
g59
(g98
S'-\x00\x00\x00'
tRp1588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1589
I0
sg903
S'7-olives.png'
p1590
sS'block_loop.thisRepN'
p1591
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1592
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p1593
Nsg69
Vn
sS'block_loop.thisTrialN'
p1594
I0
sg39
F1.7835106361744693
sg34
g752
(S"\x07\xdf\n\x0e\x0c11\x00'\x10"
tRp1595
sa(dp1596
S'trial_loop.thisTrialN'
p1597
I46
sg894
g1306
sS'block_loop.thisIndex'
p1598
g888
sg38
S'right'
p1599
sg58
g62
sS'trial_loop.thisN'
p1600
I46
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p1601
g59
(g98
S'.\x00\x00\x00'
tRp1602
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1603
I0
sg903
g1313
sS'block_loop.thisRepN'
p1604
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1605
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p1606
Nsg69
Vn
sS'block_loop.thisTrialN'
p1607
I0
sg39
F1.9501901322801132
sg34
g752
(S'\x07\xdf\n\x0e\x0c17\x0c\x9ex'
tRp1608
sa(dp1609
S'trial_loop.thisTrialN'
p1610
I47
sg894
S'10-bounty_redo.png'
p1611
sS'block_loop.thisIndex'
p1612
g888
sg38
S'right'
p1613
sg58
g62
sS'trial_loop.thisN'
p1614
I47
sg33
g1122
sg63
g64
sS'trial_loop.thisIndex'
p1615
g59
(g98
S'/\x00\x00\x00'
tRp1616
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1617
I0
sg903
S'4-corn.png'
p1618
sS'block_loop.thisRepN'
p1619
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1620
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p1621
Nsg69
Vn
sS'block_loop.thisTrialN'
p1622
I0
sg39
F3.216997694692509
sg34
g752
(S'\x07\xdf\n\x0e\x0c2\x02\x0c8\xe8'
tRp1623
sa(dp1624
S'trial_loop.thisTrialN'
p1625
I48
sg894
g1471
sS'block_loop.thisIndex'
p1626
g888
sg38
S'right'
p1627
sg58
g62
sS'trial_loop.thisN'
p1628
I48
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p1629
g59
(g98
S'0\x00\x00\x00'
tRp1630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1631
I0
sg903
g1478
sS'block_loop.thisRepN'
p1632
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1633
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1634
Nsg69
Vn
sS'block_loop.thisTrialN'
p1635
I0
sg39
F1.733502339804545
sg34
g752
(S'\x07\xdf\n\x0e\x0c2\x0b\x00\xcf\x08'
tRp1636
sa(dp1637
S'trial_loop.thisTrialN'
p1638
I49
sg894
S'29-beans.png'
p1639
sS'block_loop.thisIndex'
p1640
g888
sg38
S'right'
p1641
sg58
g62
sS'trial_loop.thisN'
p1642
I49
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p1643
g59
(g98
S'1\x00\x00\x00'
tRp1644
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1645
I0
sg903
S'46-pistachios.png'
p1646
sS'block_loop.thisRepN'
p1647
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1648
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p1649
Nsg69
Vn
sS'block_loop.thisTrialN'
p1650
I0
sg39
F3.2001349656939055
sg34
g752
(S'\x07\xdf\n\x0e\x0c2\x11\x0c\x8e\xd8'
tRp1651
sa(dp1652
S'trial_loop.thisTrialN'
p1653
I50
sg894
g1486
sS'block_loop.thisIndex'
p1654
g888
sg38
S'right'
p1655
sg58
g62
sS'trial_loop.thisN'
p1656
I50
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1657
g59
(g98
S'2\x00\x00\x00'
tRp1658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1659
I0
sg903
g1493
sS'block_loop.thisRepN'
p1660
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1661
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p1662
Nsg69
Vn
sS'block_loop.thisTrialN'
p1663
I0
sg39
F2.8834764813582296
sg34
g752
(S'\x07\xdf\n\x0e\x0c2\x1a\x00\xea`'
tRp1664
sa(dp1665
S'trial_loop.thisTrialN'
p1666
I51
sg894
g1568
sS'block_loop.thisIndex'
p1667
g888
sg38
S'left'
p1668
sg58
g62
sS'trial_loop.thisN'
p1669
I51
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1670
g59
(g98
S'3\x00\x00\x00'
tRp1671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1672
I0
sg903
g1575
sS'block_loop.thisRepN'
p1673
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1674
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1675
Nsg69
Vn
sS'block_loop.thisTrialN'
p1676
I0
sg39
F1.0502335242922527
sg34
g752
(S'\x07\xdf\n\x0e\x0c2!\x0e\xcd\x10'
tRp1677
sa(dp1678
S'trial_loop.thisTrialN'
p1679
I52
sg894
g1611
sS'block_loop.thisIndex'
p1680
g888
sg38
S'left'
p1681
sg58
g62
sS'trial_loop.thisN'
p1682
I52
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p1683
g59
(g98
S'4\x00\x00\x00'
tRp1684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1685
I0
sg903
g1618
sS'block_loop.thisRepN'
p1686
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1687
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p1688
Nsg69
Vn
sS'block_loop.thisTrialN'
p1689
I0
sg39
F1.0505240398019851
sg34
g752
(S'\x07\xdf\n\x0e\x0c2(\x00\xd2\xf0'
tRp1690
sa(dp1691
S'trial_loop.thisTrialN'
p1692
I53
sg894
S'8-liquorice_catherine_wheels.png'
p1693
sS'block_loop.thisIndex'
p1694
g888
sg38
S'right'
p1695
sg58
g62
sS'trial_loop.thisN'
p1696
I53
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p1697
g59
(g98
S'5\x00\x00\x00'
tRp1698
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1699
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p1700
sS'block_loop.thisRepN'
p1701
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1702
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p1703
Nsg69
Vn
sS'block_loop.thisTrialN'
p1704
I0
sg39
F2.4501502184712081
sg34
g752
(S'\x07\xdf\n\x0e\x0c2.\x02\x1b\x10'
tRp1705
sa(dp1706
S'trial_loop.thisTrialN'
p1707
I54
sg894
S'40-sardines.png'
p1708
sS'block_loop.thisIndex'
p1709
g888
sg38
S'left'
p1710
sg58
g62
sS'trial_loop.thisN'
p1711
I54
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p1712
g59
(g98
S'6\x00\x00\x00'
tRp1713
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1714
I0
sg903
S'5-pineapple.png'
p1715
sS'block_loop.thisRepN'
p1716
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1717
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p1718
Nsg69
Vn
sS'block_loop.thisTrialN'
p1719
I0
sg39
F2.3168147183878318
sg34
g752
(S'\x07\xdf\n\x0e\x0c25\t\x8dP'
tRp1720
sa(dp1721
S'trial_loop.thisTrialN'
p1722
I55
sg894
g1693
sS'block_loop.thisIndex'
p1723
g888
sg38
S'right'
p1724
sg58
g62
sS'trial_loop.thisN'
p1725
I55
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p1726
g59
(g98
S'7\x00\x00\x00'
tRp1727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1728
I0
sg903
g1700
sS'block_loop.thisRepN'
p1729
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1730
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p1731
Nsg69
Vn
sS'block_loop.thisTrialN'
p1732
I0
sg39
F1.5335170508938063
sg34
g752
(S'\x07\xdf\n\x0e\x0c3\x00\x0e\xd8\xc8'
tRp1733
sa(dp1734
S'trial_loop.thisTrialN'
p1735
I56
sg894
g1540
sS'block_loop.thisIndex'
p1736
g888
sg38
S'left'
p1737
sg58
g62
sS'trial_loop.thisN'
p1738
I56
sg33
g1331
sg63
g64
sS'trial_loop.thisIndex'
p1739
g59
(g98
S'8\x00\x00\x00'
tRp1740
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1741
I0
sg903
g1547
sS'block_loop.thisRepN'
p1742
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1743
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p1744
Nsg69
Vn
sS'block_loop.thisTrialN'
p1745
I0
sg39
F1.3002020208932663
sg34
g752
(S'\x07\xdf\n\x0e\x0c3\x07\x08AH'
tRp1746
sa(dp1747
S'trial_loop.thisTrialN'
p1748
I57
sg894
g1062
sS'block_loop.thisIndex'
p1749
g888
sg38
S'right'
p1750
sg58
g62
sS'trial_loop.thisN'
p1751
I57
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1752
g59
(g98
S'9\x00\x00\x00'
tRp1753
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1754
I0
sg903
g1070
sS'block_loop.thisRepN'
p1755
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1756
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p1757
Nsg69
Vn
sS'block_loop.thisTrialN'
p1758
I0
sg39
F1.2168713959968045
sg34
g752
(S'\x07\xdf\n\x0e\x0c3\r\rV\x10'
tRp1759
sa(dp1760
S'trial_loop.thisTrialN'
p1761
I58
sg894
g1583
sS'block_loop.thisIndex'
p1762
g888
sg38
S'left'
p1763
sg58
g62
sS'trial_loop.thisN'
p1764
I58
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p1765
g59
(g98
S':\x00\x00\x00'
tRp1766
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1767
I0
sg903
g1590
sS'block_loop.thisRepN'
p1768
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1769
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p1770
Nsg69
Vn
sS'block_loop.thisTrialN'
p1771
I0
sg39
F1.7834989471307381
sg34
g752
(S'\x07\xdf\n\x0e\x0c3\x14\x01\xbdP'
tRp1772
sa(dp1773
S'trial_loop.thisTrialN'
p1774
I59
sg894
g1413
sS'block_loop.thisIndex'
p1775
g888
sg38
S'right'
p1776
sg58
g62
sS'trial_loop.thisN'
p1777
I59
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p1778
g59
(g98
S';\x00\x00\x00'
tRp1779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1780
I0
sg903
g1421
sS'block_loop.thisRepN'
p1781
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1782
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p1783
Nsg69
Vn
sS'block_loop.thisTrialN'
p1784
I0
sg39
F1.7168460222183057
sg34
g752
(S'\x07\xdf\n\x0e\x0c3\x1a\x0e8\xa0'
tRp1785
sa(dp1786
S'trial_loop.thisTrialN'
p1787
I60
sg894
g1079
sS'block_loop.thisIndex'
p1788
g888
sg38
S'right'
p1789
sg58
g62
sS'trial_loop.thisN'
p1790
I60
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1791
g59
(g98
S'<\x00\x00\x00'
tRp1792
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1793
I0
sg903
g1087
sS'block_loop.thisRepN'
p1794
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1795
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p1796
Nsg69
Vn
sS'block_loop.thisTrialN'
p1797
I0
sg39
F1.683505732478352
sg34
g752
(S'\x07\xdf\n\x0e\x0c3!\nw\xb0'
tRp1798
sa(dp1799
S'trial_loop.thisTrialN'
p1800
I61
sg894
g1032
sS'block_loop.thisIndex'
p1801
g888
sg38
S'left'
p1802
sg58
g62
sS'trial_loop.thisN'
p1803
I61
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p1804
g59
(g98
S'=\x00\x00\x00'
tRp1805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1806
I0
sg903
g1040
sS'block_loop.thisRepN'
p1807
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1808
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p1809
Nsg69
Vn
sS'block_loop.thisTrialN'
p1810
I0
sg39
F4.4334890542077119
sg34
g752
(S'\x07\xdf\n\x0e\x0c3(\x06A\x90'
tRp1811
sa(dp1812
S'trial_loop.thisTrialN'
p1813
I62
sg894
g1205
sS'block_loop.thisIndex'
p1814
g888
sg38
S'right'
p1815
sg58
g62
sS'trial_loop.thisN'
p1816
I62
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1817
g59
(g98
S'>\x00\x00\x00'
tRp1818
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1819
I0
sg903
g1213
sS'block_loop.thisRepN'
p1820
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1821
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p1822
Nsg69
Vn
sS'block_loop.thisTrialN'
p1823
I0
sg39
F1.6005431699204564
sg34
g752
(S'\x07\xdf\n\x0e\x0c31\r/\x00'
tRp1824
sa(dp1825
S'trial_loop.thisTrialN'
p1826
I63
sg894
g966
sS'block_loop.thisIndex'
p1827
g888
sg38
S'right'
p1828
sg58
g62
sS'trial_loop.thisN'
p1829
I63
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p1830
g59
(g98
S'?\x00\x00\x00'
tRp1831
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1832
I0
sg903
g974
sS'block_loop.thisRepN'
p1833
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1834
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p1835
Nsg69
Vn
sS'block_loop.thisTrialN'
p1836
I0
sg39
F1.6333249514336785
sg34
g752
(S'\x07\xdf\n\x0e\x0c38\x07\xc4H'
tRp1837
sa(dp1838
S'trial_loop.thisTrialN'
p1839
I64
sg894
S'49-yorkie.png'
p1840
sS'block_loop.thisIndex'
p1841
g888
sg38
S'left'
p1842
sg58
g62
sS'trial_loop.thisN'
p1843
I64
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p1844
g59
(g98
S'@\x00\x00\x00'
tRp1845
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1846
I0
sg903
S'35-raisins.png'
p1847
sS'block_loop.thisRepN'
p1848
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1849
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p1850
Nsg69
Vn
sS'block_loop.thisTrialN'
p1851
I0
sg39
F1.3334793038347925
sg34
g752
(S'\x07\xdf\n\x0e\x0c4\x03\x02\x98\x10'
tRp1852
sa(dp1853
S'trial_loop.thisTrialN'
p1854
I65
sg894
g1568
sS'block_loop.thisIndex'
p1855
g888
sg38
S'left'
p1856
sg58
g62
sS'trial_loop.thisN'
p1857
I65
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p1858
g59
(g98
S'A\x00\x00\x00'
tRp1859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1860
I0
sg903
g1575
sS'block_loop.thisRepN'
p1861
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1862
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p1863
Nsg69
Vn
sS'block_loop.thisTrialN'
p1864
I0
sg39
F2.4168449958633573
sg34
g752
(S'\x07\xdf\n\x0e\x0c4\t\x08)\xd8'
tRp1865
sa(dp1866
S'trial_loop.thisTrialN'
p1867
I66
sg894
S'30-spaghetti_hoops.png'
p1868
sS'block_loop.thisIndex'
p1869
g888
sg38
S'left'
p1870
sg58
g62
sS'trial_loop.thisN'
p1871
I66
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p1872
g59
(g98
S'B\x00\x00\x00'
tRp1873
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1874
I0
sg903
S'19-caramello_redo.png'
p1875
sS'block_loop.thisRepN'
p1876
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1877
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p1878
Nsg69
Vn
sS'block_loop.thisTrialN'
p1879
I0
sg39
F3.3167682473103923
sg34
g752
(S'\x07\xdf\n\x0e\x0c4\x10\x0f#\x00'
tRp1880
sa(dp1881
S'trial_loop.thisTrialN'
p1882
I67
sg894
g1611
sS'block_loop.thisIndex'
p1883
g888
sg38
S'left'
p1884
sg58
g62
sS'trial_loop.thisN'
p1885
I67
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p1886
g59
(g98
S'C\x00\x00\x00'
tRp1887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1888
I0
sg903
g1618
sS'block_loop.thisRepN'
p1889
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1890
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p1891
Nsg69
Vn
sS'block_loop.thisTrialN'
p1892
I0
sg39
F1.9172338704020149
sg34
g752
(S'\x07\xdf\n\x0e\x0c4\x19\x05(P'
tRp1893
sa(dp1894
S'trial_loop.thisTrialN'
p1895
I68
sg894
g1291
sS'block_loop.thisIndex'
p1896
g888
sg38
S'right'
p1897
sg58
g62
sS'trial_loop.thisN'
p1898
I68
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1899
g59
(g98
S'D\x00\x00\x00'
tRp1900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1901
I0
sg903
g1298
sS'block_loop.thisRepN'
p1902
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1903
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p1904
Nsg69
Vn
sS'block_loop.thisTrialN'
p1905
I0
sg39
F1.3162972643644935
sg34
g752
(S'\x07\xdf\n\x0e\x0c4 \x04E\xc0'
tRp1906
sa(dp1907
S'trial_loop.thisTrialN'
p1908
I69
sg894
g1175
sS'block_loop.thisIndex'
p1909
g888
sg38
S'left'
p1910
sg58
g62
sS'trial_loop.thisN'
p1911
I69
sg33
g1186
sg63
g64
sS'trial_loop.thisIndex'
p1912
g59
(g98
S'E\x00\x00\x00'
tRp1913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1914
I0
sg903
g1183
sS'block_loop.thisRepN'
p1915
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1916
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p1917
Nsg69
Vn
sS'block_loop.thisTrialN'
p1918
I0
sg39
F1.6835105791551541
sg34
g752
(S'\x07\xdf\n\x0e\x0c4&\t\x99\x08'
tRp1919
sa(dp1920
S'trial_loop.thisTrialN'
p1921
I70
sg894
g1321
sS'block_loop.thisIndex'
p1922
g888
sg38
S'right'
p1923
sg58
g62
sS'trial_loop.thisN'
p1924
I70
sg33
g1325
sg63
g64
sS'trial_loop.thisIndex'
p1925
g59
(g98
S'F\x00\x00\x00'
tRp1926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1927
I0
sg903
g1329
sS'block_loop.thisRepN'
p1928
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1929
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p1930
Nsg69
Vn
sS'block_loop.thisTrialN'
p1931
I0
sg39
F3.2668030008344431
sg34
g752
(S'\x07\xdf\n\x0e\x0c4-\x05b\xe8'
tRp1932
sa(dp1933
S'trial_loop.thisTrialN'
p1934
I71
sg894
g1015
sS'block_loop.thisIndex'
p1935
g888
sg38
S'left'
p1936
sg58
g62
sS'trial_loop.thisN'
p1937
I71
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1938
g59
(g98
S'G\x00\x00\x00'
tRp1939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1940
I0
sg903
g1023
sS'block_loop.thisRepN'
p1941
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1942
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1943
Nsg69
Vn
sS'block_loop.thisTrialN'
p1944
I0
sg39
F1.7167562161480419
sg34
g752
(S'\x07\xdf\n\x0e\x0c45\t\xf2\xe0'
tRp1945
sa(dp1946
S'trial_loop.thisTrialN'
p1947
I72
sg894
g1158
sS'block_loop.thisIndex'
p1948
g888
sg38
S'left'
p1949
sg58
g62
sS'trial_loop.thisN'
p1950
I72
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p1951
g59
(g98
S'H\x00\x00\x00'
tRp1952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1953
I0
sg903
g1166
sS'block_loop.thisRepN'
p1954
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1955
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p1956
Nsg69
Vn
sS'block_loop.thisTrialN'
p1957
I0
sg39
F1.4672207843746037
sg34
g752
(S'\x07\xdf\n\x0e\x0c5\x00\x065\xd8'
tRp1958
sa(dp1959
S'trial_loop.thisTrialN'
p1960
I73
sg894
g949
sS'block_loop.thisIndex'
p1961
g888
sg38
S'right'
p1962
sg58
g62
sS'trial_loop.thisN'
p1963
I73
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1964
g59
(g98
S'I\x00\x00\x00'
tRp1965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1966
I0
sg903
g957
sS'block_loop.thisRepN'
p1967
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1968
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p1969
Nsg69
Vn
sS'block_loop.thisTrialN'
p1970
I0
sg39
F1.4001690064715149
sg34
g752
(S'\x07\xdf\n\x0e\x0c5\x06\r\xaf\xe8'
tRp1971
sa(dp1972
S'trial_loop.thisTrialN'
p1973
I74
sg894
g1583
sS'block_loop.thisIndex'
p1974
g888
sg38
S'left'
p1975
sg58
g62
sS'trial_loop.thisN'
p1976
I74
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p1977
g59
(g98
S'J\x00\x00\x00'
tRp1978
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1979
I0
sg903
g1590
sS'block_loop.thisRepN'
p1980
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1981
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p1982
Nsg69
Vn
sS'block_loop.thisTrialN'
p1983
I0
sg39
F0.91691398973262039
sg34
g752
(S'\x07\xdf\n\x0e\x0c5\r\x05,8'
tRp1984
sa(dp1985
S'trial_loop.thisTrialN'
p1986
I75
sg894
g1471
sS'block_loop.thisIndex'
p1987
g888
sg38
S'right'
p1988
sg58
g62
sS'trial_loop.thisN'
p1989
I75
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p1990
g59
(g98
S'K\x00\x00\x00'
tRp1991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1992
I0
sg903
g1478
sS'block_loop.thisRepN'
p1993
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p1994
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p1995
Nsg69
Vn
sS'block_loop.thisTrialN'
p1996
I0
sg39
F1.150217330689884
sg34
g752
(S'\x07\xdf\n\x0e\x0c5\x13\x04Qx'
tRp1997
sa(dp1998
S'trial_loop.thisTrialN'
p1999
I76
sg894
g983
sS'block_loop.thisIndex'
p2000
g888
sg38
S'right'
p2001
sg58
g62
sS'trial_loop.thisN'
p2002
I76
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p2003
g59
(g98
S'L\x00\x00\x00'
tRp2004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2005
I0
sg903
g991
sS'block_loop.thisRepN'
p2006
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2007
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2008
Nsg69
Vn
sS'block_loop.thisTrialN'
p2009
I0
sg39
F2.283510636174924
sg34
g752
(S'\x07\xdf\n\x0e\x0c5\x19\x07C`'
tRp2010
sa(dp2011
S'trial_loop.thisTrialN'
p2012
I77
sg894
g915
sS'block_loop.thisIndex'
p2013
g888
sg38
S'left'
p2014
sg58
g62
sS'trial_loop.thisN'
p2015
I77
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2016
g59
(g98
S'M\x00\x00\x00'
tRp2017
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2018
I0
sg903
g923
sS'block_loop.thisRepN'
p2019
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2020
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2021
Nsg69
Vn
sS'block_loop.thisTrialN'
p2022
I0
sg39
F1.3665464690820954
sg34
g752
(S'\x07\xdf\n\x0e\x0c5 \x0c\x19\xa8'
tRp2023
sa(dp2024
S'trial_loop.thisTrialN'
p2025
I78
sg894
g1430
sS'block_loop.thisIndex'
p2026
g888
sg38
S'left'
p2027
sg58
g62
sS'trial_loop.thisN'
p2028
I78
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2029
g59
(g98
S'N\x00\x00\x00'
tRp2030
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2031
I0
sg903
g1437
sS'block_loop.thisRepN'
p2032
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2033
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2034
Nsg69
Vn
sS'block_loop.thisTrialN'
p2035
I0
sg39
F1.2169788781825446
sg34
g752
(S"\x07\xdf\n\x0e\x0c5'\x02\xe2H"
tRp2036
sa(dp2037
S'trial_loop.thisTrialN'
p2038
I79
sg894
g1708
sS'block_loop.thisIndex'
p2039
g888
sg38
S'right'
p2040
sg58
g62
sS'trial_loop.thisN'
p2041
I79
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2042
g59
(g98
S'O\x00\x00\x00'
tRp2043
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2044
I0
sg903
g1715
sS'block_loop.thisRepN'
p2045
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2046
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p2047
Nsg69
Vn
sS'block_loop.thisTrialN'
p2048
I0
sg39
F1.7667188967366201
sg34
g752
(S'\x07\xdf\n\x0e\x0c5-\x06\x8b\xc8'
tRp2049
sa(dp2050
S'trial_loop.thisTrialN'
p2051
I80
sg894
g1868
sS'block_loop.thisIndex'
p2052
g888
sg38
S'left'
p2053
sg58
g62
sS'trial_loop.thisN'
p2054
I80
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2055
g59
(g98
S'P\x00\x00\x00'
tRp2056
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2057
I0
sg903
g1875
sS'block_loop.thisRepN'
p2058
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2059
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p2060
Nsg69
Vn
sS'block_loop.thisTrialN'
p2061
I0
sg39
F1.7834499101654728
sg34
g752
(S'\x07\xdf\n\x0e\x0c54\x03\x82p'
tRp2062
sa(dp2063
S'trial_loop.thisTrialN'
p2064
I81
sg894
g1568
sS'block_loop.thisIndex'
p2065
g888
sg38
S'left'
p2066
sg58
g62
sS'trial_loop.thisN'
p2067
I81
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2068
g59
(g98
S'Q\x00\x00\x00'
tRp2069
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2070
I0
sg903
g1575
sS'block_loop.thisRepN'
p2071
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2072
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2073
Nsg69
Vn
sS'block_loop.thisTrialN'
p2074
I0
sg39
F0.98350219725489296
sg34
g752
(S'\x07\xdf\n\x0e\x0c5;\x00\xb7\x98'
tRp2075
sa(dp2076
S'trial_loop.thisTrialN'
p2077
I82
sg894
g1000
sS'block_loop.thisIndex'
p2078
g888
sg38
S'right'
p2079
sg58
g62
sS'trial_loop.thisN'
p2080
I82
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p2081
g59
(g98
S'R\x00\x00\x00'
tRp2082
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2083
I0
sg903
g1007
sS'block_loop.thisRepN'
p2084
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2085
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p2086
Nsg69
Vn
sS'block_loop.thisTrialN'
p2087
I0
sg39
F1.2671362811388462
sg34
g752
(S'\x07\xdf\n\x0e\x0c6\x05\x01\r\x88'
tRp2088
sa(dp2089
S'trial_loop.thisTrialN'
p2090
I83
sg894
g1111
sS'block_loop.thisIndex'
p2091
g888
sg38
S'left'
p2092
sg58
g62
sS'trial_loop.thisN'
p2093
I83
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p2094
g59
(g98
S'S\x00\x00\x00'
tRp2095
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2096
I0
sg903
g1119
sS'block_loop.thisRepN'
p2097
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2098
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p2099
Nsg69
Vn
sS'block_loop.thisTrialN'
p2100
I0
sg39
F2.1001645589321924
sg34
g752
(S'\x07\xdf\n\x0e\x0c6\x0b\x05\xad '
tRp2101
sa(dp2102
S'trial_loop.thisTrialN'
p2103
I84
sg894
g1321
sS'block_loop.thisIndex'
p2104
g888
sg38
S'left'
p2105
sg58
g62
sS'trial_loop.thisN'
p2106
I84
sg33
g1325
sg63
g64
sS'trial_loop.thisIndex'
p2107
g59
(g98
S'T\x00\x00\x00'
tRp2108
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2109
I0
sg903
g1329
sS'block_loop.thisRepN'
p2110
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2111
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p2112
Nsg69
Vn
sS'block_loop.thisTrialN'
p2113
I0
sg39
F1.9167543344974547
sg34
g752
(S'\x07\xdf\n\x0e\x0c6\x12\x07\xa5\x08'
tRp2114
sa(dp2115
S'trial_loop.thisTrialN'
p2116
I85
sg894
g1338
sS'block_loop.thisIndex'
p2117
g888
sg38
S'left'
p2118
sg58
g62
sS'trial_loop.thisN'
p2119
I85
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2120
g59
(g98
S'U\x00\x00\x00'
tRp2121
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2122
I0
sg903
g1345
sS'block_loop.thisRepN'
p2123
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2124
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2125
Nsg69
Vn
sS'block_loop.thisTrialN'
p2126
I0
sg39
F1.633418748884651
sg34
g752
(S'\x07\xdf\n\x0e\x0c6\x19\x06\xfd\x10'
tRp2127
sa(dp2128
S'trial_loop.thisTrialN'
p2129
I86
sg894
g1000
sS'block_loop.thisIndex'
p2130
g888
sg38
S'left'
p2131
sg58
g62
sS'trial_loop.thisN'
p2132
I86
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2133
g59
(g98
S'V\x00\x00\x00'
tRp2134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2135
I0
sg903
g1007
sS'block_loop.thisRepN'
p2136
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2137
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p2138
Nsg69
Vn
sS'block_loop.thisTrialN'
p2139
I0
sg39
F1.000053313445278
sg34
g752
(S'\x07\xdf\n\x0e\x0c6 \x01\xd4\xc0'
tRp2140
sa(dp2141
S'trial_loop.thisTrialN'
p2142
I87
sg894
g1111
sS'block_loop.thisIndex'
p2143
g888
sg38
S'left'
p2144
sg58
g62
sS'trial_loop.thisN'
p2145
I87
sg33
g1122
sg63
g64
sS'trial_loop.thisIndex'
p2146
g59
(g98
S'W\x00\x00\x00'
tRp2147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2148
I0
sg903
g1119
sS'block_loop.thisRepN'
p2149
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2150
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p2151
Nsg69
Vn
sS'block_loop.thisTrialN'
p2152
I0
sg39
F1.1168405483240349
sg34
g752
(S'\x07\xdf\n\x0e\x0c6&\x02eH'
tRp2153
sa(dp2154
S'trial_loop.thisTrialN'
p2155
I88
sg894
g1471
sS'block_loop.thisIndex'
p2156
g888
sg38
S'right'
p2157
sg58
g62
sS'trial_loop.thisN'
p2158
I88
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p2159
g59
(g98
S'X\x00\x00\x00'
tRp2160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2161
I0
sg903
g1478
sS'block_loop.thisRepN'
p2162
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2163
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2164
Nsg69
Vn
sS'block_loop.thisTrialN'
p2165
I0
sg39
F1.333521498432674
sg34
g752
(S'\x07\xdf\n\x0e\x0c6,\x04\x9f\x98'
tRp2166
sa(dp2167
S'trial_loop.thisTrialN'
p2168
I89
sg894
S'45-chewy_nougat_redo.png'
p2169
sS'block_loop.thisIndex'
p2170
g888
sg38
S'right'
p2171
sg58
g62
sS'trial_loop.thisN'
p2172
I89
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2173
g59
(g98
S'Y\x00\x00\x00'
tRp2174
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2175
I0
sg903
S'41-peanuts_redo.png'
p2176
sS'block_loop.thisRepN'
p2177
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2178
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p2179
Nsg69
Vn
sS'block_loop.thisTrialN'
p2180
I0
sg39
F1.4668407478939116
sg34
g752
(S'\x07\xdf\n\x0e\x0c62\n1`'
tRp2181
sa(dp2182
S'trial_loop.thisTrialN'
p2183
I90
sg894
g1158
sS'block_loop.thisIndex'
p2184
g888
sg38
S'left'
p2185
sg58
g62
sS'trial_loop.thisN'
p2186
I90
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p2187
g59
(g98
S'Z\x00\x00\x00'
tRp2188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2189
I0
sg903
g1166
sS'block_loop.thisRepN'
p2190
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2191
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p2192
Nsg69
Vn
sS'block_loop.thisTrialN'
p2193
I0
sg39
F1.2501241604559254
sg34
g752
(S'\x07\xdf\n\x0e\x0c69\x02\xa3\xc8'
tRp2194
sa(dp2195
S'trial_loop.thisTrialN'
p2196
I91
sg894
S'20-fruit_pastilles.png'
p2197
sS'block_loop.thisIndex'
p2198
g888
sg38
S'left'
p2199
sg58
g62
sS'trial_loop.thisN'
p2200
I91
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2201
g59
(g98
S'[\x00\x00\x00'
tRp2202
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2203
I0
sg903
S'2-steamed_puddings.png'
p2204
sS'block_loop.thisRepN'
p2205
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2206
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p2207
Nsg69
Vn
sS'block_loop.thisTrialN'
p2208
I0
sg39
F1.3835149696742519
sg34
g752
(S'\x07\xdf\n\x0e\x0c7\x03\x06\xc6`'
tRp2209
sa(dp2210
S'trial_loop.thisTrialN'
p2211
I92
sg894
g1015
sS'block_loop.thisIndex'
p2212
g888
sg38
S'left'
p2213
sg58
g62
sS'trial_loop.thisN'
p2214
I92
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p2215
g59
(g98
S'\\\x00\x00\x00'
tRp2216
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2217
I0
sg903
g1023
sS'block_loop.thisRepN'
p2218
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2219
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2220
Nsg69
Vn
sS'block_loop.thisTrialN'
p2221
I0
sg39
F1.1666142085177853
sg34
g752
(S'\x07\xdf\n\x0e\x0c7\t\rN@'
tRp2222
sa(dp2223
S'trial_loop.thisTrialN'
p2224
I93
sg894
g1175
sS'block_loop.thisIndex'
p2225
g888
sg38
S'left'
p2226
sg58
g62
sS'trial_loop.thisN'
p2227
I93
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2228
g59
(g98
S']\x00\x00\x00'
tRp2229
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2230
I0
sg903
g1183
sS'block_loop.thisRepN'
p2231
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2232
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p2233
Nsg69
Vn
sS'block_loop.thisTrialN'
p2234
I0
sg39
F1.6501834039518144
sg34
g752
(S'\x07\xdf\n\x0e\x0c7\x10\x00\xfd\xe8'
tRp2235
sa(dp2236
S'trial_loop.thisTrialN'
p2237
I94
sg894
g1306
sS'block_loop.thisIndex'
p2238
g888
sg38
S'right'
p2239
sg58
g62
sS'trial_loop.thisN'
p2240
I94
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p2241
g59
(g98
S'^\x00\x00\x00'
tRp2242
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2243
I0
sg903
g1313
sS'block_loop.thisRepN'
p2244
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2245
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p2246
Nsg69
Vn
sS'block_loop.thisTrialN'
p2247
I0
sg39
F1.2334906507603591
sg34
g752
(S'\x07\xdf\n\x0e\x0c7\x16\x0b\x8d\x08'
tRp2248
sa(dp2249
S'trial_loop.thisTrialN'
p2250
I95
sg894
g1062
sS'block_loop.thisIndex'
p2251
g888
sg38
S'left'
p2252
sg58
g62
sS'trial_loop.thisN'
p2253
I95
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2254
g59
(g98
S'_\x00\x00\x00'
tRp2255
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2256
I0
sg903
g1070
sS'block_loop.thisRepN'
p2257
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2258
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p2259
Nsg69
Vn
sS'block_loop.thisTrialN'
p2260
I0
sg39
F2.3667577271708069
sg34
g752
(S'\x07\xdf\n\x0e\x0c7\x1d\x002\xc8'
tRp2261
sa(dp2262
S'trial_loop.thisTrialN'
p2263
I96
sg894
g1353
sS'block_loop.thisIndex'
p2264
g888
sg38
S'right'
p2265
sg58
g62
sS'trial_loop.thisN'
p2266
I96
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p2267
g59
(g98
S'`\x00\x00\x00'
tRp2268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2269
I0
sg903
g1361
sS'block_loop.thisRepN'
p2270
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2271
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p2272
Nsg69
Vn
sS'block_loop.thisTrialN'
p2273
I0
sg39
F1.8001757918191288
sg34
g752
(S'\x07\xdf\n\x0e\x0c7$\x06tX'
tRp2274
sa(dp2275
S'trial_loop.thisTrialN'
p2276
I97
sg894
g1096
sS'block_loop.thisIndex'
p2277
g888
sg38
S'right'
p2278
sg58
g62
sS'trial_loop.thisN'
p2279
I97
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p2280
g59
(g98
S'a\x00\x00\x00'
tRp2281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2282
I0
sg903
g1103
sS'block_loop.thisRepN'
p2283
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2284
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2285
Nsg69
Vn
sS'block_loop.thisTrialN'
p2286
I0
sg39
F1.8839266521035825
sg34
g752
(S'\x07\xdf\n\x0e\x0c7+\x03\xe8\x00'
tRp2287
sa(dp2288
S'trial_loop.thisTrialN'
p2289
I98
sg894
S'51-mars.png'
p2290
sS'block_loop.thisIndex'
p2291
g888
sg38
S'left'
p2292
sg58
g62
sS'trial_loop.thisN'
p2293
I98
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2294
g59
(g98
S'b\x00\x00\x00'
tRp2295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2296
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p2297
sS'block_loop.thisRepN'
p2298
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2299
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2300
Nsg69
Vn
sS'block_loop.thisTrialN'
p2301
I0
sg39
F1.5835341853226055
sg34
g752
(S'\x07\xdf\n\x0e\x0c72\x02\x88p'
tRp2302
sa(dp2303
S'trial_loop.thisTrialN'
p2304
I99
sg894
g2169
sS'block_loop.thisIndex'
p2305
g888
sg38
S'right'
p2306
sg58
g62
sS'trial_loop.thisN'
p2307
I99
sg33
g1216
sg63
g64
sS'trial_loop.thisIndex'
p2308
g59
(g98
S'c\x00\x00\x00'
tRp2309
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2310
I0
sg903
g2176
sS'block_loop.thisRepN'
p2311
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2312
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p2313
Nsg69
Vn
sS'block_loop.thisTrialN'
p2314
I0
sg39
F1.0668262648832751
sg34
g752
(S'\x07\xdf\n\x0e\x0c78\x0b\xea\xc8'
tRp2315
sa(dp2316
S'trial_loop.thisTrialN'
p2317
I100
sg894
g1338
sS'block_loop.thisIndex'
p2318
g888
sg38
S'left'
p2319
sg58
g62
sS'trial_loop.thisN'
p2320
I100
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p2321
g59
(g98
S'd\x00\x00\x00'
tRp2322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2323
I0
sg903
g1345
sS'block_loop.thisRepN'
p2324
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2325
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2326
Nsg69
Vn
sS'block_loop.thisTrialN'
p2327
I0
sg39
F1.4000387163941923
sg34
g752
(S'\x07\xdf\n\x0e\x0c8\x02\rqh'
tRp2328
sa(dp2329
S'trial_loop.thisTrialN'
p2330
I101
sg894
g1079
sS'block_loop.thisIndex'
p2331
g888
sg38
S'right'
p2332
sg58
g62
sS'trial_loop.thisN'
p2333
I101
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2334
g59
(g98
S'e\x00\x00\x00'
tRp2335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2336
I0
sg903
g1087
sS'block_loop.thisRepN'
p2337
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2338
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2339
Nsg69
Vn
sS'block_loop.thisTrialN'
p2340
I0
sg39
F1.1667938206583131
sg34
g752
(S'\x07\xdf\n\x0e\x0c8\t\x04\xed\xb8'
tRp2341
sa(dp2342
S'trial_loop.thisTrialN'
p2343
I102
sg894
g1583
sS'block_loop.thisIndex'
p2344
g888
sg38
S'left'
p2345
sg58
g62
sS'trial_loop.thisN'
p2346
I102
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p2347
g59
(g98
S'f\x00\x00\x00'
tRp2348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2349
I0
sg903
g1590
sS'block_loop.thisRepN'
p2350
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2351
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p2352
Nsg69
Vn
sS'block_loop.thisTrialN'
p2353
I0
sg39
F1.2835283122904002
sg34
g752
(S'\x07\xdf\n\x0e\x0c8\x0f\x07\xe3\x88'
tRp2354
sa(dp2355
S'trial_loop.thisTrialN'
p2356
I103
sg894
g1396
sS'block_loop.thisIndex'
p2357
g888
sg38
S'right'
p2358
sg58
g62
sS'trial_loop.thisN'
p2359
I103
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2360
g59
(g98
S'g\x00\x00\x00'
tRp2361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2362
I0
sg903
g1404
sS'block_loop.thisRepN'
p2363
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2364
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p2365
Nsg69
Vn
sS'block_loop.thisTrialN'
p2366
I0
sg39
F3.4167118548011786
sg34
g752
(S'\x07\xdf\n\x0e\x0c8\x15\x0c\xbd\xb8'
tRp2367
sa(dp2368
S'trial_loop.thisTrialN'
p2369
I104
sg894
g949
sS'block_loop.thisIndex'
p2370
g888
sg38
S'right'
p2371
sg58
g62
sS'trial_loop.thisN'
p2372
I104
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2373
g59
(g98
S'h\x00\x00\x00'
tRp2374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2375
I0
sg903
g957
sS'block_loop.thisRepN'
p2376
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2377
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2378
Nsg69
Vn
sS'block_loop.thisTrialN'
p2379
I0
sg39
F1.0501884787081508
sg34
g752
(S'\x07\xdf\n\x0e\x0c8\x1e\x04l\xd0'
tRp2380
sa(dp2381
S'trial_loop.thisTrialN'
p2382
I105
sg894
g1158
sS'block_loop.thisIndex'
p2383
g888
sg38
S'left'
p2384
sg58
g62
sS'trial_loop.thisN'
p2385
I105
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p2386
g59
(g98
S'i\x00\x00\x00'
tRp2387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2388
I0
sg903
g1166
sS'block_loop.thisRepN'
p2389
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2390
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p2391
Nsg69
Vn
sS'block_loop.thisTrialN'
p2392
I0
sg39
F1.2501883076492959
sg34
g752
(S'\x07\xdf\n\x0e\x0c8$\x05\xb4\xf0'
tRp2393
sa(dp2394
S'trial_loop.thisTrialN'
p2395
I106
sg894
g895
sS'block_loop.thisIndex'
p2396
g888
sg38
S'right'
p2397
sg58
g62
sS'trial_loop.thisN'
p2398
I106
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p2399
g59
(g98
S'j\x00\x00\x00'
tRp2400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2401
I0
sg903
g904
sS'block_loop.thisRepN'
p2402
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2403
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p2404
Nsg69
Vn
sS'block_loop.thisTrialN'
p2405
I0
sg39
F1.0834406729691182
sg34
g752
(S'\x07\xdf\n\x0e\x0c8*\t\xd7\x88'
tRp2406
sa(dp2407
S'trial_loop.thisTrialN'
p2408
I107
sg894
g1540
sS'block_loop.thisIndex'
p2409
g888
sg38
S'right'
p2410
sg58
g62
sS'trial_loop.thisN'
p2411
I107
sg33
g1331
sg63
g64
sS'trial_loop.thisIndex'
p2412
g59
(g98
S'k\x00\x00\x00'
tRp2413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2414
I0
sg903
g1547
sS'block_loop.thisRepN'
p2415
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2416
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p2417
Nsg69
Vn
sS'block_loop.thisTrialN'
p2418
I0
sg39
F1.2668722798025556
sg34
g752
(S'\x07\xdf\n\x0e\x0c80\x0b\x98\xc0'
tRp2419
sa(dp2420
S'trial_loop.thisTrialN'
p2421
I108
sg894
g1396
sS'block_loop.thisIndex'
p2422
g888
sg38
S'right'
p2423
sg58
g62
sS'trial_loop.thisN'
p2424
I108
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2425
g59
(g98
S'l\x00\x00\x00'
tRp2426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2427
I0
sg903
g1404
sS'block_loop.thisRepN'
p2428
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2429
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p2430
Nsg69
Vn
sS'block_loop.thisTrialN'
p2431
I0
sg39
F1.1834566955130867
sg34
g752
(S'\x07\xdf\n\x0e\x0c87\x00\xf6\x18'
tRp2432
sa(dp2433
S'trial_loop.thisTrialN'
p2434
I109
sg894
g1111
sS'block_loop.thisIndex'
p2435
g888
sg38
S'left'
p2436
sg58
g62
sS'trial_loop.thisN'
p2437
I109
sg33
g1122
sg63
g64
sS'trial_loop.thisIndex'
p2438
g59
(g98
S'm\x00\x00\x00'
tRp2439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2440
I0
sg903
g1119
sS'block_loop.thisRepN'
p2441
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2442
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p2443
Nsg69
Vn
sS'block_loop.thisTrialN'
p2444
I0
sg39
F1.5501582582528499
sg34
g752
(S'\x07\xdf\n\x0e\x0c9\x01\x04a\x18'
tRp2445
sa(dp2446
S'trial_loop.thisTrialN'
p2447
I110
sg894
g1540
sS'block_loop.thisIndex'
p2448
g888
sg38
S'right'
p2449
sg58
g62
sS'trial_loop.thisN'
p2450
I110
sg33
g1331
sg63
g64
sS'trial_loop.thisIndex'
p2451
g59
(g98
S'n\x00\x00\x00'
tRp2452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2453
I0
sg903
g1547
sS'block_loop.thisRepN'
p2454
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2455
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p2456
Nsg69
Vn
sS'block_loop.thisTrialN'
p2457
I0
sg39
F2.633373988398489
sg34
g752
(S'\x07\xdf\n\x0e\x0c9\x07\rFp'
tRp2458
sa(dp2459
S'trial_loop.thisTrialN'
p2460
I111
sg894
g1175
sS'block_loop.thisIndex'
p2461
g888
sg38
S'left'
p2462
sg58
g62
sS'trial_loop.thisN'
p2463
I111
sg33
g1186
sg63
g64
sS'trial_loop.thisIndex'
p2464
g59
(g98
S'o\x00\x00\x00'
tRp2465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2466
I0
sg903
g1183
sS'block_loop.thisRepN'
p2467
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2468
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p2469
Nsg69
Vn
sS'block_loop.thisTrialN'
p2470
I0
sg39
F1.150155749384794
sg34
g752
(S'\x07\xdf\n\x0e\x0c9\x0f\x08\x16P'
tRp2471
sa(dp2472
S'trial_loop.thisTrialN'
p2473
I112
sg894
g1693
sS'block_loop.thisIndex'
p2474
g888
sg38
S'right'
p2475
sg58
g62
sS'trial_loop.thisN'
p2476
I112
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p2477
g59
(g98
S'p\x00\x00\x00'
tRp2478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2479
I0
sg903
g1700
sS'block_loop.thisRepN'
p2480
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2481
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p2482
Nsg69
Vn
sS'block_loop.thisTrialN'
p2483
I0
sg39
F3.050503227601439
sg34
g752
(S'\x07\xdf\n\x0e\x0c9\x15\x0b\x088'
tRp2484
sa(dp2485
S'trial_loop.thisTrialN'
p2486
I113
sg894
g2197
sS'block_loop.thisIndex'
p2487
g888
sg38
S'right'
p2488
sg58
g62
sS'trial_loop.thisN'
p2489
I113
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2490
g59
(g98
S'q\x00\x00\x00'
tRp2491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2492
I0
sg903
g2204
sS'block_loop.thisRepN'
p2493
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2494
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p2495
Nsg69
Vn
sS'block_loop.thisTrialN'
p2496
I0
sg39
F2.0000707044609953
sg34
g752
(S'\x07\xdf\n\x0e\x0c9\x1d\x0cD\xa0'
tRp2497
sa(dp2498
S'trial_loop.thisTrialN'
p2499
I114
sg894
g1708
sS'block_loop.thisIndex'
p2500
g888
sg38
S'right'
p2501
sg58
g62
sS'trial_loop.thisN'
p2502
I114
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2503
g59
(g98
S'r\x00\x00\x00'
tRp2504
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2505
I0
sg903
g1715
sS'block_loop.thisRepN'
p2506
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2507
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p2508
Nsg69
Vn
sS'block_loop.thisTrialN'
p2509
I0
sg39
F1.3168418027580628
sg34
g752
(S'\x07\xdf\n\x0e\x0c9$\x0c\xcdX'
tRp2510
sa(dp2511
S'trial_loop.thisTrialN'
p2512
I115
sg894
g2169
sS'block_loop.thisIndex'
p2513
g888
sg38
S'right'
p2514
sg58
g62
sS'trial_loop.thisN'
p2515
I115
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2516
g59
(g98
S's\x00\x00\x00'
tRp2517
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2518
I0
sg903
g2176
sS'block_loop.thisRepN'
p2519
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2520
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p2521
Nsg69
Vn
sS'block_loop.thisTrialN'
p2522
I0
sg39
F1.5833947720893775
sg34
g752
(S'\x07\xdf\n\x0e\x0c9+\x02\xe2H'
tRp2523
sa(dp2524
S'trial_loop.thisTrialN'
p2525
I116
sg894
g1000
sS'block_loop.thisIndex'
p2526
g888
sg38
S'left'
p2527
sg58
g62
sS'trial_loop.thisN'
p2528
I116
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2529
g59
(g98
S't\x00\x00\x00'
tRp2530
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2531
I0
sg903
g1007
sS'block_loop.thisRepN'
p2532
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2533
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p2534
Nsg69
Vn
sS'block_loop.thisTrialN'
p2535
I0
sg39
F1.633324951432769
sg34
g752
(S'\x07\xdf\n\x0e\x0c91\x0c@\xb8'
tRp2536
sa(dp2537
S'trial_loop.thisTrialN'
p2538
I117
sg894
g1868
sS'block_loop.thisIndex'
p2539
g888
sg38
S'right'
p2540
sg58
g62
sS'trial_loop.thisN'
p2541
I117
sg33
g1407
sg63
g64
sS'trial_loop.thisIndex'
p2542
g59
(g98
S'u\x00\x00\x00'
tRp2543
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2544
I0
sg903
g1875
sS'block_loop.thisRepN'
p2545
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2546
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p2547
Nsg69
Vn
sS'block_loop.thisTrialN'
p2548
I0
sg39
F1.3505786647010609
sg34
g752
(S'\x07\xdf\n\x0e\x0c98\x07\x14\x80'
tRp2549
sa(dp2550
S'trial_loop.thisTrialN'
p2551
I118
sg894
g1158
sS'block_loop.thisIndex'
p2552
g888
sg38
S'left'
p2553
sg58
g62
sS'trial_loop.thisN'
p2554
I118
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p2555
g59
(g98
S'v\x00\x00\x00'
tRp2556
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2557
I0
sg903
g1166
sS'block_loop.thisRepN'
p2558
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2559
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p2560
Nsg69
Vn
sS'block_loop.thisTrialN'
p2561
I0
sg39
F1.283506074597426
sg34
g752
(S'\x07\xdf\n\x0e\x0c:\x02\x0c\xe4\xc8'
tRp2562
sa(dp2563
S'trial_loop.thisTrialN'
p2564
I119
sg894
g1540
sS'block_loop.thisIndex'
p2565
g888
sg38
S'right'
p2566
sg58
g62
sS'trial_loop.thisN'
p2567
I119
sg33
g1331
sg63
g64
sS'trial_loop.thisIndex'
p2568
g59
(g98
S'w\x00\x00\x00'
tRp2569
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2570
I0
sg903
g1547
sS'block_loop.thisRepN'
p2571
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2572
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p2573
Nsg69
Vn
sS'block_loop.thisTrialN'
p2574
I0
sg39
F1.0668587661275524
sg34
g752
(S'\x07\xdf\n\x0e\x0c:\t\x02|\xb8'
tRp2575
sa(dp2576
S'trial_loop.thisTrialN'
p2577
I120
sg894
g2290
sS'block_loop.thisIndex'
p2578
g888
sg38
S'left'
p2579
sg58
g62
sS'trial_loop.thisN'
p2580
I120
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2581
g59
(g98
S'x\x00\x00\x00'
tRp2582
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2583
I0
sg903
g2297
sS'block_loop.thisRepN'
p2584
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2585
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2586
Nsg69
Vn
sS'block_loop.thisTrialN'
p2587
I0
sg39
F1.1000958501617788
sg34
g752
(S'\x07\xdf\n\x0e\x0c:\x0f\x03\xffp'
tRp2588
sa(dp2589
S'trial_loop.thisTrialN'
p2590
I121
sg894
g1015
sS'block_loop.thisIndex'
p2591
g888
sg38
S'right'
p2592
sg58
g62
sS'trial_loop.thisN'
p2593
I121
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p2594
g59
(g98
S'y\x00\x00\x00'
tRp2595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2596
I0
sg903
g1023
sS'block_loop.thisRepN'
p2597
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2598
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2599
Nsg69
Vn
sS'block_loop.thisTrialN'
p2600
I0
sg39
F3.0834586341834438
sg34
g752
(S'\x07\xdf\n\x0e\x0c:\x15\x05\xff('
tRp2601
sa(dp2602
S'trial_loop.thisTrialN'
p2603
I122
sg894
g1062
sS'block_loop.thisIndex'
p2604
g888
sg38
S'left'
p2605
sg58
g62
sS'trial_loop.thisN'
p2606
I122
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2607
g59
(g98
S'z\x00\x00\x00'
tRp2608
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2609
I0
sg903
g1070
sS'block_loop.thisRepN'
p2610
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2611
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p2612
Nsg69
Vn
sS'block_loop.thisTrialN'
p2613
I0
sg39
F1.8002214076004748
sg34
g752
(S'\x07\xdf\n\x0e\x0c:\x1d\x07\xf3('
tRp2614
sa(dp2615
S'trial_loop.thisTrialN'
p2616
I123
sg894
g1338
sS'block_loop.thisIndex'
p2617
g888
sg38
S'left'
p2618
sg58
g62
sS'trial_loop.thisN'
p2619
I123
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p2620
g59
(g98
S'{\x00\x00\x00'
tRp2621
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2622
I0
sg903
g1345
sS'block_loop.thisRepN'
p2623
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2624
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2625
Nsg69
Vn
sS'block_loop.thisTrialN'
p2626
I0
sg39
F2.7668186812588829
sg34
g752
(S'\x07\xdf\n\x0e\x0c:$\x05f\xd0'
tRp2627
sa(dp2628
S'trial_loop.thisTrialN'
p2629
I124
sg894
g1291
sS'block_loop.thisIndex'
p2630
g888
sg38
S'right'
p2631
sg58
g62
sS'trial_loop.thisN'
p2632
I124
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2633
g59
(g98
S'|\x00\x00\x00'
tRp2634
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2635
I0
sg903
g1298
sS'block_loop.thisRepN'
p2636
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2637
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2638
Nsg69
Vn
sS'block_loop.thisTrialN'
p2639
I0
sg39
F1.1332556724646565
sg34
g752
(S'\x07\xdf\n\x0e\x0c:,\x02Y\x90'
tRp2640
sa(dp2641
S'trial_loop.thisTrialN'
p2642
I125
sg894
g1128
sS'block_loop.thisIndex'
p2643
g888
sg38
S'left'
p2644
sg58
g62
sS'trial_loop.thisN'
p2645
I125
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2646
g59
(g98
S'}\x00\x00\x00'
tRp2647
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2648
I0
sg903
g1136
sS'block_loop.thisRepN'
p2649
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2650
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p2651
Nsg69
Vn
sS'block_loop.thisTrialN'
p2652
I0
sg39
F1.2334820978012431
sg34
g752
(S'\x07\xdf\n\x0e\x0c:2\x04\xd2`'
tRp2653
sa(dp2654
S'trial_loop.thisTrialN'
p2655
I126
sg894
g1471
sS'block_loop.thisIndex'
p2656
g888
sg38
S'left'
p2657
sg58
g62
sS'trial_loop.thisN'
p2658
I126
sg33
g1025
sg63
g64
sS'trial_loop.thisIndex'
p2659
g59
(g98
S'~\x00\x00\x00'
tRp2660
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2661
I0
sg903
g1478
sS'block_loop.thisRepN'
p2662
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2663
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2664
Nsg69
Vn
sS'block_loop.thisTrialN'
p2665
I0
sg39
F5.6504502562747803
sg34
g752
(S'\x07\xdf\n\x0e\x0c:8\x08\xf4\xf8'
tRp2666
sa(dp2667
S'trial_loop.thisTrialN'
p2668
I127
sg894
g1291
sS'block_loop.thisIndex'
p2669
g888
sg38
S'right'
p2670
sg58
g62
sS'trial_loop.thisN'
p2671
I127
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2672
g59
(g98
S'\x7f\x00\x00\x00'
tRp2673
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2674
I0
sg903
g1298
sS'block_loop.thisRepN'
p2675
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2676
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2677
Nsg69
Vn
sS'block_loop.thisTrialN'
p2678
I0
sg39
F0.98326756107780966
sg34
g752
(S'\x07\xdf\n\x0e\x0c;\x07\x04*h'
tRp2679
sa(dp2680
S'trial_loop.thisTrialN'
p2681
I128
sg894
g1096
sS'block_loop.thisIndex'
p2682
g888
sg38
S'right'
p2683
sg58
g62
sS'trial_loop.thisN'
p2684
I128
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p2685
g59
(g98
S'\x80\x00\x00\x00'
tRp2686
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2687
I0
sg903
g1103
sS'block_loop.thisRepN'
p2688
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2689
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2690
Nsg69
Vn
sS'block_loop.thisTrialN'
p2691
I0
sg39
F2.8668047684459452
sg34
g752
(S'\x07\xdf\n\x0e\x0c;\r\x04A\xd8'
tRp2692
sa(dp2693
S'trial_loop.thisTrialN'
p2694
I129
sg894
g1868
sS'block_loop.thisIndex'
p2695
g888
sg38
S'left'
p2696
sg58
g62
sS'trial_loop.thisN'
p2697
I129
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2698
g59
(g98
S'\x81\x00\x00\x00'
tRp2699
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2700
I0
sg903
g1875
sS'block_loop.thisRepN'
p2701
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2702
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p2703
Nsg69
Vn
sS'block_loop.thisTrialN'
p2704
I0
sg39
F2.3168169991777177
sg34
g752
(S'\x07\xdf\n\x0e\x0c;\x15\x02\xde`'
tRp2705
sa(dp2706
S'trial_loop.thisTrialN'
p2707
I130
sg894
g1096
sS'block_loop.thisIndex'
p2708
g888
sg38
S'right'
p2709
sg58
g62
sS'trial_loop.thisN'
p2710
I130
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p2711
g59
(g98
S'\x82\x00\x00\x00'
tRp2712
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2713
I0
sg903
g1103
sS'block_loop.thisRepN'
p2714
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2715
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2716
Nsg69
Vn
sS'block_loop.thisTrialN'
p2717
I0
sg39
F1.0335301654313298
sg34
g752
(S'\x07\xdf\n\x0e\x0c;\x1c\x08-\xc0'
tRp2718
sa(dp2719
S'trial_loop.thisTrialN'
p2720
I131
sg894
g983
sS'block_loop.thisIndex'
p2721
g888
sg38
S'left'
p2722
sg58
g62
sS'trial_loop.thisN'
p2723
I131
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2724
g59
(g98
S'\x83\x00\x00\x00'
tRp2725
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2726
I0
sg903
g991
sS'block_loop.thisRepN'
p2727
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2728
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F1.6172587880228093
sg34
g752
(S'\x07\xdf\n\x0e\x0c;"\t7`'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1353
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1361
sS'block_loop.thisRepN'
p2740
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2741
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F1.1667995226316634
sg34
g752
(S'\x07\xdf\n\x0e\x0c;)\x03\xd0\x90'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1015
sS'block_loop.thisIndex'
p2747
g888
sg38
S'left'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1019
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1023
sS'block_loop.thisRepN'
p2753
I0
sg906
g1025
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2754
I0
sg909
g1019
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F1.6668505552861461
sg34
g752
(S'\x07\xdf\n\x0e\x0c;/\x06\xc2x'
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g1430
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g1437
sS'block_loop.thisRepN'
p2766
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2767
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.3001849149750342
sg34
g752
(S'\x07\xdf\n\x0e\x0c;6\x02M\xd8'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1321
sS'block_loop.thisIndex'
p2773
g888
sg38
S'left'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1331
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1329
sS'block_loop.thisRepN'
p2779
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2780
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F1.3501741097370541
sg34
g752
(S'\x07\xdf\n\x0e\r\x00\x00\x07f\x88'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g932
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g940
sS'block_loop.thisRepN'
p2792
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2793
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F1.1002264253365865
sg34
g752
(S'\x07\xdf\n\x0e\r\x00\x06\r2\xe8'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1032
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1040
sS'block_loop.thisRepN'
p2805
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2806
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F1.0834780208906523
sg34
g752
(S'\x07\xdf\n\x0e\r\x00\x0c\x0f2\xa0'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1840
sS'block_loop.thisIndex'
p2812
g888
sg38
S'left'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1847
sS'block_loop.thisRepN'
p2818
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2819
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.6000639191142909
sg34
g752
(S'\x07\xdf\n\x0e\r\x00\x13\x01\xb1\x98'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g932
sS'block_loop.thisIndex'
p2825
g888
sg38
S'left'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g940
sS'block_loop.thisRepN'
p2831
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2832
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F2.5001063417912519
sg34
g752
(S'\x07\xdf\n\x0e\r\x00\x19\x0bN\x88'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g1079
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g1087
sS'block_loop.thisRepN'
p2844
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2845
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F0.81685862357790029
sg34
g752
(S'\x07\xdf\n\x0e\r\x00!\x046 '
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1430
sS'block_loop.thisIndex'
p2851
g888
sg38
S'left'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1437
sS'block_loop.thisRepN'
p2857
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2858
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F2.1005668331072229
sg34
g752
(S"\x07\xdf\n\x0e\r\x00'\x01\xec0"
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g966
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g974
sS'block_loop.thisRepN'
p2870
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2871
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.4334283281987155
sg34
g752
(S'\x07\xdf\n\x0e\r\x00.\x04"\x98'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g915
sS'block_loop.thisIndex'
p2877
g888
sg38
S'left'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g923
sS'block_loop.thisRepN'
p2883
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2884
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.2999226242309305
sg34
g752
(S'\x07\xdf\n\x0e\r\x004\x0b\x1f\xa8'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1128
sS'block_loop.thisIndex'
p2890
g888
sg38
S'left'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1136
sS'block_loop.thisRepN'
p2896
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2897
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.3167691026064858
sg34
g752
(S'\x07\xdf\n\x0e\r\x00;\x00\xf6\x18'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g915
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g923
sS'block_loop.thisRepN'
p2909
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2910
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F1.5332550452485521
sg34
g752
(S'\x07\xdf\n\x0e\r\x01\x05\x06I`'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1222
sS'block_loop.thisIndex'
p2916
g888
sg38
S'left'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1230
sS'block_loop.thisRepN'
p2922
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2923
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F1.133895433802536
sg34
g752
(S'\x07\xdf\n\x0e\r\x01\x0b\x0e\xf08'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g2169
sS'block_loop.thisIndex'
p2929
g888
sg38
S'right'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g2176
sS'block_loop.thisRepN'
p2935
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2936
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F1.8334858611033269
sg34
g752
(S'\x07\xdf\n\x0e\r\x01\x12\x02&\xc8'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1840
sS'block_loop.thisIndex'
p2942
g888
sg38
S'left'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1847
sS'block_loop.thisRepN'
p2948
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2949
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F1.0168630140969981
sg34
g752
(S'\x07\xdf\n\x0e\r\x01\x19\x00R\x08'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g1096
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g1042
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g1103
sS'block_loop.thisRepN'
p2961
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2962
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F1.0001334261614829
sg34
g752
(S'\x07\xdf\n\x0e\r\x01\x1f\x00\xe2\x90'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g2197
sS'block_loop.thisIndex'
p2968
g888
sg38
S'right'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g2204
sS'block_loop.thisRepN'
p2974
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2975
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F0.93353096370719868
sg34
g752
(S'\x07\xdf\n\x0e\r\x01%\x01s\x18'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1708
sS'block_loop.thisIndex'
p2981
g888
sg38
S'right'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1715
sS'block_loop.thisRepN'
p2987
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p2988
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F1.9004991506917577
sg34
g752
(S'\x07\xdf\n\x0e\r\x01+\x01\x11p'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g1868
sS'block_loop.thisIndex'
p2994
g888
sg38
S'left'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1400
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g1875
sS'block_loop.thisRepN'
p3000
I0
sg906
g1400
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3001
I0
sg909
g1407
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F2.1168385526343627
sg34
g752
(S'\x07\xdf\n\x0e\r\x011\x0f6\x88'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g1338
sS'block_loop.thisIndex'
p3007
g888
sg38
S'right'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g1345
sS'block_loop.thisRepN'
p3013
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3014
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F2.3501011244861729
sg34
g752
(S'\x07\xdf\n\x0e\r\x019\x02*\xb0'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g966
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g976
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g974
sS'block_loop.thisRepN'
p3026
I0
sg906
g976
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3027
I0
sg909
g970
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F1.3333966252303071
sg34
g752
(S'\x07\xdf\n\x0e\r\x02\x04\x08-\xc0'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1583
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1590
sS'block_loop.thisRepN'
p3039
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3040
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F1.0499643911807652
sg34
g752
(S'\x07\xdf\n\x0e\r\x02\n\r\xbf\x88'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1693
sS'block_loop.thisIndex'
p3046
g888
sg38
S'right'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1169
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1700
sS'block_loop.thisRepN'
p3052
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3053
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F1.317218988253444
sg34
g752
(S'\x07\xdf\n\x0e\r\x02\x10\x0f\x07\xa8'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1306
sS'block_loop.thisIndex'
p3059
g888
sg38
S'right'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1313
sS'block_loop.thisRepN'
p3065
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3066
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F0.7501937245233421
sg34
g752
(S'\x07\xdf\n\x0e\r\x02\x17\x05\x18\xb0'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1321
sS'block_loop.thisIndex'
p3072
g888
sg38
S'left'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1331
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1329
sS'block_loop.thisRepN'
p3078
I0
sg906
g1331
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3079
I0
sg909
g1325
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F1.7834462038836136
sg34
g752
(S'\x07\xdf\n\x0e\r\x02\x1d\x01\xdc\x90'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1062
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1070
sS'block_loop.thisRepN'
p3091
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3092
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.3168637553526423
sg34
g752
(S'\x07\xdf\n\x0e\r\x02#\x0e\x15x'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g1175
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1179
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g1183
sS'block_loop.thisRepN'
p3104
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3105
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F1.1502307303253474
sg34
g752
(S'\x07\xdf\n\x0e\r\x02*\x04e\x00'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g983
sS'block_loop.thisIndex'
p3111
g888
sg38
S'left'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g994
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g991
sS'block_loop.thisRepN'
p3117
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3118
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.5168490442638358
sg34
g752
(S'\x07\xdf\n\x0e\r\x020\x07\x1cP'
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1222
sS'block_loop.thisIndex'
p3124
g888
sg38
S'left'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1230
sS'block_loop.thisRepN'
p3130
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3131
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F0.76675767015058227
sg34
g752
(S'\x07\xdf\n\x0e\r\x027\x00FP'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g1639
sS'block_loop.thisIndex'
p3137
g888
sg38
S'left'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1424
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g1646
sS'block_loop.thisRepN'
p3143
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3144
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F3.0501337397690804
sg34
g752
(S'\x07\xdf\n\x0e\r\x03\x00\x0c\x87\x08'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g2290
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g943
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g2297
sS'block_loop.thisRepN'
p3156
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3157
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F1.3502194404200054
sg34
g752
(S'\x07\xdf\n\x0e\r\x03\x08\r\xc3p'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g983
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g991
sS'block_loop.thisRepN'
p3169
I0
sg906
g987
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3170
I0
sg909
g994
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F2.1001685503133558
sg34
g752
(S'\x07\xdf\n\x0e\r\x03\x0f\x04M\x90'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g1611
sS'block_loop.thisIndex'
p3176
g888
sg38
S'right'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g1618
sS'block_loop.thisRepN'
p3182
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3183
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F7.683709863101285
sg34
g752
(S'\x07\xdf\n\x0e\r\x03\x16\x06Ex'
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g1205
sS'block_loop.thisIndex'
p3189
g888
sg38
S'left'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g1213
sS'block_loop.thisRepN'
p3195
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3196
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F1.4332843533875348
sg34
g752
(S'\x07\xdf\n\x0e\r\x03#\x01\xe8H'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1840
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1847
sS'block_loop.thisRepN'
p3208
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3209
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F1.2668776966766018
sg34
g752
(S'\x07\xdf\n\x0e\r\x03)\t#\xd8'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g1486
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g1493
sS'block_loop.thisRepN'
p3221
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3222
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.6334395610847423
sg34
g752
(S'\x07\xdf\n\x0e\r\x03/\r\xc3p'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g2197
sS'block_loop.thisIndex'
p3228
g888
sg38
S'right'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g1139
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g2204
sS'block_loop.thisRepN'
p3234
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3235
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F1.0334685841262399
sg34
g752
(S'\x07\xdf\n\x0e\r\x036\x08\x978'
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g1639
sS'block_loop.thisIndex'
p3241
g888
sg38
S'right'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g1646
sS'block_loop.thisRepN'
p3247
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3248
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F3.1167900858663415
sg34
g752
(S'\x07\xdf\n\x0e\r\x04\x00\t\xa0\xd8'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1430
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1437
sS'block_loop.thisRepN'
p3260
I0
sg906
g953
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3261
I0
sg909
g960
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F1.3668412610704763
sg34
g752
(S'\x07\xdf\n\x0e\r\x04\x08\x0b\xd3X'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1222
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1230
sS'block_loop.thisRepN'
p3273
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3274
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.8335394596469996
sg34
g752
(S'\x07\xdf\n\x0e\r\x04\x0f\x02\xd6\x90'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g932
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g940
sS'block_loop.thisRepN'
p3286
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3287
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F1.1834193475915527
sg34
g752
(S'\x07\xdf\n\x0e\r\x04\x15\x00\xcb '
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1568
sS'block_loop.thisIndex'
p3293
g888
sg38
S'left'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g907
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1575
sS'block_loop.thisRepN'
p3299
I0
sg906
g907
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3300
I0
sg909
g899
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.3501045456696374
sg34
g752
(S'\x07\xdf\n\x0e\r\x04\x1b\x03\xfb\x88'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1222
sS'block_loop.thisIndex'
p3306
g888
sg38
S'left'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1233
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1230
sS'block_loop.thisRepN'
p3312
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3313
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.80064335358110839
sg34
g752
(S'\x07\xdf\n\x0e\r\x04!\t\xc7\xe8'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1079
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1083
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1087
sS'block_loop.thisRepN'
p3325
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3326
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.91685554451305507
sg34
g752
(S"\x07\xdf\n\x0e\r\x04'\x07?x"
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1486
sS'block_loop.thisIndex'
p3332
g888
sg38
S'left'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1493
sS'block_loop.thisRepN'
p3338
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3339
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.5835170794034639
sg34
g752
(S'\x07\xdf\n\x0e\r\x04-\x06\xa38'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1291
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1298
sS'block_loop.thisRepN'
p3351
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3352
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F1.0165756346723356
sg34
g752
(S'\x07\xdf\n\x0e\r\x044\x00\xbfh'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1306
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1226
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1313
sS'block_loop.thisRepN'
p3364
I0
sg906
g1226
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3365
I0
sg909
g1233
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.88359109100929345
sg34
g752
(S'\x07\xdf\n\x0e\r\x04:\x01\x8ep'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g1413
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g1424
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g1421
sS'block_loop.thisRepN'
p3377
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3378
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F2.0838700315143797
sg34
g752
(S'\x07\xdf\n\x0e\r\x05\x04\x006\xb0'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g1611
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g1115
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g1618
sS'block_loop.thisRepN'
p3390
I0
sg906
g1115
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3391
I0
sg909
g1122
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.3834308655759742
sg34
g752
(S'\x07\xdf\n\x0e\r\x05\x0b\x01\xf4\x00'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1486
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1493
sS'block_loop.thisRepN'
p3403
I0
sg906
g1072
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3404
I0
sg909
g1066
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F1.2501800397885745
sg34
g752
(S'\x07\xdf\n\x0e\r\x05\x11\x089x'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1128
sS'block_loop.thisIndex'
p3410
g888
sg38
S'left'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g1139
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1136
sS'block_loop.thisRepN'
p3416
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3417
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F1.616801774909618
sg34
g752
(S'\x07\xdf\n\x0e\r\x05\x17\x0c\x9a\x90'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g915
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g923
sS'block_loop.thisRepN'
p3429
I0
sg906
g919
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3430
I0
sg909
g926
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F0.71663191314291907
sg34
g752
(S'\x07\xdf\n\x0e\r\x05\x1e\x073\xc0'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g1413
sS'block_loop.thisIndex'
p3436
g888
sg38
S'right'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g1421
sS'block_loop.thisRepN'
p3442
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3443
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.1001893625134471
sg34
g752
(S'\x07\xdf\n\x0e\r\x05$\x03z\xa0'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1840
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1090
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1847
sS'block_loop.thisRepN'
p3455
I0
sg906
g1083
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3456
I0
sg909
g1090
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F0.76684947191188257
sg34
g752
(S'\x07\xdf\n\x0e\r\x05*\x05zX'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g1693
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g1162
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g1700
sS'block_loop.thisRepN'
p3468
I0
sg906
g1162
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3469
I0
sg909
g1169
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F1.0668447962934806
sg34
g752
(S'\x07\xdf\n\x0e\r\x050\x02x\xd0'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1353
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1361
sS'block_loop.thisRepN'
p3481
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3482
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.93344172783508839
sg34
g752
(S'\x07\xdf\n\x0e\r\x056\x03\xffp'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1639
sS'block_loop.thisIndex'
p3488
g888
sg38
S'right'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1646
sS'block_loop.thisRepN'
p3494
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3495
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F1.5001550936576677
sg34
g752
(S'\x07\xdf\n\x0e\r\x06\x00\x03_H'
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1353
sS'block_loop.thisIndex'
p3501
g888
sg38
S'right'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1357
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1361
sS'block_loop.thisRepN'
p3507
I0
sg906
g1357
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3508
I0
sg909
g1364
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F0.95058698958018795
sg34
g752
(S'\x07\xdf\n\x0e\r\x06\x06\x0b\x90\xf0'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g1639
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g1646
sS'block_loop.thisRepN'
p3520
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3521
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F1.6834207730844355
sg34
g752
(S'\x07\xdf\n\x0e\r\x06\x0c\x0bi\xe0'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1708
sS'block_loop.thisIndex'
p3527
g888
sg38
S'right'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1186
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1715
sS'block_loop.thisRepN'
p3533
I0
sg906
g1179
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3534
I0
sg909
g1186
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F1.4334668165138282
sg34
g752
(S'\x07\xdf\n\x0e\r\x06\x13\x06\xf5@'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1032
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1036
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1040
sS'block_loop.thisRepN'
p3546
I0
sg906
g1042
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3547
I0
sg909
g1036
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F0.93350644522433868
sg34
g752
(S'\x07\xdf\n\x0e\r\x06\x19\x0e0\xd0'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g2290
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g2297
sS'block_loop.thisRepN'
p3559
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3560
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F1.5168541760394874
sg34
g752
(S'\x07\xdf\n\x0e\r\x06\x1f\r\x90\xa8'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g2169
sS'block_loop.thisIndex'
p3566
g888
sg38
S'left'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g2176
sS'block_loop.thisRepN'
p3572
I0
sg906
g1209
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3573
I0
sg909
g1216
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F0.90055816610947659
sg34
g752
(S'\x07\xdf\n\x0e\r\x06&\x06\xba\xa8'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g2290
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g2297
sS'block_loop.thisRepN'
p3585
I0
sg906
g936
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3586
I0
sg909
g943
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.96686612167195563
sg34
g752
(S'\x07\xdf\n\x0e\r\x06,\x05\xdf\xe8'
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g2197
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g2204
sS'block_loop.thisRepN'
p3598
I0
sg906
g1132
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3599
I0
sg909
g1139
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F0.91685868059812492
sg34
g752
(S'\x07\xdf\n\x0e\r\x062\x05\xb8\xd8'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1413
sS'block_loop.thisIndex'
p3605
g888
sg38
S'left'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1417
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1421
sS'block_loop.thisRepN'
p3611
I0
sg906
g1417
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3612
I0
sg909
g1424
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F1.1668591082461717
sg34
g752
(S'\x07\xdf\n\x0e\r\x068\x05\x18\xb0'
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F9.0337388576326703
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'26-walkers_smoky_bacon.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'26-walkers_smoky_bacon.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'44-crunch.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'44-crunch.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.3835129739827607
sg34
g752
(S'\x07\xdf\n\x0e\r\x07\x10\t#\xd8'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'8-liquorice_catherine_wheels.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'right'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3663
I1
sg3646
S'8-liquorice_catherine_wheels.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F0.88352523322464549
sg34
g752
(S"\x07\xdf\n\x0e\r\x07\x17\x00'\x10"
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'27-hartleys_raspberries_jelly.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'27-hartleys_raspberries_jelly.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'51-mars.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3680
I1
sg3646
S'51-mars.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F1.050175364171082
sg34
g752
(S'\x07\xdf\n\x0e\r\x07\x1c\x0e\x15x'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'33-ambrosia_rice.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'left'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'33-ambrosia_rice.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'23-crunchie_redo.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3697
I1
sg3646
S'23-crunchie_redo.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F1.3334793038347925
sg34
g752
(S'\x07\xdf\n\x0e\r\x07#\x00\x1bX'
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'6-sour_patch_kids.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'38-maltesers.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'38-maltesers.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3714
I1
sg3646
S'6-sour_patch_kids.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.85030810609532637
sg34
g752
(S'\x07\xdf\n\x0e\r\x07)\x05\xad '
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'49-yorkie.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'35-raisins.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'35-raisins.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
S'49-yorkie.png'
p3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3732
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F1.3668540905091504
sg34
g752
(S'\x07\xdf\n\x0e\r\x07/\x03\xdcH'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
g3633
sS'block_loop.thisIndex'
p3738
g3626
sg38
S'left'
p3739
sg58
g62
sS'trial_loop.thisN'
p3740
I6
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p3741
g59
(g98
S'\x06\x00\x00\x00'
tRp3742
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3743
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3744
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3745
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3746
Nsg69
Vn
sS'block_loop.thisTrialN'
p3747
I0
sg39
F0.78343080855665903
sg34
g752
(S'\x07\xdf\n\x0e\r\x075\n%\xa8'
tRp3748
sa(dp3749
S'trial_loop.thisTrialN'
p3750
I7
sg3632
S'5-pineapple.png'
p3751
sS'block_loop.thisIndex'
p3752
g3626
sg38
S'left'
p3753
sg58
g62
sS'trial_loop.thisN'
p3754
I7
sg33
S'40-sardines.png'
p3755
sg63
g64
sS'trial_loop.thisIndex'
p3756
g59
(g98
S'\x07\x00\x00\x00'
tRp3757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3758
I0
sg3641
S'40-sardines.png'
p3759
sS'block_loop.thisRepN'
p3760
I1
sg3644
S'5-pineapple.png'
p3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3762
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p3763
Nsg69
Vn
sS'block_loop.thisTrialN'
p3764
I0
sg39
F1.6501885357274659
sg34
g752
(S'\x07\xdf\n\x0e\r\x07;\x07^\xb8'
tRp3765
sa(dp3766
S'trial_loop.thisTrialN'
p3767
I8
sg3632
S'46-pistachios.png'
p3768
sS'block_loop.thisIndex'
p3769
g3626
sg38
S'left'
p3770
sg58
g62
sS'trial_loop.thisN'
p3771
I8
sg33
S'29-beans.png'
p3772
sg63
g64
sS'trial_loop.thisIndex'
p3773
g59
(g98
S'\x08\x00\x00\x00'
tRp3774
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3775
I0
sg3641
S'29-beans.png'
p3776
sS'block_loop.thisRepN'
p3777
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3778
I1
sg3646
S'46-pistachios.png'
p3779
sg55
g11
sS'block_loop.thisTrial'
p3780
Nsg69
Vn
sS'block_loop.thisTrialN'
p3781
I0
sg39
F1.8167123679777433
sg34
g752
(S'\x07\xdf\n\x0e\r\x08\x06\x02q\x00'
tRp3782
sa(dp3783
S'trial_loop.thisTrialN'
p3784
I9
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3785
sS'block_loop.thisIndex'
p3786
g3626
sg38
S'right'
p3787
sg58
g62
sS'trial_loop.thisN'
p3788
I9
sg33
S'18-mms.png'
p3789
sg63
g64
sS'trial_loop.thisIndex'
p3790
g59
(g98
S'\t\x00\x00\x00'
tRp3791
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3792
I0
sg3641
S'18-mms.png'
p3793
sS'block_loop.thisRepN'
p3794
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3795
I1
sg3646
S'43-mrporky_pork_crackles_redo.png'
p3796
sg55
g11
sS'block_loop.thisTrial'
p3797
Nsg69
Vn
sS'block_loop.thisTrialN'
p3798
I0
sg39
F0.95022291862278507
sg34
g752
(S'\x07\xdf\n\x0e\r\x08\r\x00#('
tRp3799
sa(dp3800
S'trial_loop.thisTrialN'
p3801
I10
sg3632
g3721
sS'block_loop.thisIndex'
p3802
g3626
sg38
S'left'
p3803
sg58
g62
sS'trial_loop.thisN'
p3804
I10
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p3805
g59
(g98
S'\n\x00\x00\x00'
tRp3806
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3807
I0
sg3641
g3729
sS'block_loop.thisRepN'
p3808
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3809
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p3810
Nsg69
Vn
sS'block_loop.thisTrialN'
p3811
I0
sg39
F0.90018525709365349
sg34
g752
(S'\x07\xdf\n\x0e\r\x08\x12\x0f>X'
tRp3812
sa(dp3813
S'trial_loop.thisTrialN'
p3814
I11
sg3632
S'50-polo.png'
p3815
sS'block_loop.thisIndex'
p3816
g3626
sg38
S'left'
p3817
sg58
g62
sS'trial_loop.thisN'
p3818
I11
sg33
S'50-polo.png'
p3819
sg63
g64
sS'trial_loop.thisIndex'
p3820
g59
(g98
S'\x0b\x00\x00\x00'
tRp3821
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3822
I0
sg3641
S'48-twix.png'
p3823
sS'block_loop.thisRepN'
p3824
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3825
I1
sg3646
S'48-twix.png'
p3826
sg55
g11
sS'block_loop.thisTrial'
p3827
Nsg69
Vn
sS'block_loop.thisTrialN'
p3828
I0
sg39
F1.9501775879398338
sg34
g752
(S'\x07\xdf\n\x0e\r\x08\x18\x0e%\x18'
tRp3829
sa(dp3830
S'trial_loop.thisTrialN'
p3831
I12
sg3632
S'45-chewy_nougat_redo.png'
p3832
sS'block_loop.thisIndex'
p3833
g3626
sg38
S'right'
p3834
sg58
g62
sS'trial_loop.thisN'
p3835
I12
sg33
S'45-chewy_nougat_redo.png'
p3836
sg63
g64
sS'trial_loop.thisIndex'
p3837
g59
(g98
S'\x0c\x00\x00\x00'
tRp3838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3839
I0
sg3641
S'41-peanuts_redo.png'
p3840
sS'block_loop.thisRepN'
p3841
I1
sg3644
S'41-peanuts_redo.png'
p3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3843
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p3844
Nsg69
Vn
sS'block_loop.thisTrialN'
p3845
I0
sg39
F1.1335270863655751
sg34
g752
(S'\x07\xdf\n\x0e\r\x08\x1f\r\xfa '
tRp3846
sa(dp3847
S'trial_loop.thisTrialN'
p3848
I13
sg3632
g3704
sS'block_loop.thisIndex'
p3849
g3626
sg38
S'right'
p3850
sg58
g62
sS'trial_loop.thisN'
p3851
I13
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p3852
g59
(g98
S'\r\x00\x00\x00'
tRp3853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3854
I0
sg3641
g3712
sS'block_loop.thisRepN'
p3855
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3856
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p3857
Nsg69
Vn
sS'block_loop.thisTrialN'
p3858
I0
sg39
F0.88326094678996014
sg34
g752
(S'\x07\xdf\n\x0e\r\x08&\x010\xb0'
tRp3859
sa(dp3860
S'trial_loop.thisTrialN'
p3861
I14
sg3632
g3633
sS'block_loop.thisIndex'
p3862
g3626
sg38
S'left'
p3863
sg58
g62
sS'trial_loop.thisN'
p3864
I14
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p3865
g59
(g98
S'\x0e\x00\x00\x00'
tRp3866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3867
I0
sg3641
g3642
sS'block_loop.thisRepN'
p3868
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3869
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p3870
Nsg69
Vn
sS'block_loop.thisTrialN'
p3871
I0
sg39
F1.666853691371216
sg34
g752
(S'\x07\xdf\n\x0e\r\x08+\x0f\x1b0'
tRp3872
sa(dp3873
S'trial_loop.thisTrialN'
p3874
I15
sg3632
S'29-beans.png'
p3875
sS'block_loop.thisIndex'
p3876
g3626
sg38
S'left'
p3877
sg58
g62
sS'trial_loop.thisN'
p3878
I15
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p3879
g59
(g98
S'\x0f\x00\x00\x00'
tRp3880
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3881
I0
sg3641
S'46-pistachios.png'
p3882
sS'block_loop.thisRepN'
p3883
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3884
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p3885
Nsg69
Vn
sS'block_loop.thisTrialN'
p3886
I0
sg39
F1.3500917162309634
sg34
g752
(S'\x07\xdf\n\x0e\r\x082\n\xa6\x90'
tRp3887
sa(dp3888
S'trial_loop.thisTrialN'
p3889
I16
sg3632
S'4-corn.png'
p3890
sS'block_loop.thisIndex'
p3891
g3626
sg38
S'left'
p3892
sg58
g62
sS'trial_loop.thisN'
p3893
I16
sg33
S'4-corn.png'
p3894
sg63
g64
sS'trial_loop.thisIndex'
p3895
g59
(g98
S'\x10\x00\x00\x00'
tRp3896
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3897
I0
sg3641
S'10-bounty_redo.png'
p3898
sS'block_loop.thisRepN'
p3899
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3900
I1
sg3646
S'10-bounty_redo.png'
p3901
sg55
g11
sS'block_loop.thisTrial'
p3902
Nsg69
Vn
sS'block_loop.thisTrialN'
p3903
I0
sg39
F1.2668600205615803
sg34
g752
(S'\x07\xdf\n\x0e\r\x089\x014\x98'
tRp3904
sa(dp3905
S'trial_loop.thisTrialN'
p3906
I17
sg3632
S'21-nakd_banana_crunch.png'
p3907
sS'block_loop.thisIndex'
p3908
g3626
sg38
S'right'
p3909
sg58
g62
sS'trial_loop.thisN'
p3910
I17
sg33
S'1-treacle_cookies.png'
p3911
sg63
g64
sS'trial_loop.thisIndex'
p3912
g59
(g98
S'\x11\x00\x00\x00'
tRp3913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3914
I0
sg3641
S'1-treacle_cookies.png'
p3915
sS'block_loop.thisRepN'
p3916
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3917
I1
sg3646
S'21-nakd_banana_crunch.png'
p3918
sg55
g11
sS'block_loop.thisTrial'
p3919
Nsg69
Vn
sS'block_loop.thisTrialN'
p3920
I0
sg39
F0.88354975170750549
sg34
g752
(S'\x07\xdf\n\x0e\r\t\x03\x05\xd0H'
tRp3921
sa(dp3922
S'trial_loop.thisTrialN'
p3923
I18
sg3632
S'19-caramello_redo.png'
p3924
sS'block_loop.thisIndex'
p3925
g3626
sg38
S'right'
p3926
sg58
g62
sS'trial_loop.thisN'
p3927
I18
sg33
S'30-spaghetti_hoops.png'
p3928
sg63
g64
sS'trial_loop.thisIndex'
p3929
g59
(g98
S'\x12\x00\x00\x00'
tRp3930
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3931
I0
sg3641
S'30-spaghetti_hoops.png'
p3932
sS'block_loop.thisRepN'
p3933
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3934
I1
sg3646
S'19-caramello_redo.png'
p3935
sg55
g11
sS'block_loop.thisTrial'
p3936
Nsg69
Vn
sS'block_loop.thisTrialN'
p3937
I0
sg39
F1.2168568559663981
sg34
g752
(S'\x07\xdf\n\x0e\r\t\t\x04x\x88'
tRp3938
sa(dp3939
S'trial_loop.thisTrialN'
p3940
I19
sg3632
S'31-hobnobs.png'
p3941
sS'block_loop.thisIndex'
p3942
g3626
sg38
S'left'
p3943
sg58
g62
sS'trial_loop.thisN'
p3944
I19
sg33
S'25-kitkat.png'
p3945
sg63
g64
sS'trial_loop.thisIndex'
p3946
g59
(g98
S'\x13\x00\x00\x00'
tRp3947
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3948
I0
sg3641
S'25-kitkat.png'
p3949
sS'block_loop.thisRepN'
p3950
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3951
I1
sg3646
S'31-hobnobs.png'
p3952
sg55
g11
sS'block_loop.thisTrial'
p3953
Nsg69
Vn
sS'block_loop.thisTrialN'
p3954
I0
sg39
F1.5168564568284637
sg34
g752
(S'\x07\xdf\n\x0e\r\t\x0f\x08`\x88'
tRp3955
sa(dp3956
S'trial_loop.thisTrialN'
p3957
I20
sg3632
g3751
sS'block_loop.thisIndex'
p3958
g3626
sg38
S'left'
p3959
sg58
g62
sS'trial_loop.thisN'
p3960
I20
sg33
g3761
sg63
g64
sS'trial_loop.thisIndex'
p3961
g59
(g98
S'\x14\x00\x00\x00'
tRp3962
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3963
I0
sg3641
g3759
sS'block_loop.thisRepN'
p3964
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3965
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p3966
Nsg69
Vn
sS'block_loop.thisTrialN'
p3967
I0
sg39
F1.1834281856490634
sg34
g752
(S'\x07\xdf\n\x0e\r\t\x16\x01O\xf0'
tRp3968
sa(dp3969
S'trial_loop.thisTrialN'
p3970
I21
sg3632
S'48-twix.png'
p3971
sS'block_loop.thisIndex'
p3972
g3626
sg38
S'right'
p3973
sg58
g62
sS'trial_loop.thisN'
p3974
I21
sg33
g3826
sg63
g64
sS'trial_loop.thisIndex'
p3975
g59
(g98
S'\x15\x00\x00\x00'
tRp3976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3977
I0
sg3641
S'50-polo.png'
p3978
sS'block_loop.thisRepN'
p3979
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3980
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p3981
Nsg69
Vn
sS'block_loop.thisTrialN'
p3982
I0
sg39
F1.8835021402355778
sg34
g752
(S'\x07\xdf\n\x0e\r\t\x1c\x04\xba\xf0'
tRp3983
sa(dp3984
S'trial_loop.thisTrialN'
p3985
I22
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p3986
sS'block_loop.thisIndex'
p3987
g3626
sg38
S'left'
p3988
sg58
g62
sS'trial_loop.thisN'
p3989
I22
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3990
g59
(g98
S'\x16\x00\x00\x00'
tRp3991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3992
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p3993
sS'block_loop.thisRepN'
p3994
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p3995
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3996
Nsg69
Vn
sS'block_loop.thisTrialN'
p3997
I0
sg39
F1.0168655799843691
sg34
g752
(S'\x07\xdf\n\x0e\r\t#\x03_H'
tRp3998
sa(dp3999
S'trial_loop.thisTrialN'
p4000
I23
sg3632
S'41-peanuts_redo.png'
p4001
sS'block_loop.thisIndex'
p4002
g3626
sg38
S'left'
p4003
sg58
g62
sS'trial_loop.thisN'
p4004
I23
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4005
g59
(g98
S'\x17\x00\x00\x00'
tRp4006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4007
I0
sg3641
S'45-chewy_nougat_redo.png'
p4008
sS'block_loop.thisRepN'
p4009
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4010
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p4011
Nsg69
Vn
sS'block_loop.thisTrialN'
p4012
I0
sg39
F0.98350134195879946
sg34
g752
(S'\x07\xdf\n\x0e\r\t)\x04.P'
tRp4013
sa(dp4014
S'trial_loop.thisTrialN'
p4015
I24
sg3632
S'44-crunch.png'
p4016
sS'block_loop.thisIndex'
p4017
g3626
sg38
S'right'
p4018
sg58
g62
sS'trial_loop.thisN'
p4019
I24
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4020
g59
(g98
S'\x18\x00\x00\x00'
tRp4021
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4022
I0
sg3641
S'26-walkers_smoky_bacon.png'
p4023
sS'block_loop.thisRepN'
p4024
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4025
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4026
Nsg69
Vn
sS'block_loop.thisTrialN'
p4027
I0
sg39
F1.0168960855380647
sg34
g752
(S'\x07\xdf\n\x0e\r\t/\x04\x80X'
tRp4028
sa(dp4029
S'trial_loop.thisTrialN'
p4030
I25
sg3632
g3815
sS'block_loop.thisIndex'
p4031
g3626
sg38
S'left'
p4032
sg58
g62
sS'trial_loop.thisN'
p4033
I25
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p4034
g59
(g98
S'\x19\x00\x00\x00'
tRp4035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4036
I0
sg3641
g3823
sS'block_loop.thisRepN'
p4037
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4038
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p4039
Nsg69
Vn
sS'block_loop.thisTrialN'
p4040
I0
sg39
F1.0835051052608833
sg34
g752
(S'\x07\xdf\n\x0e\r\t5\x05O`'
tRp4041
sa(dp4042
S'trial_loop.thisTrialN'
p4043
I26
sg3632
S'2-steamed_puddings.png'
p4044
sS'block_loop.thisIndex'
p4045
g3626
sg38
S'left'
p4046
sg58
g62
sS'trial_loop.thisN'
p4047
I26
sg33
S'20-fruit_pastilles.png'
p4048
sg63
g64
sS'trial_loop.thisIndex'
p4049
g59
(g98
S'\x1a\x00\x00\x00'
tRp4050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4051
I0
sg3641
S'20-fruit_pastilles.png'
p4052
sS'block_loop.thisRepN'
p4053
I1
sg3644
S'2-steamed_puddings.png'
p4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4055
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p4056
Nsg69
Vn
sS'block_loop.thisTrialN'
p4057
I0
sg39
F1.1168180255317566
sg34
g752
(S'\x07\xdf\n\x0e\r\t;\x07\x10\x98'
tRp4058
sa(dp4059
S'trial_loop.thisTrialN'
p4060
I27
sg3632
S'3-ellas_strawberries_apples.png'
p4061
sS'block_loop.thisIndex'
p4062
g3626
sg38
S'left'
p4063
sg58
g62
sS'trial_loop.thisN'
p4064
I27
sg33
S'13-mccoys_steak_crisps.png'
p4065
sg63
g64
sS'trial_loop.thisIndex'
p4066
g59
(g98
S'\x1b\x00\x00\x00'
tRp4067
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4068
I0
sg3641
S'13-mccoys_steak_crisps.png'
p4069
sS'block_loop.thisRepN'
p4070
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4071
I1
sg3646
S'3-ellas_strawberries_apples.png'
p4072
sg55
g11
sS'block_loop.thisTrial'
p4073
Nsg69
Vn
sS'block_loop.thisTrialN'
p4074
I0
sg39
F0.78352973778328305
sg34
g752
(S'\x07\xdf\n\x0e\r\n\x05\tN\xd0'
tRp4075
sa(dp4076
S'trial_loop.thisTrialN'
p4077
I28
sg3632
S'10-bounty_redo.png'
p4078
sS'block_loop.thisIndex'
p4079
g3626
sg38
S'right'
p4080
sg58
g62
sS'trial_loop.thisN'
p4081
I28
sg33
g3901
sg63
g64
sS'trial_loop.thisIndex'
p4082
g59
(g98
S'\x1c\x00\x00\x00'
tRp4083
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4084
I0
sg3641
S'4-corn.png'
p4085
sS'block_loop.thisRepN'
p4086
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4087
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p4088
Nsg69
Vn
sS'block_loop.thisTrialN'
p4089
I0
sg39
F2.4501584863319295
sg34
g752
(S'\x07\xdf\n\x0e\r\n\x0b\x06\x87\xe0'
tRp4090
sa(dp4091
S'trial_loop.thisTrialN'
p4092
I29
sg3632
g4016
sS'block_loop.thisIndex'
p4093
g3626
sg38
S'right'
p4094
sg58
g62
sS'trial_loop.thisN'
p4095
I29
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4096
g59
(g98
S'\x1d\x00\x00\x00'
tRp4097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4098
I0
sg3641
g4023
sS'block_loop.thisRepN'
p4099
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4100
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4101
Nsg69
Vn
sS'block_loop.thisTrialN'
p4102
I0
sg39
F1.3172090098014451
sg34
g752
(S'\x07\xdf\n\x0e\r\n\x12\r\xfa '
tRp4103
sa(dp4104
S'trial_loop.thisTrialN'
p4105
I30
sg3632
S'30-spaghetti_hoops.png'
p4106
sS'block_loop.thisIndex'
p4107
g3626
sg38
S'left'
p4108
sg58
g62
sS'trial_loop.thisN'
p4109
I30
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4110
g59
(g98
S'\x1e\x00\x00\x00'
tRp4111
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4112
I0
sg3641
S'19-caramello_redo.png'
p4113
sS'block_loop.thisRepN'
p4114
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4115
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4116
Nsg69
Vn
sS'block_loop.thisTrialN'
p4117
I0
sg39
F1.6334532458195099
sg34
g752
(S'\x07\xdf\n\x0e\r\n\x19\x04\x0f\x10'
tRp4118
sa(dp4119
S'trial_loop.thisTrialN'
p4120
I31
sg3632
g4061
sS'block_loop.thisIndex'
p4121
g3626
sg38
S'left'
p4122
sg58
g62
sS'trial_loop.thisN'
p4123
I31
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4124
g59
(g98
S'\x1f\x00\x00\x00'
tRp4125
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4126
I0
sg3641
g4069
sS'block_loop.thisRepN'
p4127
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4128
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4129
Nsg69
Vn
sS'block_loop.thisTrialN'
p4130
I0
sg39
F1.1668705121910534
sg34
g752
(S'\x07\xdf\n\x0e\r\n\x1f\x0e%\x18'
tRp4131
sa(dp4132
S'trial_loop.thisTrialN'
p4133
I32
sg3632
g3653
sS'block_loop.thisIndex'
p4134
g3626
sg38
S'right'
p4135
sg58
g62
sS'trial_loop.thisN'
p4136
I32
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4137
g59
(g98
S' \x00\x00\x00'
tRp4138
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4139
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4140
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4141
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4142
Nsg69
Vn
sS'block_loop.thisTrialN'
p4143
I0
sg39
F0.91686267197837878
sg34
g752
(S'\x07\xdf\n\x0e\r\n&\x01\xd4\xc0'
tRp4144
sa(dp4145
S'trial_loop.thisTrialN'
p4146
I33
sg3632
g4106
sS'block_loop.thisIndex'
p4147
g3626
sg38
S'left'
p4148
sg58
g62
sS'trial_loop.thisN'
p4149
I33
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4150
g59
(g98
S'!\x00\x00\x00'
tRp4151
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4152
I0
sg3641
g4113
sS'block_loop.thisRepN'
p4153
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4154
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4155
Nsg69
Vn
sS'block_loop.thisTrialN'
p4156
I0
sg39
F1.4334576933588323
sg34
g752
(S'\x07\xdf\n\x0e\r\n,\x014\x98'
tRp4157
sa(dp4158
S'trial_loop.thisTrialN'
p4159
I34
sg3632
g3890
sS'block_loop.thisIndex'
p4160
g3626
sg38
S'left'
p4161
sg58
g62
sS'trial_loop.thisN'
p4162
I34
sg33
g3894
sg63
g64
sS'trial_loop.thisIndex'
p4163
g59
(g98
S'"\x00\x00\x00'
tRp4164
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4165
I0
sg3641
g3898
sS'block_loop.thisRepN'
p4166
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4167
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p4168
Nsg69
Vn
sS'block_loop.thisTrialN'
p4169
I0
sg39
F1.3838362758360745
sg34
g752
(S'\x07\xdf\n\x0e\r\n2\x085\x90'
tRp4170
sa(dp4171
S'trial_loop.thisTrialN'
p4172
I35
sg3632
S'1-treacle_cookies.png'
p4173
sS'block_loop.thisIndex'
p4174
g3626
sg38
S'left'
p4175
sg58
g62
sS'trial_loop.thisN'
p4176
I35
sg33
g3918
sg63
g64
sS'trial_loop.thisIndex'
p4177
g59
(g98
S'#\x00\x00\x00'
tRp4178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4179
I0
sg3641
S'21-nakd_banana_crunch.png'
p4180
sS'block_loop.thisRepN'
p4181
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4182
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p4183
Nsg69
Vn
sS'block_loop.thisTrialN'
p4184
I0
sg39
F0.98354125576770457
sg34
g752
(S'\x07\xdf\n\x0e\r\n8\x0e\xb9\x88'
tRp4185
sa(dp4186
S'trial_loop.thisTrialN'
p4187
I36
sg3632
g3687
sS'block_loop.thisIndex'
p4188
g3626
sg38
S'left'
p4189
sg58
g62
sS'trial_loop.thisN'
p4190
I36
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4191
g59
(g98
S'$\x00\x00\x00'
tRp4192
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4193
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4194
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4195
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4196
Nsg69
Vn
sS'block_loop.thisTrialN'
p4197
I0
sg39
F1.8168517812109712
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b\x02\x0e\xd0\xf8'
tRp4198
sa(dp4199
S'trial_loop.thisTrialN'
p4200
I37
sg3632
g3670
sS'block_loop.thisIndex'
p4201
g3626
sg38
S'right'
p4202
sg58
g62
sS'trial_loop.thisN'
p4203
I37
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p4204
g59
(g98
S'%\x00\x00\x00'
tRp4205
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4206
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4207
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4208
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4209
Nsg69
Vn
sS'block_loop.thisTrialN'
p4210
I0
sg39
F3.3668096151222926
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b\t\x0c\x7f8'
tRp4211
sa(dp4212
S'trial_loop.thisTrialN'
p4213
I38
sg3632
S'38-maltesers.png'
p4214
sS'block_loop.thisIndex'
p4215
g3626
sg38
S'left'
p4216
sg58
g62
sS'trial_loop.thisN'
p4217
I38
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4218
g59
(g98
S'&\x00\x00\x00'
tRp4219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4220
I0
sg3641
S'6-sour_patch_kids.png'
p4221
sS'block_loop.thisRepN'
p4222
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4223
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4224
Nsg69
Vn
sS'block_loop.thisTrialN'
p4225
I0
sg39
F1.9332452948747232
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b\x12\x03z\xa0'
tRp4226
sa(dp4227
S'trial_loop.thisTrialN'
p4228
I39
sg3632
g4044
sS'block_loop.thisIndex'
p4229
g3626
sg38
S'left'
p4230
sg58
g62
sS'trial_loop.thisN'
p4231
I39
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4232
g59
(g98
S"'\x00\x00\x00"
tRp4233
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4234
I0
sg3641
g4052
sS'block_loop.thisRepN'
p4235
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4236
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p4237
Nsg69
Vn
sS'block_loop.thisTrialN'
p4238
I0
sg39
F1.3001732259308483
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b\x19\x02\xd2\xa8'
tRp4239
sa(dp4240
S'trial_loop.thisTrialN'
p4241
I40
sg3632
g4214
sS'block_loop.thisIndex'
p4242
g3626
sg38
S'left'
p4243
sg58
g62
sS'trial_loop.thisN'
p4244
I40
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4245
g59
(g98
S'(\x00\x00\x00'
tRp4246
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4247
I0
sg3641
g4221
sS'block_loop.thisRepN'
p4248
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4249
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4250
Nsg69
Vn
sS'block_loop.thisTrialN'
p4251
I0
sg39
F0.94993696469191491
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b\x1f\x07\xebX'
tRp4252
sa(dp4253
S'trial_loop.thisTrialN'
p4254
I41
sg3632
g3633
sS'block_loop.thisIndex'
p4255
g3626
sg38
S'left'
p4256
sg58
g62
sS'trial_loop.thisN'
p4257
I41
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4258
g59
(g98
S')\x00\x00\x00'
tRp4259
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4260
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4261
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4262
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4263
Nsg69
Vn
sS'block_loop.thisTrialN'
p4264
I0
sg39
F1.700174594404416
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b%\x07\xc4H'
tRp4265
sa(dp4266
S'trial_loop.thisTrialN'
p4267
I42
sg3632
g3815
sS'block_loop.thisIndex'
p4268
g3626
sg38
S'left'
p4269
sg58
g62
sS'trial_loop.thisN'
p4270
I42
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p4271
g59
(g98
S'*\x00\x00\x00'
tRp4272
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4273
I0
sg3641
g3823
sS'block_loop.thisRepN'
p4274
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4275
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p4276
Nsg69
Vn
sS'block_loop.thisTrialN'
p4277
I0
sg39
F1.8834876002047167
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b,\x03\xcc\xa8'
tRp4278
sa(dp4279
S'trial_loop.thisTrialN'
p4280
I43
sg3632
g4001
sS'block_loop.thisIndex'
p4281
g3626
sg38
S'left'
p4282
sg58
g62
sS'trial_loop.thisN'
p4283
I43
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4284
g59
(g98
S'+\x00\x00\x00'
tRp4285
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4286
I0
sg3641
g4008
sS'block_loop.thisRepN'
p4287
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4288
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p4289
Nsg69
Vn
sS'block_loop.thisTrialN'
p4290
I0
sg39
F1.0000875252817423
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b3\x02m\x18'
tRp4291
sa(dp4292
S'trial_loop.thisTrialN'
p4293
I44
sg3632
S'51-mars.png'
p4294
sS'block_loop.thisIndex'
p4295
g3626
sg38
S'left'
p4296
sg58
g62
sS'trial_loop.thisN'
p4297
I44
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4298
g59
(g98
S',\x00\x00\x00'
tRp4299
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4300
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4301
sS'block_loop.thisRepN'
p4302
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4303
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4304
Nsg69
Vn
sS'block_loop.thisTrialN'
p4305
I0
sg39
F0.90020207791349094
sg34
g752
(S'\x07\xdf\n\x0e\r\x0b9\x03\x01\x88'
tRp4306
sa(dp4307
S'trial_loop.thisTrialN'
p4308
I45
sg3632
S'36-fig_rolls.png'
p4309
sS'block_loop.thisIndex'
p4310
g3626
sg38
S'right'
p4311
sg58
g62
sS'trial_loop.thisN'
p4312
I45
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p4313
sg63
g64
sS'trial_loop.thisIndex'
p4314
g59
(g98
S'-\x00\x00\x00'
tRp4315
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4316
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4317
sS'block_loop.thisRepN'
p4318
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4319
I1
sg3646
S'36-fig_rolls.png'
p4320
sg55
g11
sS'block_loop.thisTrial'
p4321
Nsg69
Vn
sS'block_loop.thisTrialN'
p4322
I0
sg39
F1.1835328168490378
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c\x03\x01\xe8H'
tRp4323
sa(dp4324
S'trial_loop.thisTrialN'
p4325
I46
sg3632
g3971
sS'block_loop.thisIndex'
p4326
g3626
sg38
S'right'
p4327
sg58
g62
sS'trial_loop.thisN'
p4328
I46
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p4329
g59
(g98
S'.\x00\x00\x00'
tRp4330
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4331
I0
sg3641
g3978
sS'block_loop.thisRepN'
p4332
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4333
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p4334
Nsg69
Vn
sS'block_loop.thisTrialN'
p4335
I0
sg39
F2.2668249534290226
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c\t\x05SH'
tRp4336
sa(dp4337
S'trial_loop.thisTrialN'
p4338
I47
sg3632
g3986
sS'block_loop.thisIndex'
p4339
g3626
sg38
S'left'
p4340
sg58
g62
sS'trial_loop.thisN'
p4341
I47
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4342
g59
(g98
S'/\x00\x00\x00'
tRp4343
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4344
I0
sg3641
g3993
sS'block_loop.thisRepN'
p4345
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4346
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4347
Nsg69
Vn
sS'block_loop.thisTrialN'
p4348
I0
sg39
F1.2168468775143992
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c\x10\t\xac\x90'
tRp4349
sa(dp4350
S'trial_loop.thisTrialN'
p4351
I48
sg3632
S'13-mccoys_steak_crisps.png'
p4352
sS'block_loop.thisIndex'
p4353
g3626
sg38
S'right'
p4354
sg58
g62
sS'trial_loop.thisN'
p4355
I48
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4356
g59
(g98
S'0\x00\x00\x00'
tRp4357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4358
I0
sg3641
S'3-ellas_strawberries_apples.png'
p4359
sS'block_loop.thisRepN'
p4360
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4361
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4362
Nsg69
Vn
sS'block_loop.thisTrialN'
p4363
I0
sg39
F1.1667695872738477
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c\x16\r\x94\x90'
tRp4364
sa(dp4365
S'trial_loop.thisTrialN'
p4366
I49
sg3632
g3924
sS'block_loop.thisIndex'
p4367
g3626
sg38
S'right'
p4368
sg58
g62
sS'trial_loop.thisN'
p4369
I49
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4370
g59
(g98
S'1\x00\x00\x00'
tRp4371
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4372
I0
sg3641
g3932
sS'block_loop.thisRepN'
p4373
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4374
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4375
Nsg69
Vn
sS'block_loop.thisTrialN'
p4376
I0
sg39
F1.2505347024907678
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c\x1d\x01\x82\xb8'
tRp4377
sa(dp4378
S'trial_loop.thisTrialN'
p4379
I50
sg3632
g4309
sS'block_loop.thisIndex'
p4380
g3626
sg38
S'right'
p4381
sg58
g62
sS'trial_loop.thisN'
p4382
I50
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p4383
g59
(g98
S'2\x00\x00\x00'
tRp4384
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4385
I0
sg3641
g4317
sS'block_loop.thisRepN'
p4386
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4387
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p4388
Nsg69
Vn
sS'block_loop.thisTrialN'
p4389
I0
sg39
F1.233427929060781
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c#\x05\xa5P'
tRp4390
sa(dp4391
S'trial_loop.thisTrialN'
p4392
I51
sg3632
S'25-kitkat.png'
p4393
sS'block_loop.thisIndex'
p4394
g3626
sg38
S'right'
p4395
sg58
g62
sS'trial_loop.thisN'
p4396
I51
sg33
g3952
sg63
g64
sS'trial_loop.thisIndex'
p4397
g59
(g98
S'3\x00\x00\x00'
tRp4398
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4399
I0
sg3641
S'31-hobnobs.png'
p4400
sS'block_loop.thisRepN'
p4401
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4402
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p4403
Nsg69
Vn
sS'block_loop.thisTrialN'
p4404
I0
sg39
F1.066755845519765
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c)\t\xc7\xe8'
tRp4405
sa(dp4406
S'trial_loop.thisTrialN'
p4407
I52
sg3632
g4352
sS'block_loop.thisIndex'
p4408
g3626
sg38
S'right'
p4409
sg58
g62
sS'trial_loop.thisN'
p4410
I52
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4411
g59
(g98
S'4\x00\x00\x00'
tRp4412
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4413
I0
sg3641
g4359
sS'block_loop.thisRepN'
p4414
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4415
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4416
Nsg69
Vn
sS'block_loop.thisTrialN'
p4417
I0
sg39
F1.0501913296939165
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c/\x0bN\x88'
tRp4418
sa(dp4419
S'trial_loop.thisTrialN'
p4420
I53
sg3632
g3751
sS'block_loop.thisIndex'
p4421
g3626
sg38
S'left'
p4422
sg58
g62
sS'trial_loop.thisN'
p4423
I53
sg33
g3761
sg63
g64
sS'trial_loop.thisIndex'
p4424
g59
(g98
S'5\x00\x00\x00'
tRp4425
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4426
I0
sg3641
g3759
sS'block_loop.thisRepN'
p4427
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4428
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p4429
Nsg69
Vn
sS'block_loop.thisTrialN'
p4430
I0
sg39
F1.0001066268896466
sg34
g752
(S'\x07\xdf\n\x0e\r\x0c5\x0c\x96\xa8'
tRp4431
sa(dp4432
S'trial_loop.thisTrialN'
p4433
I54
sg3632
S'22-daim.png'
p4434
sS'block_loop.thisIndex'
p4435
g3626
sg38
S'left'
p4436
sg58
g62
sS'trial_loop.thisN'
p4437
I54
sg33
S'22-daim.png'
p4438
sg63
g64
sS'trial_loop.thisIndex'
p4439
g59
(g98
S'6\x00\x00\x00'
tRp4440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4441
I0
sg3641
S'7-olives.png'
p4442
sS'block_loop.thisRepN'
p4443
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4444
I1
sg3646
S'7-olives.png'
p4445
sg55
g11
sS'block_loop.thisTrial'
p4446
Nsg69
Vn
sS'block_loop.thisTrialN'
p4447
I0
sg39
F0.95055676912579656
sg34
g752
(S"\x07\xdf\n\x0e\r\x0c;\r'0"
tRp4448
sa(dp4449
S'trial_loop.thisTrialN'
p4450
I55
sg3632
g3670
sS'block_loop.thisIndex'
p4451
g3626
sg38
S'right'
p4452
sg58
g62
sS'trial_loop.thisN'
p4453
I55
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4454
g59
(g98
S'7\x00\x00\x00'
tRp4455
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4456
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4457
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4458
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4459
Nsg69
Vn
sS'block_loop.thisTrialN'
p4460
I0
sg39
F1.9001630193997698
sg34
g752
(S'\x07\xdf\n\x0e\r\r\x05\x0c\xc5\x88'
tRp4461
sa(dp4462
S'trial_loop.thisTrialN'
p4463
I56
sg3632
g4393
sS'block_loop.thisIndex'
p4464
g3626
sg38
S'right'
p4465
sg58
g62
sS'trial_loop.thisN'
p4466
I56
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p4467
g59
(g98
S'8\x00\x00\x00'
tRp4468
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4469
I0
sg3641
g4400
sS'block_loop.thisRepN'
p4470
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4471
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p4472
Nsg69
Vn
sS'block_loop.thisTrialN'
p4473
I0
sg39
F1.7000819373479317
sg34
g752
(S'\x07\xdf\n\x0e\r\r\x0c\x0b\xe2\xf8'
tRp4474
sa(dp4475
S'trial_loop.thisTrialN'
p4476
I57
sg3632
S'20-fruit_pastilles.png'
p4477
sS'block_loop.thisIndex'
p4478
g3626
sg38
S'right'
p4479
sg58
g62
sS'trial_loop.thisN'
p4480
I57
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4481
g59
(g98
S'9\x00\x00\x00'
tRp4482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4483
I0
sg3641
S'2-steamed_puddings.png'
p4484
sS'block_loop.thisRepN'
p4485
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4486
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p4487
Nsg69
Vn
sS'block_loop.thisTrialN'
p4488
I0
sg39
F0.98344033085140836
sg34
g752
(S'\x07\xdf\n\x0e\r\r\x13\x07\xa8\xf0'
tRp4489
sa(dp4490
S'trial_loop.thisTrialN'
p4491
I58
sg3632
g3653
sS'block_loop.thisIndex'
p4492
g3626
sg38
S'right'
p4493
sg58
g62
sS'trial_loop.thisN'
p4494
I58
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p4495
g59
(g98
S':\x00\x00\x00'
tRp4496
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4497
I0
sg3641
g3661
sS'block_loop.thisRepN'
p4498
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4499
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4500
Nsg69
Vn
sS'block_loop.thisTrialN'
p4501
I0
sg39
F1.0668633277055051
sg34
g752
(S'\x07\xdf\n\x0e\r\r\x19\x07\xfe\xe0'
tRp4502
sa(dp4503
S'trial_loop.thisTrialN'
p4504
I59
sg3632
g3687
sS'block_loop.thisIndex'
p4505
g3626
sg38
S'left'
p4506
sg58
g62
sS'trial_loop.thisN'
p4507
I59
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4508
g59
(g98
S';\x00\x00\x00'
tRp4509
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4510
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4511
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4512
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4513
Nsg69
Vn
sS'block_loop.thisTrialN'
p4514
I0
sg39
F1.083698117037784
sg34
g752
(S'\x07\xdf\n\x0e\r\r\x1f\t\x85\x80'
tRp4515
sa(dp4516
S'trial_loop.thisTrialN'
p4517
I60
sg3632
g4434
sS'block_loop.thisIndex'
p4518
g3626
sg38
S'left'
p4519
sg58
g62
sS'trial_loop.thisN'
p4520
I60
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p4521
g59
(g98
S'<\x00\x00\x00'
tRp4522
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4523
I0
sg3641
g4442
sS'block_loop.thisRepN'
p4524
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4525
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p4526
Nsg69
Vn
sS'block_loop.thisTrialN'
p4527
I0
sg39
F1.2000987581668596
sg34
g752
(S'\x07\xdf\n\x0e\r\r%\x0bF\xb8'
tRp4528
sa(dp4529
S'trial_loop.thisTrialN'
p4530
I61
sg3632
g3687
sS'block_loop.thisIndex'
p4531
g3626
sg38
S'left'
p4532
sg58
g62
sS'trial_loop.thisN'
p4533
I61
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p4534
g59
(g98
S'=\x00\x00\x00'
tRp4535
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4536
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4537
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4538
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4539
Nsg69
Vn
sS'block_loop.thisTrialN'
p4540
I0
sg39
F0.96685899420572241
sg34
g752
(S'\x07\xdf\n\x0e\r\r+\x0e\xf08'
tRp4541
sa(dp4542
S'trial_loop.thisTrialN'
p4543
I62
sg3632
g3875
sS'block_loop.thisIndex'
p4544
g3626
sg38
S'right'
p4545
sg58
g62
sS'trial_loop.thisN'
p4546
I62
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p4547
g59
(g98
S'>\x00\x00\x00'
tRp4548
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4549
I0
sg3641
g3882
sS'block_loop.thisRepN'
p4550
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4551
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p4552
Nsg69
Vn
sS'block_loop.thisTrialN'
p4553
I0
sg39
F1.8834642221163449
sg34
g752
(S'\x07\xdf\n\x0e\r\r1\x0e\xc9('
tRp4554
sa(dp4555
S'trial_loop.thisTrialN'
p4556
I63
sg3632
S'40-sardines.png'
p4557
sS'block_loop.thisIndex'
p4558
g3626
sg38
S'right'
p4559
sg58
g62
sS'trial_loop.thisN'
p4560
I63
sg33
g3761
sg63
g64
sS'trial_loop.thisIndex'
p4561
g59
(g98
S'?\x00\x00\x00'
tRp4562
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4563
I0
sg3641
S'5-pineapple.png'
p4564
sS'block_loop.thisRepN'
p4565
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4566
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p4567
Nsg69
Vn
sS'block_loop.thisTrialN'
p4568
I0
sg39
F1.733515739440918
sg34
g752
(S'\x07\xdf\n\x0e\r\r8\r\xac\x00'
tRp4569
sa(dp4570
S'trial_loop.thisTrialN'
p4571
I64
sg3632
g3670
sS'block_loop.thisIndex'
p4572
g3626
sg38
S'right'
p4573
sg58
g62
sS'trial_loop.thisN'
p4574
I64
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4575
g59
(g98
S'@\x00\x00\x00'
tRp4576
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4577
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4578
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4579
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4580
Nsg69
Vn
sS'block_loop.thisTrialN'
p4581
I0
sg39
F1.1001351937729851
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e\x03\t\xeb\x10'
tRp4582
sa(dp4583
S'trial_loop.thisTrialN'
p4584
I65
sg3632
g3941
sS'block_loop.thisIndex'
p4585
g3626
sg38
S'left'
p4586
sg58
g62
sS'trial_loop.thisN'
p4587
I65
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p4588
g59
(g98
S'A\x00\x00\x00'
tRp4589
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4590
I0
sg3641
g3949
sS'block_loop.thisRepN'
p4591
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4592
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p4593
Nsg69
Vn
sS'block_loop.thisTrialN'
p4594
I0
sg39
F0.95018585580055515
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e\t\x0c)H'
tRp4595
sa(dp4596
S'trial_loop.thisTrialN'
p4597
I66
sg3632
g4557
sS'block_loop.thisIndex'
p4598
g3626
sg38
S'right'
p4599
sg58
g62
sS'trial_loop.thisN'
p4600
I66
sg33
g3761
sg63
g64
sS'trial_loop.thisIndex'
p4601
g59
(g98
S'B\x00\x00\x00'
tRp4602
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4603
I0
sg3641
g4564
sS'block_loop.thisRepN'
p4604
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4605
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p4606
Nsg69
Vn
sS'block_loop.thisTrialN'
p4607
I0
sg39
F1.3834342867603482
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e\x0f\x0b\xc7\xa0'
tRp4608
sa(dp4609
S'trial_loop.thisTrialN'
p4610
I67
sg3632
g4309
sS'block_loop.thisIndex'
p4611
g3626
sg38
S'right'
p4612
sg58
g62
sS'trial_loop.thisN'
p4613
I67
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p4614
g59
(g98
S'C\x00\x00\x00'
tRp4615
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4616
I0
sg3641
g4317
sS'block_loop.thisRepN'
p4617
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4618
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p4619
Nsg69
Vn
sS'block_loop.thisTrialN'
p4620
I0
sg39
F1.1835533439507344
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e\x16\x02\xca\xd8'
tRp4621
sa(dp4622
S'trial_loop.thisTrialN'
p4623
I68
sg3632
g3670
sS'block_loop.thisIndex'
p4624
g3626
sg38
S'left'
p4625
sg58
g62
sS'trial_loop.thisN'
p4626
I68
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4627
g59
(g98
S'D\x00\x00\x00'
tRp4628
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4629
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4630
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4631
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4632
Nsg69
Vn
sS'block_loop.thisTrialN'
p4633
I0
sg39
F1.1000992713452433
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e\x1c\x069\xc0'
tRp4634
sa(dp4635
S'trial_loop.thisTrialN'
p4636
I69
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4637
sS'block_loop.thisIndex'
p4638
g3626
sg38
S'left'
p4639
sg58
g62
sS'trial_loop.thisN'
p4640
I69
sg33
g4320
sg63
g64
sS'trial_loop.thisIndex'
p4641
g59
(g98
S'E\x00\x00\x00'
tRp4642
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4643
I0
sg3641
S'36-fig_rolls.png'
p4644
sS'block_loop.thisRepN'
p4645
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4646
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p4647
Nsg69
Vn
sS'block_loop.thisTrialN'
p4648
I0
sg39
F1.2505985645857436
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e"\x085\x90'
tRp4649
sa(dp4650
S'trial_loop.thisTrialN'
p4651
I70
sg3632
g3832
sS'block_loop.thisIndex'
p4652
g3626
sg38
S'right'
p4653
sg58
g62
sS'trial_loop.thisN'
p4654
I70
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4655
g59
(g98
S'F\x00\x00\x00'
tRp4656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4657
I0
sg3641
g3840
sS'block_loop.thisRepN'
p4658
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4659
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p4660
Nsg69
Vn
sS'block_loop.thisTrialN'
p4661
I0
sg39
F0.88343286126655585
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e(\x0c\x96\xa8'
tRp4662
sa(dp4663
S'trial_loop.thisTrialN'
p4664
I71
sg3632
g3768
sS'block_loop.thisIndex'
p4665
g3626
sg38
S'right'
p4666
sg58
g62
sS'trial_loop.thisN'
p4667
I71
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p4668
g59
(g98
S'G\x00\x00\x00'
tRp4669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4670
I0
sg3641
g3776
sS'block_loop.thisRepN'
p4671
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4672
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p4673
Nsg69
Vn
sS'block_loop.thisTrialN'
p4674
I0
sg39
F1.2001899897304611
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e.\x0bB\xd0'
tRp4675
sa(dp4676
S'trial_loop.thisTrialN'
p4677
I72
sg3632
S'23-crunchie_redo.png'
p4678
sS'block_loop.thisIndex'
p4679
g3626
sg38
S'right'
p4680
sg58
g62
sS'trial_loop.thisN'
p4681
I72
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4682
g59
(g98
S'H\x00\x00\x00'
tRp4683
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4684
I0
sg3641
S'33-ambrosia_rice.png'
p4685
sS'block_loop.thisRepN'
p4686
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4687
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4688
Nsg69
Vn
sS'block_loop.thisTrialN'
p4689
I0
sg39
F0.86686178817308246
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e4\x0e\xecP'
tRp4690
sa(dp4691
S'trial_loop.thisTrialN'
p4692
I73
sg3632
g3971
sS'block_loop.thisIndex'
p4693
g3626
sg38
S'right'
p4694
sg58
g62
sS'trial_loop.thisN'
p4695
I73
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p4696
g59
(g98
S'I\x00\x00\x00'
tRp4697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4698
I0
sg3641
g3978
sS'block_loop.thisRepN'
p4699
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4700
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p4701
Nsg69
Vn
sS'block_loop.thisTrialN'
p4702
I0
sg39
F1.1001976303741685
sg34
g752
(S'\x07\xdf\n\x0e\r\x0e:\rV\x10'
tRp4703
sa(dp4704
S'trial_loop.thisTrialN'
p4705
I74
sg3632
g3986
sS'block_loop.thisIndex'
p4706
g3626
sg38
S'left'
p4707
sg58
g62
sS'trial_loop.thisN'
p4708
I74
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4709
g59
(g98
S'J\x00\x00\x00'
tRp4710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4711
I0
sg3641
g3993
sS'block_loop.thisRepN'
p4712
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4713
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4714
Nsg69
Vn
sS'block_loop.thisTrialN'
p4715
I0
sg39
F1.4838862251172031
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f\x05\x00\x13\x88'
tRp4716
sa(dp4717
S'trial_loop.thisTrialN'
p4718
I75
sg3632
g3832
sS'block_loop.thisIndex'
p4719
g3626
sg38
S'right'
p4720
sg58
g62
sS'trial_loop.thisN'
p4721
I75
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4722
g59
(g98
S'K\x00\x00\x00'
tRp4723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4724
I0
sg3641
g3840
sS'block_loop.thisRepN'
p4725
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4726
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p4727
Nsg69
Vn
sS'block_loop.thisTrialN'
p4728
I0
sg39
F0.80019802951210295
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f\x0b\x08\x06\xb0'
tRp4729
sa(dp4730
S'trial_loop.thisTrialN'
p4731
I76
sg3632
g3941
sS'block_loop.thisIndex'
p4732
g3626
sg38
S'right'
p4733
sg58
g62
sS'trial_loop.thisN'
p4734
I76
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p4735
g59
(g98
S'L\x00\x00\x00'
tRp4736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4737
I0
sg3641
g3949
sS'block_loop.thisRepN'
p4738
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4739
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p4740
Nsg69
Vn
sS'block_loop.thisTrialN'
p4741
I0
sg39
F1.3668503842272912
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f\x11\x05\x82('
tRp4742
sa(dp4743
S'trial_loop.thisTrialN'
p4744
I77
sg3632
g3721
sS'block_loop.thisIndex'
p4745
g3626
sg38
S'left'
p4746
sg58
g62
sS'trial_loop.thisN'
p4747
I77
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4748
g59
(g98
S'M\x00\x00\x00'
tRp4749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4750
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4751
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4752
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4753
Nsg69
Vn
sS'block_loop.thisTrialN'
p4754
I0
sg39
F1.0168336489377907
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f\x17\x0b\x8d\x08'
tRp4755
sa(dp4756
S'trial_loop.thisTrialN'
p4757
I78
sg3632
g4106
sS'block_loop.thisIndex'
p4758
g3626
sg38
S'left'
p4759
sg58
g62
sS'trial_loop.thisN'
p4760
I78
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p4761
g59
(g98
S'N\x00\x00\x00'
tRp4762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4763
I0
sg3641
g4113
sS'block_loop.thisRepN'
p4764
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4765
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p4766
Nsg69
Vn
sS'block_loop.thisTrialN'
p4767
I0
sg39
F1.816848074929112
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f\x1d\x0cX('
tRp4768
sa(dp4769
S'trial_loop.thisTrialN'
p4770
I79
sg3632
g3986
sS'block_loop.thisIndex'
p4771
g3626
sg38
S'left'
p4772
sg58
g62
sS'trial_loop.thisN'
p4773
I79
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4774
g59
(g98
S'O\x00\x00\x00'
tRp4775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4776
I0
sg3641
g3993
sS'block_loop.thisRepN'
p4777
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4778
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4779
Nsg69
Vn
sS'block_loop.thisTrialN'
p4780
I0
sg39
F1.0505747873594373
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f$\n\nP'
tRp4781
sa(dp4782
S'trial_loop.thisTrialN'
p4783
I80
sg3632
g4294
sS'block_loop.thisIndex'
p4784
g3626
sg38
S'right'
p4785
sg58
g62
sS'trial_loop.thisN'
p4786
I80
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4787
g59
(g98
S'P\x00\x00\x00'
tRp4788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4789
I0
sg3641
g4301
sS'block_loop.thisRepN'
p4790
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4791
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4792
Nsg69
Vn
sS'block_loop.thisTrialN'
p4793
I0
sg39
F1.5335133446114924
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f*\x0bRp'
tRp4794
sa(dp4795
S'trial_loop.thisTrialN'
p4796
I81
sg3632
g4061
sS'block_loop.thisIndex'
p4797
g3626
sg38
S'left'
p4798
sg58
g62
sS'trial_loop.thisN'
p4799
I81
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p4800
g59
(g98
S'Q\x00\x00\x00'
tRp4801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4802
I0
sg3641
g4069
sS'block_loop.thisRepN'
p4803
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4804
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4805
Nsg69
Vn
sS'block_loop.thisTrialN'
p4806
I0
sg39
F1.0334443507417745
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f1\x04\xb7\x08'
tRp4807
sa(dp4808
S'trial_loop.thisTrialN'
p4809
I82
sg3632
g3687
sS'block_loop.thisIndex'
p4810
g3626
sg38
S'left'
p4811
sg58
g62
sS'trial_loop.thisN'
p4812
I82
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4813
g59
(g98
S'R\x00\x00\x00'
tRp4814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4815
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4816
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4817
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4818
Nsg69
Vn
sS'block_loop.thisTrialN'
p4819
I0
sg39
F0.916894317927472
sg34
g752
(S'\x07\xdf\n\x0e\r\x0f7\x05\xc4\x90'
tRp4820
sa(dp4821
S'trial_loop.thisTrialN'
p4822
I83
sg3632
g4309
sS'block_loop.thisIndex'
p4823
g3626
sg38
S'right'
p4824
sg58
g62
sS'trial_loop.thisN'
p4825
I83
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p4826
g59
(g98
S'S\x00\x00\x00'
tRp4827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4828
I0
sg3641
g4317
sS'block_loop.thisRepN'
p4829
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4830
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p4831
Nsg69
Vn
sS'block_loop.thisTrialN'
p4832
I0
sg39
F1.3168486451249919
sg34
g752
(S'\x07\xdf\n\x0e\r\x10\x01\x04\xe5\xe8'
tRp4833
sa(dp4834
S'trial_loop.thisTrialN'
p4835
I84
sg3632
g4477
sS'block_loop.thisIndex'
p4836
g3626
sg38
S'right'
p4837
sg58
g62
sS'trial_loop.thisN'
p4838
I84
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p4839
g59
(g98
S'T\x00\x00\x00'
tRp4840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4841
I0
sg3641
g4484
sS'block_loop.thisRepN'
p4842
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4843
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p4844
Nsg69
Vn
sS'block_loop.thisTrialN'
p4845
I0
sg39
F1.3504629146545994
sg34
g752
(S'\x07\xdf\n\x0e\r\x10\x07\n=\x18'
tRp4846
sa(dp4847
S'trial_loop.thisTrialN'
p4848
I85
sg3632
g3832
sS'block_loop.thisIndex'
p4849
g3626
sg38
S'right'
p4850
sg58
g62
sS'trial_loop.thisN'
p4851
I85
sg33
g3836
sg63
g64
sS'trial_loop.thisIndex'
p4852
g59
(g98
S'U\x00\x00\x00'
tRp4853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4854
I0
sg3641
g3840
sS'block_loop.thisRepN'
p4855
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4856
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p4857
Nsg69
Vn
sS'block_loop.thisTrialN'
p4858
I0
sg39
F1.2167727518690299
sg34
g752
(S'\x07\xdf\n\x0e\r\x10\x0e\x00\xc78'
tRp4859
sa(dp4860
S'trial_loop.thisTrialN'
p4861
I86
sg3632
g4061
sS'block_loop.thisIndex'
p4862
g3626
sg38
S'left'
p4863
sg58
g62
sS'trial_loop.thisN'
p4864
I86
sg33
g4072
sg63
g64
sS'trial_loop.thisIndex'
p4865
g59
(g98
S'V\x00\x00\x00'
tRp4866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4867
I0
sg3641
g4069
sS'block_loop.thisRepN'
p4868
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4869
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p4870
Nsg69
Vn
sS'block_loop.thisTrialN'
p4871
I0
sg39
F1.2835277420927014
sg34
g752
(S'\x07\xdf\n\x0e\r\x10\x14\x04\xaf8'
tRp4872
sa(dp4873
S'trial_loop.thisTrialN'
p4874
I87
sg3632
g4294
sS'block_loop.thisIndex'
p4875
g3626
sg38
S'right'
p4876
sg58
g62
sS'trial_loop.thisN'
p4877
I87
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4878
g59
(g98
S'W\x00\x00\x00'
tRp4879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4880
I0
sg3641
g4301
sS'block_loop.thisRepN'
p4881
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4882
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4883
Nsg69
Vn
sS'block_loop.thisTrialN'
p4884
I0
sg39
F1.4501020368015816
sg34
g752
(S'\x07\xdf\n\x0e\r\x10\x1a\t\x89h'
tRp4885
sa(dp4886
S'trial_loop.thisTrialN'
p4887
I88
sg3632
g3721
sS'block_loop.thisIndex'
p4888
g3626
sg38
S'left'
p4889
sg58
g62
sS'trial_loop.thisN'
p4890
I88
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4891
g59
(g98
S'X\x00\x00\x00'
tRp4892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4893
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4894
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4895
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4896
Nsg69
Vn
sS'block_loop.thisTrialN'
p4897
I0
sg39
F1.1334478289445542
sg34
g752
(S'\x07\xdf\n\x0e\r\x10!\x01\x82\xb8'
tRp4898
sa(dp4899
S'trial_loop.thisTrialN'
p4900
I89
sg3632
g4214
sS'block_loop.thisIndex'
p4901
g3626
sg38
S'left'
p4902
sg58
g62
sS'trial_loop.thisN'
p4903
I89
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4904
g59
(g98
S'Y\x00\x00\x00'
tRp4905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4906
I0
sg3641
g4221
sS'block_loop.thisRepN'
p4907
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4908
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4909
Nsg69
Vn
sS'block_loop.thisTrialN'
p4910
I0
sg39
F0.88363214521268674
sg34
g752
(S"\x07\xdf\n\x0e\r\x10'\x046 "
tRp4911
sa(dp4912
S'trial_loop.thisTrialN'
p4913
I90
sg3632
S'42-mrkipling_lemon_slices.png'
p4914
sS'block_loop.thisIndex'
p4915
g3626
sg38
S'right'
p4916
sg58
g62
sS'trial_loop.thisN'
p4917
I90
sg33
S'16-skips_prawn.png'
p4918
sg63
g64
sS'trial_loop.thisIndex'
p4919
g59
(g98
S'Z\x00\x00\x00'
tRp4920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4921
I0
sg3641
S'16-skips_prawn.png'
p4922
sS'block_loop.thisRepN'
p4923
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4924
I1
sg3646
S'42-mrkipling_lemon_slices.png'
p4925
sg55
g11
sS'block_loop.thisTrial'
p4926
Nsg69
Vn
sS'block_loop.thisTrialN'
p4927
I0
sg39
F1.4667452398507521
sg34
g752
(S'\x07\xdf\n\x0e\r\x10-\x02\xe2H'
tRp4928
sa(dp4929
S'trial_loop.thisTrialN'
p4930
I91
sg3632
g4001
sS'block_loop.thisIndex'
p4931
g3626
sg38
S'left'
p4932
sg58
g62
sS'trial_loop.thisN'
p4933
I91
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p4934
g59
(g98
S'[\x00\x00\x00'
tRp4935
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4936
I0
sg3641
g4008
sS'block_loop.thisRepN'
p4937
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4938
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p4939
Nsg69
Vn
sS'block_loop.thisTrialN'
p4940
I0
sg39
F1.1334324336194186
sg34
g752
(S'\x07\xdf\n\x0e\r\x103\n\x96\xf0'
tRp4941
sa(dp4942
S'trial_loop.thisTrialN'
p4943
I92
sg3632
S'35-raisins.png'
p4944
sS'block_loop.thisIndex'
p4945
g3626
sg38
S'right'
p4946
sg58
g62
sS'trial_loop.thisN'
p4947
I92
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p4948
g59
(g98
S'\\\x00\x00\x00'
tRp4949
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4950
I0
sg3641
S'49-yorkie.png'
p4951
sS'block_loop.thisRepN'
p4952
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4953
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p4954
Nsg69
Vn
sS'block_loop.thisTrialN'
p4955
I0
sg39
F1.0335324462203062
sg34
g752
(S'\x07\xdf\n\x0e\r\x109\r\x0f\xc0'
tRp4956
sa(dp4957
S'trial_loop.thisTrialN'
p4958
I93
sg3632
g3890
sS'block_loop.thisIndex'
p4959
g3626
sg38
S'left'
p4960
sg58
g62
sS'trial_loop.thisN'
p4961
I93
sg33
g3901
sg63
g64
sS'trial_loop.thisIndex'
p4962
g59
(g98
S']\x00\x00\x00'
tRp4963
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4964
I0
sg3641
g3898
sS'block_loop.thisRepN'
p4965
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4966
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p4967
Nsg69
Vn
sS'block_loop.thisTrialN'
p4968
I0
sg39
F2.0499184903001151
sg34
g752
(S'\x07\xdf\n\x0e\r\x11\x03\x0e\x19`'
tRp4969
sa(dp4970
S'trial_loop.thisTrialN'
p4971
I94
sg3632
g4637
sS'block_loop.thisIndex'
p4972
g3626
sg38
S'left'
p4973
sg58
g62
sS'trial_loop.thisN'
p4974
I94
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p4975
g59
(g98
S'^\x00\x00\x00'
tRp4976
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4977
I0
sg3641
g4644
sS'block_loop.thisRepN'
p4978
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4979
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p4980
Nsg69
Vn
sS'block_loop.thisTrialN'
p4981
I0
sg39
F1.7505281452222334
sg34
g752
(S'\x07\xdf\n\x0e\r\x11\x0b\x00\x1bX'
tRp4982
sa(dp4983
S'trial_loop.thisTrialN'
p4984
I95
sg3632
S'16-skips_prawn.png'
p4985
sS'block_loop.thisIndex'
p4986
g3626
sg38
S'left'
p4987
sg58
g62
sS'trial_loop.thisN'
p4988
I95
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p4989
g59
(g98
S'_\x00\x00\x00'
tRp4990
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4991
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p4992
sS'block_loop.thisRepN'
p4993
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p4994
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p4995
Nsg69
Vn
sS'block_loop.thisTrialN'
p4996
I0
sg39
F1.7000719588950233
sg34
g752
(S'\x07\xdf\n\x0e\r\x11\x11\x0c\x19\xa8'
tRp4997
sa(dp4998
S'trial_loop.thisTrialN'
p4999
I96
sg3632
g4214
sS'block_loop.thisIndex'
p5000
g3626
sg38
S'left'
p5001
sg58
g62
sS'trial_loop.thisN'
p5002
I96
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5003
g59
(g98
S'`\x00\x00\x00'
tRp5004
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5005
I0
sg3641
g4221
sS'block_loop.thisRepN'
p5006
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5007
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5008
Nsg69
Vn
sS'block_loop.thisTrialN'
p5009
I0
sg39
F0.64984157068738568
sg34
g752
(S'\x07\xdf\n\x0e\r\x11\x18\x07\xdf\xa0'
tRp5010
sa(dp5011
S'trial_loop.thisTrialN'
p5012
I97
sg3632
S'7-olives.png'
p5013
sS'block_loop.thisIndex'
p5014
g3626
sg38
S'right'
p5015
sg58
g62
sS'trial_loop.thisN'
p5016
I97
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5017
g59
(g98
S'a\x00\x00\x00'
tRp5018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5019
I0
sg3641
S'22-daim.png'
p5020
sS'block_loop.thisRepN'
p5021
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5022
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vn
sS'block_loop.thisTrialN'
p5024
I0
sg39
F1.0668812889189212
sg34
g752
(S'\x07\xdf\n\x0e\r\x11\x1e\x034P'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g3924
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'right'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g3932
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5035
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F1.6002375441830736
sg34
g752
(S'\x07\xdf\n\x0e\r\x11$\x04\xba\xf0'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g4393
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'right'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g4400
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5048
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vn
sS'block_loop.thisTrialN'
p5050
I0
sg39
F2.0171997155857753
sg34
g752
(S'\x07\xdf\n\x0e\r\x11*\x0eW\xe0'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
g4678
sS'block_loop.thisIndex'
p5054
g3626
sg38
S'right'
p5055
sg58
g62
sS'trial_loop.thisN'
p5056
I100
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5057
g59
(g98
S'd\x00\x00\x00'
tRp5058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5059
I0
sg3641
g4685
sS'block_loop.thisRepN'
p5060
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5061
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5062
Nsg69
Vn
sS'block_loop.thisTrialN'
p5063
I0
sg39
F1.1668454235104946
sg34
g752
(S'\x07\xdf\n\x0e\r\x111\x0f\x1f\x18'
tRp5064
sa(dp5065
S'trial_loop.thisTrialN'
p5066
I101
sg3632
g3907
sS'block_loop.thisIndex'
p5067
g3626
sg38
S'right'
p5068
sg58
g62
sS'trial_loop.thisN'
p5069
I101
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p5070
g59
(g98
S'e\x00\x00\x00'
tRp5071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5072
I0
sg3641
g3915
sS'block_loop.thisRepN'
p5073
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5074
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p5075
Nsg69
Vn
sS'block_loop.thisTrialN'
p5076
I0
sg39
F1.0668601916204352
sg34
g752
(S'\x07\xdf\n\x0e\r\x118\x02\xce\xc0'
tRp5077
sa(dp5078
S'trial_loop.thisTrialN'
p5079
I102
sg3632
g5013
sS'block_loop.thisIndex'
p5080
g3626
sg38
S'right'
p5081
sg58
g62
sS'trial_loop.thisN'
p5082
I102
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5083
g59
(g98
S'f\x00\x00\x00'
tRp5084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5085
I0
sg3641
g5020
sS'block_loop.thisRepN'
p5086
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5087
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vn
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.66686680590828473
sg34
g752
(S'\x07\xdf\n\x0e\r\x12\x02\x04U`'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g4557
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'right'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g3761
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g4564
sS'block_loop.thisRepN'
p5099
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5100
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vn
sS'block_loop.thisTrialN'
p5102
I0
sg39
F1.016804568876978
sg34
g752
(S'\x07\xdf\n\x0e\r\x12\x07\x0f*\xd0'
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g4061
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'left'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g4069
sS'block_loop.thisRepN'
p5112
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5113
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vn
sS'block_loop.thisTrialN'
p5115
I0
sg39
F1.0005240112923275
sg34
g752
(S'\x07\xdf\n\x0e\r\x12\x0e\x00y\x18'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g4985
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g4992
sS'block_loop.thisRepN'
p5125
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5126
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vn
sS'block_loop.thisTrialN'
p5128
I0
sg39
F2.7167137364522205
sg34
g752
(S'\x07\xdf\n\x0e\r\x12\x14\x01\t\xa0'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g4106
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'right'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g4113
sS'block_loop.thisRepN'
p5138
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5139
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vn
sS'block_loop.thisTrialN'
p5141
I0
sg39
F1.1002061833332846
sg34
g752
(S'\x07\xdf\n\x0e\r\x12\x1b\x0c\x87\x08'
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g4914
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'right'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g4922
sS'block_loop.thisRepN'
p5151
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5152
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vn
sS'block_loop.thisTrialN'
p5154
I0
sg39
F1.0500282532748315
sg34
g752
(S'\x07\xdf\n\x0e\r\x12!\x0e\x86\xc0'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g4944
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'right'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g4951
sS'block_loop.thisRepN'
p5164
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5165
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vn
sS'block_loop.thisTrialN'
p5167
I0
sg39
F0.75021054534227005
sg34
g752
(S'\x07\xdf\n\x0e\r\x12(\x00\x8c\xa0'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g3890
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'right'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g3894
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g3898
sS'block_loop.thisRepN'
p5177
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5178
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vn
sS'block_loop.thisTrialN'
p5180
I0
sg39
F1.1504288738769901
sg34
g752
(S'\x07\xdf\n\x0e\r\x12-\x0c\x92\xc0'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g4944
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'right'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g4951
sS'block_loop.thisRepN'
p5190
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5191
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vn
sS'block_loop.thisTrialN'
p5193
I0
sg39
F0.90011255694116699
sg34
g752
(S'\x07\xdf\n\x0e\r\x124\x00\x03\xe8'
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g3986
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'left'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g3993
sS'block_loop.thisRepN'
p5203
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5204
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vn
sS'block_loop.thisTrialN'
p5206
I0
sg39
F1.9334978922652226
sg34
g752
(S'\x07\xdf\n\x0e\r\x129\x0ekh'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
g4678
sS'block_loop.thisIndex'
p5210
g3626
sg38
S'right'
p5211
sg58
g62
sS'trial_loop.thisN'
p5212
I112
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5213
g59
(g98
S'p\x00\x00\x00'
tRp5214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5215
I0
sg3641
g4685
sS'block_loop.thisRepN'
p5216
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5217
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5218
Nsg69
Vn
sS'block_loop.thisTrialN'
p5219
I0
sg39
F1.2999542701791142
sg34
g752
(S'\x07\xdf\n\x0e\r\x13\x04\r\xc7X'
tRp5220
sa(dp5221
S'trial_loop.thisTrialN'
p5222
I113
sg3632
g4393
sS'block_loop.thisIndex'
p5223
g3626
sg38
S'right'
p5224
sg58
g62
sS'trial_loop.thisN'
p5225
I113
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p5226
g59
(g98
S'q\x00\x00\x00'
tRp5227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5228
I0
sg3641
g4400
sS'block_loop.thisRepN'
p5229
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5230
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p5231
Nsg69
Vn
sS'block_loop.thisTrialN'
p5232
I0
sg39
F1.5668339625462977
sg34
g752
(S'\x07\xdf\n\x0e\r\x13\x0b\x03\x99\xe0'
tRp5233
sa(dp5234
S'trial_loop.thisTrialN'
p5235
I114
sg3632
g4352
sS'block_loop.thisIndex'
p5236
g3626
sg38
S'right'
p5237
sg58
g62
sS'trial_loop.thisN'
p5238
I114
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5239
g59
(g98
S'r\x00\x00\x00'
tRp5240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5241
I0
sg3641
g4359
sS'block_loop.thisRepN'
p5242
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5243
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5244
Nsg69
Vn
sS'block_loop.thisTrialN'
p5245
I0
sg39
F1.1172311334548795
sg34
g752
(S'\x07\xdf\n\x0e\r\x13\x11\x0c\xbd\xb8'
tRp5246
sa(dp5247
S'trial_loop.thisTrialN'
p5248
I115
sg3632
g4434
sS'block_loop.thisIndex'
p5249
g3626
sg38
S'left'
p5250
sg58
g62
sS'trial_loop.thisN'
p5251
I115
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5252
g59
(g98
S's\x00\x00\x00'
tRp5253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5254
I0
sg3641
g4442
sS'block_loop.thisRepN'
p5255
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5256
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5257
Nsg69
Vn
sS'block_loop.thisTrialN'
p5258
I0
sg39
F1.5501836320308939
sg34
g752
(S'\x07\xdf\n\x0e\r\x13\x17\x0e\xf8\x08'
tRp5259
sa(dp5260
S'trial_loop.thisTrialN'
p5261
I116
sg3632
g4078
sS'block_loop.thisIndex'
p5262
g3626
sg38
S'right'
p5263
sg58
g62
sS'trial_loop.thisN'
p5264
I116
sg33
g3894
sg63
g64
sS'trial_loop.thisIndex'
p5265
g59
(g98
S't\x00\x00\x00'
tRp5266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5267
I0
sg3641
g4085
sS'block_loop.thisRepN'
p5268
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5269
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p5270
Nsg69
Vn
sS'block_loop.thisTrialN'
p5271
I0
sg39
F1.6834566955121772
sg34
g752
(S'\x07\xdf\n\x0e\r\x13\x1e\x08\x9f\x08'
tRp5272
sa(dp5273
S'trial_loop.thisTrialN'
p5274
I117
sg3632
g4914
sS'block_loop.thisIndex'
p5275
g3626
sg38
S'right'
p5276
sg58
g62
sS'trial_loop.thisN'
p5277
I117
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p5278
g59
(g98
S'u\x00\x00\x00'
tRp5279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5280
I0
sg3641
g4922
sS'block_loop.thisRepN'
p5281
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5282
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p5283
Nsg69
Vn
sS'block_loop.thisTrialN'
p5284
I0
sg39
F0.95006725476832798
sg34
g752
(S'\x07\xdf\n\x0e\r\x13%\x04e\x00'
tRp5285
sa(dp5286
S'trial_loop.thisTrialN'
p5287
I118
sg3632
g4173
sS'block_loop.thisIndex'
p5288
g3626
sg38
S'left'
p5289
sg58
g62
sS'trial_loop.thisN'
p5290
I118
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p5291
g59
(g98
S'v\x00\x00\x00'
tRp5292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5293
I0
sg3641
g4180
sS'block_loop.thisRepN'
p5294
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5295
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p5296
Nsg69
Vn
sS'block_loop.thisTrialN'
p5297
I0
sg39
F0.90014705387602589
sg34
g752
(S'\x07\xdf\n\x0e\r\x13+\x04\x03X'
tRp5298
sa(dp5299
S'trial_loop.thisTrialN'
p5300
I119
sg3632
g4001
sS'block_loop.thisIndex'
p5301
g3626
sg38
S'left'
p5302
sg58
g62
sS'trial_loop.thisN'
p5303
I119
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5304
g59
(g98
S'w\x00\x00\x00'
tRp5305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5306
I0
sg3641
g4008
sS'block_loop.thisRepN'
p5307
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5308
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p5309
Nsg69
Vn
sS'block_loop.thisTrialN'
p5310
I0
sg39
F2.4839170157692934
sg34
g752
(S'\x07\xdf\n\x0e\r\x131\x03(\x98'
tRp5311
sa(dp5312
S'trial_loop.thisTrialN'
p5313
I120
sg3632
g4637
sS'block_loop.thisIndex'
p5314
g3626
sg38
S'left'
p5315
sg58
g62
sS'trial_loop.thisN'
p5316
I120
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p5317
g59
(g98
S'x\x00\x00\x00'
tRp5318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5319
I0
sg3641
g4644
sS'block_loop.thisRepN'
p5320
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5321
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p5322
Nsg69
Vn
sS'block_loop.thisTrialN'
p5323
I0
sg39
F2.5168156877234651
sg34
g752
(S'\x07\xdf\n\x0e\r\x138\x0b\x13\xf0'
tRp5324
sa(dp5325
S'trial_loop.thisTrialN'
p5326
I121
sg3632
g3768
sS'block_loop.thisIndex'
p5327
g3626
sg38
S'right'
p5328
sg58
g62
sS'trial_loop.thisN'
p5329
I121
sg33
g3779
sg63
g64
sS'trial_loop.thisIndex'
p5330
g59
(g98
S'y\x00\x00\x00'
tRp5331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5332
I0
sg3641
g3776
sS'block_loop.thisRepN'
p5333
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5334
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p5335
Nsg69
Vn
sS'block_loop.thisTrialN'
p5336
I0
sg39
F1.0668681743818524
sg34
g752
(S'\x07\xdf\n\x0e\r\x14\x04\x046 '
tRp5337
sa(dp5338
S'trial_loop.thisTrialN'
p5339
I122
sg3632
g5013
sS'block_loop.thisIndex'
p5340
g3626
sg38
S'right'
p5341
sg58
g62
sS'trial_loop.thisN'
p5342
I122
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5343
g59
(g98
S'z\x00\x00\x00'
tRp5344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5345
I0
sg3641
g5020
sS'block_loop.thisRepN'
p5346
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5347
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5348
Nsg69
Vn
sS'block_loop.thisTrialN'
p5349
I0
sg39
F0.98353127731661516
sg34
g752
(S'\x07\xdf\n\x0e\r\x14\n\x05\xbc\xc0'
tRp5350
sa(dp5351
S'trial_loop.thisTrialN'
p5352
I123
sg3632
g3653
sS'block_loop.thisIndex'
p5353
g3626
sg38
S'right'
p5354
sg58
g62
sS'trial_loop.thisN'
p5355
I123
sg33
g3664
sg63
g64
sS'trial_loop.thisIndex'
p5356
g59
(g98
S'{\x00\x00\x00'
tRp5357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5358
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5359
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5360
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5361
Nsg69
Vn
sS'block_loop.thisTrialN'
p5362
I0
sg39
F1.3168529216054594
sg34
g752
(S'\x07\xdf\n\x0e\r\x14\x10\x05\xd40'
tRp5363
sa(dp5364
S'trial_loop.thisTrialN'
p5365
I124
sg3632
g4016
sS'block_loop.thisIndex'
p5366
g3626
sg38
S'right'
p5367
sg58
g62
sS'trial_loop.thisN'
p5368
I124
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5369
g59
(g98
S'|\x00\x00\x00'
tRp5370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5371
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5372
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5373
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5374
Nsg69
Vn
sS'block_loop.thisTrialN'
p5375
I0
sg39
F1.3002071526689178
sg34
g752
(S"\x07\xdf\n\x0e\r\x14\x16\x0b'x"
tRp5376
sa(dp5377
S'trial_loop.thisTrialN'
p5378
I125
sg3632
g4393
sS'block_loop.thisIndex'
p5379
g3626
sg38
S'right'
p5380
sg58
g62
sS'trial_loop.thisN'
p5381
I125
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p5382
g59
(g98
S'}\x00\x00\x00'
tRp5383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5384
I0
sg3641
g4400
sS'block_loop.thisRepN'
p5385
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5386
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p5387
Nsg69
Vn
sS'block_loop.thisTrialN'
p5388
I0
sg39
F1.0168744180427893
sg34
g752
(S'\x07\xdf\n\x0e\r\x14\x1d\x00\xfd\xe8'
tRp5389
sa(dp5390
S'trial_loop.thisTrialN'
p5391
I126
sg3632
g3832
sS'block_loop.thisIndex'
p5392
g3626
sg38
S'right'
p5393
sg58
g62
sS'trial_loop.thisN'
p5394
I126
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5395
g59
(g98
S'~\x00\x00\x00'
tRp5396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5397
I0
sg3641
g3840
sS'block_loop.thisRepN'
p5398
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5399
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p5400
Nsg69
Vn
sS'block_loop.thisTrialN'
p5401
I0
sg39
F0.78350521930042305
sg34
g752
(S'\x07\xdf\n\x0e\r\x14#\x01\xc9\x08'
tRp5402
sa(dp5403
S'trial_loop.thisTrialN'
p5404
I127
sg3632
g3751
sS'block_loop.thisIndex'
p5405
g3626
sg38
S'left'
p5406
sg58
g62
sS'trial_loop.thisN'
p5407
I127
sg33
g3755
sg63
g64
sS'trial_loop.thisIndex'
p5408
g59
(g98
S'\x7f\x00\x00\x00'
tRp5409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5410
I0
sg3641
g3759
sS'block_loop.thisRepN'
p5411
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5412
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p5413
Nsg69
Vn
sS'block_loop.thisTrialN'
p5414
I0
sg39
F1.9668364714134441
sg34
g752
(S'\x07\xdf\n\x0e\r\x14(\x0eH@'
tRp5415
sa(dp5416
S'trial_loop.thisTrialN'
p5417
I128
sg3632
g5013
sS'block_loop.thisIndex'
p5418
g3626
sg38
S'right'
p5419
sg58
g62
sS'trial_loop.thisN'
p5420
I128
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5421
g59
(g98
S'\x80\x00\x00\x00'
tRp5422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5423
I0
sg3641
g5020
sS'block_loop.thisRepN'
p5424
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5425
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5426
Nsg69
Vn
sS'block_loop.thisTrialN'
p5427
I0
sg39
F1.1835254042844099
sg34
g752
(S'\x07\xdf\n\x0e\r\x14/\x0e[\xc8'
tRp5428
sa(dp5429
S'trial_loop.thisTrialN'
p5430
I129
sg3632
g3875
sS'block_loop.thisIndex'
p5431
g3626
sg38
S'left'
p5432
sg58
g62
sS'trial_loop.thisN'
p5433
I129
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p5434
g59
(g98
S'\x81\x00\x00\x00'
tRp5435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5436
I0
sg3641
g3882
sS'block_loop.thisRepN'
p5437
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5438
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p5439
Nsg69
Vn
sS'block_loop.thisTrialN'
p5440
I0
sg39
F1.0836915597692496
sg34
g752
(S'\x07\xdf\n\x0e\r\x146\x02I\xf0'
tRp5441
sa(dp5442
S'trial_loop.thisTrialN'
p5443
I130
sg3632
g4044
sS'block_loop.thisIndex'
p5444
g3626
sg38
S'right'
p5445
sg58
g62
sS'trial_loop.thisN'
p5446
I130
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5447
g59
(g98
S'\x82\x00\x00\x00'
tRp5448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5449
I0
sg3641
g4052
sS'block_loop.thisRepN'
p5450
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5451
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p5452
Nsg69
Vn
sS'block_loop.thisTrialN'
p5453
I0
sg39
F1.1667724382605229
sg34
g752
(S'\x07\xdf\n\x0e\r\x15\x00\x04\x0b('
tRp5454
sa(dp5455
S'trial_loop.thisTrialN'
p5456
I131
sg3632
g4078
sS'block_loop.thisIndex'
p5457
g3626
sg38
S'right'
p5458
sg58
g62
sS'trial_loop.thisN'
p5459
I131
sg33
g3894
sg63
g64
sS'trial_loop.thisIndex'
p5460
g59
(g98
S'\x83\x00\x00\x00'
tRp5461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5462
I0
sg3641
g4085
sS'block_loop.thisRepN'
p5463
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5464
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p5465
Nsg69
Vn
sS'block_loop.thisTrialN'
p5466
I0
sg39
F1.1168379824366639
sg34
g752
(S'\x07\xdf\n\x0e\r\x15\x06\x07;\x90'
tRp5467
sa(dp5468
S'trial_loop.thisTrialN'
p5469
I132
sg3632
g4044
sS'block_loop.thisIndex'
p5470
g3626
sg38
S'left'
p5471
sg58
g62
sS'trial_loop.thisN'
p5472
I132
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5473
g59
(g98
S'\x84\x00\x00\x00'
tRp5474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5475
I0
sg3641
g4052
sS'block_loop.thisRepN'
p5476
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5477
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p5478
Nsg69
Vn
sS'block_loop.thisTrialN'
p5479
I0
sg39
F1.2668517527008589
sg34
g752
(S'\x07\xdf\n\x0e\r\x15\x0c\tu\xe0'
tRp5480
sa(dp5481
S'trial_loop.thisTrialN'
p5482
I133
sg3632
g4985
sS'block_loop.thisIndex'
p5483
g3626
sg38
S'left'
p5484
sg58
g62
sS'trial_loop.thisN'
p5485
I133
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p5486
g59
(g98
S'\x85\x00\x00\x00'
tRp5487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5488
I0
sg3641
g4992
sS'block_loop.thisRepN'
p5489
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5490
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p5491
Nsg69
Vn
sS'block_loop.thisTrialN'
p5492
I0
sg39
F1.566800606005927
sg34
g752
(S'\x07\xdf\n\x0e\r\x15\x12\x0e\x11\x90'
tRp5493
sa(dp5494
S'trial_loop.thisTrialN'
p5495
I134
sg3632
g3785
sS'block_loop.thisIndex'
p5496
g3626
sg38
S'right'
p5497
sg58
g62
sS'trial_loop.thisN'
p5498
I134
sg33
g3796
sg63
g64
sS'trial_loop.thisIndex'
p5499
g59
(g98
S'\x86\x00\x00\x00'
tRp5500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5501
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5502
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5503
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5504
Nsg69
Vn
sS'block_loop.thisTrialN'
p5505
I0
sg39
F0.68352996586236259
sg34
g752
(S'\x07\xdf\n\x0e\r\x15\x19\x07\xf3('
tRp5506
sa(dp5507
S'trial_loop.thisTrialN'
p5508
I135
sg3632
g4106
sS'block_loop.thisIndex'
p5509
g3626
sg38
S'left'
p5510
sg58
g62
sS'trial_loop.thisN'
p5511
I135
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p5512
g59
(g98
S'\x87\x00\x00\x00'
tRp5513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5514
I0
sg3641
g4113
sS'block_loop.thisRepN'
p5515
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5516
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p5517
Nsg69
Vn
sS'block_loop.thisTrialN'
p5518
I0
sg39
F1.2668454805307192
sg34
g752
(S'\x07\xdf\n\x0e\r\x15\x1f\x03\x86X'
tRp5519
sa(dp5520
S'trial_loop.thisTrialN'
p5521
I136
sg3632
g3941
sS'block_loop.thisIndex'
p5522
g3626
sg38
S'left'
p5523
sg58
g62
sS'trial_loop.thisN'
p5524
I136
sg33
g3945
sg63
g64
sS'trial_loop.thisIndex'
p5525
g59
(g98
S'\x88\x00\x00\x00'
tRp5526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5527
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5528
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5529
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p5530
Nsg69
Vn
sS'block_loop.thisTrialN'
p5531
I0
sg39
F1.1834447213705062
sg34
g752
(S'\x07\xdf\n\x0e\r\x15%\x08"\x08'
tRp5532
sa(dp5533
S'trial_loop.thisTrialN'
p5534
I137
sg3632
g3785
sS'block_loop.thisIndex'
p5535
g3626
sg38
S'right'
p5536
sg58
g62
sS'trial_loop.thisN'
p5537
I137
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5538
g59
(g98
S'\x89\x00\x00\x00'
tRp5539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5540
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5541
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5542
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5543
Nsg69
Vn
sS'block_loop.thisTrialN'
p5544
I0
sg39
F0.66678925908036035
sg34
g752
(S'\x07\xdf\n\x0e\r\x15+\x0b\x90\xf0'
tRp5545
sa(dp5546
S'trial_loop.thisTrialN'
p5547
I138
sg3632
g4352
sS'block_loop.thisIndex'
p5548
g3626
sg38
S'right'
p5549
sg58
g62
sS'trial_loop.thisN'
p5550
I138
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5551
g59
(g98
S'\x8a\x00\x00\x00'
tRp5552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5553
I0
sg3641
g4359
sS'block_loop.thisRepN'
p5554
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5555
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5556
Nsg69
Vn
sS'block_loop.thisTrialN'
p5557
I0
sg39
F2.1501554642854899
sg34
g752
(S'\x07\xdf\n\x0e\r\x151\x06\xe5\xa0'
tRp5558
sa(dp5559
S'trial_loop.thisTrialN'
p5560
I139
sg3632
S'18-mms.png'
p5561
sS'block_loop.thisIndex'
p5562
g3626
sg38
S'left'
p5563
sg58
g62
sS'trial_loop.thisN'
p5564
I139
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5565
g59
(g98
S'\x8b\x00\x00\x00'
tRp5566
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5567
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p5568
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5570
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.71725456856256642
sg34
g752
(S'\x07\xdf\n\x0e\r\x158\t\xcf\xb8'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4914
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'right'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4922
sS'block_loop.thisRepN'
p5582
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5583
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.96675379280986817
sg34
g752
(S'\x07\xdf\n\x0e\r\x16\x02\x05\xdc\x00'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g5561
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'left'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g5568
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5596
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.0835042499647898
sg34
g752
(S'\x07\xdf\n\x0e\r\x16\x08\x05\xf3p'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3907
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3915
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5609
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.98354439185277442
sg34
g752
(S'\x07\xdf\n\x0e\r\x16\x0e\x07\xb4\xa8'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4309
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'right'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4317
sS'block_loop.thisRepN'
p5621
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5622
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F1.3001067979485015
sg34
g752
(S'\x07\xdf\n\x0e\r\x16\x14\x07\xcc\x18'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3907
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'right'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3915
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5635
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.85053561480708595
sg34
g752
(S'\x07\xdf\n\x0e\r\x16\x1a\x0c\xe4\xc8'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g5561
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'left'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g5568
sS'block_loop.thisRepN'
p5647
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5648
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F0.88345880524229869
sg34
g752
(S'\x07\xdf\n\x0e\r\x16 \x0bRp'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g4352
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'right'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g4065
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g4359
sS'block_loop.thisRepN'
p5660
I1
sg3644
g4065
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5661
I1
sg3646
g4072
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.88352580342234432
sg34
g752
(S'\x07\xdf\n\x0e\r\x16&\t\xfa\xb0'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g4477
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'right'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g4484
sS'block_loop.thisRepN'
p5673
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5674
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.91675433449745469
sg34
g752
(S'\x07\xdf\n\x0e\r\x16,\x08\xa6\xd8'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g4294
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'left'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g4301
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5687
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.93353866137113073
sg34
g752
(S'\x07\xdf\n\x0e\r\x162\x08\x06\xb0'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g5013
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g5020
sS'block_loop.thisRepN'
p5699
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5700
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.85017753091960913
sg34
g752
(S'\x07\xdf\n\x0e\r\x168\x07f\x88'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4557
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g3755
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4564
sS'block_loop.thisRepN'
p5712
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5713
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.0502098611059409
sg34
g752
(S'\x07\xdf\n\x0e\r\x17\x02\x05\x95\xb0'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g3971
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g3978
sS'block_loop.thisRepN'
p5725
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5726
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F1.4335112919015955
sg34
g752
(S'\x07\xdf\n\x0e\r\x17\x08\x06\xdd\xd0'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4944
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'right'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4951
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5739
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.88354747091852914
sg34
g752
(S'\x07\xdf\n\x0e\r\x17\x0e\x0e\x19`'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g4016
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5752
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F1.2500956505928116
sg34
g752
(S'\x07\xdf\n\x0e\r\x17\x14\x0c\xc5\x88'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3721
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5765
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.2168440265277241
sg34
g752
(S'\x07\xdf\n\x0e\r\x17\x1b\x01\xe0x'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g3924
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g3935
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g3932
sS'block_loop.thisRepN'
p5777
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5778
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F1.35054844424576
sg34
g752
(S'\x07\xdf\n\x0e\r\x17!\x05\x89\xf8'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g3785
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'right'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5791
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.76686344174504484
sg34
g752
(S"\x07\xdf\n\x0e\r\x17'\x0bZ@"
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g4001
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'left'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3842
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g4008
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3842
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5804
I1
sg3646
g3836
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F1.2001868536463007
sg34
g752
(S'\x07\xdf\n\x0e\r\x17-\x08X\xb8'
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g5561
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'left'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3796
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g5568
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5817
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.83354345102816296
sg34
g752
(S'\x07\xdf\n\x0e\r\x173\x0c\x028'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g4678
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g4685
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5830
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.80019888480819645
sg34
g752
(S'\x07\xdf\n\x0e\r\x179\t\xf6\xc8'
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g3653
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'right'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3657
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5843
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F1.4338784989449778
sg34
g752
(S'\x07\xdf\n\x0e\r\x18\x03\x07nX'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g4944
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3731
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g4951
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3731
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5856
I1
sg3646
g3725
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F0.88346308172185672
sg34
g752
(S'\x07\xdf\n\x0e\r\x18\t\x0ekh'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3890
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'left'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3894
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3898
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5869
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F2.3335001160357933
sg34
g752
(S'\x07\xdf\n\x0e\r\x18\x0f\rR('
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4173
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'left'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4180
sS'block_loop.thisRepN'
p5881
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5882
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F0.88354319443897111
sg34
g752
(S'\x07\xdf\n\x0e\r\x18\x17\x03\x9d\xc8'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g4914
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'right'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g4922
sS'block_loop.thisRepN'
p5894
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5895
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F1.1667122824483158
sg34
g752
(S'\x07\xdf\n\x0e\r\x18\x1d\x02F\x08'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3875
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'left'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3882
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5908
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F1.3338838587987993
sg34
g752
(S'\x07\xdf\n\x0e\r\x18#\x05vp'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g4078
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'right'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3894
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g4085
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5921
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F1.1835085834645724
sg34
g752
(S'\x07\xdf\n\x0e\r\x18)\x0b\x088'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4434
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'left'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g4445
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4442
sS'block_loop.thisRepN'
p5933
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5934
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F1.0001536681647849
sg34
g752
(S'\x07\xdf\n\x0e\r\x18/\x0e8\xa0'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4016
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'right'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4023
sS'block_loop.thisRepN'
p5946
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5947
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F1.0335076426390515
sg34
g752
(S'\x07\xdf\n\x0e\r\x185\x0e\xc9('
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g4985
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g4918
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g4992
sS'block_loop.thisRepN'
p5959
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5960
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F1.183342941157207
sg34
g752
(S'\x07\xdf\n\x0e\r\x19\x00\x00\x90\x88'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3785
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'right'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5973
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.9505573393225859
sg34
g752
(S'\x07\xdf\n\x0e\r\x19\x06\x03\xc0\xf0'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4173
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'left'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4180
sS'block_loop.thisRepN'
p5985
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5986
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.98352357965268311
sg34
g752
(S'\x07\xdf\n\x0e\r\x19\x0c\x03\x99\xe0'
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3941
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'left'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3952
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3949
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3945
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p5999
I1
sg3646
g3952
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.98352814123154531
sg34
g752
(S'\x07\xdf\n\x0e\r\x19\x12\x03\xef\xd0'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4044
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4052
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6012
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.2335188755259878
sg34
g752
(S'\x07\xdf\n\x0e\r\x19\x18\x04\x07@'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g4637
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g4644
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6025
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.0335275995439588
sg34
g752
(S'\x07\xdf\n\x0e\r\x19\x1e\x08)\xd8'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3768
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'right'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3776
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6038
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F1.3672118892973231
sg34
g752
(S'\x07\xdf\n\x0e\r\x19$\t7`'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g4985
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g4925
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g4992
sS'block_loop.thisRepN'
p6050
I1
sg3644
g4918
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6051
I1
sg3646
g4925
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F1.4500863563762323
sg34
g752
(S'\x07\xdf\n\x0e\r\x19+\x00\x00\x00'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4637
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'left'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g4313
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4644
sS'block_loop.thisRepN'
p6063
I1
sg3644
g4313
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6064
I1
sg3646
g4320
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.6834184922963686
sg34
g752
(S'\x07\xdf\n\x0e\r\x191\x07v('
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g3704
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6077
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F1.5165169043539208
sg34
g752
(S'\x07\xdf\n\x0e\r\x198\x03\x01\x88'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3815
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3823
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6090
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F3.2001221362552315
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a\x02\x0bm\xc8'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4214
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'left'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4221
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6103
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F1.1502991539982759
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a\n\x0f\x0b\x90'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g4557
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'right'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3761
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g4564
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6116
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.86685808189122326
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a\x11\x02\x80\xa0'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g5561
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'left'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3796
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g5568
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3789
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6129
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F0.71688536582951201
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a\x17\x00\xeeH'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4173
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4180
sS'block_loop.thisRepN'
p6141
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6142
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F1.0335193316832374
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a\x1c\x0cwh'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g4678
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g4685
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3691
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6155
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F1.2168417457387477
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a"\r\x81\x08'
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3971
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3978
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6168
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.2171436651933618
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a)\x01\xe8H'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g3704
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6180
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6181
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F1.0998386911924172
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a/\x05\xd0H'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g3875
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3772
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g3882
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6194
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F1.9834528751916878
sg34
g752
(S'\x07\xdf\n\x0e\r\x1a5\x07\xd0\x00'
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4434
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4438
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4442
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4438
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6207
I1
sg3646
g4445
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F1.1169397626490536
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b\x00\x08\x1e '
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g3815
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g3823
sS'block_loop.thisRepN'
p6219
I1
sg3644
g3819
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6220
I1
sg3646
g3826
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.93337330416215991
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b\x06\nXp'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g3633
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'left'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3637
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6233
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F1.0502004528507314
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b\x0c\t\xf6\xc8'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g4294
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3681
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g4301
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3674
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6246
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F2.7001697477271591
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b\x12\x0b>\xe8'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3768
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'left'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3779
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3776
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3772
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6259
I1
sg3646
g3779
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F1.4168544041176574
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b\x1a\x07\x00\xf8'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g4477
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'right'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g4484
sS'block_loop.thisRepN'
p6271
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6272
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.3668626434682665
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b \r\xfe\x08'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3907
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'right'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3911
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3915
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3911
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6285
I1
sg3646
g3918
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.1001947793874933
sg34
g752
(S"\x07\xdf\n\x0e\r\x1b'\x04\xc6\xa8"
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3704
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3708
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6298
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F1.2666111294529401
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b-\x06\xc6`'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g3924
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3928
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g3932
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3928
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6311
I1
sg3646
g3935
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F1.7834242512890341
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b3\x0be\xf8'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g3751
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3761
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g3759
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3761
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6324
I1
sg3646
g3755
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.6501560344831887
sg34
g752
(S'\x07\xdf\n\x0e\r\x1b:\x08\x9b '
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4477
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4054
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4484
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4054
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6337
I1
sg3646
g4048
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.2166869371794746
sg34
g752
(S'\x07\xdf\n\x0e\r\x1c\x05\x03\xe8\x00'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4078
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'right'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3901
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4085
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3894
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6350
I1
sg3646
g3901
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F3.3001281803462916
sg34
g752
(S'\x07\xdf\n\x0e\r\x1c\x0b\x07\x91\x80'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F2.06688185911662
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'31-hobnobs.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'25-kitkat.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'25-kitkat.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'31-hobnobs.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F1.1835325317497336
sg34
g752
(S'\x07\xdf\n\x0e\r\x1c\x1a\x0eW\xe0'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'45-chewy_nougat_redo.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'right'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'45-chewy_nougat_redo.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'41-peanuts_redo.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
S'41-peanuts_redo.png'
p6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6402
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.98342664611664077
sg34
g752
(S'\x07\xdf\n\x0e\r\x1c!\x02F\x08'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'18-mms.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'43-mrporky_pork_crackles_redo.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
S'18-mms.png'
p6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6419
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F1.6834746567265029
sg34
g752
(S"\x07\xdf\n\x0e\r\x1c'\x02\x9b\xf8"
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'42-mrkipling_lemon_slices.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'42-mrkipling_lemon_slices.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'16-skips_prawn.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
S'16-skips_prawn.png'
p6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6436
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F2.2667328665702371
sg34
g752
(S'\x07\xdf\n\x0e\r\x1c-\ri\x98'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'22-daim.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'left'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'7-olives.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'7-olives.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
S'22-daim.png'
p6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6453
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.80055183691911225
sg34
g752
(S'\x07\xdf\n\x0e\r\x1c5\x02\xbf '
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'40-sardines.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'5-pineapple.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'5-pineapple.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6469
I2
sg6384
S'40-sardines.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F1.2501233051598319
sg34
g752
(S'\x07\xdf\n\x0e\r\x1c;\x006\xb0'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'50-polo.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'50-polo.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'48-twix.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6486
I2
sg6384
S'48-twix.png'
p6487
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vn
sS'block_loop.thisTrialN'
p6489
I0
sg39
F1.0668502131675268
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d\x05\x04\x97\xc8'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'20-fruit_pastilles.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'right'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
S'20-fruit_pastilles.png'
p6497
sg63
g64
sS'trial_loop.thisIndex'
p6498
g59
(g98
S'\x07\x00\x00\x00'
tRp6499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6500
I0
sg6379
S'2-steamed_puddings.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6382
S'2-steamed_puddings.png'
p6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6504
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p6505
Nsg69
Vn
sS'block_loop.thisTrialN'
p6506
I0
sg39
F0.80011649130301521
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d\x0b\x06\x1a\x80'
tRp6507
sa(dp6508
S'trial_loop.thisTrialN'
p6509
I8
sg6370
S'33-ambrosia_rice.png'
p6510
sS'block_loop.thisIndex'
p6511
g6364
sg38
S'left'
p6512
sg58
g62
sS'trial_loop.thisN'
p6513
I8
sg33
S'33-ambrosia_rice.png'
p6514
sg63
g64
sS'trial_loop.thisIndex'
p6515
g59
(g98
S'\x08\x00\x00\x00'
tRp6516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6517
I0
sg6379
S'23-crunchie_redo.png'
p6518
sS'block_loop.thisRepN'
p6519
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6520
I2
sg6384
S'23-crunchie_redo.png'
p6521
sg55
g11
sS'block_loop.thisTrial'
p6522
Nsg69
Vn
sS'block_loop.thisTrialN'
p6523
I0
sg39
F0.91676801923131279
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d\x11\x03\x95\xf8'
tRp6524
sa(dp6525
S'trial_loop.thisTrialN'
p6526
I9
sg6370
S'30-spaghetti_hoops.png'
p6527
sS'block_loop.thisIndex'
p6528
g6364
sg38
S'left'
p6529
sg58
g62
sS'trial_loop.thisN'
p6530
I9
sg33
S'30-spaghetti_hoops.png'
p6531
sg63
g64
sS'trial_loop.thisIndex'
p6532
g59
(g98
S'\t\x00\x00\x00'
tRp6533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6534
I0
sg6379
S'19-caramello_redo.png'
p6535
sS'block_loop.thisRepN'
p6536
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6537
I2
sg6384
S'19-caramello_redo.png'
p6538
sg55
g11
sS'block_loop.thisTrial'
p6539
Nsg69
Vn
sS'block_loop.thisTrialN'
p6540
I0
sg39
F1.4338747926622091
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d\x17\x02\xb7P'
tRp6541
sa(dp6542
S'trial_loop.thisTrialN'
p6543
I10
sg6370
S'23-crunchie_redo.png'
p6544
sS'block_loop.thisIndex'
p6545
g6364
sg38
S'right'
p6546
sg58
g62
sS'trial_loop.thisN'
p6547
I10
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p6548
g59
(g98
S'\n\x00\x00\x00'
tRp6549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6550
I0
sg6379
S'33-ambrosia_rice.png'
p6551
sS'block_loop.thisRepN'
p6552
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6553
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p6554
Nsg69
Vn
sS'block_loop.thisTrialN'
p6555
I0
sg39
F0.76685061230637075
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d\x1d\t\xf2\xe0'
tRp6556
sa(dp6557
S'trial_loop.thisTrialN'
p6558
I11
sg6370
S'6-sour_patch_kids.png'
p6559
sS'block_loop.thisIndex'
p6560
g6364
sg38
S'right'
p6561
sg58
g62
sS'trial_loop.thisN'
p6562
I11
sg33
S'38-maltesers.png'
p6563
sg63
g64
sS'trial_loop.thisIndex'
p6564
g59
(g98
S'\x0b\x00\x00\x00'
tRp6565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6566
I0
sg6379
S'38-maltesers.png'
p6567
sS'block_loop.thisRepN'
p6568
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6569
I2
sg6384
S'6-sour_patch_kids.png'
p6570
sg55
g11
sS'block_loop.thisTrial'
p6571
Nsg69
Vn
sS'block_loop.thisTrialN'
p6572
I0
sg39
F0.83329085363584454
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d#\x06\xf5@'
tRp6573
sa(dp6574
S'trial_loop.thisTrialN'
p6575
I12
sg6370
g6425
sS'block_loop.thisIndex'
p6576
g6364
sg38
S'right'
p6577
sg58
g62
sS'trial_loop.thisN'
p6578
I12
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6579
g59
(g98
S'\x0c\x00\x00\x00'
tRp6580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6581
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6582
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6583
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6584
Nsg69
Vn
sS'block_loop.thisTrialN'
p6585
I0
sg39
F0.9666999091678008
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d)\x04\xe5\xe8'
tRp6586
sa(dp6587
S'trial_loop.thisTrialN'
p6588
I13
sg6370
S'4-corn.png'
p6589
sS'block_loop.thisIndex'
p6590
g6364
sg38
S'left'
p6591
sg58
g62
sS'trial_loop.thisN'
p6592
I13
sg33
S'4-corn.png'
p6593
sg63
g64
sS'trial_loop.thisIndex'
p6594
g59
(g98
S'\r\x00\x00\x00'
tRp6595
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6596
I0
sg6379
S'10-bounty_redo.png'
p6597
sS'block_loop.thisRepN'
p6598
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6599
I2
sg6384
S'10-bounty_redo.png'
p6600
sg55
g11
sS'block_loop.thisTrial'
p6601
Nsg69
Vn
sS'block_loop.thisTrialN'
p6602
I0
sg39
F1.5335099234280278
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d/\x04\xc2\xc0'
tRp6603
sa(dp6604
S'trial_loop.thisTrialN'
p6605
I14
sg6370
g6442
sS'block_loop.thisIndex'
p6606
g6364
sg38
S'left'
p6607
sg58
g62
sS'trial_loop.thisN'
p6608
I14
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p6609
g59
(g98
S'\x0e\x00\x00\x00'
tRp6610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6611
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6612
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6613
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p6614
Nsg69
Vn
sS'block_loop.thisTrialN'
p6615
I0
sg39
F0.75040754849942459
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d5\ri\x98'
tRp6616
sa(dp6617
S'trial_loop.thisTrialN'
p6618
I15
sg6370
S'27-hartleys_raspberries_jelly.png'
p6619
sS'block_loop.thisIndex'
p6620
g6364
sg38
S'left'
p6621
sg58
g62
sS'trial_loop.thisN'
p6622
I15
sg33
S'27-hartleys_raspberries_jelly.png'
p6623
sg63
g64
sS'trial_loop.thisIndex'
p6624
g59
(g98
S'\x0f\x00\x00\x00'
tRp6625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6626
I0
sg6379
S'51-mars.png'
p6627
sS'block_loop.thisRepN'
p6628
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6629
I2
sg6384
S'51-mars.png'
p6630
sg55
g11
sS'block_loop.thisTrial'
p6631
Nsg69
Vn
sS'block_loop.thisTrialN'
p6632
I0
sg39
F0.93352554683315248
sg34
g752
(S'\x07\xdf\n\x0e\r\x1d;\n-x'
tRp6633
sa(dp6634
S'trial_loop.thisTrialN'
p6635
I16
sg6370
S'29-beans.png'
p6636
sS'block_loop.thisIndex'
p6637
g6364
sg38
S'right'
p6638
sg58
g62
sS'trial_loop.thisN'
p6639
I16
sg33
S'46-pistachios.png'
p6640
sg63
g64
sS'trial_loop.thisIndex'
p6641
g59
(g98
S'\x10\x00\x00\x00'
tRp6642
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6643
I0
sg6379
S'46-pistachios.png'
p6644
sS'block_loop.thisRepN'
p6645
I2
sg6382
S'29-beans.png'
p6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6647
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p6648
Nsg69
Vn
sS'block_loop.thisTrialN'
p6649
I0
sg39
F1.1002096045167491
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e\x05\t\x8dP'
tRp6650
sa(dp6651
S'trial_loop.thisTrialN'
p6652
I17
sg6370
S'26-walkers_smoky_bacon.png'
p6653
sS'block_loop.thisIndex'
p6654
g6364
sg38
S'left'
p6655
sg58
g62
sS'trial_loop.thisN'
p6656
I17
sg33
S'44-crunch.png'
p6657
sg63
g64
sS'trial_loop.thisIndex'
p6658
g59
(g98
S'\x11\x00\x00\x00'
tRp6659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6660
I0
sg6379
S'44-crunch.png'
p6661
sS'block_loop.thisRepN'
p6662
I2
sg6382
S'26-walkers_smoky_bacon.png'
p6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6664
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p6665
Nsg69
Vn
sS'block_loop.thisTrialN'
p6666
I0
sg39
F0.93352155545198912
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e\x0b\x0b\x8d\x08'
tRp6667
sa(dp6668
S'trial_loop.thisTrialN'
p6669
I18
sg6370
S'2-steamed_puddings.png'
p6670
sS'block_loop.thisIndex'
p6671
g6364
sg38
S'left'
p6672
sg58
g62
sS'trial_loop.thisN'
p6673
I18
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p6674
g59
(g98
S'\x12\x00\x00\x00'
tRp6675
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6676
I0
sg6379
S'20-fruit_pastilles.png'
p6677
sS'block_loop.thisRepN'
p6678
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6679
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p6680
Nsg69
Vn
sS'block_loop.thisTrialN'
p6681
I0
sg39
F1.116833135759407
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e\x11\x0b+`'
tRp6682
sa(dp6683
S'trial_loop.thisTrialN'
p6684
I19
sg6370
S'17-jacobs_mini_cheddars_redo.png'
p6685
sS'block_loop.thisIndex'
p6686
g6364
sg38
S'left'
p6687
sg58
g62
sS'trial_loop.thisN'
p6688
I19
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6689
sg63
g64
sS'trial_loop.thisIndex'
p6690
g59
(g98
S'\x13\x00\x00\x00'
tRp6691
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6692
I0
sg6379
S'8-liquorice_catherine_wheels.png'
p6693
sS'block_loop.thisRepN'
p6694
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6695
I2
sg6384
S'8-liquorice_catherine_wheels.png'
p6696
sg55
g11
sS'block_loop.thisTrial'
p6697
Nsg69
Vn
sS'block_loop.thisTrialN'
p6698
I0
sg39
F1.2172323308695923
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e\x17\re\xb0'
tRp6699
sa(dp6700
S'trial_loop.thisTrialN'
p6701
I20
sg6370
S'38-maltesers.png'
p6702
sS'block_loop.thisIndex'
p6703
g6364
sg38
S'left'
p6704
sg58
g62
sS'trial_loop.thisN'
p6705
I20
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p6706
g59
(g98
S'\x14\x00\x00\x00'
tRp6707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6708
I0
sg6379
S'6-sour_patch_kids.png'
p6709
sS'block_loop.thisRepN'
p6710
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6711
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p6712
Nsg69
Vn
sS'block_loop.thisTrialN'
p6713
I0
sg39
F0.83326376926652301
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e\x1e\x02\x0bp'
tRp6714
sa(dp6715
S'trial_loop.thisTrialN'
p6716
I21
sg6370
g6391
sS'block_loop.thisIndex'
p6717
g6364
sg38
S'right'
p6718
sg58
g62
sS'trial_loop.thisN'
p6719
I21
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p6720
g59
(g98
S'\x15\x00\x00\x00'
tRp6721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6722
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6723
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6724
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p6725
Nsg69
Vn
sS'block_loop.thisTrialN'
p6726
I0
sg39
F0.966800834084097
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e#\x0f>X'
tRp6727
sa(dp6728
S'trial_loop.thisTrialN'
p6729
I22
sg6370
g6527
sS'block_loop.thisIndex'
p6730
g6364
sg38
S'left'
p6731
sg58
g62
sS'trial_loop.thisN'
p6732
I22
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p6733
g59
(g98
S'\x16\x00\x00\x00'
tRp6734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6735
I0
sg6379
g6535
sS'block_loop.thisRepN'
p6736
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6737
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p6738
Nsg69
Vn
sS'block_loop.thisTrialN'
p6739
I0
sg39
F1.9833667754037378
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e)\x0f\x1b0'
tRp6740
sa(dp6741
S'trial_loop.thisTrialN'
p6742
I23
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6743
sS'block_loop.thisIndex'
p6744
g6364
sg38
S'right'
p6745
sg58
g62
sS'trial_loop.thisN'
p6746
I23
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6747
g59
(g98
S'\x17\x00\x00\x00'
tRp6748
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6749
I0
sg6379
S'18-mms.png'
p6750
sS'block_loop.thisRepN'
p6751
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6752
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6753
Nsg69
Vn
sS'block_loop.thisTrialN'
p6754
I0
sg39
F0.61688758959917322
sg34
g752
(S"\x07\xdf\n\x0e\r\x1e1\x00'\x10"
tRp6755
sa(dp6756
S'trial_loop.thisTrialN'
p6757
I24
sg6370
S'46-pistachios.png'
p6758
sS'block_loop.thisIndex'
p6759
g6364
sg38
S'right'
p6760
sg58
g62
sS'trial_loop.thisN'
p6761
I24
sg33
g6646
sg63
g64
sS'trial_loop.thisIndex'
p6762
g59
(g98
S'\x18\x00\x00\x00'
tRp6763
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6764
I0
sg6379
S'29-beans.png'
p6765
sS'block_loop.thisRepN'
p6766
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6767
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p6768
Nsg69
Vn
sS'block_loop.thisTrialN'
p6769
I0
sg39
F0.98393896836478234
sg34
g752
(S'\x07\xdf\n\x0e\r\x1e6\n\x06h'
tRp6770
sa(dp6771
S'trial_loop.thisTrialN'
p6772
I25
sg6370
S'13-mccoys_steak_crisps.png'
p6773
sS'block_loop.thisIndex'
p6774
g6364
sg38
S'right'
p6775
sg58
g62
sS'trial_loop.thisN'
p6776
I25
sg33
S'13-mccoys_steak_crisps.png'
p6777
sg63
g64
sS'trial_loop.thisIndex'
p6778
g59
(g98
S'\x19\x00\x00\x00'
tRp6779
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6780
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6781
sS'block_loop.thisRepN'
p6782
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6783
I2
sg6384
S'3-ellas_strawberries_apples.png'
p6784
sg55
g11
sS'block_loop.thisTrial'
p6785
Nsg69
Vn
sS'block_loop.thisTrialN'
p6786
I0
sg39
F0.91686894414851849
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f\x00\n\\X'
tRp6787
sa(dp6788
S'trial_loop.thisTrialN'
p6789
I26
sg6370
S'49-yorkie.png'
p6790
sS'block_loop.thisIndex'
p6791
g6364
sg38
S'left'
p6792
sg58
g62
sS'trial_loop.thisN'
p6793
I26
sg33
S'49-yorkie.png'
p6794
sg63
g64
sS'trial_loop.thisIndex'
p6795
g59
(g98
S'\x1a\x00\x00\x00'
tRp6796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6797
I0
sg6379
S'35-raisins.png'
p6798
sS'block_loop.thisRepN'
p6799
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6800
I2
sg6384
S'35-raisins.png'
p6801
sg55
g11
sS'block_loop.thisTrial'
p6802
Nsg69
Vn
sS'block_loop.thisTrialN'
p6803
I0
sg39
F1.1335228098860171
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f\x06\t\xbc0'
tRp6804
sa(dp6805
S'trial_loop.thisTrialN'
p6806
I27
sg6370
g6425
sS'block_loop.thisIndex'
p6807
g6364
sg38
S'right'
p6808
sg58
g62
sS'trial_loop.thisN'
p6809
I27
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6810
g59
(g98
S'\x1b\x00\x00\x00'
tRp6811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6812
I0
sg6379
g6433
sS'block_loop.thisRepN'
p6813
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6814
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6815
Nsg69
Vn
sS'block_loop.thisTrialN'
p6816
I0
sg39
F1.3667411914502736
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f\x0c\x0c5\x00'
tRp6817
sa(dp6818
S'trial_loop.thisTrialN'
p6819
I28
sg6370
S'1-treacle_cookies.png'
p6820
sS'block_loop.thisIndex'
p6821
g6364
sg38
S'left'
p6822
sg58
g62
sS'trial_loop.thisN'
p6823
I28
sg33
S'1-treacle_cookies.png'
p6824
sg63
g64
sS'trial_loop.thisIndex'
p6825
g59
(g98
S'\x1c\x00\x00\x00'
tRp6826
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6827
I0
sg6379
S'21-nakd_banana_crunch.png'
p6828
sS'block_loop.thisRepN'
p6829
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6830
I2
sg6384
S'21-nakd_banana_crunch.png'
p6831
sg55
g11
sS'block_loop.thisTrial'
p6832
Nsg69
Vn
sS'block_loop.thisTrialN'
p6833
I0
sg39
F0.86687404741405771
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f\x13\x02\xfd\xa0'
tRp6834
sa(dp6835
S'trial_loop.thisTrialN'
p6836
I29
sg6370
S'10-bounty_redo.png'
p6837
sS'block_loop.thisIndex'
p6838
g6364
sg38
S'right'
p6839
sg58
g62
sS'trial_loop.thisN'
p6840
I29
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p6841
g59
(g98
S'\x1d\x00\x00\x00'
tRp6842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6843
I0
sg6379
S'4-corn.png'
p6844
sS'block_loop.thisRepN'
p6845
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6846
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p6847
Nsg69
Vn
sS'block_loop.thisTrialN'
p6848
I0
sg39
F1.3005313098174156
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f\x19\x01kH'
tRp6849
sa(dp6850
S'trial_loop.thisTrialN'
p6851
I30
sg6370
g6510
sS'block_loop.thisIndex'
p6852
g6364
sg38
S'left'
p6853
sg58
g62
sS'trial_loop.thisN'
p6854
I30
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p6855
g59
(g98
S'\x1e\x00\x00\x00'
tRp6856
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6857
I0
sg6379
g6518
sS'block_loop.thisRepN'
p6858
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6859
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p6860
Nsg69
Vn
sS'block_loop.thisTrialN'
p6861
I0
sg39
F1.3001361631086183
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f\x1f\x06\x80\x10'
tRp6862
sa(dp6863
S'trial_loop.thisTrialN'
p6864
I31
sg6370
g6758
sS'block_loop.thisIndex'
p6865
g6364
sg38
S'right'
p6866
sg58
g62
sS'trial_loop.thisN'
p6867
I31
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p6868
g59
(g98
S'\x1f\x00\x00\x00'
tRp6869
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6870
I0
sg6379
g6765
sS'block_loop.thisRepN'
p6871
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6872
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p6873
Nsg69
Vn
sS'block_loop.thisTrialN'
p6874
I0
sg39
F1.2668537483914406
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f%\x0b\x98\xc0'
tRp6875
sa(dp6876
S'trial_loop.thisTrialN'
p6877
I32
sg6370
g6459
sS'block_loop.thisIndex'
p6878
g6364
sg38
S'right'
p6879
sg58
g62
sS'trial_loop.thisN'
p6880
I32
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6881
g59
(g98
S' \x00\x00\x00'
tRp6882
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6883
I0
sg6379
g6467
sS'block_loop.thisRepN'
p6884
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6885
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6886
Nsg69
Vn
sS'block_loop.thisTrialN'
p6887
I0
sg39
F0.98351673728575406
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f,\x00\xf20'
tRp6888
sa(dp6889
S'trial_loop.thisTrialN'
p6890
I33
sg6370
g6670
sS'block_loop.thisIndex'
p6891
g6364
sg38
S'left'
p6892
sg58
g62
sS'trial_loop.thisN'
p6893
I33
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p6894
g59
(g98
S'!\x00\x00\x00'
tRp6895
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6896
I0
sg6379
g6677
sS'block_loop.thisRepN'
p6897
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6898
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p6899
Nsg69
Vn
sS'block_loop.thisTrialN'
p6900
I0
sg39
F1.0668567704369707
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f2\x01H '
tRp6901
sa(dp6902
S'trial_loop.thisTrialN'
p6903
I34
sg6370
S'44-crunch.png'
p6904
sS'block_loop.thisIndex'
p6905
g6364
sg38
S'right'
p6906
sg58
g62
sS'trial_loop.thisN'
p6907
I34
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p6908
g59
(g98
S'"\x00\x00\x00'
tRp6909
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6910
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6911
sS'block_loop.thisRepN'
p6912
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6913
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p6914
Nsg69
Vn
sS'block_loop.thisTrialN'
p6915
I0
sg39
F1.500551950958652
sg34
g752
(S'\x07\xdf\n\x0e\r\x1f8\x02\xca\xd8'
tRp6916
sa(dp6917
S'trial_loop.thisTrialN'
p6918
I35
sg6370
S'48-twix.png'
p6919
sS'block_loop.thisIndex'
p6920
g6364
sg38
S'right'
p6921
sg58
g62
sS'trial_loop.thisN'
p6922
I35
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p6923
g59
(g98
S'#\x00\x00\x00'
tRp6924
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6925
I0
sg6379
S'50-polo.png'
p6926
sS'block_loop.thisRepN'
p6927
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6928
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p6929
Nsg69
Vn
sS'block_loop.thisTrialN'
p6930
I0
sg39
F1.5501793555513359
sg34
g752
(S'\x07\xdf\n\x0e\r \x02\n\xfc\x80'
tRp6931
sa(dp6932
S'trial_loop.thisTrialN'
p6933
I36
sg6370
g6636
sS'block_loop.thisIndex'
p6934
g6364
sg38
S'left'
p6935
sg58
g62
sS'trial_loop.thisN'
p6936
I36
sg33
g6646
sg63
g64
sS'trial_loop.thisIndex'
p6937
g59
(g98
S'$\x00\x00\x00'
tRp6938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6939
I0
sg6379
g6644
sS'block_loop.thisRepN'
p6940
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6941
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p6942
Nsg69
Vn
sS'block_loop.thisTrialN'
p6943
I0
sg39
F1.2668489017141837
sg34
g752
(S'\x07\xdf\n\x0e\r \t\x04\x9f\x98'
tRp6944
sa(dp6945
S'trial_loop.thisTrialN'
p6946
I37
sg6370
g6493
sS'block_loop.thisIndex'
p6947
g6364
sg38
S'right'
p6948
sg58
g62
sS'trial_loop.thisN'
p6949
I37
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p6950
g59
(g98
S'%\x00\x00\x00'
tRp6951
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6952
I0
sg6379
g6501
sS'block_loop.thisRepN'
p6953
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6954
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p6955
Nsg69
Vn
sS'block_loop.thisTrialN'
p6956
I0
sg39
F0.78352574640302919
sg34
g752
(S'\x07\xdf\n\x0e\r \x0f\t\x00\xb0'
tRp6957
sa(dp6958
S'trial_loop.thisTrialN'
p6959
I38
sg6370
g6702
sS'block_loop.thisIndex'
p6960
g6364
sg38
S'left'
p6961
sg58
g62
sS'trial_loop.thisN'
p6962
I38
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p6963
g59
(g98
S'&\x00\x00\x00'
tRp6964
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6965
I0
sg6379
g6709
sS'block_loop.thisRepN'
p6966
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6967
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p6968
Nsg69
Vn
sS'block_loop.thisTrialN'
p6969
I0
sg39
F0.69994737079196057
sg34
g752
(S'\x07\xdf\n\x0e\r \x15\x06=\xa8'
tRp6970
sa(dp6971
S'trial_loop.thisTrialN'
p6972
I39
sg6370
g6544
sS'block_loop.thisIndex'
p6973
g6364
sg38
S'right'
p6974
sg58
g62
sS'trial_loop.thisN'
p6975
I39
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p6976
g59
(g98
S"'\x00\x00\x00"
tRp6977
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6978
I0
sg6379
g6551
sS'block_loop.thisRepN'
p6979
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6980
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p6981
Nsg69
Vn
sS'block_loop.thisTrialN'
p6982
I0
sg39
F0.70051129589319316
sg34
g752
(S'\x07\xdf\n\x0e\r \x1b\x02I\xf0'
tRp6983
sa(dp6984
S'trial_loop.thisTrialN'
p6985
I40
sg6370
S'16-skips_prawn.png'
p6986
sS'block_loop.thisIndex'
p6987
g6364
sg38
S'left'
p6988
sg58
g62
sS'trial_loop.thisN'
p6989
I40
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6990
g59
(g98
S'(\x00\x00\x00'
tRp6991
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6992
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6993
sS'block_loop.thisRepN'
p6994
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p6995
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p6996
Nsg69
Vn
sS'block_loop.thisTrialN'
p6997
I0
sg39
F1.0667564157165543
sg34
g752
(S'\x07\xdf\n\x0e\r  \rY\xf8'
tRp6998
sa(dp6999
S'trial_loop.thisTrialN'
p7000
I41
sg6370
g6589
sS'block_loop.thisIndex'
p7001
g6364
sg38
S'right'
p7002
sg58
g62
sS'trial_loop.thisN'
p7003
I41
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7004
g59
(g98
S')\x00\x00\x00'
tRp7005
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7006
I0
sg6379
g6597
sS'block_loop.thisRepN'
p7007
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7008
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7009
Nsg69
Vn
sS'block_loop.thisTrialN'
p7010
I0
sg39
F0.83326177357594133
sg34
g752
(S'\x07\xdf\n\x0e\r &\x0e\xdc\xb0'
tRp7011
sa(dp7012
S'trial_loop.thisTrialN'
p7013
I42
sg6370
g6904
sS'block_loop.thisIndex'
p7014
g6364
sg38
S'right'
p7015
sg58
g62
sS'trial_loop.thisN'
p7016
I42
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7017
g59
(g98
S'*\x00\x00\x00'
tRp7018
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7019
I0
sg6379
g6911
sS'block_loop.thisRepN'
p7020
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7021
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7022
Nsg69
Vn
sS'block_loop.thisTrialN'
p7023
I0
sg39
F0.81687230831266788
sg34
g752
(S'\x07\xdf\n\x0e\r ,\x0c\xd1@'
tRp7024
sa(dp7025
S'trial_loop.thisTrialN'
p7026
I43
sg6370
S'25-kitkat.png'
p7027
sS'block_loop.thisIndex'
p7028
g6364
sg38
S'right'
p7029
sg58
g62
sS'trial_loop.thisN'
p7030
I43
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7031
g59
(g98
S'+\x00\x00\x00'
tRp7032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7033
I0
sg6379
S'31-hobnobs.png'
p7034
sS'block_loop.thisRepN'
p7035
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7036
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7037
Nsg69
Vn
sS'block_loop.thisTrialN'
p7038
I0
sg39
F0.76675909564346512
sg34
g752
(S'\x07\xdf\n\x0e\r 2\n\x87P'
tRp7039
sa(dp7040
S'trial_loop.thisTrialN'
p7041
I44
sg6370
S'21-nakd_banana_crunch.png'
p7042
sS'block_loop.thisIndex'
p7043
g6364
sg38
S'right'
p7044
sg58
g62
sS'trial_loop.thisN'
p7045
I44
sg33
g6824
sg63
g64
sS'trial_loop.thisIndex'
p7046
g59
(g98
S',\x00\x00\x00'
tRp7047
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7048
I0
sg6379
S'1-treacle_cookies.png'
p7049
sS'block_loop.thisRepN'
p7050
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7051
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p7052
Nsg69
Vn
sS'block_loop.thisTrialN'
p7053
I0
sg39
F0.71687766816739895
sg34
g752
(S'\x07\xdf\n\x0e\r 8\x07\x85\xc8'
tRp7054
sa(dp7055
S'trial_loop.thisTrialN'
p7056
I45
sg6370
g6619
sS'block_loop.thisIndex'
p7057
g6364
sg38
S'left'
p7058
sg58
g62
sS'trial_loop.thisN'
p7059
I45
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p7060
g59
(g98
S'-\x00\x00\x00'
tRp7061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7062
I0
sg6379
g6627
sS'block_loop.thisRepN'
p7063
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7064
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p7065
Nsg69
Vn
sS'block_loop.thisTrialN'
p7066
I0
sg39
F0.85054445286368718
sg34
g752
(S'\x07\xdf\n\x0e\r!\x02\x03\xd0\x90'
tRp7067
sa(dp7068
S'trial_loop.thisTrialN'
p7069
I46
sg6370
g6837
sS'block_loop.thisIndex'
p7070
g6364
sg38
S'right'
p7071
sg58
g62
sS'trial_loop.thisN'
p7072
I46
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7073
g59
(g98
S'.\x00\x00\x00'
tRp7074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7075
I0
sg6379
g6844
sS'block_loop.thisRepN'
p7076
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7077
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7078
Nsg69
Vn
sS'block_loop.thisTrialN'
p7079
I0
sg39
F1.0834874291458618
sg34
g752
(S'\x07\xdf\n\x0e\r!\x08\x01\xff\xb8'
tRp7080
sa(dp7081
S'trial_loop.thisTrialN'
p7082
I47
sg6370
S'51-mars.png'
p7083
sS'block_loop.thisIndex'
p7084
g6364
sg38
S'right'
p7085
sg58
g62
sS'trial_loop.thisN'
p7086
I47
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7087
g59
(g98
S'/\x00\x00\x00'
tRp7088
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7089
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p7090
sS'block_loop.thisRepN'
p7091
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7092
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p7093
Nsg69
Vn
sS'block_loop.thisTrialN'
p7094
I0
sg39
F0.7001098770142562
sg34
g752
(S'\x07\xdf\n\x0e\r!\x0e\x03\xc0\xf0'
tRp7095
sa(dp7096
S'trial_loop.thisTrialN'
p7097
I48
sg6370
g6685
sS'block_loop.thisIndex'
p7098
g6364
sg38
S'left'
p7099
sg58
g62
sS'trial_loop.thisN'
p7100
I48
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7101
g59
(g98
S'0\x00\x00\x00'
tRp7102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7103
I0
sg6379
g6693
sS'block_loop.thisRepN'
p7104
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7105
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p7106
Nsg69
Vn
sS'block_loop.thisTrialN'
p7107
I0
sg39
F1.2002353204134124
sg34
g752
(S'\x07\xdf\n\x0e\r!\x13\x0f\x0fx'
tRp7108
sa(dp7109
S'trial_loop.thisTrialN'
p7110
I49
sg6370
g6510
sS'block_loop.thisIndex'
p7111
g6364
sg38
S'left'
p7112
sg58
g62
sS'trial_loop.thisN'
p7113
I49
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7114
g59
(g98
S'1\x00\x00\x00'
tRp7115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7116
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7117
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7118
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7119
Nsg69
Vn
sS'block_loop.thisTrialN'
p7120
I0
sg39
F0.76686543743471702
sg34
g752
(S'\x07\xdf\n\x0e\r!\x1a\x0388'
tRp7121
sa(dp7122
S'trial_loop.thisTrialN'
p7123
I50
sg6370
g6685
sS'block_loop.thisIndex'
p7124
g6364
sg38
S'left'
p7125
sg58
g62
sS'trial_loop.thisN'
p7126
I50
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7127
g59
(g98
S'2\x00\x00\x00'
tRp7128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7129
I0
sg6379
g6693
sS'block_loop.thisRepN'
p7130
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7131
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p7132
Nsg69
Vn
sS'block_loop.thisTrialN'
p7133
I0
sg39
F1.4505425141933301
sg34
g752
(S'\x07\xdf\n\x0e\r! \x006\xb0'
tRp7134
sa(dp7135
S'trial_loop.thisTrialN'
p7136
I51
sg6370
g6986
sS'block_loop.thisIndex'
p7137
g6364
sg38
S'left'
p7138
sg58
g62
sS'trial_loop.thisN'
p7139
I51
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7140
g59
(g98
S'3\x00\x00\x00'
tRp7141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7142
I0
sg6379
g6993
sS'block_loop.thisRepN'
p7143
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7144
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7145
Nsg69
Vn
sS'block_loop.thisTrialN'
p7146
I0
sg39
F1.0834110227124256
sg34
g752
(S'\x07\xdf\n\x0e\r!&\x07r@'
tRp7147
sa(dp7148
S'trial_loop.thisTrialN'
p7149
I52
sg6370
g6442
sS'block_loop.thisIndex'
p7150
g6364
sg38
S'left'
p7151
sg58
g62
sS'trial_loop.thisN'
p7152
I52
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7153
g59
(g98
S'4\x00\x00\x00'
tRp7154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7155
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7156
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7157
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7158
Nsg69
Vn
sS'block_loop.thisTrialN'
p7159
I0
sg39
F0.85017781601891329
sg34
g752
(S'\x07\xdf\n\x0e\r!,\tq\xf8'
tRp7160
sa(dp7161
S'trial_loop.thisTrialN'
p7162
I53
sg6370
S'8-liquorice_catherine_wheels.png'
p7163
sS'block_loop.thisIndex'
p7164
g6364
sg38
S'right'
p7165
sg58
g62
sS'trial_loop.thisN'
p7166
I53
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7167
g59
(g98
S'5\x00\x00\x00'
tRp7168
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7169
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p7170
sS'block_loop.thisRepN'
p7171
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7172
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p7173
Nsg69
Vn
sS'block_loop.thisTrialN'
p7174
I0
sg39
F1.0501377311511533
sg34
g752
(S'\x07\xdf\n\x0e\r!2\x07\xa1 '
tRp7175
sa(dp7176
S'trial_loop.thisTrialN'
p7177
I54
sg6370
S'3-ellas_strawberries_apples.png'
p7178
sS'block_loop.thisIndex'
p7179
g6364
sg38
S'left'
p7180
sg58
g62
sS'trial_loop.thisN'
p7181
I54
sg33
g6784
sg63
g64
sS'trial_loop.thisIndex'
p7182
g59
(g98
S'6\x00\x00\x00'
tRp7183
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7184
I0
sg6379
S'13-mccoys_steak_crisps.png'
p7185
sS'block_loop.thisRepN'
p7186
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7187
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7188
Nsg69
Vn
sS'block_loop.thisTrialN'
p7189
I0
sg39
F0.95021037428341515
sg34
g752
(S'\x07\xdf\n\x0e\r!8\x08\xe9@'
tRp7190
sa(dp7191
S'trial_loop.thisTrialN'
p7192
I55
sg6370
g6919
sS'block_loop.thisIndex'
p7193
g6364
sg38
S'right'
p7194
sg58
g62
sS'trial_loop.thisN'
p7195
I55
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7196
g59
(g98
S'7\x00\x00\x00'
tRp7197
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7198
I0
sg6379
g6926
sS'block_loop.thisRepN'
p7199
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7200
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7201
Nsg69
Vn
sS'block_loop.thisTrialN'
p7202
I0
sg39
F0.71680069153535442
sg34
g752
(S'\x07\xdf\n\x0e\r"\x02\x08\x87\x98'
tRp7203
sa(dp7204
S'trial_loop.thisTrialN'
p7205
I56
sg6370
g6653
sS'block_loop.thisIndex'
p7206
g6364
sg38
S'left'
p7207
sg58
g62
sS'trial_loop.thisN'
p7208
I56
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p7209
g59
(g98
S'8\x00\x00\x00'
tRp7210
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7211
I0
sg6379
g6661
sS'block_loop.thisRepN'
p7212
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7213
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7214
Nsg69
Vn
sS'block_loop.thisTrialN'
p7215
I0
sg39
F1.050117774246246
sg34
g752
(S'\x07\xdf\n\x0e\r"\x08\x04\xd2`'
tRp7216
sa(dp7217
S'trial_loop.thisTrialN'
p7218
I57
sg6370
S'7-olives.png'
p7219
sS'block_loop.thisIndex'
p7220
g6364
sg38
S'right'
p7221
sg58
g62
sS'trial_loop.thisN'
p7222
I57
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7223
g59
(g98
S'9\x00\x00\x00'
tRp7224
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7225
I0
sg6379
S'22-daim.png'
p7226
sS'block_loop.thisRepN'
p7227
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7228
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7229
Nsg69
Vn
sS'block_loop.thisTrialN'
p7230
I0
sg39
F1.0668647531983879
sg34
g752
(S'\x07\xdf\n\x0e\r"\x0e\x06\x1a\x80'
tRp7231
sa(dp7232
S'trial_loop.thisTrialN'
p7233
I58
sg6370
g6425
sS'block_loop.thisIndex'
p7234
g6364
sg38
S'right'
p7235
sg58
g62
sS'trial_loop.thisN'
p7236
I58
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7237
g59
(g98
S':\x00\x00\x00'
tRp7238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7239
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7240
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7241
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7242
Nsg69
Vn
sS'block_loop.thisTrialN'
p7243
I0
sg39
F1.3666282923904873
sg34
g752
(S'\x07\xdf\n\x0e\r"\x14\x07\x9d8'
tRp7244
sa(dp7245
S'trial_loop.thisTrialN'
p7246
I59
sg6370
g7163
sS'block_loop.thisIndex'
p7247
g6364
sg38
S'right'
p7248
sg58
g62
sS'trial_loop.thisN'
p7249
I59
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7250
g59
(g98
S';\x00\x00\x00'
tRp7251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7252
I0
sg6379
g7170
sS'block_loop.thisRepN'
p7253
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7254
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p7255
Nsg69
Vn
sS'block_loop.thisTrialN'
p7256
I0
sg39
F1.1334338591123014
sg34
g752
(S'\x07\xdf\n\x0e\r"\x1a\r\xa8\x18'
tRp7257
sa(dp7258
S'trial_loop.thisTrialN'
p7259
I60
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p7260
sS'block_loop.thisIndex'
p7261
g6364
sg38
S'left'
p7262
sg58
g62
sS'trial_loop.thisN'
p7263
I60
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p7264
sg63
g64
sS'trial_loop.thisIndex'
p7265
g59
(g98
S'<\x00\x00\x00'
tRp7266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7267
I0
sg6379
S'36-fig_rolls.png'
p7268
sS'block_loop.thisRepN'
p7269
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7270
I2
sg6384
S'36-fig_rolls.png'
p7271
sg55
g11
sS'block_loop.thisTrial'
p7272
Nsg69
Vn
sS'block_loop.thisTrialN'
p7273
I0
sg39
F1.1837095780028903
sg34
g752
(S'\x07\xdf\n\x0e\r"!\x00\xde\xa8'
tRp7274
sa(dp7275
S'trial_loop.thisTrialN'
p7276
I61
sg6370
S'19-caramello_redo.png'
p7277
sS'block_loop.thisIndex'
p7278
g6364
sg38
S'right'
p7279
sg58
g62
sS'trial_loop.thisN'
p7280
I61
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7281
g59
(g98
S'=\x00\x00\x00'
tRp7282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7283
I0
sg6379
S'30-spaghetti_hoops.png'
p7284
sS'block_loop.thisRepN'
p7285
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7286
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7287
Nsg69
Vn
sS'block_loop.thisTrialN'
p7288
I0
sg39
F0.80017978319938265
sg34
g752
(S'\x07\xdf\n\x0e\r"\'\x04M\x90'
tRp7289
sa(dp7290
S'trial_loop.thisTrialN'
p7291
I62
sg6370
g6837
sS'block_loop.thisIndex'
p7292
g6364
sg38
S'right'
p7293
sg58
g62
sS'trial_loop.thisN'
p7294
I62
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7295
g59
(g98
S'>\x00\x00\x00'
tRp7296
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7297
I0
sg6379
g6844
sS'block_loop.thisRepN'
p7298
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7299
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7300
Nsg69
Vn
sS'block_loop.thisTrialN'
p7301
I0
sg39
F1.5334993747783301
sg34
g752
(S'\x07\xdf\n\x0e\r"-\x01\xc5 '
tRp7302
sa(dp7303
S'trial_loop.thisTrialN'
p7304
I63
sg6370
g6670
sS'block_loop.thisIndex'
p7305
g6364
sg38
S'left'
p7306
sg58
g62
sS'trial_loop.thisN'
p7307
I63
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p7308
g59
(g98
S'?\x00\x00\x00'
tRp7309
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7310
I0
sg6379
g6677
sS'block_loop.thisRepN'
p7311
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7312
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p7313
Nsg69
Vn
sS'block_loop.thisTrialN'
p7314
I0
sg39
F0.98350105686131428
sg34
g752
(S'\x07\xdf\n\x0e\r"3\no\xe0'
tRp7315
sa(dp7316
S'trial_loop.thisTrialN'
p7317
I64
sg6370
g6758
sS'block_loop.thisIndex'
p7318
g6364
sg38
S'right'
p7319
sg58
g62
sS'trial_loop.thisN'
p7320
I64
sg33
g6646
sg63
g64
sS'trial_loop.thisIndex'
p7321
g59
(g98
S'@\x00\x00\x00'
tRp7322
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7323
I0
sg6379
g6765
sS'block_loop.thisRepN'
p7324
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7325
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p7326
Nsg69
Vn
sS'block_loop.thisTrialN'
p7327
I0
sg39
F0.91685839549882076
sg34
g752
(S'\x07\xdf\n\x0e\r"9\n\x87P'
tRp7328
sa(dp7329
S'trial_loop.thisTrialN'
p7330
I65
sg6370
g6459
sS'block_loop.thisIndex'
p7331
g6364
sg38
S'right'
p7332
sg58
g62
sS'trial_loop.thisN'
p7333
I65
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p7334
g59
(g98
S'A\x00\x00\x00'
tRp7335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7336
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7337
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7338
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7339
Nsg69
Vn
sS'block_loop.thisTrialN'
p7340
I0
sg39
F0.9339500587011571
sg34
g752
(S'\x07\xdf\n\x0e\r#\x03\t\xe7('
tRp7341
sa(dp7342
S'trial_loop.thisTrialN'
p7343
I66
sg6370
g6589
sS'block_loop.thisIndex'
p7344
g6364
sg38
S'left'
p7345
sg58
g62
sS'trial_loop.thisN'
p7346
I66
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7347
g59
(g98
S'B\x00\x00\x00'
tRp7348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7349
I0
sg6379
g6597
sS'block_loop.thisRepN'
p7350
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7351
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7352
Nsg69
Vn
sS'block_loop.thisTrialN'
p7353
I0
sg39
F1.3334650489032356
sg34
g752
(S'\x07\xdf\n\x0e\r#\t\tG\x00'
tRp7354
sa(dp7355
S'trial_loop.thisTrialN'
p7356
I67
sg6370
g6653
sS'block_loop.thisIndex'
p7357
g6364
sg38
S'left'
p7358
sg58
g62
sS'trial_loop.thisN'
p7359
I67
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p7360
g59
(g98
S'C\x00\x00\x00'
tRp7361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7362
I0
sg6379
g6661
sS'block_loop.thisRepN'
p7363
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7364
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7365
Nsg69
Vn
sS'block_loop.thisTrialN'
p7366
I0
sg39
F0.73356990818138001
sg34
g752
(S'\x07\xdf\n\x0e\r#\x0f\x0e\xd8\xc8'
tRp7367
sa(dp7368
S'trial_loop.thisTrialN'
p7369
I68
sg6370
g7277
sS'block_loop.thisIndex'
p7370
g6364
sg38
S'right'
p7371
sg58
g62
sS'trial_loop.thisN'
p7372
I68
sg33
g6538
sg63
g64
sS'trial_loop.thisIndex'
p7373
g59
(g98
S'D\x00\x00\x00'
tRp7374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7375
I0
sg6379
g7284
sS'block_loop.thisRepN'
p7376
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7377
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7378
Nsg69
Vn
sS'block_loop.thisTrialN'
p7379
I0
sg39
F1.0001365622465528
sg34
g752
(S'\x07\xdf\n\x0e\r#\x15\x0b^('
tRp7380
sa(dp7381
S'trial_loop.thisTrialN'
p7382
I69
sg6370
g6371
sS'block_loop.thisIndex'
p7383
g6364
sg38
S'left'
p7384
sg58
g62
sS'trial_loop.thisN'
p7385
I69
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7386
g59
(g98
S'E\x00\x00\x00'
tRp7387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7388
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7389
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7390
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7391
Nsg69
Vn
sS'block_loop.thisTrialN'
p7392
I0
sg39
F0.83353062158948887
sg34
g752
(S'\x07\xdf\n\x0e\r#\x1b\x0b\xee\xb0'
tRp7393
sa(dp7394
S'trial_loop.thisTrialN'
p7395
I70
sg6370
g6986
sS'block_loop.thisIndex'
p7396
g6364
sg38
S'left'
p7397
sg58
g62
sS'trial_loop.thisN'
p7398
I70
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7399
g59
(g98
S'F\x00\x00\x00'
tRp7400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7401
I0
sg6379
g6993
sS'block_loop.thisRepN'
p7402
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7403
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7404
Nsg69
Vn
sS'block_loop.thisTrialN'
p7405
I0
sg39
F1.1338050575359375
sg34
g752
(S'\x07\xdf\n\x0e\r#!\t\xe3@'
tRp7406
sa(dp7407
S'trial_loop.thisTrialN'
p7408
I71
sg6370
g7178
sS'block_loop.thisIndex'
p7409
g6364
sg38
S'right'
p7410
sg58
g62
sS'trial_loop.thisN'
p7411
I71
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7412
g59
(g98
S'G\x00\x00\x00'
tRp7413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7414
I0
sg6379
g7185
sS'block_loop.thisRepN'
p7415
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7416
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7417
Nsg69
Vn
sS'block_loop.thisTrialN'
p7418
I0
sg39
F1.4668749597303758
sg34
g752
(S"\x07\xdf\n\x0e\r#'\x0c\\\x10"
tRp7419
sa(dp7420
S'trial_loop.thisTrialN'
p7421
I72
sg6370
g6559
sS'block_loop.thisIndex'
p7422
g6364
sg38
S'right'
p7423
sg58
g62
sS'trial_loop.thisN'
p7424
I72
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p7425
g59
(g98
S'H\x00\x00\x00'
tRp7426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7427
I0
sg6379
g6567
sS'block_loop.thisRepN'
p7428
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7429
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p7430
Nsg69
Vn
sS'block_loop.thisTrialN'
p7431
I0
sg39
F2.4832168135208121
sg34
g752
(S'\x07\xdf\n\x0e\r#.\x04\xcex'
tRp7432
sa(dp7433
S'trial_loop.thisTrialN'
p7434
I73
sg6370
g6391
sS'block_loop.thisIndex'
p7435
g6364
sg38
S'right'
p7436
sg58
g62
sS'trial_loop.thisN'
p7437
I73
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7438
g59
(g98
S'I\x00\x00\x00'
tRp7439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7440
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7441
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7442
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7443
Nsg69
Vn
sS'block_loop.thisTrialN'
p7444
I0
sg39
F0.90018867827711802
sg34
g752
(S'\x07\xdf\n\x0e\r#5\x0c\xb9\xd0'
tRp7445
sa(dp7446
S'trial_loop.thisTrialN'
p7447
I74
sg6370
g6589
sS'block_loop.thisIndex'
p7448
g6364
sg38
S'left'
p7449
sg58
g62
sS'trial_loop.thisN'
p7450
I74
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p7451
g59
(g98
S'J\x00\x00\x00'
tRp7452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7453
I0
sg6379
g6597
sS'block_loop.thisRepN'
p7454
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7455
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p7456
Nsg69
Vn
sS'block_loop.thisTrialN'
p7457
I0
sg39
F1.4168643825705658
sg34
g752
(S'\x07\xdf\n\x0e\r#;\x0b\xa0\x90'
tRp7458
sa(dp7459
S'trial_loop.thisTrialN'
p7460
I75
sg6370
S'41-peanuts_redo.png'
p7461
sS'block_loop.thisIndex'
p7462
g6364
sg38
S'left'
p7463
sg58
g62
sS'trial_loop.thisN'
p7464
I75
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7465
g59
(g98
S'K\x00\x00\x00'
tRp7466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7467
I0
sg6379
S'45-chewy_nougat_redo.png'
p7468
sS'block_loop.thisRepN'
p7469
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7470
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7471
Nsg69
Vn
sS'block_loop.thisTrialN'
p7472
I0
sg39
F0.90054305588091665
sg34
g752
(S'\x07\xdf\n\x0e\r$\x06\x03 \xc8'
tRp7473
sa(dp7474
S'trial_loop.thisTrialN'
p7475
I76
sg6370
g7219
sS'block_loop.thisIndex'
p7476
g6364
sg38
S'right'
p7477
sg58
g62
sS'trial_loop.thisN'
p7478
I76
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7479
g59
(g98
S'L\x00\x00\x00'
tRp7480
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7481
I0
sg6379
g7226
sS'block_loop.thisRepN'
p7482
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7483
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7484
Nsg69
Vn
sS'block_loop.thisTrialN'
p7485
I0
sg39
F0.71686284303723369
sg34
g752
(S'\x07\xdf\n\x0e\r$\x0c\x02F\x08'
tRp7486
sa(dp7487
S'trial_loop.thisTrialN'
p7488
I77
sg6370
g7163
sS'block_loop.thisIndex'
p7489
g6364
sg38
S'right'
p7490
sg58
g62
sS'trial_loop.thisN'
p7491
I77
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7492
g59
(g98
S'M\x00\x00\x00'
tRp7493
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7494
I0
sg6379
g7170
sS'block_loop.thisRepN'
p7495
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7496
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p7497
Nsg69
Vn
sS'block_loop.thisTrialN'
p7498
I0
sg39
F0.98342408022926975
sg34
g752
(S'\x07\xdf\n\x0e\r$\x11\r\x94\x90'
tRp7499
sa(dp7500
S'trial_loop.thisTrialN'
p7501
I78
sg6370
g6459
sS'block_loop.thisIndex'
p7502
g6364
sg38
S'right'
p7503
sg58
g62
sS'trial_loop.thisN'
p7504
I78
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7505
g59
(g98
S'N\x00\x00\x00'
tRp7506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7507
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7508
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7509
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7510
Nsg69
Vn
sS'block_loop.thisTrialN'
p7511
I0
sg39
F0.85018750937342702
sg34
g752
(S'\x07\xdf\n\x0e\r$\x17\r\xe6\x98'
tRp7512
sa(dp7513
S'trial_loop.thisTrialN'
p7514
I79
sg6370
g7042
sS'block_loop.thisIndex'
p7515
g6364
sg38
S'right'
p7516
sg58
g62
sS'trial_loop.thisN'
p7517
I79
sg33
g6824
sg63
g64
sS'trial_loop.thisIndex'
p7518
g59
(g98
S'O\x00\x00\x00'
tRp7519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7520
I0
sg6379
g7049
sS'block_loop.thisRepN'
p7521
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7522
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p7523
Nsg69
Vn
sS'block_loop.thisTrialN'
p7524
I0
sg39
F0.71679299387233186
sg34
g752
(S'\x07\xdf\n\x0e\r$\x1d\x0c\x15\xc0'
tRp7525
sa(dp7526
S'trial_loop.thisTrialN'
p7527
I80
sg6370
g6773
sS'block_loop.thisIndex'
p7528
g6364
sg38
S'left'
p7529
sg58
g62
sS'trial_loop.thisN'
p7530
I80
sg33
g6784
sg63
g64
sS'trial_loop.thisIndex'
p7531
g59
(g98
S'P\x00\x00\x00'
tRp7532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7533
I0
sg6379
g6781
sS'block_loop.thisRepN'
p7534
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7535
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7536
Nsg69
Vn
sS'block_loop.thisTrialN'
p7537
I0
sg39
F1.4335158534804577
sg34
g752
(S'\x07\xdf\n\x0e\r$#\x08`\x88'
tRp7538
sa(dp7539
S'trial_loop.thisTrialN'
p7540
I81
sg6370
g7083
sS'block_loop.thisIndex'
p7541
g6364
sg38
S'right'
p7542
sg58
g62
sS'trial_loop.thisN'
p7543
I81
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p7544
g59
(g98
S'Q\x00\x00\x00'
tRp7545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7546
I0
sg6379
g7090
sS'block_loop.thisRepN'
p7547
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7548
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p7549
Nsg69
Vn
sS'block_loop.thisTrialN'
p7550
I0
sg39
F1.2334336310332219
sg34
g752
(S'\x07\xdf\n\x0e\r$*\x00\x1bX'
tRp7551
sa(dp7552
S'trial_loop.thisTrialN'
p7553
I82
sg6370
S'5-pineapple.png'
p7554
sS'block_loop.thisIndex'
p7555
g6364
sg38
S'left'
p7556
sg58
g62
sS'trial_loop.thisN'
p7557
I82
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7558
g59
(g98
S'R\x00\x00\x00'
tRp7559
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7560
I0
sg6379
S'40-sardines.png'
p7561
sS'block_loop.thisRepN'
p7562
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7563
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7564
Nsg69
Vn
sS'block_loop.thisTrialN'
p7565
I0
sg39
F0.85008572915921832
sg34
g752
(S'\x07\xdf\n\x0e\r$0\x04=\xf0'
tRp7566
sa(dp7567
S'trial_loop.thisTrialN'
p7568
I83
sg6370
g6476
sS'block_loop.thisIndex'
p7569
g6364
sg38
S'left'
p7570
sg58
g62
sS'trial_loop.thisN'
p7571
I83
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p7572
g59
(g98
S'S\x00\x00\x00'
tRp7573
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7574
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7575
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7576
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7577
Nsg69
Vn
sS'block_loop.thisTrialN'
p7578
I0
sg39
F1.283491534566565
sg34
g752
(S'\x07\xdf\n\x0e\r$6\x02q\x00'
tRp7579
sa(dp7580
S'trial_loop.thisTrialN'
p7581
I84
sg6370
S'36-fig_rolls.png'
p7582
sS'block_loop.thisIndex'
p7583
g6364
sg38
S'right'
p7584
sg58
g62
sS'trial_loop.thisN'
p7585
I84
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p7586
g59
(g98
S'T\x00\x00\x00'
tRp7587
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7588
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p7589
sS'block_loop.thisRepN'
p7590
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7591
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vn
sS'block_loop.thisTrialN'
p7593
I0
sg39
F1.2168334778789358
sg34
g752
(S'\x07\xdf\n\x0e\r%\x00\x07K0'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6743
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'right'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6750
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7604
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vn
sS'block_loop.thisTrialN'
p7606
I0
sg39
F0.70028008089957439
sg34
g752
(S'\x07\xdf\n\x0e\r%\x06\x0b/H'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
S'35-raisins.png'
p7610
sS'block_loop.thisIndex'
p7611
g6364
sg38
S'right'
p7612
sg58
g62
sS'trial_loop.thisN'
p7613
I86
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p7614
g59
(g98
S'V\x00\x00\x00'
tRp7615
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7616
I0
sg6379
S'49-yorkie.png'
p7617
sS'block_loop.thisRepN'
p7618
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7619
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p7620
Nsg69
Vn
sS'block_loop.thisTrialN'
p7621
I0
sg39
F1.2000671122186759
sg34
g752
(S'\x07\xdf\n\x0e\r%\x0c\x06\xfd\x10'
tRp7622
sa(dp7623
S'trial_loop.thisTrialN'
p7624
I87
sg6370
g6391
sS'block_loop.thisIndex'
p7625
g6364
sg38
S'right'
p7626
sg58
g62
sS'trial_loop.thisN'
p7627
I87
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7628
g59
(g98
S'W\x00\x00\x00'
tRp7629
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7630
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7631
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7632
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7633
Nsg69
Vn
sS'block_loop.thisTrialN'
p7634
I0
sg39
F0.78339346063512494
sg34
g752
(S'\x07\xdf\n\x0e\r%\x12\n\xa6\x90'
tRp7635
sa(dp7636
S'trial_loop.thisTrialN'
p7637
I88
sg6370
g6919
sS'block_loop.thisIndex'
p7638
g6364
sg38
S'right'
p7639
sg58
g62
sS'trial_loop.thisN'
p7640
I88
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p7641
g59
(g98
S'X\x00\x00\x00'
tRp7642
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7643
I0
sg6379
g6926
sS'block_loop.thisRepN'
p7644
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7645
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p7646
Nsg69
Vn
sS'block_loop.thisTrialN'
p7647
I0
sg39
F0.76685517388432345
sg34
g752
(S'\x07\xdf\n\x0e\r%\x18\x07\xe3\x88'
tRp7648
sa(dp7649
S'trial_loop.thisTrialN'
p7650
I89
sg6370
g6773
sS'block_loop.thisIndex'
p7651
g6364
sg38
S'left'
p7652
sg58
g62
sS'trial_loop.thisN'
p7653
I89
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7654
g59
(g98
S'Y\x00\x00\x00'
tRp7655
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7656
I0
sg6379
g6781
sS'block_loop.thisRepN'
p7657
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7658
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7659
Nsg69
Vn
sS'block_loop.thisTrialN'
p7660
I0
sg39
F4.050122050725804
sg34
g752
(S'\x07\xdf\n\x0e\r%\x1e\x04\xa7h'
tRp7661
sa(dp7662
S'trial_loop.thisTrialN'
p7663
I90
sg6370
g6544
sS'block_loop.thisIndex'
p7664
g6364
sg38
S'right'
p7665
sg58
g62
sS'trial_loop.thisN'
p7666
I90
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7667
g59
(g98
S'Z\x00\x00\x00'
tRp7668
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7669
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7670
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7671
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7672
Nsg69
Vn
sS'block_loop.thisTrialN'
p7673
I0
sg39
F0.63389771459242183
sg34
g752
(S"\x07\xdf\n\x0e\r%'\x06\x1a\x80"
tRp7674
sa(dp7675
S'trial_loop.thisTrialN'
p7676
I91
sg6370
g6442
sS'block_loop.thisIndex'
p7677
g6364
sg38
S'left'
p7678
sg58
g62
sS'trial_loop.thisN'
p7679
I91
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p7680
g59
(g98
S'[\x00\x00\x00'
tRp7681
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7682
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7683
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7684
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p7685
Nsg69
Vn
sS'block_loop.thisTrialN'
p7686
I0
sg39
F0.85019748782451643
sg34
g752
(S'\x07\xdf\n\x0e\r%-\x00\xf20'
tRp7687
sa(dp7688
S'trial_loop.thisTrialN'
p7689
I92
sg6370
g7554
sS'block_loop.thisIndex'
p7690
g6364
sg38
S'left'
p7691
sg58
g62
sS'trial_loop.thisN'
p7692
I92
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7693
g59
(g98
S'\\\x00\x00\x00'
tRp7694
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7695
I0
sg6379
g7561
sS'block_loop.thisRepN'
p7696
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7697
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7698
Nsg69
Vn
sS'block_loop.thisTrialN'
p7699
I0
sg39
F1.7168320523851435
sg34
g752
(S'\x07\xdf\n\x0e\r%2\x0eg\x80'
tRp7700
sa(dp7701
S'trial_loop.thisTrialN'
p7702
I93
sg6370
g7461
sS'block_loop.thisIndex'
p7703
g6364
sg38
S'left'
p7704
sg58
g62
sS'trial_loop.thisN'
p7705
I93
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7706
g59
(g98
S']\x00\x00\x00'
tRp7707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7708
I0
sg6379
g7468
sS'block_loop.thisRepN'
p7709
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7710
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7711
Nsg69
Vn
sS'block_loop.thisTrialN'
p7712
I0
sg39
F0.99995780540211854
sg34
g752
(S'\x07\xdf\n\x0e\r%9\n\xaax'
tRp7713
sa(dp7714
S'trial_loop.thisTrialN'
p7715
I94
sg6370
g7178
sS'block_loop.thisIndex'
p7716
g6364
sg38
S'right'
p7717
sg58
g62
sS'trial_loop.thisN'
p7718
I94
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7719
g59
(g98
S'^\x00\x00\x00'
tRp7720
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7721
I0
sg6379
g7185
sS'block_loop.thisRepN'
p7722
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7723
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7724
Nsg69
Vn
sS'block_loop.thisTrialN'
p7725
I0
sg39
F1.18352226819934
sg34
g752
(S'\x07\xdf\n\x0e\r&\x03\n\xfc\x80'
tRp7726
sa(dp7727
S'trial_loop.thisTrialN'
p7728
I95
sg6370
g6820
sS'block_loop.thisIndex'
p7729
g6364
sg38
S'left'
p7730
sg58
g62
sS'trial_loop.thisN'
p7731
I95
sg33
g6824
sg63
g64
sS'trial_loop.thisIndex'
p7732
g59
(g98
S'_\x00\x00\x00'
tRp7733
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7734
I0
sg6379
g6828
sS'block_loop.thisRepN'
p7735
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7736
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p7737
Nsg69
Vn
sS'block_loop.thisTrialN'
p7738
I0
sg39
F0.95055847971798357
sg34
g752
(S'\x07\xdf\n\x0e\r&\t\x0ekh'
tRp7739
sa(dp7740
S'trial_loop.thisTrialN'
p7741
I96
sg6370
g6510
sS'block_loop.thisIndex'
p7742
g6364
sg38
S'left'
p7743
sg58
g62
sS'trial_loop.thisN'
p7744
I96
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7745
g59
(g98
S'`\x00\x00\x00'
tRp7746
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7747
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7748
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7749
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7750
Nsg69
Vn
sS'block_loop.thisTrialN'
p7751
I0
sg39
F0.80019147224356857
sg34
g752
(S'\x07\xdf\n\x0e\r&\x0f\x0e\x05\xd8'
tRp7752
sa(dp7753
S'trial_loop.thisTrialN'
p7754
I97
sg6370
g6790
sS'block_loop.thisIndex'
p7755
g6364
sg38
S'left'
p7756
sg58
g62
sS'trial_loop.thisN'
p7757
I97
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p7758
g59
(g98
S'a\x00\x00\x00'
tRp7759
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7760
I0
sg6379
g6798
sS'block_loop.thisRepN'
p7761
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7762
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p7763
Nsg69
Vn
sS'block_loop.thisTrialN'
p7764
I0
sg39
F1.9834939293950811
sg34
g752
(S'\x07\xdf\n\x0e\r&\x15\x0b\x81P'
tRp7765
sa(dp7766
S'trial_loop.thisTrialN'
p7767
I98
sg6370
g7027
sS'block_loop.thisIndex'
p7768
g6364
sg38
S'right'
p7769
sg58
g62
sS'trial_loop.thisN'
p7770
I98
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7771
g59
(g98
S'b\x00\x00\x00'
tRp7772
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7773
I0
sg6379
g7034
sS'block_loop.thisRepN'
p7774
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7775
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7776
Nsg69
Vn
sS'block_loop.thisTrialN'
p7777
I0
sg39
F0.93352184055129328
sg34
g752
(S'\x07\xdf\n\x0e\r&\x1c\x0b\xcfp'
tRp7778
sa(dp7779
S'trial_loop.thisTrialN'
p7780
I99
sg6370
g6702
sS'block_loop.thisIndex'
p7781
g6364
sg38
S'left'
p7782
sg58
g62
sS'trial_loop.thisN'
p7783
I99
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p7784
g59
(g98
S'c\x00\x00\x00'
tRp7785
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7786
I0
sg6379
g6709
sS'block_loop.thisRepN'
p7787
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7788
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p7789
Nsg69
Vn
sS'block_loop.thisTrialN'
p7790
I0
sg39
F1.3832084886407756
sg34
g752
(S'\x07\xdf\n\x0e\r&"\x0bm\xc8'
tRp7791
sa(dp7792
S'trial_loop.thisTrialN'
p7793
I100
sg6370
g6544
sS'block_loop.thisIndex'
p7794
g6364
sg38
S'right'
p7795
sg58
g62
sS'trial_loop.thisN'
p7796
I100
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7797
g59
(g98
S'd\x00\x00\x00'
tRp7798
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7799
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7800
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7801
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7802
Nsg69
Vn
sS'block_loop.thisTrialN'
p7803
I0
sg39
F0.76722694250565837
sg34
g752
(S'\x07\xdf\n\x0e\r&)\x02q\x00'
tRp7804
sa(dp7805
S'trial_loop.thisTrialN'
p7806
I101
sg6370
g6527
sS'block_loop.thisIndex'
p7807
g6364
sg38
S'left'
p7808
sg58
g62
sS'trial_loop.thisN'
p7809
I101
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7810
g59
(g98
S'e\x00\x00\x00'
tRp7811
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7812
I0
sg6379
g6535
sS'block_loop.thisRepN'
p7813
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7814
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7815
Nsg69
Vn
sS'block_loop.thisTrialN'
p7816
I0
sg39
F1.9835087545243368
sg34
g752
(S'\x07\xdf\n\x0e\r&.\x0e\xb1\xb8'
tRp7817
sa(dp7818
S'trial_loop.thisTrialN'
p7819
I102
sg6370
g7083
sS'block_loop.thisIndex'
p7820
g6364
sg38
S'right'
p7821
sg58
g62
sS'trial_loop.thisN'
p7822
I102
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p7823
g59
(g98
S'f\x00\x00\x00'
tRp7824
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7825
I0
sg6379
g7090
sS'block_loop.thisRepN'
p7826
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7827
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p7828
Nsg69
Vn
sS'block_loop.thisTrialN'
p7829
I0
sg39
F1.7834767094373092
sg34
g752
(S'\x07\xdf\n\x0e\r&5\x0e\xff\xd8'
tRp7830
sa(dp7831
S'trial_loop.thisTrialN'
p7832
I103
sg6370
g6493
sS'block_loop.thisIndex'
p7833
g6364
sg38
S'right'
p7834
sg58
g62
sS'trial_loop.thisN'
p7835
I103
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p7836
g59
(g98
S'g\x00\x00\x00'
tRp7837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7838
I0
sg6379
g6501
sS'block_loop.thisRepN'
p7839
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7840
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p7841
Nsg69
Vn
sS'block_loop.thisTrialN'
p7842
I0
sg39
F0.78344819957419531
sg34
g752
(S"\x07\xdf\n\x0e\r'\x00\x0b\xfah"
tRp7843
sa(dp7844
S'trial_loop.thisTrialN'
p7845
I104
sg6370
g6685
sS'block_loop.thisIndex'
p7846
g6364
sg38
S'left'
p7847
sg58
g62
sS'trial_loop.thisN'
p7848
I104
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p7849
g59
(g98
S'h\x00\x00\x00'
tRp7850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7851
I0
sg6379
g6693
sS'block_loop.thisRepN'
p7852
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7853
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p7854
Nsg69
Vn
sS'block_loop.thisTrialN'
p7855
I0
sg39
F1.1835148556347121
sg34
g752
(S"\x07\xdf\n\x0e\r'\x06\t7`"
tRp7856
sa(dp7857
S'trial_loop.thisTrialN'
p7858
I105
sg6370
g7554
sS'block_loop.thisIndex'
p7859
g6364
sg38
S'left'
p7860
sg58
g62
sS'trial_loop.thisN'
p7861
I105
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7862
g59
(g98
S'i\x00\x00\x00'
tRp7863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7864
I0
sg6379
g7561
sS'block_loop.thisRepN'
p7865
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7866
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7867
Nsg69
Vn
sS'block_loop.thisTrialN'
p7868
I0
sg39
F1.2838242446741788
sg34
g752
(S"\x07\xdf\n\x0e\r'\x0c\x0c\xa2`"
tRp7869
sa(dp7870
S'trial_loop.thisTrialN'
p7871
I106
sg6370
g6408
sS'block_loop.thisIndex'
p7872
g6364
sg38
S'left'
p7873
sg58
g62
sS'trial_loop.thisN'
p7874
I106
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7875
g59
(g98
S'j\x00\x00\x00'
tRp7876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7877
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7878
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7879
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7880
Nsg69
Vn
sS'block_loop.thisTrialN'
p7881
I0
sg39
F0.70020738074799738
sg34
g752
(S"\x07\xdf\n\x0e\r'\x13\x02:P"
tRp7882
sa(dp7883
S'trial_loop.thisTrialN'
p7884
I107
sg6370
g6986
sS'block_loop.thisIndex'
p7885
g6364
sg38
S'left'
p7886
sg58
g62
sS'trial_loop.thisN'
p7887
I107
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p7888
g59
(g98
S'k\x00\x00\x00'
tRp7889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7890
I0
sg6379
g6993
sS'block_loop.thisRepN'
p7891
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7892
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p7893
Nsg69
Vn
sS'block_loop.thisTrialN'
p7894
I0
sg39
F1.2833877586626841
sg34
g752
(S"\x07\xdf\n\x0e\r'\x18\rJX"
tRp7895
sa(dp7896
S'trial_loop.thisTrialN'
p7897
I108
sg6370
g6636
sS'block_loop.thisIndex'
p7898
g6364
sg38
S'left'
p7899
sg58
g62
sS'trial_loop.thisN'
p7900
I108
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p7901
g59
(g98
S'l\x00\x00\x00'
tRp7902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7903
I0
sg6379
g6644
sS'block_loop.thisRepN'
p7904
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7905
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p7906
Nsg69
Vn
sS'block_loop.thisTrialN'
p7907
I0
sg39
F1.1001349086745904
sg34
g752
(S"\x07\xdf\n\x0e\r'\x1f\x02\xe2H"
tRp7908
sa(dp7909
S'trial_loop.thisTrialN'
p7910
I109
sg6370
g7461
sS'block_loop.thisIndex'
p7911
g6364
sg38
S'left'
p7912
sg58
g62
sS'trial_loop.thisN'
p7913
I109
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p7914
g59
(g98
S'm\x00\x00\x00'
tRp7915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7916
I0
sg6379
g7468
sS'block_loop.thisRepN'
p7917
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7918
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p7919
Nsg69
Vn
sS'block_loop.thisTrialN'
p7920
I0
sg39
F0.96685642831835139
sg34
g752
(S"\x07\xdf\n\x0e\r'%\x04\xe2\x00"
tRp7921
sa(dp7922
S'trial_loop.thisTrialN'
p7923
I110
sg6370
g6653
sS'block_loop.thisIndex'
p7924
g6364
sg38
S'left'
p7925
sg58
g62
sS'trial_loop.thisN'
p7926
I110
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p7927
g59
(g98
S'n\x00\x00\x00'
tRp7928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7929
I0
sg6379
g6661
sS'block_loop.thisRepN'
p7930
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7931
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p7932
Nsg69
Vn
sS'block_loop.thisTrialN'
p7933
I0
sg39
F1.0672410833976755
sg34
g752
(S"\x07\xdf\n\x0e\r'+\x04\xf9p"
tRp7934
sa(dp7935
S'trial_loop.thisTrialN'
p7936
I111
sg6370
g7178
sS'block_loop.thisIndex'
p7937
g6364
sg38
S'right'
p7938
sg58
g62
sS'trial_loop.thisN'
p7939
I111
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p7940
g59
(g98
S'o\x00\x00\x00'
tRp7941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7942
I0
sg6379
g7185
sS'block_loop.thisRepN'
p7943
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7944
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p7945
Nsg69
Vn
sS'block_loop.thisTrialN'
p7946
I0
sg39
F1.6668457086097987
sg34
g752
(S"\x07\xdf\n\x0e\r'1\x06\x80\x10"
tRp7947
sa(dp7948
S'trial_loop.thisTrialN'
p7949
I112
sg6370
g7260
sS'block_loop.thisIndex'
p7950
g6364
sg38
S'left'
p7951
sg58
g62
sS'trial_loop.thisN'
p7952
I112
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p7953
g59
(g98
S'p\x00\x00\x00'
tRp7954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7955
I0
sg6379
g7268
sS'block_loop.thisRepN'
p7956
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7957
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p7958
Nsg69
Vn
sS'block_loop.thisTrialN'
p7959
I0
sg39
F1.3668942894173597
sg34
g752
(S"\x07\xdf\n\x0e\r'8\x01\xcc\xf0"
tRp7960
sa(dp7961
S'trial_loop.thisTrialN'
p7962
I113
sg6370
g6820
sS'block_loop.thisIndex'
p7963
g6364
sg38
S'left'
p7964
sg58
g62
sS'trial_loop.thisN'
p7965
I113
sg33
g6824
sg63
g64
sS'trial_loop.thisIndex'
p7966
g59
(g98
S'q\x00\x00\x00'
tRp7967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7968
I0
sg6379
g6828
sS'block_loop.thisRepN'
p7969
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7970
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p7971
Nsg69
Vn
sS'block_loop.thisTrialN'
p7972
I0
sg39
F0.91686609316184331
sg34
g752
(S'\x07\xdf\n\x0e\r(\x02\x08\x16P'
tRp7973
sa(dp7974
S'trial_loop.thisTrialN'
p7975
I114
sg6370
g6636
sS'block_loop.thisIndex'
p7976
g6364
sg38
S'left'
p7977
sg58
g62
sS'trial_loop.thisN'
p7978
I114
sg33
g6646
sg63
g64
sS'trial_loop.thisIndex'
p7979
g59
(g98
S'r\x00\x00\x00'
tRp7980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7981
I0
sg6379
g6644
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7983
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F0.9501926981674842
sg34
g752
(S'\x07\xdf\n\x0e\r(\x08\x07;\x90'
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g7582
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'right'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g7589
sS'block_loop.thisRepN'
p7995
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p7996
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.85057951999624493
sg34
g752
(S'\x07\xdf\n\x0e\r(\x0e\x07\x14\x80'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g6559
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'right'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g6567
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8009
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F1.1996853651453421
sg34
g752
(S'\x07\xdf\n\x0e\r(\x14\x05C\xa8'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g7582
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'right'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g7589
sS'block_loop.thisRepN'
p8021
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8022
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.91685468921696156
sg34
g752
(S'\x07\xdf\n\x0e\r(\x1a\x08\xb2\x90'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g6773
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'left'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6777
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g6781
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8035
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F1.9168752163186582
sg34
g752
(S'\x07\xdf\n\x0e\r( \x08\x12h'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g7461
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'left'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g7468
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8048
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.91692083210000419
sg34
g752
(S"\x07\xdf\n\x0e\r('\x07/\xd8"
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g7260
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g7268
sS'block_loop.thisRepN'
p8060
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8061
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F1.3838240165950992
sg34
g752
(S'\x07\xdf\n\x0e\r(-\x06\x8f\xb0'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6790
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'left'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6798
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8074
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F0.73353769203549746
sg34
g752
(S'\x07\xdf\n\x0e\r(3\x0c\xd9\x10'
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g7083
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'left'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g7090
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8087
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F1.4668410329913968
sg34
g752
(S'\x07\xdf\n\x0e\r(9\t^p'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g6408
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'left'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8100
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.70020367446522869
sg34
g752
(S'\x07\xdf\n\x0e\r)\x04\x01\x92X'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6559
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6567
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8113
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F1.2832483454303656
sg34
g752
(S'\x07\xdf\n\x0e\r)\t\x0c\xe0\xe0'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6919
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'right'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6926
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8126
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F1.016857027025253
sg34
g752
(S'\x07\xdf\n\x0e\r)\x10\x02x\xd0'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6371
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'right'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8139
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F3.5501360205589663
sg34
g752
(S'\x07\xdf\n\x0e\r)\x16\x03G\xd8'
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6408
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8152
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.78346045881426107
sg34
g752
(S'\x07\xdf\n\x0e\r)\x1e\x0c!x'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g7582
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g7589
sS'block_loop.thisRepN'
p8164
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8165
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F1.066870740270133
sg34
g752
(S'\x07\xdf\n\x0e\r)$\t^p'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g6442
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'left'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g6450
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8178
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F1.2001879940407889
sg34
g752
(S'\x07\xdf\n\x0e\r)*\n\xe1('
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g7027
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g7034
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8191
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F1.0002303596975253
sg34
g752
(S'\x07\xdf\n\x0e\r)0\x0eP\x10'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g6493
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'right'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8204
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F0.86683242301387509
sg34
g752
(S'\x07\xdf\n\x0e\r)6\x0e\xe0\x98'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6408
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'left'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8217
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.90021091597100167
sg34
g752
(S'\x07\xdf\n\x0e\r*\x00\rN@'
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g6758
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6646
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g6765
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8230
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F1.0167811907886062
sg34
g752
(S'\x07\xdf\n\x0e\r*\x06\x0c5\x00'
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6820
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6824
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6828
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8243
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F0.90018497199525882
sg34
g752
(S'\x07\xdf\n\x0e\r*\x0c\r\x04\x08'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6476
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'left'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8256
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.98352044356761326
sg34
g752
(S'\x07\xdf\n\x0e\r*\x12\x0c%`'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g6837
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g6844
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8269
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F0.83352976629339537
sg34
g752
(S'\x07\xdf\n\x0e\r*\x18\x0c<\xd0'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6527
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'right'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8282
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F1.1668593933436568
sg34
g752
(S'\x07\xdf\n\x0e\r*\x1e\n1`'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g7610
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'right'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g7617
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8295
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.98351787767933274
sg34
g752
(S'\x07\xdf\n\x0e\r*$\ra\xc8'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g6391
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'right'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6401
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8308
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F0.68347950340375974
sg34
g752
(S'\x07\xdf\n\x0e\r**\ry8'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g6371
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8320
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8321
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F1.3168369560817155
sg34
g752
(S'\x07\xdf\n\x0e\r*0\tG\x00'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g6904
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'right'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g6911
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8334
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F1.1001962048803762
sg34
g752
(S'\x07\xdf\n\x0e\r*6\x0e\x9aH'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6790
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'left'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6798
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8347
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F1.0335204720777256
sg34
g752
(S'\x07\xdf\n\x0e\r+\x01\x01W\xc0'
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g6685
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'left'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g6693
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8360
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F1.2501158925952041
sg34
g752
(S'\x07\xdf\n\x0e\r+\x07\x02a`'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g7178
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'right'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6784
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g7185
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8373
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F1.5002015647351072
sg34
g752
(S'\x07\xdf\n\x0e\r+\r\x06\xc2x'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g7042
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'right'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6831
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g7049
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8386
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F0.86727461099690117
sg34
g752
(S'\x07\xdf\n\x0e\r+\x13\x0e\xf08'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g6476
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'left'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6487
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8399
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.93341777954992722
sg34
g752
(S'\x07\xdf\n\x0e\r+\x19\r]\xe0'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g7554
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g7561
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8412
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F1.4334197752395994
sg34
g752
(S'\x07\xdf\n\x0e\r+\x1f\x0c\xc1\xa0'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g7163
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'right'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g7170
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8425
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.98344289673877938
sg34
g752
(S'\x07\xdf\n\x0e\r+&\x04\xba\xf0'
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7083
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7090
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8438
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F1.3500996989932901
sg34
g752
(S'\x07\xdf\n\x0e\r+,\x04\xd2`'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6636
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'left'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6640
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6644
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8451
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F1.5005277175741867
sg34
g752
(S'\x07\xdf\n\x0e\r+2\n\xdd@'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6527
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8464
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F0.95016190751539398
sg34
g752
(S'\x07\xdf\n\x0e\r+9\x03\x8a@'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g6670
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'left'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g6677
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8477
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.0668687445795513
sg34
g752
(S'\x07\xdf\n\x0e\r,\x03\x03g\x18'
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6510
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6521
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8490
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.71678301541942346
sg34
g752
(S'\x07\xdf\n\x0e\r,\t\x04\xe9\xd0'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6653
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'left'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6657
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6661
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8503
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F1.2335279986818932
sg34
g752
(S'\x07\xdf\n\x0e\r,\x0f\x014\x98'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g7610
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'right'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7617
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8516
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F0.917180842056041
sg34
g752
(S'\x07\xdf\n\x0e\r,\x15\x05\x18\xb0'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g7027
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g7034
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8529
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.76676878899797885
sg34
g752
(S'\x07\xdf\n\x0e\r,\x1b\x04|p'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6904
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6911
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8542
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F0.6335287969577621
sg34
g752
(S'\x07\xdf\n\x0e\r,!\x01z\xe8'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g7260
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'left'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g7271
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g7268
sS'block_loop.thisRepN'
p8554
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8555
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.96686327068528044
sg34
g752
(S'\x07\xdf\n\x0e\r,&\x0b\x98\xc0'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g6493
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8568
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F0.75021710261171393
sg34
g752
(S'\x07\xdf\n\x0e\r,,\x0bq\xb0'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6459
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'right'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8581
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.86677910956859705
sg34
g752
(S'\x07\xdf\n\x0e\r,2\x085\x90'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g7260
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g7268
sS'block_loop.thisRepN'
p8593
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8594
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.93383915533286199
sg34
g752
(S'\x07\xdf\n\x0e\r,8\x06\x9fP'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7461
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7468
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6401
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8607
I2
sg6384
g6395
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.3501034052751493
sg34
g752
(S'\x07\xdf\n\x0e\r-\x02\x06=\xa8'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6619
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'right'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6630
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6627
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8620
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F1.1500961637693763
sg34
g752
(S'\x07\xdf\n\x0e\r-\x08\x0c\r\xf0'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g7610
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g7617
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8633
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F0.7167835856171223
sg34
g752
(S'\x07\xdf\n\x0e\r-\x0e\x0e\xc1X'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g7163
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'right'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6689
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g7170
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6689
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8646
I2
sg6384
g6696
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.98352842632993998
sg34
g752
(S'\x07\xdf\n\x0e\r-\x14\x0b\x0c '
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g6773
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'left'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g6784
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g6781
sS'block_loop.thisRepN'
p8658
I2
sg6382
g6777
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8659
I2
sg6384
g6784
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F2.2168368990624003
sg34
g752
(S'\x07\xdf\n\x0e\r-\x1a\x0b^('
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6743
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'right'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6750
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8672
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.73355622344661242
sg34
g752
(S'\x07\xdf\n\x0e\r-!\x0f\x03\xc0'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6702
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6709
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8685
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F2.7332240835357879
sg34
g752
(S"\x07\xdf\n\x0e\r-'\x0b\x89 "
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g6425
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8697
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8698
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F1.3833293704619791
sg34
g752
(S'\x07\xdf\n\x0e\r-/\x08\x02\xc8'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6559
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6567
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8711
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F1.5165545373738496
sg34
g752
(S'\x07\xdf\n\x0e\r-5\x0eH@'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6986
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'left'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6435
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6993
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6435
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8724
I2
sg6384
g6429
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F2.0333739313791739
sg34
g752
(S'\x07\xdf\n\x0e\r.\x00\x07r@'
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g7027
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'right'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g7034
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8737
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F0.85015386773375212
sg34
g752
(S'\x07\xdf\n\x0e\r.\x07\x08w\xf8'
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g7219
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'right'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g7226
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8750
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F0.78328711884478253
sg34
g752
(S'\x07\xdf\n\x0e\r.\r\x06\xa7 '
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6758
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6646
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6765
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6646
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8763
I2
sg6384
g6640
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F1.0669189219397595
sg34
g752
(S'\x07\xdf\n\x0e\r.\x13\x03\xe4\x18'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g6476
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'left'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8776
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F1.0668465068856676
sg34
g752
(S'\x07\xdf\n\x0e\r.\x19\x05j\xb8'
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g6820
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'left'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6831
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g6828
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8789
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.71688992740837421
sg34
g752
(S'\x07\xdf\n\x0e\r.\x1f\x06\xedp'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g7610
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g7617
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8802
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F1.0172524588333545
sg34
g752
(S'\x07\xdf\n\x0e\r.%\x0388'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6371
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6375
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8815
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.90014648367832706
sg34
g752
(S'\x07\xdf\n\x0e\r.+\x03\xc8\xc0'
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g6790
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'left'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6794
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g6798
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6794
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8828
I2
sg6384
g6801
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F1.0335347270092825
sg34
g752
(S'\x07\xdf\n\x0e\r.1\x02\xea\x18'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6837
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'right'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6844
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8841
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F1.3670699101767241
sg34
g752
(S'\x07\xdf\n\x0e\r.7\x03\xf7\xa0'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7554
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'left'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6470
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7561
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6463
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8854
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F1.3668036280514571
sg34
g752
(S'\x07\xdf\n\x0e\r/\x01\n\x02\x80'
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7277
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7284
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8867
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F2.2005728771982831
sg34
g752
(S'\x07\xdf\n\x0e\r/\x08\x00\xcb '
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g7219
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g7226
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8880
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.71680069153444492
sg34
g752
(S'\x07\xdf\n\x0e\r/\x0f\x04l\xd0'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7277
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'right'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7284
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8893
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.96682763335684285
sg34
g752
(S'\x07\xdf\n\x0e\r/\x15\x00y\x18'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6619
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6627
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8906
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F1.2668431997417429
sg34
g752
(S'\x07\xdf\n\x0e\r/\x1b\x00\x90\x88'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g7042
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'right'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6824
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g7049
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8919
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.73351146296045044
sg34
g752
(S'\x07\xdf\n\x0e\r/!\x050 '
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6919
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6480
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6926
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6480
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8932
I2
sg6384
g6487
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F0.70020025328176416
sg34
g752
(S"\x07\xdf\n\x0e\r/'\x01\xb5\x80"
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g7582
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'right'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g7264
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g7589
sS'block_loop.thisRepN'
p8944
I2
sg6382
g7264
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8945
I2
sg6384
g7271
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.78389837031954812
sg34
g752
(S'\x07\xdf\n\x0e\r/,\x0c\xc5\x88'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g7219
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'right'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6452
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g7226
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6452
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8958
I2
sg6384
g6446
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F0.85018979016149387
sg34
g752
(S'\x07\xdf\n\x0e\r/2\n\x02\x80'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7042
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'right'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g6824
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7049
sS'block_loop.thisRepN'
p8970
I2
sg6382
g6824
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8971
I2
sg6384
g6831
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.75019572021301428
sg34
g752
(S'\x07\xdf\n\x0e\r/8\x081\xa8'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g6589
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'left'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6593
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g6597
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6593
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8984
I2
sg6384
g6600
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F1.7500796850681581
sg34
g752
(S'\x07\xdf\n\x0e\r0\x02\x04\xf1\xa0'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6702
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6709
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6563
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p8997
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F1.1498276008551329
sg34
g752
(S'\x07\xdf\n\x0e\r0\t\x01\xad\xb0'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6743
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6750
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9010
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.5839096602248901
sg34
g752
(S'\x07\xdf\n\x0e\r0\x0f\x04e\x00'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6904
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'right'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6663
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6911
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6663
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9023
I2
sg6384
g6657
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F0.68353196155203477
sg34
g752
(S'\x07\xdf\n\x0e\r0\x14\r\xcb@'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g7277
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'left'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g7284
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6531
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9036
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F1.1668565423578912
sg34
g752
(S'\x07\xdf\n\x0e\r0\x1a\t^p'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6544
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'right'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6551
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6514
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9049
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.83348785679390858
sg34
g752
(S'\x07\xdf\n\x0e\r0 \x0c\x8a\xf0'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6670
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'left'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6677
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6503
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9062
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.98356235306800954
sg34
g752
(S'\x07\xdf\n\x0e\r0&\n\x7f\x80'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6619
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'right'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6623
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6627
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6623
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9075
I2
sg6384
g6630
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.83352320902395149
sg34
g752
(S'\x07\xdf\n\x0e\r0,\n\xd5p'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g6743
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'right'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g6750
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6418
sg56
Vr
sg57
Vy
sS'block_loop.thisN'
p9088
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.6835034516898304
sg34
g752
(S'\x07\xdf\n\x0e\r02\x08\xc6\x18'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vy
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I114
sg56
Vr
sg57
Vy
sg42
I486
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I114
sg55
g11
sg56
Vr
sg45
F2.1499999999999999
sg42
I486
sg49
F0.01
sg57
Vy
sg58
g62
sg44
I01
sg48
I25
sg47
g444
sg51
F27.710000000000001
sg46
F2.4600000000000009
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I78934864
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\xa4p\x1d@\xecQ8?\n\xd7\xa3>\n\xd7#>\x1f\x85\xeb>H\xe1\xfa?\x00\x00\x00\x00\x00\x00\x00\x00\\\x8fB?333?\xb8\x1e\x05?\\\x8fB?=\n\x17@\xecQ\xb8?q=\n?333?H\xe1z?33\xb3?\xe1z\x14?\x00\x00\x00?{\x14\xae>)\\\x8f>\x1f\x85\xeb>)\\\xcf?\xecQ\xb8>\n\xd7#?\x00\x00\x00\x00\\\x8f"@\\\x8f\x02@\x1f\x85\xeb>H\xe1z?\xd7\xa3\x10@\x00\x00\x00\x00\xcd\xccL?\\\x8f\x82?\n\xd7\x03@R\xb8\x9e?333?R\xb8\x1e?\xecQ8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'w\xbe3A!\xb0\xda@\xa8\xc6{@\xaa\xf1\xbe@d;\xb3@w\xbe\xd3@\xbaI\x84@\xa8\xc6+@\x10X\xb5@\xd5x\x13A\x10X\xc5@T\xe3=@\xbaI\x8c@d;\xc3@!\xb0\x1a@b\x10`@B`e@\xdb\xf9>@\xdb\xf9\xce@\xa8\xc6[@D\x8b\x80@\xee|\xb7@\x98n\x8e@\xee|\x8f@d;\xfb@b\x10P@\xaa\xf1\x96@\xbaI\x94@\xbaI\xec@\xdd$\xda@\x87\x16\xb9@w\xbe\'A/\xddl@\xb6\xf3\xdd?\x08\xac"A\xbaI,A\x0e-B@\x96C\x13@d;\x83@\x10X\xad@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xd0A\x00\x00\x80A\x00\x00@A\x00\x00\x90A\x00\x00\xa0A\x00\x00\x00B\x00\x00\x80@\x00\x00\xc8A\x00\x000A\x00\x00\xe0@\x00\x00\x0cB\x00\x00PA\x00\x00\x18B\x00\x00\x00A\x00\x00\xe8A\x00\x00\xc0A\x00\x00\x88A\x00\x00\x00@\x00\x00\xf0A\x00\x00\xa0@\x00\x00\x1cB\x00\x00\xe0A\x00\x00\xd8A\x00\x00`A\x00\x00 A\x00\x00\x98A\x00\x00pA\x00\x00@@\x00\x00\x80?\x00\x00\xf8A\x00\x00\x10A\x00\x00\xc0@\x00\x00\xb8A\x00\x00\x14B\x00\x00\x08B\x00\x00\x00\x00\x00\x00\x04B\x00\x00\x10B\x00\x00\xa8A\x00\x00\xb0A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0?33\xb3?ff\xe6?\x00\x00\x80?33\xb3?\x9a\x99\xd9?\x00\x00\xc0?ff\xa6?33\xb3?\x00\x00\x80?\x9a\x99\xd9?\x00\x00\x80?33\xb3?33\xb3?\xcd\xcc\x8c?\xcd\xcc\x8c?\x00\x00\xc0?33\xb3?\x00\x00\xc0?33\xb3?\x9a\x99\xd9?\x9a\x99\xd9?33\xf3?\x00\x00\x80?33\xb3?ff\xa6?\x9a\x99\xd9?\x00\x00\x00@\xcd\xcc\x8c?\xcd\xcc\xcc?\xcd\xcc\xcc?\xcd\xcc\x8c?\xcd\xcc\xcc?ff\xa6?ff\xa6?\x00\x00\x00@\xcd\xcc\x8c?ff\xa6?ff\xe6?\x00\x00\x00@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'#\x00\x00\x00\x1c\x00\x00\x00\x11\x00\x00\x00\x1b\x00\x00\x00\x06\x00\x00\x00\x13\x00\x00\x00\x1f\x00\x00\x00\t\x00\x00\x00\r\x00\x00\x00\x1e\x00\x00\x00\x18\x00\x00\x00\x08\x00\x00\x00\x02\x00\x00\x00\x0b\x00\x00\x00\x17\x00\x00\x00\x1a\x00\x00\x00\x01\x00\x00\x00\x10\x00\x00\x00\x03\x00\x00\x00\x19\x00\x00\x00\x04\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00 \x00\x00\x00\x0f\x00\x00\x00\x07\x00\x00\x00\x00\x00\x00\x00\x16\x00\x00\x00\x15\x00\x00\x00\x0e\x00\x00\x00\x12\x00\x00\x00\x1d\x00\x00\x00\x05\x00\x00\x00$\x00\x00\x00"\x00\x00\x00\n\x00\x00\x00%\x00\x00\x00!\x00\x00\x00\x0c\x00\x00\x00\x14\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g284
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g214
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g186
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g228
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g242
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g326
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g130
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g277
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g179
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g151
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g347
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g193
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g368
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g158
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g305
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g270
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g221
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g116
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g312
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g137
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g375
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g298
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g291
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g200
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g172
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g235
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g207
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g123
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g109
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g319
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g165
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g144
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g263
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g361
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g340
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g102
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g333
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g354
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g249
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g256
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I78934864
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'ff\xa6@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\x99@\x00\x00\xc0@\xcd\xcc\xac@\x00\x00\xc0@\x00\x00\xc0@33s@\x00\x00\x80@\xcd\xcc\x8c@\x00\x00\xc0@\x9a\x99\xa9@ff\x86@\x9a\x99\xa9@\x00\x00\xa0@\x00\x00\xc0@ff\x86@\x00\x00`@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xa0@\xcd\xcc\x9c@\x00\x00\x90@\x9a\x99\xb9@33\xb3@\x00\x00\xc0@ff\xb6@\x00\x00\xc0@\x9a\x99\xb9@\x00\x00\xc0@fff@\xcd\xcc\xbc@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\xa9@\x00\x00\x80?33S@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\xca\x99)@\x86\xde\xfd?\xc9"R@\xf1\xab\xca?\xec\xcd\xcc?\x9d\xac\x8a?\x1bW\xb5?\xcej\xa6?X\x02\x10@]\x8c\x08@\x17k\xc6?\xe86\xf3?\n(\xe2?\xde\xaa\x92@\xc1\xe3\xbd?`m\xa6?pS\xa4?\xadE\xe4?5B\x84?W8\xd3?\xb4\xa9\xaa?-\x19\xf1?8\xd3\xcc?O\x01\x00@n\xdd\xbd?\xc6?s?\x1e"2@k\xce\x8c?\xbdV\xf5?\xaf\xef\xee?09\xf3?\x1a\x17\xb1?\xdeg\x86?$eV@[V\xb5?E\x02\x80?\xa1V\xb5?\xfeV\xb5?\xc6\xd9\xd47\xcd$\x12@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'\x9a\x99y@33S@33S@\x00\x00\x80@ff\x86@33\x83@33S@ffF@\x9a\x99Y@ffF@\x9a\x99y@\xcd\xccL@\x00\x00\x80@ffF@\xcd\xccl@\x9a\x99Y@\xcd\xccl@33S@\x00\x00`@\x00\x00\x80@\x00\x00@@\x00\x00`@33S@\x9a\x99y@333@\x00\x00\x80@fff@\x9a\x99y@ffF@33\x83@\x9a\x99Y@33\x83@ff\x86@ffF@\x9a\x999@33s@\x9a\x99y@\x9a\x99y@ffF@\x9a\x99\x89@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'@\xcb\xff\x02\xe0a\xfe\x02\x80\xb03\r\xe0\xb53\r\xc0\xb63\r\x00l\xfe\x02@\xdf1\r k\xfe\x02\x80\xdf1\r\xa0\xdf1\r@i\xfe\x02\x00\xb63\r`\xe0\xe3\x0c\x80\xb23\r\xc0\xb33\r`\xdc1\r\xc0@\x00\x03\x80E\x00\x03`B\x00\x03\x80A\x00\x03\x00B\x00\x03@A\x00\x03\x00C\x00\x03\xa0@\x00\x03\xa0B\x00\x03\x00A\x00\x03\x80q\xe4\x0c i\xfe\x02\xe0B\x00\x03@b\xfe\x02@@\x00\x03\xe0@\x00\x03@B\x00\x03\xc0A\x00\x03 A\x00\x03`@\x00\x03\xe0\xb03\r\x80\xe4\xe3\x0c\xc0\xe3\xe3\x0c\xe0k\xfe\x02'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\xaa\xf1\xb6@\xf8S\xf3?!\xb0j@\xcb\xa1\xd1@\xf8S\xb3?\xbaI4@T\xe3m@\xbaI4@\xfc\xa99@!\xb0\n@\xbaI4@\xa0\x1a\xef?+\x87\xc6?u\x93\x18@\xbaI\x04@\x87\x16q@\x1dZ\xc4?\x87\x16\xb1@\xf8S\x93?+\x87\xa6?\x96C#@b\x10 @+\x87\xc6?\x96CS@\xcb\xa1\x91@\x98n\x8e@/\xddL@\xdd$*Au\x93\xe8?/\xddL@\xf8S\xd3?\xdb\xf9n@\xb6\xf3\xbd?\x87\x16!@\xfe\xd4\xcc@\xf8S\xd3?P\x8d\xd7?\xd5x/A\x96C#@/\xdd\x1c@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I78934864
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'`e\x00\x030\x19w\rX\x19w\r\x80\x19w\r0e\x00\x03`e\x00\x03H\x1aw\r\xa8\x19w\r\xd0\x19w\r\xa8\x19w\r \x1aw\r\xd0\x19w\r0e\x00\x03\xd0d\x00\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S'h\xc9O\x02pw\xdb\x04p\xad\xe3\x04\x88\xa1\xe3\x04@\xad\xe3\x04\x00\xab\xe3\x040\xab\xe3\x04\xa0\xa1\xe3\x04P\xa3\xe3\x04\xf0\xa8\xe3\x04h\xac\xe3\x04\x90\xab\xe3\x04\xc0\xae\xe3\x04\xc8\xac\xe3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g788
sg82
g789
sg83
g793
sg84
g794
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g743
sg82
g799
sg83
g748
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g777
sg82
g808
sg83
g782
sg84
g812
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g817
sg82
g818
sg83
g822
sg84
g823
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g828
sg82
g829
sg83
g833
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g817
sg82
g839
sg83
g822
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g755
sg82
g848
sg83
g760
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g828
sg82
g857
sg83
g833
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g788
sg82
g866
sg83
g793
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g766
sg82
g875
sg83
g771
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I78934864
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I78934864
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\x08\xf6x\r\xf8\x19y\r`\xf5x\r\xe0@y\r@\xf6x\r\x10Ay\r \x1ay\r\x80B\x00\x038\x1by\r\xc0\r\xfe\x02`\x1by\rH\x1ay\r@Ay\r @\x00\x03pAy\r \x1ay\r\xd0\xf5x\rp\x1ay\r\xb0\x1by\r\x98\x1ay\r\xa0Ay\r`\xf5x\r\x98\x1ay\r\xc0\r\xfe\x02\xe0@y\r\xf8\x19y\r\xa0Ay\r\x00\x1cy\r\x10Ay\r C\x00\x03\x98\x1ay\r \x1ay\r\xd0Ay\r\xe8\x1ay\r\xe0@y\r\xd0Ay\r\xc0\r\xfe\x02\xc0\n\xfe\x02\x98\xf5x\r@Ay\r`By\r0By\r\xc0\x1ay\r\xf0By\r\xc0\r\xfe\x02 C\x00\x03\xa0Ay\r\xb0\x1by\r\x80B\x00\x03\xe8\x1ay\r\x98\xf5x\r\xc0\r\xfe\x02 @\x00\x03\xd0\xf5x\rp\x1ay\r\xd0\xf5x\r\xc0\x1ay\r\x98\xf5x\r C\x00\x03\xe8\x1ay\rH\x1ay\r@Ay\r\x98\x1ay\r \x1ay\rH\x1ay\r\xc0\r\xfe\x02\xd0Ay\r @\x00\x03\xf8\x19y\r\xd8\x1by\r\x00\x1cy\r\xc0\n\xfe\x02\xd0\xf5x\r\xe0@y\r C\x00\x03\xc0\n\xfe\x02x\xf6x\r\xf8\x19y\r0By\rp\x1ay\r\xd0Ay\r\xc0\r\xfe\x02 \x1ay\r @\x00\x03\x00\x1cy\r\x10Ay\r@\xf6x\r\xb0\x1by\r\xc0\n\xfe\x02\x98\x1ay\r\xd0\xf5x\rpAy\r\xc0\n\xfe\x02p\x1ay\r\xa0Ay\r\x98\xf5x\r C\x00\x03@Ay\r\xe0A\x00\x03\x90By\rx\xf6x\rH\x1ay\r C\x00\x03\xd0Ay\r0By\r\xd0\xf5x\r\xc0\r\xfe\x02\xc0\x1ay\r\xd0Ay\r\xb0\x1by\r\xc0\x1ay\r\xd8\x1by\r\xd0\xf5x\rpAy\rp\x1ay\r\x98\x1ay\r@\xf6x\r\xf0By\r\xd0\xf5x\r\xc0\x1ay\r`\xf5x\r\xc0\n\xfe\x02\x98\xf5x\rx\xf6x\r\xf8\x19y\rpAy\r\xc0\n\xfe\x02\xf8\x19y\r@Ay\r\xd0Ay\r@Ay\r\x10Ay\r C\x00\x03\x80B\x00\x03\xe0@y\r\xc0\x1ay\r`\xf5x\r@Ay\rH\x1ay\r\xe0A\x00\x03H\x1ay\r\xe0@y\r \x1ay\r\xf8\x19y\rpAy\r\xf8\x19y\r\xa0Ay\r\x98\x1ay\rH\x1ay\r@Ay\rpAy\rp\x1ay\r\xd0Ay\rx\xf6x\r \x1ay\r C\x00\x03\xb0\xf6x\r\xa0Ay\r\xc0\x1ay\r\x98\xf5x\rp\x1ay\rx\xf6x\r\xa0Ay\rP\x1cy\r\xe0A\x00\x03\x10Ay\r @\x00\x03\x98\x1ay\rH\x1ay\r\x98\xf5x\r`By\r\xe8\x1ay\r\xe0@y\r\xa0Ay\r`\xf5x\r\xc0\r\xfe\x02\xc0By\rH\x1ay\r\x98\xf5x\r\x00By\r\xa0Ay\rP\x1cy\r @\x00\x03\x98\xf5x\r`By\r\xf8\x19y\r\xe8\x1ay\r\x88\x1by\r\xd0\xf5x\r C\x00\x03\xe8\x1ay\r C\x00\x03\xe8\x1ay\r\xd8\x1by\r8\x1by\r`\xf5x\r\x98\x1ay\r`\xf5x\rpAy\r\xe8\x1ay\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\x00\x07\xfe\x02\xc0}4\r\x80x4\r\x00r4\r\xc0\x05\xfe\x02 \x014\r\x80\x1f\xff\x02 \x1e\xff\x02\x00\x1e\xff\x02\x00\x1f\xff\x02`\x1b\xff\x02\xe0\x1b\xff\x02`\x1d\xff\x02\x00\x12\xff\x02 \x1b\xff\x02\xe0\x1f\xff\x02@\x1f\xff\x02`\x1c\xff\x02\xa0\x1e\xff\x02`\x1f\xff\x02\xa0\x1d\xff\x02\x00\x1b\xff\x02\x80\x15\xff\x02 \x1d\xff\x02\xc0\x1f\xff\x02\x80\x1a\xff\x02\xe0\x1e\xff\x02\xa0\x1c\xff\x02\xc0\x1e\xff\x02\x80\x1d\xff\x02 \x1a\xff\x02\xc0\x1d\xff\x02@\x1e\xff\x02\xe0\x1c\xff\x02@\x1b\xff\x02\xe0\x1d\xff\x02\xc0\x1b\xff\x02 \x1c\xff\x02\xc0\x19\xff\x02\xa0q4\r\x00\x19\xff\x02\xe0O\xe3\x0c\x80J\xe3\x0c O\xe3\x0c\x00N\xe3\x0c`O\xe3\x0c\x80O\xe3\x0c\x80\x1b\xff\x02\x80l\xd8\x0c\xe0g\xd8\x0c f\xd8\x0c\x00c\xd8\x0c\x80k\xd8\x0c\xe0b\xd8\x0c k\xd8\x0c\xe0k\xd8\x0c\xe0o\xd8\x0c`f\xd8\x0c\x00l\xd8\x0c@c\xd8\x0c@g\xd8\x0c@`\xd8\x0c\x80b\xd8\x0c\xa0l\xd8\x0c m\xd8\x0c@m\xd8\x0c\xa0g\xd8\x0c\x00k\xd8\x0c\x80\x02\xfe\x02\x00f\xd8\x0c`m\xd8\x0c@f\xd8\x0c\xe0f\xd8\x0c`b\xd8\x0c\xc0g\xd8\x0c g\xd8\x0c\x00g\xd8\x0c\x80g\xd8\x0c\xc0b\xd8\x0c`l\xd8\x0c\xa0f\xd8\x0c\xc0k\xd8\x0c\xa0b\xd8\x0c\xa0c\xd8\x0c `\xd8\x0c`g\xd8\x0c@k\xd8\x0c\xe0N\xe3\x0c\xc0\xd00\r\x00\xd90\r\xc0\xda0\r\xe0\xd00\r\xa0A\x00\x03\xa0\xd00\r\x00\xdb0\r\x00\xd10\r@\xd10\r\xe0\xd20\r\x80c\xd8\x0c \xd00\r@\xd30\r@Q\xa4\x04 S\xa4\x04 _\xa4\x04\xc0P\xa4\x04\xa0S\xa4\x04@S\xa4\x04\xe0Q\xa4\x04\x00T\xa4\x04\x80Q\xa4\x04`T\xa4\x04\xa0T\xa4\x04@R\xa4\x04\xc0R\xa4\x04\x00U\xa4\x04\xc0Q\xa4\x04@V\xa4\x04 Q\xa4\x04\xa0U\xa4\x04\xe0R\xa4\x04 T\xa4\x04\xe0U\xa4\x04\xc0T\xa4\x04`V\xa4\x04\x80V\xa4\x04\x80R\xa4\x04`Q\xa4\x04\x80T\xa4\x04`R\xa4\x04 V\xa4\x04\x80W\xa4\x04`U\xa4\x04@U\xa4\x04\xe0V\xa4\x04\xa0V\xa4\x04\x00W\xa4\x04\x00Y\xa4\x04\xa0P\xa4\x04 W\xa4\x04\x80X\xa4\x04\xc0S\xa4\x04@T\xa4\x04\xa0R\xa4\x04\x00X\xa4\x04\xe0S\xa4\x04\x80U\xa4\x04`W\xa4\x04 Y\xa4\x04\x00Z\xa4\x04\xe0T\xa4\x04\x00V\xa4\x04 U\xa4\x04\xe0W\xa4\x04`Z\xa4\x04\xc0Z\xa4\x04\xe0s4\r\xc0U\xa4\x04\x00R\xa4\x04@X\xa4\x04\xe0Y\xa4\x04`X\xa4\x04 R\xa4\x04\xc0[\xa4\x04 X\xa4\x04@[\xa4\x04\xa0Z\xa4\x04\x80S\xa4\x04`\x06\xfe\x02\x00Q\xa4\x04\xc0Y\xa4\x04\x00\\\xa4\x04\xa0Q\xa4\x04\xa0W\xa4\x04\x00S\xa4\x04\x80[\xa4\x04\xe0P\xa4\x04\x80]\xa4\x04\xa0Y\xa4\x04\xa0[\xa4\x04\xc0^\xa4\x04\xc0\\\xa4\x04\x80\\\xa4\x04@]\xa4\x04\xe0X\xa4\x04\xe0[\xa4\x04@Z\xa4\x04\x80Z\xa4\x04\xc0V\xa4\x04\x00[\xa4\x04@Y\xa4\x04`[\xa4\x04\xe0Z\xa4\x04`Y\xa4\x04 ^\xa4\x04\xe0\\\xa4\x04\xa0\\\xa4\x04@^\xa4\x04\xa0]\xa4\x04\x00]\xa4\x04 [\xa4\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\x88$B@A\xcb\xac@\xd1\x02\x00@a\xf8\x1e@\xa9\xff?@~\xc2\xbb?Q\xcf\x8c?T"\x82@\x1f\xea\x9d?aF4@\xe7$\x12@\xf2\x11!@\xd2\xe1\xbd?\x07\xb2\xea?\xf2\x9b\t@\x08\xde]@\xe7\\\x95?H\x13A@%\xd3\x8c?\xdd\x03\xe0?`K\xa4?(x\x97@$\xab\xd9?\xa77\x03@\x97Z\xb5?8\x1f\x12@n%\x12@lM\xa4?\xfe\xcd,@\x0bJ\x84?f\xbe\xdb?\xcb\xed\xce?9H\x93?\xd6\xf5\x8e?i\xe3\xbd?Y\xb0\xea?\xbc?s?\xc2\x08\x00@\xb6\xbf\xbb?1\x9d\x99?f\x8b\x08@\xae\x8e\x88?\xe3*\x12@k\x8e\xc8?\x9c}\x97?\x14J\xe4?\xd5\x9f\xf9?J\xe3M@h\xe3\xdd?\x03\xcfL@\xe1\x8a8@\rn\x86?\x92w\x86?C\xcf\x1c@\xb1F\x14@IJ\xc4?\x05m\xa6?q\xc2\x9b?\xb2I\xe4?\x9c\xc1\xdb?\x1e}\xd7?$\xdf\x8d@\x99\xde\xcc?\xcb\x10\xd1?s\xaf\xaa?\x97\xad\x1a@\xeeET@\xebg\xf5?n|\xa8?F}\xd7?M\x13Q@\xab\xbe\xdb?\xe4\xcd\xbb?\xbd8\xb3?\xe0\xbaj?R:\x93?\n%\x12@\xff\xea\xae?\xf7\xc5\x9b?\xd8#\xe2?\x16H\xe4?\xcd\xc6{?\x861\xa2?\x19i\x06@5X\xf5?\xde\x13\xd1?\xbf\x01\x80?\xa2\xf4\x8e?\xd5\xb0\xaa?p\xc1\xbb?\x12\x04\xa0?\x05\x17\xb1?\x9dS\x95?69\xd3?\x06\xe3\x9d?\xf5x\x17@)l\xe6?\x82$\xf1?@\xb1\xca?\xc3\x8d\x88?x4\xb3?\x80Y\x95?\xa8J\xa4?h\xabZ@\x93l\x86?,\x06\xa0?/\xae\x8a?\xdf(\xa2?\x82{\x97?\x96k\xc6?3\x89(@N8\x93?r;C@)\x01\x00@F\x8e\xa8?\xae\xac\xca?\xcb\x10\xd1?\xc3\xdf\xac?\xedI\xa4?\xd4\x8e\x88?\xf1\xcf\x8c?cWE@\xa8m\xe6?\x8f\x131@\x86\x0e\x91?\xbe\xe2\x9d?}\xd0\xb4@l\xb7{?\xbby7@\xbbF\x14@\xb7J\x84?V\x02\xcf?\xb0Y\x95?\\[\xd5?vl\xa6?\x81\xd2\xac?8\xd4\x8c?h\xaf\x8a?\xe5\xce\xcc?\xbe\x01 @\xa6\x1dQ?\xb0o\x06@\x94z\xb7?\xddc\xa6?\xe4\x8b\xa8?\xb4A\xc4?|#\x91?\xaa\xaf\xea?\x91(\x82?_\x04\x80?\xe3\xfbn?\x8eC\xf3?Hz\x07@\x0fh\x16@\xbe\xac\xaa?<e\x86?\xa2\x9a\xa8?\xb2\x0c@?\xf7G\xe4?\xfe\x8e\xa8?\xc3:\x93?\x1c(\xc2?;JD?d5C@\xfe\xd3\xac?)i\x06@\xf4\xe0\xf5@\xddu\xb7?\x0c)\xa2?\x8c\x14\xd1?\xb3H\x84?}yG@\xa8\xf4\xae?\xd8bU?Iz\x97?:\xd0\xac?\xf6\xf6L?\x0c\xb7j?\xb0\xb0\xca?\'\x1f\x82?\x073b? ^\x05@C\x14\xb1?\xe6\x05\xa0?\\\xf3\xce?0u7?\x01\xd3\x8c??PD?_\x8e\x88?\t\xf6n?\x15\x05\xc0?\xabYs?Uz\xd7?\xd7{\xb7?G\xfan?G(\xc2?\xfb\x8af?\x8a\x84w?@\xb7j?\xa4[\x95?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\x98\xaf\xe3\x04@\xaa\xe3\x04\x18\xe8\x04\x05h\xe0\x04\x05\x88\xe4\x04\x05`\xe2\x04\x05\x88\xea\x04\x05\x90\xeb\x04\x05\xe8\xe1\x04\x05\x98\xe0\x04\x05\x88\xe1\x04\x05\x00\xeb\x04\x05\xd0\xe7\x04\x05\xd0\xe1\x04\x05\x10\xe7\x04\x05`\xe8\x04\x058\xe6\x04\x05\xa0\xe4\x04\x05\xe0\xec\x04\x050\xeb\x04\x05p\xed\x04\x05\xc8\xe9\x04\x05\x90\xe2\x04\x05\xc8\xe0\x04\x05\xf8\xe6\x04\x05H\xee\x04\x05\xa0\xe1\x04\x05 \xef\x04\x05\xa8\xe5\x04\x05\x08\xe3\x04\x05\xb0\xec\x04\x05\xd0\xea\x04\x05\xd8\xe8\x04\x05@\xe4\x04\x05`\xe5\x04\x05\x98\xe6\x04\x05(\xe1\x04\x05\x90\xe8\x04\x05\x98\xef\x04\x05H\xe2\x04\x05X\xed\x04\x05\xe0\xef\x04\x05\x08\xe6\x04\x05X\xe7\x04\x05\xf8\xe0\x04\x05\x18\xe5\x04\x05\xe8\xea\x04\x05`\xeb\x04\x05\xc8\xe3\x04\x05X\xea\x04\x050\xe5\x04\x05\xb8\xe4\x04\x05 \xe3\x04\x05(\xe4\x04\x05\xf8\xe3\x04\x05(\xed\x04\x050\xee\x04\x05\xd0\xed\x04\x05\xe8\xe7\x04\x05\xa8\xe2\x04\x05X\xe4\x04\x05x\xee\x04\x05\xf0\xeb\x04\x05x\xe8\x04\x05\x98\xe9\x04\x05\xb0\xef\x04\x05\xe8\xed\x04\x05P\xec\x04\x05\xa8\xe8\x04\x05\xc0\xe2\x04\x058\xe0\x04\x05(\xe7\x04\x05\xc0\xe5\x04\x05H\xeb\x04\x05p\xe7\x04\x05\x08\xec\x04\x05\x80\xe0\x04\x05\xb8\xea\x04\x05\x00\xee\x04\x05\xc0\xeb\x04\x058\xe9\x04\x05P\xef\x04\x05\x80\xec\x04\x05@\xea\x04\x05x\xe5\x04\x05\xa0\xea\x04\x05\xa0\xe7\x04\x05\x80\xe3\x04\x05\x80\xef\x04\x05\xb8\xed\x04\x058\xef\x04\x05\x08\xef\x04\x05P\xe6\x04\x05\xb8\xe7\x04\x05\xf0\xee\x04\x05\xf0\xe2\x04\x05\x10\xea\x04\x05\x08\xe9\x04\x05 \xe9\x04\x05\x80\xe6\x04\x05\x90\xee\x04\x05h\xef\x04\x05\xd8\xeb\x04\x05@\xed\x04\x05\x88\xed\x04\x05\xc8\xe6\x04\x05\xb0\xe9\x04\x05h\xec\x04\x05\xe0\xe9\x04\x05\xc0\xee\x04\x05\xb0\xe6\x04\x05\x10\xed\x04\x05\xc8\xec\x04\x05\x90\xe5\x04\x05\xf8\xec\x04\x05\xe8\xe4\x04\x05p\xe4\x04\x05\xc8\xef\x04\x05\xa8\xeb\x04\x05`\xee\x04\x05p\xe1\x04\x05x\xeb\x04\x05\xb8\xe1\x04\x05\xf0\xe5\x04\x05\xa0\xed\x04\x05p\xea\x04\x05\xf0\xe8\x04\x05x\xe2\x04\x05h\xe9\x04\x05\xf8\xe9\x04\x05\xd8\xee\x04\x058\xec\x04\x05\x10\xe4\x04\x05\x18\xeb\x04\x05\xe0\xe3\x04\x05P\xe0\x04\x05\xc0\xe8\x04\x05\x98\xec\x04\x05h\xe6\x04\x058L\xe4\x04\x90K\xe4\x04\xe0C\xe4\x04\xd0M\xe4\x04\xb0I\xe4\x04\x00K\xe4\x04\xe8A\xe4\x040E\xe4\x04\xd0G\xe4\x04\xf0N\xe4\x04\xc0K\xe4\x04xE\xe4\x04hC\xe4\x04\xe8G\xe4\x04\x08O\xe4\x04\xa8H\xe4\x04\xb0@\xe4\x04PL\xe4\x04pA\xe4\x04\xc0H\xe4\x04PO\xe4\x04\x98O\xe4\x04\xb0L\xe4\x04xH\xe4\x04\xe8D\xe4\x04\xf8F\xe4\x04\xa0M\xe4\x04\xd8E\xe4\x04hL\xe4\x04\xd0J\xe4\x04\xa8N\xe4\x04xN\xe4\x04\x90H\xe4\x04\x00E\xe4\x04@M\xe4\x04\xc8I\xe4\x04\x90E\xe4\x04\x90N\xe4\x04@A\xe4\x04\x18K\xe4\x04 \xec\x04\x058\xe3\x04\x05\x18\xee\x04\x05(\xea\x04\x05\xd8\xe5\x04\x05\x80\xe9\x04\x05\x10\xe1\x04\x05\x00\xe5\x04\x05P\xe3\x04\x05\x88\xe7\x04\x05@\xe7\x04\x05\xe0\xe6\x04\x05\x18\xe2\x04\x05P\xe9\x04\x05 \xe6\x04\x050\xe8\x04\x05\xd0\xe4\x04\x050\xe2\x04\x05 \xe0\x04\x05\xb0\xe3\x04\x05H\xe5\x04\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g976
sg894
g966
sg909
g970
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g976
sg894
g1000
sg909
g970
sg903
g1007
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1042
sg894
g1096
sg909
g1036
sg903
g1103
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1132
sg894
g1128
sg909
g1139
sg903
g1136
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g976
sg894
g966
sg909
g970
sg903
g974
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g1162
sg894
g1158
sg909
g1169
sg903
g1166
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g1179
sg894
g1175
sg909
g1186
sg903
g1183
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1209
sg894
g1205
sg909
g1216
sg903
g1213
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g1226
sg894
g1222
sg909
g1233
sg903
g1230
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1209
sg894
g1205
sg909
g1216
sg903
g1213
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g919
sg894
g1291
sg909
g926
sg903
g1298
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g1226
sg894
g1306
sg909
g1233
sg903
g1313
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1331
sg894
g1321
sg909
g1325
sg903
g1329
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g987
sg894
g1338
sg909
g994
sg903
g1345
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g1357
sg894
g1353
sg909
g1364
sg903
g1361
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1209
sg894
g1205
sg909
g1216
sg903
g1213
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g976
sg894
g1000
sg909
g970
sg903
g1007
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g1400
sg894
g1396
sg909
g1407
sg903
g1404
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g953
sg894
g1430
sg909
g960
sg903
g1437
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1400
sg894
g1396
sg909
g1407
sg903
g1404
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1025
sg894
g1471
sg909
g1019
sg903
g1478
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g1072
sg894
g1486
sg909
g1066
sg903
g1493
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g1132
sg894
g1128
sg909
g1139
sg903
g1136
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g1331
sg894
g1540
sg909
g1325
sg903
g1547
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1400
sg894
g1396
sg909
g1407
sg903
g1404
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g907
sg894
g1568
sg909
g899
sg903
g1575
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1357
sg894
g1583
sg909
g1364
sg903
g1590
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1226
sg894
g1306
sg909
g1233
sg903
g1313
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g1115
sg894
g1611
sg909
g1122
sg903
g1618
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1025
sg894
g1471
sg909
g1019
sg903
g1478
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1417
sg894
g1639
sg909
g1424
sg903
g1646
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g1072
sg894
g1486
sg909
g1066
sg903
g1493
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g907
sg894
g1568
sg909
g899
sg903
g1575
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g1115
sg894
g1611
sg909
g1122
sg903
g1618
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1162
sg894
g1693
sg909
g1169
sg903
g1700
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1179
sg894
g1708
sg909
g1186
sg903
g1715
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g1162
sg894
g1693
sg909
g1169
sg903
g1700
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g1331
sg894
g1540
sg909
g1325
sg903
g1547
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1357
sg894
g1583
sg909
g1364
sg903
g1590
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1209
sg894
g1205
sg909
g1216
sg903
g1213
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g976
sg894
g966
sg909
g970
sg903
g974
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1083
sg894
g1840
sg909
g1090
sg903
g1847
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g907
sg894
g1568
sg909
g899
sg903
g1575
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1400
sg894
g1868
sg909
g1407
sg903
g1875
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1115
sg894
g1611
sg909
g1122
sg903
g1618
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g919
sg894
g1291
sg909
g926
sg903
g1298
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1179
sg894
g1175
sg909
g1186
sg903
g1183
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1331
sg894
g1321
sg909
g1325
sg903
g1329
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g1162
sg894
g1158
sg909
g1169
sg903
g1166
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1357
sg894
g1583
sg909
g1364
sg903
g1590
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1025
sg894
g1471
sg909
g1019
sg903
g1478
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g953
sg894
g1430
sg909
g960
sg903
g1437
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1179
sg894
g1708
sg909
g1186
sg903
g1715
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1400
sg894
g1868
sg909
g1407
sg903
g1875
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g907
sg894
g1568
sg909
g899
sg903
g1575
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g976
sg894
g1000
sg909
g970
sg903
g1007
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g1331
sg894
g1321
sg909
g1325
sg903
g1329
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g987
sg894
g1338
sg909
g994
sg903
g1345
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g976
sg894
g1000
sg909
g970
sg903
g1007
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1025
sg894
g1471
sg909
g1019
sg903
g1478
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g1209
sg894
g2169
sg909
g1216
sg903
g2176
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1162
sg894
g1158
sg909
g1169
sg903
g1166
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1132
sg894
g2197
sg909
g1139
sg903
g2204
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1179
sg894
g1175
sg909
g1186
sg903
g1183
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1226
sg894
g1306
sg909
g1233
sg903
g1313
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1357
sg894
g1353
sg909
g1364
sg903
g1361
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1042
sg894
g1096
sg909
g1036
sg903
g1103
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g936
sg894
g2290
sg909
g943
sg903
g2297
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1209
sg894
g2169
sg909
g1216
sg903
g2176
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g987
sg894
g1338
sg909
g994
sg903
g1345
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g1357
sg894
g1583
sg909
g1364
sg903
g1590
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1400
sg894
g1396
sg909
g1407
sg903
g1404
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g953
sg894
g949
sg909
g960
sg903
g957
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1162
sg894
g1158
sg909
g1169
sg903
g1166
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g907
sg894
g895
sg909
g899
sg903
g904
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1331
sg894
g1540
sg909
g1325
sg903
g1547
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g1400
sg894
g1396
sg909
g1407
sg903
g1404
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1115
sg894
g1111
sg909
g1122
sg903
g1119
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g1331
sg894
g1540
sg909
g1325
sg903
g1547
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1179
sg894
g1175
sg909
g1186
sg903
g1183
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1162
sg894
g1693
sg909
g1169
sg903
g1700
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1132
sg894
g2197
sg909
g1139
sg903
g2204
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1179
sg894
g1708
sg909
g1186
sg903
g1715
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1209
sg894
g2169
sg909
g1216
sg903
g2176
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g976
sg894
g1000
sg909
g970
sg903
g1007
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1400
sg894
g1868
sg909
g1407
sg903
g1875
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1162
sg894
g1158
sg909
g1169
sg903
g1166
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1331
sg894
g1540
sg909
g1325
sg903
g1547
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g936
sg894
g2290
sg909
g943
sg903
g2297
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g987
sg894
g1338
sg909
g994
sg903
g1345
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g919
sg894
g1291
sg909
g926
sg903
g1298
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1132
sg894
g1128
sg909
g1139
sg903
g1136
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1025
sg894
g1471
sg909
g1019
sg903
g1478
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g919
sg894
g1291
sg909
g926
sg903
g1298
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g1042
sg894
g1096
sg909
g1036
sg903
g1103
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1400
sg894
g1868
sg909
g1407
sg903
g1875
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1042
sg894
g1096
sg909
g1036
sg903
g1103
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g1357
sg894
g1353
sg909
g1364
sg903
g1361
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1025
sg894
g1015
sg909
g1019
sg903
g1023
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g953
sg894
g1430
sg909
g960
sg903
g1437
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1331
sg894
g1321
sg909
g1325
sg903
g1329
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1083
sg894
g1840
sg909
g1090
sg903
g1847
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g953
sg894
g1430
sg909
g960
sg903
g1437
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g976
sg894
g966
sg909
g970
sg903
g974
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g1132
sg894
g1128
sg909
g1139
sg903
g1136
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g1226
sg894
g1222
sg909
g1233
sg903
g1230
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1209
sg894
g2169
sg909
g1216
sg903
g2176
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g1083
sg894
g1840
sg909
g1090
sg903
g1847
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g1042
sg894
g1096
sg909
g1036
sg903
g1103
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g1132
sg894
g2197
sg909
g1139
sg903
g2204
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g1179
sg894
g1708
sg909
g1186
sg903
g1715
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1400
sg894
g1868
sg909
g1407
sg903
g1875
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g987
sg894
g1338
sg909
g994
sg903
g1345
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g976
sg894
g966
sg909
g970
sg903
g974
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g1357
sg894
g1583
sg909
g1364
sg903
g1590
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1162
sg894
g1693
sg909
g1169
sg903
g1700
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1226
sg894
g1306
sg909
g1233
sg903
g1313
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1331
sg894
g1321
sg909
g1325
sg903
g1329
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1072
sg894
g1062
sg909
g1066
sg903
g1070
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1179
sg894
g1175
sg909
g1186
sg903
g1183
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1226
sg894
g1222
sg909
g1233
sg903
g1230
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1417
sg894
g1639
sg909
g1424
sg903
g1646
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g936
sg894
g2290
sg909
g943
sg903
g2297
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g987
sg894
g983
sg909
g994
sg903
g991
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g1115
sg894
g1611
sg909
g1122
sg903
g1618
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1209
sg894
g1205
sg909
g1216
sg903
g1213
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1083
sg894
g1840
sg909
g1090
sg903
g1847
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g1072
sg894
g1486
sg909
g1066
sg903
g1493
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g1132
sg894
g2197
sg909
g1139
sg903
g2204
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g1417
sg894
g1639
sg909
g1424
sg903
g1646
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g953
sg894
g1430
sg909
g960
sg903
g1437
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1226
sg894
g1222
sg909
g1233
sg903
g1230
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g936
sg894
g932
sg909
g943
sg903
g940
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g907
sg894
g1568
sg909
g899
sg903
g1575
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1226
sg894
g1222
sg909
g1233
sg903
g1230
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1083
sg894
g1079
sg909
g1090
sg903
g1087
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1072
sg894
g1486
sg909
g1066
sg903
g1493
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g919
sg894
g1291
sg909
g926
sg903
g1298
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1226
sg894
g1306
sg909
g1233
sg903
g1313
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g1115
sg894
g1611
sg909
g1122
sg903
g1618
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1072
sg894
g1486
sg909
g1066
sg903
g1493
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g1132
sg894
g1128
sg909
g1139
sg903
g1136
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g919
sg894
g915
sg909
g926
sg903
g923
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1083
sg894
g1840
sg909
g1090
sg903
g1847
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g1162
sg894
g1693
sg909
g1169
sg903
g1700
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1357
sg894
g1353
sg909
g1364
sg903
g1361
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1417
sg894
g1639
sg909
g1424
sg903
g1646
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1357
sg894
g1353
sg909
g1364
sg903
g1361
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g1417
sg894
g1639
sg909
g1424
sg903
g1646
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1179
sg894
g1708
sg909
g1186
sg903
g1715
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1042
sg894
g1032
sg909
g1036
sg903
g1040
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g936
sg894
g2290
sg909
g943
sg903
g2297
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g1209
sg894
g2169
sg909
g1216
sg903
g2176
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g936
sg894
g2290
sg909
g943
sg903
g2297
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g1132
sg894
g2197
sg909
g1139
sg903
g2204
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1417
sg894
g1413
sg909
g1424
sg903
g1421
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I78934864
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'p\xf7\x83\r\xf0\xcb\x83\r(\xcc\x83\r\xa0\xf7\x83\r\x18\x1d\x84\r\x80\x1e\x84\rp\xf7\x83\r\xa8\x1e\x84\r\x90\x1d\x84\r ]\xa4\x04@\x1d\x84\r\xe0_\xa4\x04\xf0\xf8\x83\r\x18\x1d\x84\rX\x1e\x84\r\x90\x1d\x84\r \\\xa4\x04\xd0\xf7\x83\r\x00\xf8\x83\r\xe0\x1d\x84\rh\x1d\x84\r@p\xd9\x0c\xf0\xcb\x83\r\xb8\x1d\x84\rX\x1e\x84\r\xe0_\xa4\x04\x80\xf9\x83\r`\xf8\x83\r\xf8\x1e\x84\rp\xf7\x83\r\x00\xf8\x83\r`\xf8\x83\r\xf0\xcb\x83\r\x00\xf8\x83\r \\\xa4\x04 \xf9\x83\r\xa0\xf7\x83\r\xc0_\xa4\x04\x18\x1d\x84\r0\xf8\x83\r\x18\x1d\x84\rX\x1e\x84\r\xe0_\xa4\x04\xb8\x1d\x84\r(\xcc\x83\r`\xcc\x83\r\xe0_\xa4\x04\xf0\xcb\x83\r`\xf8\x83\r\x00\xf8\x83\r`\xcc\x83\r \x1f\x84\r`\xf8\x83\rh\x1d\x84\r@_\xa4\x04(\xcc\x83\r\xe0\x1d\x84\r0\xf8\x83\r\x98\xcc\x83\r\xa0\xf7\x83\r@_\xa4\x04\x90\xf8\x83\r\x90\x1d\x84\rh\x1d\x84\r(\xcc\x83\r\xe0\x1d\x84\rh\x1d\x84\r`\xcc\x83\r(\xcc\x83\rH\x1f\x84\r\xb8\x1d\x84\r\x90\x1d\x84\r\xa0\xf7\x83\r\xe0_\xa4\x04\xf0\xcb\x83\r\xb8\x1d\x84\r\xe0\x1d\x84\r\x80\x1e\x84\r\x00\xf8\x83\r\xf0\xcb\x83\r(\xcc\x83\r`\xf8\x83\r\xa0\xf7\x83\r`\xcc\x83\r0\xf8\x83\r\xf0\xf8\x83\r\x08\xcd\x83\r(\xcc\x83\r@\x1d\x84\r\x18\x1d\x84\r\x08\x1e\x84\r\xb8\x1d\x84\r@\x1d\x84\r\xf8\x1e\x84\r`\xcc\x83\r\x08\x1e\x84\r\x18\x1d\x84\r@_\xa4\x04\x00\xf8\x83\r\xe0\x1d\x84\r\xa0\xf7\x83\r\xd0\xf7\x83\r@_\xa4\x04h\x1d\x84\r`\xf8\x83\r\x08\x1e\x84\r\x00\xf8\x83\r\x08\x1e\x84\r@\x1d\x84\r \\\xa4\x04\x80\x1e\x84\r\xf0\xcb\x83\r\xa0\xf7\x83\r\xe0\x1d\x84\r`\xf8\x83\r@_\xa4\x04 \\\xa4\x04\x08\x1e\x84\r\xd0\xf7\x83\r\xb8\x1d\x84\r`\xcc\x83\r\xd0\x1e\x84\r@_\xa4\x04\x98\xcc\x83\rp\xf7\x83\r\xe0\x1d\x84\r\xb8\x1d\x84\r\xa8\x1e\x84\r@_\xa4\x04\x90\x1d\x84\r0\xf8\x83\r \\\xa4\x040\xf8\x83\r\x08\x1e\x84\r\xd0\xcc\x83\r\x00\xf8\x83\r\xe0\x1d\x84\r ]\xa4\x04`\xf8\x83\r ]\xa4\x04\x08\x1e\x84\r ]\xa4\x04\xd0\xf7\x83\r`\xcc\x83\r\xd0\xf7\x83\r ]\xa4\x04`\xf8\x83\r0\xf8\x83\r(\xcc\x83\r@_\xa4\x04\xa8\x1e\x84\r\xe0_\xa4\x04@\x1d\x84\rp\xf7\x83\r@\x1d\x84\rP\xf9\x83\r ]\xa4\x04\xb8\x1d\x84\r\xd0\xcc\x83\r\xa0\xf7\x83\r\xf0\xcb\x83\r@\x1d\x84\r \\\xa4\x04\xd0\xf7\x83\r\x08\x1e\x84\r\x90\x1d\x84\r \\\xa4\x04p\x1f\x84\rp\xf7\x83\r\x08\x1e\x84\r ]\xa4\x04\xd0\xf7\x83\r \x1f\x84\r0\xf8\x83\r`\xcc\x83\r\x90\x1d\x84\r@\xcd\x83\r`\xcc\x83\r\xc0\xf8\x83\r\xe0_\xa4\x04\x18\x1d\x84\rh\x1d\x84\r\xd0\xcc\x83\r\xd0\xf7\x83\r\xa0\xf7\x83\r\xe0_\xa4\x04\x18\x1d\x84\r\x90\x1d\x84\r@_\xa4\x04\xe0_\xa4\x04p\xf7\x83\r\xc0_\xa4\x04\xd0\x1e\x84\r0\xf8\x83\r\xd0\xf7\x83\r\x18\x1d\x84\r\x00\xf8\x83\rh\x1d\x84\r0\xf8\x83\r\xf8\x1e\x84\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S'\xa0\xd20\r\xe0]\xa4\x04\xc0X\xa4\x04@r\xd9\x0c`r\xd9\x0c\x80q\xd9\x0c\xc0r\xd9\x0c\xa0r\xd9\x0c\xa0q\xd9\x0c\xe0r\xd9\x0c\x00s\xd9\x0c`s\xd9\x0c@s\xd9\x0c\xa0s\xd9\x0c\x80s\xd9\x0c\x80p\xd9\x0c\x00t\xd9\x0c t\xd9\x0c@t\xd9\x0c\xc0p\xd9\x0c\xc0q\xd9\x0c`t\xd9\x0c\x80t\xd9\x0c\xa0t\xd9\x0c\x00u\xd9\x0c\xe0t\xd9\x0c`q\xd9\x0c u\xd9\x0c@u\xd9\x0c`u\xd9\x0c\x80u\xd9\x0c\xe0u\xd9\x0c\xc0u\xd9\x0c v\xd9\x0c@v\xd9\x0c`v\xd9\x0c\x80r\xd9\x0c\xa0v\xd9\x0c\x80v\xd9\x0c\xa0p\xd9\x0c\xc0v\xd9\x0c\xe0v\xd9\x0c\x00w\xd9\x0c w\xd9\x0c\x80w\xd9\x0c`w\xd9\x0c\xc0w\xd9\x0c\xa0w\xd9\x0c\xa0u\xd9\x0c x\xd9\x0c\x00x\xd9\x0c`x\xd9\x0c\x80x\xd9\x0c\xa0x\xd9\x0c\x00r\xd9\x0c`p\xd9\x0c\xc0x\xd9\x0c y\xd9\x0c\x00y\xd9\x0c`y\xd9\x0c\x80y\xd9\x0c q\xd9\x0c\xc0y\xd9\x0c`\xc9\xff\x02\x00\xc9\xff\x02@\xcf\xff\x02\xc0\xc4\xff\x02\xa0\xc3\xff\x02\x80\xce\xff\x02\x80\xcf\xff\x02@\xc6\xff\x02\xa0\xcf\xff\x02\x00\xc4\xff\x02\x80\xc6\xff\x02 \xcd\xff\x02\xc0\xcb\xff\x02 \xcf\xff\x02\xa0\xc8\xff\x02`\xc5\xff\x02\xe0\xc4\xff\x02\xa0\xc9\xff\x02\xc0\xcf\xff\x02\x80\xc4\xff\x02\xa0\xce\xff\x02\xa0\xcb\xff\x02\xc0\xca\xff\x02\x00\xcd\xff\x02@\xcd\xff\x02\xc0\xcc\xff\x02@\xc9\xff\x02\xe0\xc8\xff\x02 \xca\xff\x02\x00\xc6\xff\x02\xe0\xcf\xff\x02`\xcf\xff\x02\xe0\xca\xff\x02\xe0\xc9\xff\x02`\xcd\xff\x02`\xcc\xff\x02 \xcb\xff\x02\x80\xcc\xff\x02\xc0\xcd\xff\x02 \xc9\xff\x02\x00\xca\xff\x02\xa0\xc5\xff\x02\x80\xc0\xff\x02@\xc4\xff\x02\x00\xc3\xff\x02 \xc5\xff\x02@{\xe4\x0c\x80\xcd\xff\x02 \xc8\xff\x02 b\xd8\x0c\xa0\xcd\xff\x02\xa0\xca\xff\x02\x80m\xd8\x0c\xc0\x1c\xff\x02\x80\x1c\xff\x02@\x1c\xff\x02\x80\x1e\xff\x02 \x1f\xff\x02\xc0\xc9\xff\x02\x00\x1c\xff\x02\x00\x1d\xff\x02@\xc8\xff\x02\xc0u\xe5\x0c\xe0u\xe5\x0c u\xe5\x0c@t\xe5\x0c`t\xe5\x0c\xc0y\xe5\x0c\x00r\xe5\x0c\x80z\xe5\x0c\xa0{\xe5\x0c\x00u\xe5\x0c\x00z\xe5\x0c x\xe5\x0c@u\xe5\x0c`z\xe5\x0c\xe0z\xe5\x0c\x00t\xe5\x0c\x80t\xe5\x0c\x00v\xe5\x0c`x\xe5\x0c@{\xe5\x0c`}\xe5\x0c\x80|\xe5\x0c\xc0{\xe5\x0c\x00{\xe5\x0c\xa0t\xe5\x0c\xe0A\xe6\x0c\xa0D\xe6\x0c\xc0K\xe6\x0c\x80D\xe6\x0c\x00B\xe6\x0c\x00L\xe6\x0c\xe0K\xe6\x0c\x00K\xe6\x0c\xe0F\xe6\x0c`N\xe6\x0c A\xe6\x0c`C\xe6\x0c L\xe6\x0c\xa0A\xe6\x0c\xa0K\xe6\x0c\xc0@\xe6\x0c\xc0J\xe6\x0c\xc0B\xe6\x0c\xa0J\xe6\x0c\xc0G\xe6\x0c\x00C\xe6\x0c\xe0D\xe6\x0c C\xe6\x0c\x00E\xe6\x0c\x00A\xe6\x0c\xe0C\xe6\x0c\xc0D\xe6\x0c\xa0\x1f\xff\x02`A\xe6\x0c\xa0_\xa4\x04\xa0\xda0\r\x00\xd70\r\x00\xd30\r`\xda0\r\xc0\xd20\r\x80\xd00\r@\xd00\r \xd30\r\xe0\xcf\xa1\x04\xe0\xb63\r \xb73\r\xe0\xb23\r \xbf3\r\xc0\xb43\r\xc0\xb53\r\x00\xb73\r`\xb03\r`\xb93\r\xa0\xb03\r\xe0B\xe6\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\xf4\x16\xb1?\xb6.b?%l\x86?s\xaf\xaa?\xcb\xadY?\x13\xf5\xae?\xec\x8eH?a9\xd3?\x08\x8a\xe8?\xcfAs?\x8arf?k\x9f\xf9?j\x17\x91?d\x1db?v[\xd5?\xce\xcf\xac?x(\xa2?Q0b?\xf7\xc1\x9b?Z(\xc2?\x93z\x97?\x99\x16\xf1?\xa7(\x82?\xbe\xc6{?\xa7)\x82?L\xb0\x8a?\xe5\xf3\x8e?h\x95H?f\xcf\x1c@N\x9a\xa8?\xff\x14\xd1?\x03\\\x95?\x83\xb7j?\x8b{\xb7?\x8c!\xb1?\\\xc9{?\x99\x8e\xe8?\xcfyW@\x95t\xf7?\x14l\xa6?\x12/s?R\x9f\xd9?\x1f\x16\xf1?\xde\x02\x80?\xa5sf?\x01~\x97?\xa9\x13\x11@\xa3\xc1\x9b?\xb5X\x95?\x85\x11\xa0?\xf7\xe0\x9d?u\x8b\x88?\xabl\x86?~\x03\x80?\xb0Ws?\x8b8\xf3?I\x9c\xd9?\xbf\xc2{?\xfa\x8e\x88?\x9f\xb6\x8a?\xd6\x9c\x99?\x12\x84w?[\x15\xf1?\xd8\xe3\xdd?;\xd1\x8c?a?s?`\x14\xb1?\xad~\x97?\x0e\xd0\x8c?\x9d\x13\xa0?\xa8(b?\xd3\x9f\x99?\xa7\xea]?G\xd3\x8c?\xfc\xef\xbd?\xc7\xd9L?\xf4\xf4\xae?\x9b\'\x82?z\x8e\xe8?<y\x86?*J\xc4?\xe8G\x84?\x96\xb9j?\x7f\x8e\xa8?\xf8\xdb\xac?6\xbf\x9b?\xa3J\xa4?\xf2\x9c\xb9?\xd2\x14\x91?\xb75b?O\xbe\xbb?P\x14\x91?\xcbJ\x84?\xdd1\x03@N\x11\xe0?\xf5\x9b\xd9?\x04\\&?\x91\x8f\x88?\x95\xd4\xcc?\xcd\x19\x01@1[\x95?\xe0\x8e\x88?\xc8\xb7*?\xa7&\x82?,\x11\x80?\xa3\xde-@\x8e\xd3\x8c?Sg\x86?\xcc\r@?AA\x93?\xc7mf?\xdc|\xf7?\xe7d\xa6?\x04\x8e\xc8?n\x01\x8f?kl\xc6?\x82{\xd7?\x9c7s?\npf?\x7f\xf8\x1e@\x82\x13!@#\x8f\x88?\xb5\xc8{?\xa3\x8e\xa8?0m\xa6?\xf1(\x82?\xcc\x93H?L\xc1\xfb?\xc3}\x97?h\xb6\x8a?\xcdX\x95?\x8c\xf4\x8e?3(\xa2?\xec\x8c\xc8?\xd2\xfb.?\xfe\'\xa2?\x1e{\x97?\xb3\xb2*?&\x9c\t@\xff\x9d7?-}w?D\xb0\x8a?\x91\xc9{?\xe6i\xa6?\xb4\xbcY?[*b?\xbf.b?i\xb0j?d\xfcn?<\xa5Y?Gm\x86?L}\xb7?+0b?"\x03\xa0?\x8c\xc1\x9b?\xc5\xde\xac?*QD?\xb9\x9f\x99?\x1bcU?\xd6\xd9L?U\x89\xb7?\xa3*b?\x11X\x15@\xe3/b?\xd4V\x95?\xb5\xbc\xaa?6}\x97?\t\x05\x80?\xfaI\x84?\xc8w\x97?\xbaWs?4\xc8{?\x80\xc8{?\xf2\xe3\x9d?\xa2J\x84?\xcd\x00\xaf?n\x9c\xb9?Bz\xd7?:\x1d\xc2?\xcd\xceL@\x01=\x93?i\xea]?\xcd\x857?]J\x84?x\xc1\x9b?]\xcb\x9b?\x84\xc7\x8c?\xc9\xe1\xfd?\xe2\xf7\x8e?\x8e\xf1n?\xf8l\x86?\x95\xcf,@|[\xb5?[\xf5\xae?/\xd3\x8c?P \xa2??G\xe4?P8\xd3?f\xbc\x9b?M5S@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'\xb8D\xe4\x04\xd8N\xe4\x04\x88*t\x04\x10*t\x04\x98)t\x04`.t\x04\xf8,t\x04\x98/t\x04\x10-t\x04(-t\x04H.t\x04\xe8-t\x04\xf0(t\x04 /t\x04h)t\x04\xc8,t\x04\x88\'t\x04\x18.t\x04\x90%t\x048,t\x04(!t\x04\x88-t\x04\x80)t\x04\xb0#t\x04\xd8(t\x04p!t\x04\xb8-t\x04\xb0)t\x04\xf8&t\x04 )t\x04\xf0%t\x04 #t\x04\x00.t\x04H+t\x04\xb8*t\x04\x00(t\x04\x80&t\x04h#t\x04\x80/t\x04\x98&t\x04P,t\x04\xb0&t\x048 t\x04@\'t\x04p*t\x04(*t\x04\x90(t\x04\xd0\'t\x04\xc0+t\x04@-t\x04X*t\x04h/t\x04P#t\x04\xa8+t\x04 ,t\x04\xd8+t\x04\x80,t\x04(\'t\x04\xe0)t\x04X-t\x04\x90.t\x04p-t\x04\xa8.t\x04\xe0\xe0\x04\x05\xb0,t\x04p\'t\x04\xf0.t\x04\xe0,t\x040.t\x04\xd8.t\x04P/t\x04P)t\x048/t\x04\x08/t\x04\x10\'t\x04\xf0+t\x04\x18(t\x04\xc8/t\x04\x98 t\x04\xa0!t\x04\x08,t\x04\xe0/t\x04\xb0/t\x04\x88\xad\xdc\x04h\xaf\xdc\x04P\xa3\xdc\x04\x90\xa8\xdc\x04\xc8\xa0\xdc\x04\x08\xac\xdc\x04x\xab\xdc\x04\xb0\xac\xdc\x04\x98\xa3\xdc\x04\xb0\xa9\xdc\x04\xd8\xa8\xdc\x04H\xab\xdc\x04\xf0\xae\xdc\x04\xc8\xa6\xdc\x04\xe8\xa4\xdc\x04\xe0\xac\xdc\x04\x18\xa8\xdc\x04\x90\xa2\xdc\x04\xe0\xa3\xdc\x04\xc8\xac\xdc\x04\x98\xa6\xdc\x04\x98\xa9\xdc\x04@\xa4\xdc\x04`\xa2\xdc\x04\x90\xab\xdc\x04 \xa0\xdc\x04@\xa1\xdc\x04\xb0\xa0\xdc\x04\x90\xae\xdc\x04\x00\xa2\xdc\x04\x08\xa3\xdc\x04p\xaa\xdc\x04\xd8\xab\xdc\x04\x10\xa4\xdc\x04P\xac\xdc\x04\x80\xa6\xdc\x04\xd8\xa2\xdc\x04\x98\xa0\xdc\x04\xc0\xa2\xdc\x04\x98\xac\xdc\x04\x88\xa7\xdc\x04\xb0\xa6\xdc\x04@\xaa\xdc\x04\xd0\xa4\xdc\x04p\xad\xdc\x04X\xa4\xe3\x04H\xae\xe3\x04\x08\xac\xe3\x04H\xa8\xe3\x04X\xaa\xe3\x04\xe8\xa7\xe3\x04\xc0.t\x04\x00"t\x04\xc0(t\x04X!t\x04\x98#t\x04h t\x04\xe8\'t\x04\xa8(t\x04h,t\x04`+t\x04\xb8\'t\x04\x80#t\x04\xa0*t\x04\x10!t\x04\xd0-t\x04\xb0 t\x04\xc8#t\x04\x98,t\x04\x90"t\x04x+t\x04\xc8&t\x04\xf8)t\x04\x08&t\x04\xd0*t\x04\x88!t\x04X\'t\x04\xd0!t\x04@*t\x04\xf8#t\x04\x18+t\x04\x00+t\x04\xe0&t\x040(t\x04\xc8 t\x04\x18"t\x04H"t\x04\xc8)t\x04P&t\x04\xe0 t\x04 &t\x04x(t\x04\xb8!t\x048#t\x04`(t\x04\xc0%t\x04\x90+t\x04\x08)t\x04`"t\x040"t\x040+t\x048)t\x04\x08#t\x048&t\x04\xd8%t\x04H(t\x04\xa0\'t\x04X$t\x04@!t\x04\x80 t\x04P t\x04\xf8 t\x04\xe8!t\x04x.t\x04\xa8%t\x04x%t\x04  t\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3761
sg3632
g3751
sg3646
g3755
sg3641
g3759
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3842
sg3632
g3832
sg3646
g3836
sg3641
g3840
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3772
sg3632
g3875
sg3646
g3779
sg3641
g3882
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3894
sg3632
g3890
sg3646
g3901
sg3641
g3898
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3911
sg3632
g3907
sg3646
g3918
sg3641
g3915
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3945
sg3632
g3941
sg3646
g3952
sg3641
g3949
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3761
sg3632
g3751
sg3646
g3755
sg3641
g3759
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3819
sg3632
g3971
sg3646
g3826
sg3641
g3978
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3657
sg3632
g3986
sg3646
g3664
sg3641
g3993
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g3842
sg3632
g4001
sg3646
g3836
sg3641
g4008
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g3637
sg3632
g4016
sg3646
g3647
sg3641
g4023
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4054
sg3632
g4044
sg3646
g4048
sg3641
g4052
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g3894
sg3632
g4078
sg3646
g3901
sg3641
g4085
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3637
sg3632
g4016
sg3646
g3647
sg3641
g4023
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3928
sg3632
g4106
sg3646
g3935
sg3641
g4113
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3928
sg3632
g4106
sg3646
g3935
sg3641
g4113
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3894
sg3632
g3890
sg3646
g3901
sg3641
g3898
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g3911
sg3632
g4173
sg3646
g3918
sg3641
g4180
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3708
sg3632
g4214
sg3646
g3715
sg3641
g4221
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g4054
sg3632
g4044
sg3646
g4048
sg3641
g4052
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3708
sg3632
g4214
sg3646
g3715
sg3641
g4221
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3842
sg3632
g4001
sg3646
g3836
sg3641
g4008
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g3674
sg3632
g4294
sg3646
g3681
sg3641
g4301
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g4313
sg3632
g4309
sg3646
g4320
sg3641
g4317
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3819
sg3632
g3971
sg3646
g3826
sg3641
g3978
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3657
sg3632
g3986
sg3646
g3664
sg3641
g3993
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g4065
sg3632
g4352
sg3646
g4072
sg3641
g4359
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g4313
sg3632
g4309
sg3646
g4320
sg3641
g4317
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3945
sg3632
g4393
sg3646
g3952
sg3641
g4400
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g4065
sg3632
g4352
sg3646
g4072
sg3641
g4359
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g3761
sg3632
g3751
sg3646
g3755
sg3641
g3759
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3945
sg3632
g4393
sg3646
g3952
sg3641
g4400
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g4054
sg3632
g4477
sg3646
g4048
sg3641
g4484
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3772
sg3632
g3875
sg3646
g3779
sg3641
g3882
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3761
sg3632
g4557
sg3646
g3755
sg3641
g4564
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3945
sg3632
g3941
sg3646
g3952
sg3641
g3949
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3761
sg3632
g4557
sg3646
g3755
sg3641
g4564
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g4313
sg3632
g4309
sg3646
g4320
sg3641
g4317
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g4313
sg3632
g4637
sg3646
g4320
sg3641
g4644
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3842
sg3632
g3832
sg3646
g3836
sg3641
g3840
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3691
sg3632
g4678
sg3646
g3698
sg3641
g4685
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3819
sg3632
g3971
sg3646
g3826
sg3641
g3978
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3657
sg3632
g3986
sg3646
g3664
sg3641
g3993
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3842
sg3632
g3832
sg3646
g3836
sg3641
g3840
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3945
sg3632
g3941
sg3646
g3952
sg3641
g3949
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g3928
sg3632
g4106
sg3646
g3935
sg3641
g4113
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g3657
sg3632
g3986
sg3646
g3664
sg3641
g3993
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3674
sg3632
g4294
sg3646
g3681
sg3641
g4301
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g4313
sg3632
g4309
sg3646
g4320
sg3641
g4317
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g4054
sg3632
g4477
sg3646
g4048
sg3641
g4484
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3842
sg3632
g3832
sg3646
g3836
sg3641
g3840
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g3674
sg3632
g4294
sg3646
g3681
sg3641
g4301
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3708
sg3632
g4214
sg3646
g3715
sg3641
g4221
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g4918
sg3632
g4914
sg3646
g4925
sg3641
g4922
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3842
sg3632
g4001
sg3646
g3836
sg3641
g4008
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g3731
sg3632
g4944
sg3646
g3725
sg3641
g4951
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g3894
sg3632
g3890
sg3646
g3901
sg3641
g3898
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g4313
sg3632
g4637
sg3646
g4320
sg3641
g4644
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g4918
sg3632
g4985
sg3646
g4925
sg3641
g4992
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3708
sg3632
g4214
sg3646
g3715
sg3641
g4221
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g4438
sg3632
g5013
sg3646
g4445
sg3641
g5020
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3945
sg3632
g4393
sg3646
g3952
sg3641
g4400
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3691
sg3632
g4678
sg3646
g3698
sg3641
g4685
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g3911
sg3632
g3907
sg3646
g3918
sg3641
g3915
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g4438
sg3632
g5013
sg3646
g4445
sg3641
g5020
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3761
sg3632
g4557
sg3646
g3755
sg3641
g4564
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g4065
sg3632
g4061
sg3646
g4072
sg3641
g4069
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4918
sg3632
g4985
sg3646
g4925
sg3641
g4992
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3928
sg3632
g4106
sg3646
g3935
sg3641
g4113
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g4918
sg3632
g4914
sg3646
g4925
sg3641
g4922
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3731
sg3632
g4944
sg3646
g3725
sg3641
g4951
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3894
sg3632
g3890
sg3646
g3901
sg3641
g3898
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3731
sg3632
g4944
sg3646
g3725
sg3641
g4951
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3657
sg3632
g3986
sg3646
g3664
sg3641
g3993
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3691
sg3632
g4678
sg3646
g3698
sg3641
g4685
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3945
sg3632
g4393
sg3646
g3952
sg3641
g4400
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g4065
sg3632
g4352
sg3646
g4072
sg3641
g4359
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3894
sg3632
g4078
sg3646
g3901
sg3641
g4085
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g4918
sg3632
g4914
sg3646
g4925
sg3641
g4922
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3911
sg3632
g4173
sg3646
g3918
sg3641
g4180
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3842
sg3632
g4001
sg3646
g3836
sg3641
g4008
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g4313
sg3632
g4637
sg3646
g4320
sg3641
g4644
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g4438
sg3632
g5013
sg3646
g4445
sg3641
g5020
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3637
sg3632
g4016
sg3646
g3647
sg3641
g4023
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3945
sg3632
g4393
sg3646
g3952
sg3641
g4400
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3842
sg3632
g3832
sg3646
g3836
sg3641
g3840
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3761
sg3632
g3751
sg3646
g3755
sg3641
g3759
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g4438
sg3632
g5013
sg3646
g4445
sg3641
g5020
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3772
sg3632
g3875
sg3646
g3779
sg3641
g3882
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g4054
sg3632
g4044
sg3646
g4048
sg3641
g4052
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3894
sg3632
g4078
sg3646
g3901
sg3641
g4085
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g4054
sg3632
g4044
sg3646
g4048
sg3641
g4052
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4918
sg3632
g4985
sg3646
g4925
sg3641
g4992
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g3928
sg3632
g4106
sg3646
g3935
sg3641
g4113
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g3945
sg3632
g3941
sg3646
g3952
sg3641
g3949
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g4065
sg3632
g4352
sg3646
g4072
sg3641
g4359
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3789
sg3632
g5561
sg3646
g3796
sg3641
g5568
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g4918
sg3632
g4914
sg3646
g4925
sg3641
g4922
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3789
sg3632
g5561
sg3646
g3796
sg3641
g5568
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3911
sg3632
g3907
sg3646
g3918
sg3641
g3915
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g4313
sg3632
g4309
sg3646
g4320
sg3641
g4317
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3911
sg3632
g3907
sg3646
g3918
sg3641
g3915
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g3789
sg3632
g5561
sg3646
g3796
sg3641
g5568
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g4065
sg3632
g4352
sg3646
g4072
sg3641
g4359
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g4054
sg3632
g4477
sg3646
g4048
sg3641
g4484
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3674
sg3632
g4294
sg3646
g3681
sg3641
g4301
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g4438
sg3632
g5013
sg3646
g4445
sg3641
g5020
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g3761
sg3632
g4557
sg3646
g3755
sg3641
g4564
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g3819
sg3632
g3971
sg3646
g3826
sg3641
g3978
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3731
sg3632
g4944
sg3646
g3725
sg3641
g4951
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3637
sg3632
g4016
sg3646
g3647
sg3641
g4023
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3731
sg3632
g3721
sg3646
g3725
sg3641
g3729
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3842
sg3632
g4001
sg3646
g3836
sg3641
g4008
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3789
sg3632
g5561
sg3646
g3796
sg3641
g5568
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3691
sg3632
g4678
sg3646
g3698
sg3641
g4685
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3731
sg3632
g4944
sg3646
g3725
sg3641
g4951
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3894
sg3632
g3890
sg3646
g3901
sg3641
g3898
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g3911
sg3632
g4173
sg3646
g3918
sg3641
g4180
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g4918
sg3632
g4914
sg3646
g4925
sg3641
g4922
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3772
sg3632
g3875
sg3646
g3779
sg3641
g3882
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3894
sg3632
g4078
sg3646
g3901
sg3641
g4085
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g3637
sg3632
g4016
sg3646
g3647
sg3641
g4023
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g4918
sg3632
g4985
sg3646
g4925
sg3641
g4992
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g3911
sg3632
g4173
sg3646
g3918
sg3641
g4180
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3945
sg3632
g3941
sg3646
g3952
sg3641
g3949
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4054
sg3632
g4044
sg3646
g4048
sg3641
g4052
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4313
sg3632
g4637
sg3646
g4320
sg3641
g4644
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g4918
sg3632
g4985
sg3646
g4925
sg3641
g4992
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g4313
sg3632
g4637
sg3646
g4320
sg3641
g4644
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3708
sg3632
g4214
sg3646
g3715
sg3641
g4221
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3761
sg3632
g4557
sg3646
g3755
sg3641
g4564
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3789
sg3632
g5561
sg3646
g3796
sg3641
g5568
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g3911
sg3632
g4173
sg3646
g3918
sg3641
g4180
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3691
sg3632
g4678
sg3646
g3698
sg3641
g4685
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3819
sg3632
g3971
sg3646
g3826
sg3641
g3978
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3772
sg3632
g3875
sg3646
g3779
sg3641
g3882
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4438
sg3632
g4434
sg3646
g4445
sg3641
g4442
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g3819
sg3632
g3815
sg3646
g3826
sg3641
g3823
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3674
sg3632
g4294
sg3646
g3681
sg3641
g4301
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3772
sg3632
g3768
sg3646
g3779
sg3641
g3776
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g4054
sg3632
g4477
sg3646
g4048
sg3641
g4484
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3911
sg3632
g3907
sg3646
g3918
sg3641
g3915
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3928
sg3632
g3924
sg3646
g3935
sg3641
g3932
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3761
sg3632
g3751
sg3646
g3755
sg3641
g3759
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4054
sg3632
g4477
sg3646
g4048
sg3641
g4484
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3894
sg3632
g4078
sg3646
g3901
sg3641
g4085
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I78934864
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'\xd0\xa4\xed\x12@\x9d\xec\x12\xc0\xb2\xed\x12\xf8\xb2\xed\x128\xa6\xed\x12H\xa5\xed\x12\xa0\x06\xfe\x02p\x9d\xec\x12P\x9c\xec\x12\x80\x9c\xec\x12P\x9c\xec\x12p\xa5\xed\x12\xf8\xb2\xed\x12@\x0e\xfe\x02`\x08\xfe\x02\x18\xb2\xed\x12\xb0\xa6\xed\x12\xd8\xa6\xed\x12 \x9c\xec\x12P\xb2\xed\x12p\xa5\xed\x12\xf8\xa4\xed\x12\x80\x9c\xec\x12\xc0\xb2\xed\x12\x98\xa5\xed\x12\xe0\x9c\xec\x12\xc0\xa5\xed\x12\xf8\xb2\xed\x12\x10\x9d\xec\x12@\x0e\xfe\x02P\x9c\xec\x12\xb0\xa6\xed\x12H\xa5\xed\x12 \x9c\xec\x12\xd8\xa6\xed\x12\xa0\x06\xfe\x02\x98\xa5\xed\x12 \x9c\xec\x12p\xa5\xed\x12P\x9c\xec\x12\xf8\xb2\xed\x12@\x0e\xfe\x02\xd8\xa6\xed\x12\xd0\xa4\xed\x12\x10\x9d\xec\x12\x00\x7f4\r@\x0e\xfe\x02\x18\xb2\xed\x12P\xb2\xed\x12P\x9c\xec\x12P\xb2\xed\x12 \xa5\xed\x12`\x08\xfe\x02P\xb2\xed\x12h\xb3\xed\x12\xa0\x06\xfe\x02\xd8\xa6\xed\x12`\x08\xfe\x02 \xa5\xed\x12P\xb2\xed\x12\x88\xb2\xed\x12\x80\x9c\xec\x12@\x0e\xfe\x02p\x9d\xec\x12\x98\xa5\xed\x12`\xa6\xed\x12@\x0e\xfe\x02\xb0\x9c\xec\x12\xd0\x9d\xec\x12\xd0\xa4\xed\x12 \xa5\xed\x12\xe0\x9c\xec\x12p\xa5\xed\x12\xf8\xa4\xed\x12@\x0e\xfe\x02\xf8\xa4\xed\x12`\x08\xfe\x02P\xb2\xed\x12H\xa5\xed\x12\x10\x9d\xec\x12h\xb3\xed\x12\x18\xb2\xed\x12H\xa5\xed\x12\xa0\x06\xfe\x02\x88\xb2\xed\x12\xc0\xb2\xed\x12\x00\xa7\xed\x12@\x9d\xec\x12\x80\x01\xfe\x02\xe0\x9c\xec\x12P\x9c\xec\x12`\x08\xfe\x02H\xa5\xed\x12\xf8\xa4\xed\x12\xe0\x9c\xec\x12\x10\x9d\xec\x12P\x9c\xec\x12\x00\xa7\xed\x12\x10\xa6\xed\x12p\xa5\xed\x12P\x9c\xec\x12\x80\x9c\xec\x12\x00\x7f4\r \x9c\xec\x12P\xb2\xed\x12H\xa5\xed\x12\xe0\x06\xfe\x02 \xa5\xed\x12\xb0\xa6\xed\x12\xf8\xa4\xed\x12\xb0\x9c\xec\x12\xe0\x9c\xec\x12\x88\xb2\xed\x12\x10\x9d\xec\x12\x98\xa5\xed\x12\x88\xb2\xed\x12p\xa5\xed\x12\x88\xb2\xed\x12\xe0\x9c\xec\x12\xf8\xa4\xed\x12(\xa7\xed\x12\xc0\xa5\xed\x12\x00\x7f4\r\xe0\x06\xfe\x02p\xa5\xed\x12\xa0\x06\xfe\x02\xd0\xa4\xed\x12\xe0\x06\xfe\x02\x88\xb2\xed\x12`\x08\xfe\x02\x10\xa6\xed\x12p\x9d\xec\x12\xe0\x06\xfe\x02\x98\xa5\xed\x12\x10\x9d\xec\x12\x80\x01\xfe\x02@\x0e\xfe\x02\x80\x9c\xec\x12\xc0\xa5\xed\x12\xf8\xa4\xed\x12\xd0\xa4\xed\x12\xb0\x9c\xec\x12\xc0\xa5\xed\x12P\xb2\xed\x12h\xb3\xed\x120\x9e\xec\x12\x80\x01\xfe\x02`\xa6\xed\x12P\xb2\xed\x12\x18\xb2\xed\x12\xb0\xa6\xed\x12\x80\x9c\xec\x12 \x9c\xec\x12\xa0\x9d\xec\x12\xd8\xa6\xed\x12\xc0\xa5\xed\x12\x10\xa6\xed\x12\xb0\x9c\xec\x12(\xa7\xed\x12 \x9c\xec\x12H\xa5\xed\x12\x88\xb2\xed\x12@\x9d\xec\x12\x00\x7f4\r\xc0\xa5\xed\x12P\xb2\xed\x12h\xb3\xed\x12\xe0\x06\xfe\x02p\xa5\xed\x12\xf8\xb2\xed\x12p\xa5\xed\x12 \xa5\xed\x12\xd0\xa4\xed\x12`\x08\xfe\x02\x98\xa5\xed\x12\xa0\x06\xfe\x020\x9e\xec\x12\xc0\xa5\xed\x12\x10\xa6\xed\x12\xc0\xa5\xed\x12@\x0e\xfe\x02`\xa6\xed\x12\x80\x9c\xec\x12`\x08\xfe\x02\x80\x9c\xec\x12\x18\xb2\xed\x12\x10\x9d\xec\x12\xa0\x06\xfe\x02\x88\xb2\xed\x12`\x08\xfe\x02\x10\x9d\xec\x12@\x0e\xfe\x02p\xa5\xed\x12\xc0\xb2\xed\x12\xb0\x9c\xec\x12\x80\x9c\xec\x12P\x9c\xec\x12 \x9c\xec\x12\x18\xb2\xed\x12\xe0\x06\xfe\x02'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80\x8b\xee\x12\xa0\x8a\xee\x12 \x8c\xee\x12\xe0\x89\xee\x12 \x8a\xee\x12@\x8c\xee\x12\x00\x8b\xee\x12\xe0\x8c\xee\x12@\x8b\xee\x12\xe0\x8a\xee\x12 \x8d\xee\x12\xc0\x8c\xee\x12\x80\x8c\xee\x12\xa0\x8d\xee\x12@\x8d\xee\x12`\x8d\xee\x12`\x8b\xee\x12\x00\x8e\xee\x12\x80\x8a\xee\x12\x80\x8d\xee\x12\x80\x8e\xee\x12\xa0\x8c\xee\x12\x00\x8a\xee\x12@\x8a\xee\x12`\x8e\xee\x12@\x8e\xee\x12\xe0\x8d\xee\x12`\x8f\xee\x12\x80\x8f\xee\x12\xe0\x8b\xee\x12\xe0\x8e\xee\x12 \x8b\xee\x12@\x8f\xee\x12\xa0\x8e\xee\x12\x00\x8f\xee\x12`\x8c\xee\x12\x00\x8d\xee\x12\xc0\x8b\xee\x12\xc0\x8a\xee\x12 \x8f\xee\x12\xe0\x8f\xee\x12\xc0\x8f\xee\x12\xa0\x8f\xee\x12\x00\x8c\xee\x12\xa0\x8b\xee\x12\xc0\x8e\xee\x12`\x8a\xee\x12 \x8e\xee\x12 @\x03\x13\xe0A\x03\x13\x80B\x03\x13\xa0B\x03\x13@B\x03\x13`B\x03\x13\xe0B\x03\x13\xc0B\x03\x13\xc0A\x03\x13\x00C\x03\x13 C\x03\x13@C\x03\x13\xa0C\x03\x13\x80C\x03\x13\x80@\x03\x13\xc0C\x03\x13\xe0C\x03\x13\x00D\x03\x13 D\x03\x13\x80D\x03\x13`D\x03\x13@A\x03\x13\xa0D\x03\x13\x00E\x03\x13\xe0D\x03\x13@@\x03\x13`E\x03\x13\x80E\x03\x13\xa0E\x03\x13 A\x03\x13\xe0E\x03\x13\xc0E\x03\x13 F\x03\x13@F\x03\x13\x80A\x03\x13@D\x03\x13`F\x03\x13\xc0F\x03\x13\xa0F\x03\x13\xc0D\x03\x13 G\x03\x13\x00G\x03\x13`G\x03\x13\x80G\x03\x13\xa0A\x03\x13\xe0O\xe6\x0c\xe0G\x03\x13\x00H\x03\x13\x00A\x03\x13@E\x03\x13\xe0F\x03\x13\x80H\x03\x13\xa0H\x03\x13\x80F\x03\x13\xe0@\x03\x13`A\x03\x13 I\x03\x13\xe0H\x03\x13\xc0G\x03\x13\xc0H\x03\x13@G\x03\x13\xa0I\x03\x13@I\x03\x13`@\x03\x13 J\x03\x13 E\x03\x13\xa0G\x03\x13`J\x03\x13\xa0J\x03\x13\xa0@\x03\x13\x00B\x03\x13@J\x03\x13\x00F\x03\x13\x80J\x03\x13 H\x03\x13`K\x03\x13\xc0I\x03\x13 B\x03\x13@H\x03\x13\x00L\x03\x13\x80I\x03\x13`C\x03\x13 L\x03\x13\x80L\x03\x13\xa0L\x03\x13@K\x03\x13\xc0J\x03\x13\x00I\x03\x13\xc0L\x03\x13\x80K\x03\x13`M\x03\x13\x80M\x03\x13\xe0J\x03\x13\xa0K\x03\x13\xa0M\x03\x13\x00N\x03\x13 N\x03\x13\xc0@\x03\x13`N\x03\x13\x80N\x03\x13@M\x03\x13\xe0M\x03\x13\xa0N\x03\x13\x00K\x03\x13\xe0L\x03\x13\xc0N\x03\x13\xe0K\x03\x13@O\x03\x13\xc0O\x03\x13\x00J\x03\x13\x80O\x03\x13`I\x03\x13\xe0N\x03\x13@N\x03\x13 O\x03\x13\xe0I\x03\x13 K\x03\x13@L\x03\x13\xe0O\x03\x13`L\x03\x13 M\x03\x13\xc0M\x03\x13\xc0K\x03\x13@\xb03\r\x00O\x03\x13`O\x03\x13\x00M\x03\x13\xc0Q/\x13 Q/\x13\xa0Q/\x13@R/\x13\xa0R/\x13\xc0R/\x13\x80R/\x13@P/\x13\xe0R/\x13\x00S/\x13 S/\x13@S/\x13\xa0S/\x13\x80S/\x13\xe0S/\x13\xc0S/\x13 T/\x13@T/\x13 P/\x13`Q/\x13`T/\x13\x80T/\x13\xe0T/\x13\xc0T/\x13 R/\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xfe}\x97?\xd9\xc1{?\x19|\xd7?\'\x12\x11@\xf7\xf0L?\n\x04\xa0?\x8c\x8e\x88?o\xd4L?O\xb1j?6\x89\xb7?RPD?\x8dRU?\xa5yw?\x0eJ\xc4?\xb6\x1a@?\x88\xfbn?\xab\xd3\x8c?E\xfbn?c\xf4\x8e?E\xce\x9b?\xc6PU?B\x80w?\xf6\xde\xfd?X\xec\x1d?m\xe3{?\xec\xb7j?G\x17\x91?`\xf1\xae?u\xeb]?\xcfw\xa6?\xddj\xa6?C(\xa2?\xc1\xc7{?\xc3\x8e\x88?\x16\x12\xc0?Gl\xc6?\x1b(\xa2?%\x95H?\xc0/3?\xb5T3?y\x8b\x88?\xa5PU?\x8b\x1eQ?SJD?K\x857?H\xbdY?\xb7\xaf\x8a?g:3?P\xa1\x99?KQD?a\xab\xb9?6\xad\x8a?A\xa5Y?\xeaj\x86?\xfd@s?@\x807?Bj\x86?\x06\x8f\x88?\xad\xed\xae?\\\x14\x91?\xcc\x83\x97?\x95\xd8L?\xb5I\xc4?\xba\xc6{?;\xb7j?Z\x17o?\xfc\xae\xaa?=\xcb;?z\x04\x80?CbU?\x86 \x91?\x8f\xc2\xbb?\x06\xed\x1e@\xc4rf?\xd0[\xb5?\xfd\x89f?S\x847?\xae\xc1{?\xe3\xa5Y?\xbf\x7f7?s}\xb7?\'\xe1\x9d?8\x9fY?sI\xa4?3\xc1\x9b?\x8eE3?\xcd\x9b\x99?y\x8cH?\x9fPD?\x9a\x9a\x81@\x1fG"?\x8b\xa6Y?\'\xc1\xdb?<\xfd\x7f?\xa8}\x97?\xcdWs?Y\xd9L?!\xe3\xfd?J\xfbn?\xfa\x0c\xb1?\xfchD?\x9d\xe3\xfd?\xf7H\xe4?\x10\x90H?j}\x97?ZT\xa4?\xca@3?\rF\xa4?8\xd1\x8c?\xe7\x83w?[\x9b\x88?3[\xd5?d\xf6\xae?\xbc\xb7j?\xd4?s?\x94\xbfY?J\x8f\x99?\xfd\xb6j?+\\\xf5?S\xbbj?%!\xb1? \xc9;?r\xc1\xbb?\x8c@3?{A\xa4?_(\x82?n5c@\xdd\x90H?8\x8f\x88?\xc3\x9f\x99?\x8c\x07\x80?\xbb\xe8]?9tf?\xe3%\x82?\x86rf?\xff\xc7{?5bU?\xa6[\x95?\xd4\xc7{?\x83\xf8.?\x1d\x8e\xa8?;\xd3\x8c?fJ\x84?\xcc\x03\xa0?\x9b\x06\xc0?\xb5\x05^?x\xf4n?Mz\xb7?\xea\xc2{?\x11\xd0\xac?K\x11\xc0?\xd0=s?(\x8f\x88?\x17\x7f7??\xe4\x9d?]\xccj?\xf6JD?\xf1."?Z\x84w?:\x0e@?<\xe5]?\x15\x10o?0\xd0\xac?Z6\x93?!\x7f7?\x85\xc8{?\xa8\xe0\r@W\xca;?%\xed.@\xf0\x10\xb1?v\x1e\xc2?\xcc"\x02@\xaf\xa3Y?\x81\x85H?\xcd\x90\x88?m\x8e\x88?\x19\x867?T5\x82?\x00pf?\xdeJ\x84?&\xfc\xae?l\xf3\xae?0\xd6\x0c@@\x807?\x04\x82w?\xeb\'\xa2?h\xc7;?S@3?\x90\xadH?\n\xa6Y?\xd4\x0c@?\x9c\x02\xe0?\x8d-\x93?\x1a{\x15?\xf3\xfb.?\x8e[\x95?v_U?\xbe\xca{?\xc7aU?\x15\xfa.?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S' \xac\xdc\x04\x00\xab\xdc\x04(\xed\xd9\x04\x88\xe4\xd9\x04\x90\xe8\xd9\x04\x80\xe3\xd9\x04\xc8\xe9\xd9\x04(\xe1\xd9\x04(\xe7\xd9\x04P\xe3\xd9\x04P\xec\xd9\x040\xe5\xd9\x04P\xe9\xd9\x04\xc0\xee\xd9\x04\xc8\xef\xd9\x04\x90\xee\xd9\x04\x08\xe6\xd9\x04\x98\xe3\xd9\x04\x98\xef\xd9\x04\xa8\xee\xd9\x04\xa0\xe7\xd9\x04`\xee\xd9\x04 \xe3\xd9\x04\xc8\xec\xd9\x04\xd0\xea\xd9\x048\xef\xd9\x04`\xeb\xd9\x04\xb0\xef\xd9\x04 \xef\xd9\x04\x90\xe2\xd9\x04\xd8\xe8\xd9\x04p\xea\xd9\x04\x18\xe8\xd9\x04\xf8\xec\xd9\x04h\xe9\xd9\x04x\xee\xd9\x04H\xeb\xd9\x04X\xea\xd9\x04\x08\xe9\xd9\x04\xb8\x8a\x02\x05`\x88\x02\x05\x80\x8f\x02\x05@\x8a\x02\x05 \x8f\x02\x05\xc8\x89\x02\x05\x80\x89\x02\x05\xb8\x8d\x02\x05\xe8\x84\x02\x05\x80\x80\x02\x05 \x86\x02\x05X\x8d\x02\x050\x88\x02\x058\x89\x02\x05\xe8\x87\x02\x05h\x80\x02\x05\xe8\x8a\x02\x05\x00\x85\x02\x05 \x8c\x02\x05\x80\x83\x02\x05\xe0\x89\x02\x05\xd8\x85\x02\x05\xd0\x81\x02\x05`\x85\x02\x05p\x81\x02\x05\xf0\x85\x02\x05H\x85\x02\x05\xb8\x87\x02\x050\x85\x02\x05\xb0\x86\x02\x05x\x8e\x02\x05p\x87\x02\x05\x98\x86\x02\x05\x88\x87\x02\x05@\x84\x02\x05\xf8\x8c\x02\x05\xe0\x86\x02\x05\xc0\x88\x02\x05\xd8\x88\x02\x05X\x81\x02\x05\xa8\x85\x02\x05\x18\x88\x02\x05\xd0\x8a\x02\x05\x90\x88\x02\x05\xa8\x8b\x02\x05 \x80\x02\x05\x00\x8e\x02\x05\xa8\x8e\x02\x05(\x87\x02\x05(\x81\x02\x05p\x84\x02\x05P\x86\x02\x058\x8f\x02\x058\x80\x02\x05\xc8\x86\x02\x05\x18\x8e\x02\x05\xf0\x88\x02\x05X\x8a\x02\x05\x90\x85\x02\x05P\x80\x02\x05\xe0\x8c\x02\x05\x18\x8b\x02\x058\x8c\x02\x05\xa0\x8d\x02\x05H\x8b\x02\x05\x98\x8c\x02\x05p\x8d\x02\x05\xa8\x88\x02\x05h\x89\x02\x05\x10\x87\x02\x05\xd0\x8d\x02\x05x\x85\x02\x05\x08\x8c\x02\x05(\x8a\x02\x058\x86\x02\x050\x8b\x02\x05P\x89\x02\x05\xa0\x81\x02\x050\x82\x02\x05(\x8d\x02\x05\x00\x8b\x02\x05\x88\x8d\x02\x05\xc0\x8e\x02\x05\xb0\x80\x02\x050\x8e\x02\x05\xf8\x83\x02\x05\x18\x85\x02\x05\xc8\x80\x02\x05x\x8b\x02\x05\xe0\x8f\x02\x05\x88\x84\x02\x05\x90\x8e\x02\x05\xb0\x8f\x02\x05H\x8e\x02\x05`\x8e\x02\x05\x98\x89\x02\x05\xc8\x8c\x02\x05\x98\x80\x02\x05\xc8\x8f\x02\x05\xc0\x8b\x02\x05\x88\x81\x02\x05h\x8c\x02\x05\x80\x86\x02\x05X\x84\x02\x05\xd8\x8e\x02\x05\xd8\x8b\x02\x05\x08\x86\x02\x05h\x86\x02\x05`\x8b\x02\x05h\x8f\x02\x05\x08\x8f\x02\x05P\x8c\x02\x05\xd0\x87\x02\x05\xe8\x81\x02\x05\x80\x8c\x02\x05\x10\x8a\x02\x05\x98\x8f\x02\x05\x00\x88\x02\x05\xe8\x8d\x02\x05x\x88\x02\x05\xb0\x89\x02\x05\xf8\x89\x02\x05@\x8d\x02\x05\xc0\x85\x02\x05P\x8f\x02\x05\xa0\x84\x02\x05\xa0\x87\x02\x05H\x88\x02\x05\xf0\x8b\x02\x05\x88\x8a\x02\x05(\x84\x02\x05\xa0\x8a\x02\x05 \x89\x02\x05\xb8\x81\x02\x05\x10\x8d\x02\x05X\x87\x02\x05\xd0\x84\x02\x058\xe6\xd9\x048\xe3\xd9\x04P\xe6\xd9\x040\xe2\xd9\x048\xec\xd9\x04\xb8\xed\xd9\x04\x00\xe2\xd9\x04h\xe3\xd9\x04\x10\xe1\xd9\x04x\xe2\xd9\x04\xd0\xe4\xd9\x04\xd8\xe2\xd9\x04\xb0\xe9\xd9\x04\xf8\xe0\xd9\x04p\xe4\xd9\x04p\xed\xd9\x04\xa0\xed\xd9\x04\x18\xe2\xd9\x040\xe8\xd9\x04\x08\xec\xd9\x04\xb8\xe7\xd9\x04h\xec\xd9\x04\xc0\xe8\xd9\x04\xa8\xeb\xd9\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6514
sg6370
g6544
sg6384
g6521
sg6379
g6551
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6623
sg6370
g6619
sg6384
g6630
sg6379
g6627
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6646
sg6370
g6636
sg6384
g6640
sg6379
g6644
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6503
sg6370
g6670
sg6384
g6497
sg6379
g6677
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6689
sg6370
g6685
sg6384
g6696
sg6379
g6693
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6563
sg6370
g6702
sg6384
g6570
sg6379
g6709
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6418
sg6370
g6743
sg6384
g6412
sg6379
g6750
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6646
sg6370
g6758
sg6384
g6640
sg6379
g6765
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6824
sg6370
g6820
sg6384
g6831
sg6379
g6828
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6593
sg6370
g6837
sg6384
g6600
sg6379
g6844
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6646
sg6370
g6758
sg6384
g6640
sg6379
g6765
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6503
sg6370
g6670
sg6384
g6497
sg6379
g6677
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6663
sg6370
g6904
sg6384
g6657
sg6379
g6911
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6480
sg6370
g6919
sg6384
g6487
sg6379
g6926
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6646
sg6370
g6636
sg6384
g6640
sg6379
g6644
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6563
sg6370
g6702
sg6384
g6570
sg6379
g6709
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6514
sg6370
g6544
sg6384
g6521
sg6379
g6551
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6435
sg6370
g6986
sg6384
g6429
sg6379
g6993
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6663
sg6370
g6904
sg6384
g6657
sg6379
g6911
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6375
sg6370
g7027
sg6384
g6385
sg6379
g7034
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g6824
sg6370
g7042
sg6384
g6831
sg6379
g7049
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6623
sg6370
g6619
sg6384
g6630
sg6379
g6627
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6593
sg6370
g6837
sg6384
g6600
sg6379
g6844
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6623
sg6370
g7083
sg6384
g6630
sg6379
g7090
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6689
sg6370
g6685
sg6384
g6696
sg6379
g6693
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6689
sg6370
g6685
sg6384
g6696
sg6379
g6693
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6435
sg6370
g6986
sg6384
g6429
sg6379
g6993
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6689
sg6370
g7163
sg6384
g6696
sg6379
g7170
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6777
sg6370
g7178
sg6384
g6784
sg6379
g7185
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6480
sg6370
g6919
sg6384
g6487
sg6379
g6926
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6452
sg6370
g7219
sg6384
g6446
sg6379
g7226
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6689
sg6370
g7163
sg6384
g6696
sg6379
g7170
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6531
sg6370
g7277
sg6384
g6538
sg6379
g7284
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6593
sg6370
g6837
sg6384
g6600
sg6379
g6844
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6503
sg6370
g6670
sg6384
g6497
sg6379
g6677
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g6646
sg6370
g6758
sg6384
g6640
sg6379
g6765
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6531
sg6370
g7277
sg6384
g6538
sg6379
g7284
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6435
sg6370
g6986
sg6384
g6429
sg6379
g6993
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6777
sg6370
g7178
sg6384
g6784
sg6379
g7185
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6401
sg6370
g7461
sg6384
g6395
sg6379
g7468
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6452
sg6370
g7219
sg6384
g6446
sg6379
g7226
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g6689
sg6370
g7163
sg6384
g6696
sg6379
g7170
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g6824
sg6370
g7042
sg6384
g6831
sg6379
g7049
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6623
sg6370
g7083
sg6384
g6630
sg6379
g7090
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6463
sg6370
g7554
sg6384
g6470
sg6379
g7561
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g7264
sg6370
g7582
sg6384
g7271
sg6379
g7589
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6418
sg6370
g6743
sg6384
g6412
sg6379
g6750
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6794
sg6370
g7610
sg6384
g6801
sg6379
g7617
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6480
sg6370
g6919
sg6384
g6487
sg6379
g6926
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6514
sg6370
g6544
sg6384
g6521
sg6379
g6551
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6463
sg6370
g7554
sg6384
g6470
sg6379
g7561
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6401
sg6370
g7461
sg6384
g6395
sg6379
g7468
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6777
sg6370
g7178
sg6384
g6784
sg6379
g7185
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6824
sg6370
g6820
sg6384
g6831
sg6379
g6828
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6375
sg6370
g7027
sg6384
g6385
sg6379
g7034
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6563
sg6370
g6702
sg6384
g6570
sg6379
g6709
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6514
sg6370
g6544
sg6384
g6521
sg6379
g6551
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6623
sg6370
g7083
sg6384
g6630
sg6379
g7090
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6689
sg6370
g6685
sg6384
g6696
sg6379
g6693
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6463
sg6370
g7554
sg6384
g6470
sg6379
g7561
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6435
sg6370
g6986
sg6384
g6429
sg6379
g6993
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6646
sg6370
g6636
sg6384
g6640
sg6379
g6644
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6401
sg6370
g7461
sg6384
g6395
sg6379
g7468
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6777
sg6370
g7178
sg6384
g6784
sg6379
g7185
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6824
sg6370
g6820
sg6384
g6831
sg6379
g6828
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6646
sg6370
g6636
sg6384
g6640
sg6379
g6644
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g7264
sg6370
g7582
sg6384
g7271
sg6379
g7589
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g7264
sg6370
g7582
sg6384
g7271
sg6379
g7589
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6401
sg6370
g7461
sg6384
g6395
sg6379
g7468
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6623
sg6370
g7083
sg6384
g6630
sg6379
g7090
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6480
sg6370
g6919
sg6384
g6487
sg6379
g6926
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g7264
sg6370
g7582
sg6384
g7271
sg6379
g7589
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6452
sg6370
g6442
sg6384
g6446
sg6379
g6450
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6375
sg6370
g7027
sg6384
g6385
sg6379
g7034
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6646
sg6370
g6758
sg6384
g6640
sg6379
g6765
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6824
sg6370
g6820
sg6384
g6831
sg6379
g6828
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6593
sg6370
g6837
sg6384
g6600
sg6379
g6844
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6794
sg6370
g7610
sg6384
g6801
sg6379
g7617
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6401
sg6370
g6391
sg6384
g6395
sg6379
g6399
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6663
sg6370
g6904
sg6384
g6657
sg6379
g6911
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6689
sg6370
g6685
sg6384
g6696
sg6379
g6693
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6777
sg6370
g7178
sg6384
g6784
sg6379
g7185
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6824
sg6370
g7042
sg6384
g6831
sg6379
g7049
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6463
sg6370
g7554
sg6384
g6470
sg6379
g7561
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6689
sg6370
g7163
sg6384
g6696
sg6379
g7170
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6623
sg6370
g7083
sg6384
g6630
sg6379
g7090
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6646
sg6370
g6636
sg6384
g6640
sg6379
g6644
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6503
sg6370
g6670
sg6384
g6497
sg6379
g6677
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6663
sg6370
g6653
sg6384
g6657
sg6379
g6661
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6794
sg6370
g7610
sg6384
g6801
sg6379
g7617
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6375
sg6370
g7027
sg6384
g6385
sg6379
g7034
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6663
sg6370
g6904
sg6384
g6657
sg6379
g6911
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g7264
sg6370
g7260
sg6384
g7271
sg6379
g7268
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6401
sg6370
g7461
sg6384
g6395
sg6379
g7468
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6623
sg6370
g6619
sg6384
g6630
sg6379
g6627
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6794
sg6370
g7610
sg6384
g6801
sg6379
g7617
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6689
sg6370
g7163
sg6384
g6696
sg6379
g7170
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g6777
sg6370
g6773
sg6384
g6784
sg6379
g6781
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6418
sg6370
g6743
sg6384
g6412
sg6379
g6750
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6563
sg6370
g6702
sg6384
g6570
sg6379
g6709
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g6435
sg6370
g6425
sg6384
g6429
sg6379
g6433
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6435
sg6370
g6986
sg6384
g6429
sg6379
g6993
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6375
sg6370
g7027
sg6384
g6385
sg6379
g7034
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6452
sg6370
g7219
sg6384
g6446
sg6379
g7226
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6646
sg6370
g6758
sg6384
g6640
sg6379
g6765
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6480
sg6370
g6476
sg6384
g6487
sg6379
g6484
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6824
sg6370
g6820
sg6384
g6831
sg6379
g6828
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6794
sg6370
g7610
sg6384
g6801
sg6379
g7617
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6794
sg6370
g6790
sg6384
g6801
sg6379
g6798
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6593
sg6370
g6837
sg6384
g6600
sg6379
g6844
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6463
sg6370
g7554
sg6384
g6470
sg6379
g7561
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6531
sg6370
g7277
sg6384
g6538
sg6379
g7284
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6452
sg6370
g7219
sg6384
g6446
sg6379
g7226
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6531
sg6370
g7277
sg6384
g6538
sg6379
g7284
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6623
sg6370
g6619
sg6384
g6630
sg6379
g6627
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6824
sg6370
g7042
sg6384
g6831
sg6379
g7049
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6480
sg6370
g6919
sg6384
g6487
sg6379
g6926
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g7264
sg6370
g7582
sg6384
g7271
sg6379
g7589
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6452
sg6370
g7219
sg6384
g6446
sg6379
g7226
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g6824
sg6370
g7042
sg6384
g6831
sg6379
g7049
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6593
sg6370
g6589
sg6384
g6600
sg6379
g6597
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6563
sg6370
g6702
sg6384
g6570
sg6379
g6709
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6418
sg6370
g6743
sg6384
g6412
sg6379
g6750
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6663
sg6370
g6904
sg6384
g6657
sg6379
g6911
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6531
sg6370
g7277
sg6384
g6538
sg6379
g7284
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6514
sg6370
g6544
sg6384
g6521
sg6379
g6551
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6503
sg6370
g6670
sg6384
g6497
sg6379
g6677
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6623
sg6370
g6619
sg6384
g6630
sg6379
g6627
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6418
sg6370
g6743
sg6384
g6412
sg6379
g6750
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.