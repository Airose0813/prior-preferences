ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/C21_infer_design1_no_eyetracking_2015_Oct_16_1426
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1_no_eyetracking'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vr
sVcontacts
p57
Vn
sS'frameRate'
p58
cnumpy.core.multiarray
scalar
p59
(cnumpy
dtype
p60
(S'f8'
I0
I1
tRp61
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x0e\xb6\xf4\x01\x12\x04N@'
tRp62
sVsession
p63
V001
p64
sS'date'
p65
V2015_Oct_16_1426
p66
sVparticipant
p67
VC21
p68
sVglasses
p69
Vn
ssS'loopsUnfinished'
p70
(lp71
sS'saveWideText'
p72
I01
sS'thisEntry'
p73
(dp74
sS'version'
p75
S''
sS'_paramNamesSoFar'
p76
(lp77
Vbdm_img
p78
aS'choice_left'
p79
aS'choice_right'
p80
aS'img_correct'
p81
aS'img_left'
p82
aS'img_wrong'
p83
aS'img_right'
p84
asS'entries'
p85
(lp86
(dp87
g63
g64
sg56
Vr
sg15
F1.3002792818260787
sg14
S'space'
p88
sg58
g62
sg57
Vn
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp89
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg16
S'space'
p90
sg55
g11
sg65
g66
sg67
g68
sg18
F19.033460791066318
sg17
cnumpy.core.multiarray
_reconstruct
p91
(cnumpy
ndarray
p92
(I0
tS'b'
tRp93
(I1
(I1
tg60
(S'S3'
I0
I1
tRp94
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P6\x00'
tbsg69
Vn
sa(dp95
g63
g64
sg20
F11.949999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p96
I0
sg19
F1.3199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p97
g59
(g60
(S'i4'
I0
I1
tRp98
(I3
S'<'
NNNI-1
I-1
I0
tbS'\r\x00\x00\x00'
tRp99
sS'bdm_loop1.thisRepN'
p100
I0
sS'bdm_loop1.thisTrialN'
p101
I0
sg65
g66
sg67
g68
sg78
V19-caramello_redo.png
p102
sg21
F1.8999999999999999
sg69
Vn
sa(dp103
g63
g64
sg20
F11.699999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p104
I1
sg19
F0.9599999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p105
g59
(g98
S'\x06\x00\x00\x00'
tRp106
sS'bdm_loop1.thisRepN'
p107
I0
sS'bdm_loop1.thisTrialN'
p108
I1
sg65
g66
sg67
g68
sg78
V7-olives.png
p109
sg21
F1.7
sg69
Vn
sa(dp110
g63
g64
sg20
F8.9670000000000005
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p111
I2
sg19
F0.51999999999999913
sg55
g11
sS'bdm_loop1.thisIndex'
p112
g59
(g98
S'\n\x00\x00\x00'
tRp113
sS'bdm_loop1.thisRepN'
p114
I0
sS'bdm_loop1.thisTrialN'
p115
I2
sg65
g66
sg67
g68
sg78
V16-skips_prawn.png
p116
sg21
F1.6000000000000001
sg69
Vn
sa(dp117
g63
g64
sg20
F5.2839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p118
I3
sg19
F2.5000000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p119
g59
(g98
S'\x00\x00\x00\x00'
tRp120
sS'bdm_loop1.thisRepN'
p121
I0
sS'bdm_loop1.thisTrialN'
p122
I3
sg65
g66
sg67
g68
sg78
V1-treacle_cookies.png
p123
sg21
F1.5
sg69
Vn
sa(dp124
g63
g64
sg20
F5.4009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p125
I4
sg19
F0.71999999999999886
sg55
g11
sS'bdm_loop1.thisIndex'
p126
g59
(g98
S'&\x00\x00\x00'
tRp127
sS'bdm_loop1.thisRepN'
p128
I0
sS'bdm_loop1.thisTrialN'
p129
I4
sg65
g66
sg67
g68
sg78
V50-polo.png
p130
sg21
F1.8999999999999999
sg69
Vn
sa(dp131
g63
g64
sg20
F8.8840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p132
I5
sg19
F0.2199999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p133
g59
(g98
S'\x18\x00\x00\x00'
tRp134
sS'bdm_loop1.thisRepN'
p135
I0
sS'bdm_loop1.thisTrialN'
p136
I5
sg65
g66
sg67
g68
sg78
V33-ambrosia_rice.png
p137
sg21
F1.8
sg69
Vn
sa(dp138
g63
g64
sg20
F4.2510000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p139
I6
sg19
F0.99999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p140
g59
(g98
S'\t\x00\x00\x00'
tRp141
sS'bdm_loop1.thisRepN'
p142
I0
sS'bdm_loop1.thisTrialN'
p143
I6
sg65
g66
sg67
g68
sg78
V13-mccoys_steak_crisps.png
p144
sg21
F1.7
sg69
Vn
sa(dp145
g63
g64
sg20
F5.5339999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p146
I7
sg19
F0.099999999999998507
sg55
g11
sS'bdm_loop1.thisIndex'
p147
g59
(g98
S'\x14\x00\x00\x00'
tRp148
sS'bdm_loop1.thisRepN'
p149
I0
sS'bdm_loop1.thisTrialN'
p150
I7
sg65
g66
sg67
g68
sg78
V27-hartleys_raspberries_jelly.png
p151
sg21
F1.8999999999999999
sg69
Vn
sa(dp152
g63
g64
sg20
F4.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p153
I8
sg19
F0.47999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p154
g59
(g98
S'\x08\x00\x00\x00'
tRp155
sS'bdm_loop1.thisRepN'
p156
I0
sS'bdm_loop1.thisTrialN'
p157
I8
sg65
g66
sg67
g68
sg78
V10-bounty_redo.png
p158
sg21
F1.1000000000000001
sg69
Vn
sa(dp159
g63
g64
sg20
F4.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p160
I9
sg19
F0.91999999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p161
g59
(g98
S'\x17\x00\x00\x00'
tRp162
sS'bdm_loop1.thisRepN'
p163
I0
sS'bdm_loop1.thisTrialN'
p164
I9
sg65
g66
sg67
g68
sg78
V31-hobnobs.png
p165
sg21
F1.1000000000000001
sg69
Vn
sa(dp166
g63
g64
sg20
F9.6010000000000009
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p167
I10
sg19
F1.8400000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p168
g59
(g98
S'\x1f\x00\x00\x00'
tRp169
sS'bdm_loop1.thisRepN'
p170
I0
sS'bdm_loop1.thisTrialN'
p171
I10
sg65
g66
sg67
g68
sg78
V42-mrkipling_lemon_slices.png
p172
sg21
F1
sg69
Vn
sa(dp173
g63
g64
sg20
F8.1669999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p174
I11
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p175
g59
(g98
S'\x13\x00\x00\x00'
tRp176
sS'bdm_loop1.thisRepN'
p177
I0
sS'bdm_loop1.thisTrialN'
p178
I11
sg65
g66
sg67
g68
sg78
V26-walkers_smoky_bacon.png
p179
sg21
F1.7
sg69
Vn
sa(dp180
g63
g64
sg20
F2.5670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p181
I12
sg19
F1.1399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p182
g59
(g98
S"'\x00\x00\x00"
tRp183
sS'bdm_loop1.thisRepN'
p184
I0
sS'bdm_loop1.thisTrialN'
p185
I12
sg65
g66
sg67
g68
sg78
V51-mars.png
p186
sg21
F1.3
sg69
Vn
sa(dp187
g63
g64
sg20
F10.334
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p188
I13
sg19
F0.67999999999999927
sg55
g11
sS'bdm_loop1.thisIndex'
p189
g59
(g98
S'\x1e\x00\x00\x00'
tRp190
sS'bdm_loop1.thisRepN'
p191
I0
sS'bdm_loop1.thisTrialN'
p192
I13
sg65
g66
sg67
g68
sg78
V41-peanuts_redo.png
p193
sg21
F1.3999999999999999
sg69
Vn
sa(dp194
g63
g64
sg20
F4.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p195
I14
sg19
F0.63999999999999968
sg55
g11
sS'bdm_loop1.thisIndex'
p196
g59
(g98
S'\x19\x00\x00\x00'
tRp197
sS'bdm_loop1.thisRepN'
p198
I0
sS'bdm_loop1.thisTrialN'
p199
I14
sg65
g66
sg67
g68
sg78
V34-hula_hoops_bbq_beef_redo.png
p200
sg21
F1
sg69
Vn
sa(dp201
g63
g64
sg20
F6.5839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p202
I15
sg19
F1.7199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p203
g59
(g98
S'\x12\x00\x00\x00'
tRp204
sS'bdm_loop1.thisRepN'
p205
I0
sS'bdm_loop1.thisTrialN'
p206
I15
sg65
g66
sg67
g68
sg78
V25-kitkat.png
p207
sg21
F1.7
sg69
Vn
sa(dp208
g63
g64
sg20
F3.5009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p209
I16
sg19
F0.71999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p210
g59
(g98
S'\x0e\x00\x00\x00'
tRp211
sS'bdm_loop1.thisRepN'
p212
I0
sS'bdm_loop1.thisTrialN'
p213
I16
sg65
g66
sg67
g68
sg78
V20-fruit_pastilles.png
p214
sg21
F1.8
sg69
Vn
sa(dp215
g63
g64
sg20
F4.7839999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p216
I17
sg19
F0.43999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p217
g59
(g98
S'\x03\x00\x00\x00'
tRp218
sS'bdm_loop1.thisRepN'
p219
I0
sS'bdm_loop1.thisTrialN'
p220
I17
sg65
g66
sg67
g68
sg78
V4-corn.png
p221
sg21
F1.3
sg69
Vn
sa(dp222
g63
g64
sg20
F2.7010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p223
I18
sg19
F1.4800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p224
g59
(g98
S'\x05\x00\x00\x00'
tRp225
sS'bdm_loop1.thisRepN'
p226
I0
sS'bdm_loop1.thisTrialN'
p227
I18
sg65
g66
sg67
g68
sg78
V6-sour_patch_kids.png
p228
sg21
F1.3
sg69
Vn
sa(dp229
g63
g64
sg20
F7.101
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p230
I19
sg19
F1.5800000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p231
g59
(g98
S'\x0c\x00\x00\x00'
tRp232
sS'bdm_loop1.thisRepN'
p233
I0
sS'bdm_loop1.thisTrialN'
p234
I19
sg65
g66
sg67
g68
sg78
V18-mms.png
p235
sg21
F1.2
sg69
Vn
sa(dp236
g63
g64
sg20
F4.4009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p237
I20
sg19
F0.31999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p238
g59
(g98
S'\x04\x00\x00\x00'
tRp239
sS'bdm_loop1.thisRepN'
p240
I0
sS'bdm_loop1.thisTrialN'
p241
I20
sg65
g66
sg67
g68
sg78
V5-pineapple.png
p242
sg21
F1.2
sg69
Vn
sa(dp243
g63
g64
sg20
F4.0839999999999996
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p244
I21
sg19
F0.53999999999999893
sg55
g11
sS'bdm_loop1.thisIndex'
p245
g59
(g98
S'\x15\x00\x00\x00'
tRp246
sS'bdm_loop1.thisRepN'
p247
I0
sS'bdm_loop1.thisTrialN'
p248
I21
sg65
g66
sg67
g68
sg78
V29-beans.png
p249
sg21
F1.8
sg69
Vn
sa(dp250
g63
g64
sg20
F3.0670000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p251
I22
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p252
g59
(g98
S'\x1d\x00\x00\x00'
tRp253
sS'bdm_loop1.thisRepN'
p254
I0
sS'bdm_loop1.thisTrialN'
p255
I22
sg65
g66
sg67
g68
sg78
V40-sardines.png
p256
sg21
F1.7
sg69
Vn
sa(dp257
g63
g64
sg20
F6.6840000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p258
I23
sg19
F0.13999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p259
g59
(g98
S'\x16\x00\x00\x00'
tRp260
sS'bdm_loop1.thisRepN'
p261
I0
sS'bdm_loop1.thisTrialN'
p262
I23
sg65
g66
sg67
g68
sg78
V30-spaghetti_hoops.png
p263
sg21
F1.8999999999999999
sg69
Vn
sa(dp264
g63
g64
sg20
F2.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p265
I24
sg19
F1.6200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p266
g59
(g98
S'\x10\x00\x00\x00'
tRp267
sS'bdm_loop1.thisRepN'
p268
I0
sS'bdm_loop1.thisTrialN'
p269
I24
sg65
g66
sg67
g68
sg78
V22-daim.png
p270
sg21
F1
sg69
Vn
sa(dp271
g63
g64
sg20
F3.0840000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p272
I25
sg19
F0.73999999999999888
sg55
g11
sS'bdm_loop1.thisIndex'
p273
g59
(g98
S'"\x00\x00\x00'
tRp274
sS'bdm_loop1.thisRepN'
p275
I0
sS'bdm_loop1.thisTrialN'
p276
I25
sg65
g66
sg67
g68
sg78
V45-chewy_nougat_redo.png
p277
sg21
F2
sg69
Vn
sa(dp278
g63
g64
sg20
F5.1340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p279
I26
sg19
F1.8399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p280
g59
(g98
S'#\x00\x00\x00'
tRp281
sS'bdm_loop1.thisRepN'
p282
I0
sS'bdm_loop1.thisTrialN'
p283
I26
sg65
g66
sg67
g68
sg78
V46-pistachios.png
p284
sg21
F1.8
sg69
Vn
sa(dp285
g63
g64
sg20
F4.984
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p286
I27
sg19
F0.71999999999999886
sg55
g11
sS'bdm_loop1.thisIndex'
p287
g59
(g98
S'\x07\x00\x00\x00'
tRp288
sS'bdm_loop1.thisRepN'
p289
I0
sS'bdm_loop1.thisTrialN'
p290
I27
sg65
g66
sg67
g68
sg78
V8-liquorice_catherine_wheels.png
p291
sg21
F1.8999999999999999
sg69
Vn
sa(dp292
g63
g64
sg20
F5.9340000000000002
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p293
I28
sg19
F2.1200000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p294
g59
(g98
S'\x02\x00\x00\x00'
tRp295
sS'bdm_loop1.thisRepN'
p296
I0
sS'bdm_loop1.thisTrialN'
p297
I28
sg65
g66
sg67
g68
sg78
V3-ellas_strawberries_apples.png
p298
sg21
F1.5
sg69
Vn
sa(dp299
g63
g64
sg20
F3.4169999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p300
I29
sg19
F1.9000000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p301
g59
(g98
S'\x1c\x00\x00\x00'
tRp302
sS'bdm_loop1.thisRepN'
p303
I0
sS'bdm_loop1.thisTrialN'
p304
I29
sg65
g66
sg67
g68
sg78
V38-maltesers.png
p305
sg21
F1.3999999999999999
sg69
Vn
sa(dp306
g63
g64
sg20
F3.9670000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p307
I30
sg19
F0.5399999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p308
g59
(g98
S'\x1a\x00\x00\x00'
tRp309
sS'bdm_loop1.thisRepN'
p310
I0
sS'bdm_loop1.thisTrialN'
p311
I30
sg65
g66
sg67
g68
sg78
V35-raisins.png
p312
sg21
F1.8999999999999999
sg69
Vn
sa(dp313
g63
g64
sg20
F5.6340000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p314
I31
sg19
F0.97999999999999976
sg55
g11
sS'bdm_loop1.thisIndex'
p315
g59
(g98
S'$\x00\x00\x00'
tRp316
sS'bdm_loop1.thisRepN'
p317
I0
sS'bdm_loop1.thisTrialN'
p318
I31
sg65
g66
sg67
g68
sg78
V48-twix.png
p319
sg21
F1.3
sg69
Vn
sa(dp320
g63
g64
sg20
F8.5340000000000007
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p321
I32
sg19
F0.85999999999999943
sg55
g11
sS'bdm_loop1.thisIndex'
p322
g59
(g98
S'\x0f\x00\x00\x00'
tRp323
sS'bdm_loop1.thisRepN'
p324
I0
sS'bdm_loop1.thisTrialN'
p325
I32
sg65
g66
sg67
g68
sg78
V21-nakd_banana_crunch.png
p326
sg21
F1.5
sg69
Vn
sa(dp327
g63
g64
sg20
F2.5009999999999999
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p328
I33
sg19
F1.8000000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p329
g59
(g98
S'!\x00\x00\x00'
tRp330
sS'bdm_loop1.thisRepN'
p331
I0
sS'bdm_loop1.thisTrialN'
p332
I33
sg65
g66
sg67
g68
sg78
V44-crunch.png
p333
sg21
F1.1000000000000001
sg69
Vn
sa(dp334
g63
g64
sg20
F5.7510000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p335
I34
sg19
F0.55999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p336
g59
(g98
S'\x1b\x00\x00\x00'
tRp337
sS'bdm_loop1.thisRepN'
p338
I0
sS'bdm_loop1.thisTrialN'
p339
I34
sg65
g66
sg67
g68
sg78
V36-fig_rolls.png
p340
sg21
F1.7
sg69
Vn
sa(dp341
g63
g64
sg20
F9.5009999999999994
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p342
I35
sg19
F2.2000000000000011
sg55
g11
sS'bdm_loop1.thisIndex'
p343
g59
(g98
S'\x01\x00\x00\x00'
tRp344
sS'bdm_loop1.thisRepN'
p345
I0
sS'bdm_loop1.thisTrialN'
p346
I35
sg65
g66
sg67
g68
sg78
V2-steamed_puddings.png
p347
sg21
F1.1000000000000001
sg69
Vn
sa(dp348
g63
g64
sg20
F5.484
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p349
I36
sg19
F0.31999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p350
g59
(g98
S' \x00\x00\x00'
tRp351
sS'bdm_loop1.thisRepN'
p352
I0
sS'bdm_loop1.thisTrialN'
p353
I36
sg65
g66
sg67
g68
sg78
V43-mrporky_pork_crackles_redo.png
p354
sg21
F1.3999999999999999
sg69
Vn
sa(dp355
g63
g64
sg20
F6.8840000000000003
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p356
I37
sg19
F0.81999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p357
g59
(g98
S'%\x00\x00\x00'
tRp358
sS'bdm_loop1.thisRepN'
p359
I0
sS'bdm_loop1.thisTrialN'
p360
I37
sg65
g66
sg67
g68
sg78
V49-yorkie.png
p361
sg21
F1.7
sg69
Vn
sa(dp362
g63
g64
sg20
F2.4009999999999998
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p363
I38
sg19
F0.67999999999999905
sg55
g11
sS'bdm_loop1.thisIndex'
p364
g59
(g98
S'\x0b\x00\x00\x00'
tRp365
sS'bdm_loop1.thisRepN'
p366
I0
sS'bdm_loop1.thisTrialN'
p367
I38
sg65
g66
sg67
g68
sg78
V17-jacobs_mini_cheddars_redo.png
p368
sg21
F1.8
sg69
Vn
sa(dp369
g63
g64
sg20
F3.7010000000000001
sg56
Vr
sg57
Vn
sg58
g62
sS'bdm_loop1.thisN'
p370
I39
sg19
F1.2999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p371
g59
(g98
S'\x11\x00\x00\x00'
tRp372
sS'bdm_loop1.thisRepN'
p373
I0
sS'bdm_loop1.thisTrialN'
p374
I39
sg65
g66
sg67
g68
sg78
V23-crunchie_redo.png
p375
sg21
F1.6000000000000001
sg69
Vn
sa(dp376
g63
g64
sg55
g11
sg56
Vr
sg23
F19.133373893251701
sg57
Vn
sg58
g62
sg22
S'space'
p377
sg65
g66
sg67
g68
sg69
Vn
sa(dp378
g63
g64
sS'binary.thisRepN'
p379
I0
sg67
g68
sg79
S'30-spaghetti_hoops.png'
p380
sg26
F4.9000000000000004
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'19-caramello_redo.png'
p381
sg65
g66
sg55
g11
sS'binary.thisN'
p382
I0
sg56
Vr
sS'binary.thisIndex'
p383
g59
(g98
S'\x00\x00\x00\x00'
tRp384
sg24
S'right'
p385
sS'binary.thisTrialN'
p386
I0
sg25
F1.4834013196596061
sg27
F8.6669999999999998
sg69
Vn
sa(dp387
g63
g64
sS'binary.thisRepN'
p388
I0
sg67
g68
sg79
S'40-sardines.png'
p389
sg26
F3.3000000000000003
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'5-pineapple.png'
p390
sg65
g66
sg55
g11
sS'binary.thisN'
p391
I1
sg56
Vr
sS'binary.thisIndex'
p392
g59
(g98
S'\x01\x00\x00\x00'
tRp393
sg24
S'right'
p394
sS'binary.thisTrialN'
p395
I1
sg25
F5.783283175125689
sg27
F4.5010000000000003
sg69
Vn
sa(dp396
g63
g64
sS'binary.thisRepN'
p397
I0
sg67
g68
sg79
S'20-fruit_pastilles.png'
p398
sg26
F5.1000000000000014
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'2-steamed_puddings.png'
p399
sg65
g66
sg55
g11
sS'binary.thisN'
p400
I2
sg56
Vr
sS'binary.thisIndex'
p401
g59
(g98
S'\x02\x00\x00\x00'
tRp402
sg24
S'right'
p403
sS'binary.thisTrialN'
p404
I2
sg25
F1.3500356942458893
sg27
F4.9669999999999996
sg69
Vn
sa(dp405
g63
g64
sS'binary.thisRepN'
p406
I0
sg67
g68
sg79
S'38-maltesers.png'
p407
sg26
F4.5
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'6-sour_patch_kids.png'
p408
sg65
g66
sg55
g11
sS'binary.thisN'
p409
I3
sg56
Vr
sS'binary.thisIndex'
p410
g59
(g98
S'\x03\x00\x00\x00'
tRp411
sg24
S'left'
p412
sS'binary.thisTrialN'
p413
I3
sg25
F1.2998607582230761
sg27
F4.2670000000000003
sg69
Vn
sa(dp414
g63
g64
sS'binary.thisRepN'
p415
I0
sg67
g68
sg79
S'45-chewy_nougat_redo.png'
p416
sg26
F3.9000000000000008
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'41-peanuts_redo.png'
p417
sg65
g66
sg55
g11
sS'binary.thisN'
p418
I4
sg56
Vr
sS'binary.thisIndex'
p419
g59
(g98
S'\x04\x00\x00\x00'
tRp420
sg24
S'right'
p421
sS'binary.thisTrialN'
p422
I4
sg25
F1.4500329002912622
sg27
F7.1340000000000003
sg69
Vn
sa(dp423
g63
g64
sS'binary.thisRepN'
p424
I0
sg67
g68
sg79
S'33-ambrosia_rice.png'
p425
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'23-crunchie_redo.png'
p426
sg65
g66
sg55
g11
sS'binary.thisN'
p427
I5
sg56
Vr
sS'binary.thisIndex'
p428
g59
(g98
S'\x05\x00\x00\x00'
tRp429
sg24
S'right'
p430
sS'binary.thisTrialN'
p431
I5
sg25
F1.2166806174536759
sg27
F4.4340000000000002
sg69
Vn
sa(dp432
g63
g64
sS'binary.thisRepN'
p433
I0
sg67
g68
sg79
S'51-mars.png'
p434
sg26
F5.4999999999999991
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'27-hartleys_raspberries_jelly.png'
p435
sg65
g66
sg55
g11
sS'binary.thisN'
p436
I6
sg56
Vr
sS'binary.thisIndex'
p437
g59
(g98
S'\x06\x00\x00\x00'
tRp438
sg24
S'left'
p439
sS'binary.thisTrialN'
p440
I6
sg25
F1.3834115261633997
sg27
F4.7839999999999998
sg69
Vn
sa(dp441
g63
g64
sS'binary.thisRepN'
p442
I0
sg67
g68
sg79
S'43-mrporky_pork_crackles_redo.png'
p443
sg26
F5.3999999999999995
sg28
F3.7000000000000002
sg58
g62
sg57
Vn
sg80
S'18-mms.png'
p444
sg65
g66
sg55
g11
sS'binary.thisN'
p445
I7
sg56
Vr
sS'binary.thisIndex'
p446
g59
(g98
S'\x07\x00\x00\x00'
tRp447
sg24
S'right'
p448
sS'binary.thisTrialN'
p449
I7
sg25
F0.8667341588261479
sg27
F2.3010000000000002
sg69
Vn
sa(dp450
g63
g64
sS'binary.thisRepN'
p451
I0
sg67
g68
sg79
S'25-kitkat.png'
p452
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'31-hobnobs.png'
p453
sg65
g66
sg55
g11
sS'binary.thisN'
p454
I8
sg56
Vr
sS'binary.thisIndex'
p455
g59
(g98
S'\x08\x00\x00\x00'
tRp456
sg24
S'left'
p457
sS'binary.thisTrialN'
p458
I8
sg25
F1.0667280007110094
sg27
F5.0170000000000003
sg69
Vn
sa(dp459
g63
g64
sS'binary.thisRepN'
p460
I0
sg67
g68
sg79
S'2-steamed_puddings.png'
p461
sg26
F5.1000000000000005
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'20-fruit_pastilles.png'
p462
sg65
g66
sg55
g11
sS'binary.thisN'
p463
I9
sg56
Vr
sS'binary.thisIndex'
p464
g59
(g98
S'\t\x00\x00\x00'
tRp465
sg24
S'left'
p466
sS'binary.thisTrialN'
p467
I9
sg25
F0.75010662658678484
sg27
F2.3170000000000002
sg69
Vn
sa(dp468
g63
g64
sS'binary.thisRepN'
p469
I0
sg67
g68
sg79
S'13-mccoys_steak_crisps.png'
p470
sg26
F5.2000000000000011
sg28
F2.7999999999999998
sg58
g62
sg57
Vn
sg80
S'3-ellas_strawberries_apples.png'
p471
sg65
g66
sg55
g11
sS'binary.thisN'
p472
I10
sg56
Vr
sS'binary.thisIndex'
p473
g59
(g98
S'\n\x00\x00\x00'
tRp474
sg24
S'right'
p475
sS'binary.thisTrialN'
p476
I10
sg25
F1.0671944207460911
sg27
F6.3339999999999996
sg69
Vn
sa(dp477
g63
g64
sS'binary.thisRepN'
p478
I0
sg67
g68
sg79
S'5-pineapple.png'
p479
sg26
F4.8000000000000016
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'40-sardines.png'
p480
sg65
g66
sg55
g11
sS'binary.thisN'
p481
I11
sg56
Vr
sS'binary.thisIndex'
p482
g59
(g98
S'\x0b\x00\x00\x00'
tRp483
sg24
S'left'
p484
sS'binary.thisTrialN'
p485
I11
sg25
F1.4001105609349906
sg27
F3.0510000000000002
sg69
Vn
sa(dp486
g63
g64
sS'binary.thisRepN'
p487
I0
sg67
g68
sg79
S'7-olives.png'
p488
sg26
F5.1000000000000005
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'22-daim.png'
p489
sg65
g66
sg55
g11
sS'binary.thisN'
p490
I12
sg56
Vr
sS'binary.thisIndex'
p491
g59
(g98
S'\x0c\x00\x00\x00'
tRp492
sg24
S'right'
p493
sS'binary.thisTrialN'
p494
I12
sg25
F1.5167782919670572
sg27
F3.3340000000000001
sg69
Vn
sa(dp495
g63
g64
sS'binary.thisRepN'
p496
I0
sg67
g68
sg79
S'31-hobnobs.png'
p497
sg26
F4.9000000000000021
sg28
F3
sg58
g62
sg57
Vn
sg80
S'25-kitkat.png'
p498
sg65
g66
sg55
g11
sS'binary.thisN'
p499
I13
sg56
Vr
sS'binary.thisIndex'
p500
g59
(g98
S'\r\x00\x00\x00'
tRp501
sg24
S'right'
p502
sS'binary.thisTrialN'
p503
I13
sg25
F1.1668523603802896
sg27
F2.5510000000000002
sg69
Vn
sa(dp504
g63
g64
sS'binary.thisRepN'
p505
I0
sg67
g68
sg79
S'4-corn.png'
p506
sg26
F2.2999999999999994
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'10-bounty_redo.png'
p507
sg65
g66
sg55
g11
sS'binary.thisN'
p508
I14
sg56
Vr
sS'binary.thisIndex'
p509
g59
(g98
S'\x0e\x00\x00\x00'
tRp510
sg24
S'left'
p511
sS'binary.thisTrialN'
p512
I14
sg25
F1.0835182667869958
sg27
F5.734
sg69
Vn
sa(dp513
g63
g64
sS'binary.thisRepN'
p514
I0
sg67
g68
sg79
S'22-daim.png'
p515
sg26
F4.7000000000000011
sg28
F3.6000000000000001
sg58
g62
sg57
Vn
sg80
S'7-olives.png'
p516
sg65
g66
sg55
g11
sS'binary.thisN'
p517
I15
sg56
Vr
sS'binary.thisIndex'
p518
g59
(g98
S'\x0f\x00\x00\x00'
tRp519
sg24
S'left'
p520
sS'binary.thisTrialN'
p521
I15
sg25
F1.2333702439973422
sg27
F1.117
sg69
Vn
sa(dp522
g63
g64
sS'binary.thisRepN'
p523
I0
sg67
g68
sg79
S'41-peanuts_redo.png'
p524
sg26
F2.1999999999999993
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'45-chewy_nougat_redo.png'
p525
sg65
g66
sg55
g11
sS'binary.thisN'
p526
I16
sg56
Vr
sS'binary.thisIndex'
p527
g59
(g98
S'\x10\x00\x00\x00'
tRp528
sg24
S'left'
p529
sS'binary.thisTrialN'
p530
I16
sg25
F1.5500155663430633
sg27
F1.8340000000000001
sg69
Vn
sa(dp531
g63
g64
sS'binary.thisRepN'
p532
I0
sg67
g68
sg79
S'29-beans.png'
p533
sg26
F5.0000000000000018
sg28
F2.8999999999999999
sg58
g62
sg57
Vn
sg80
S'46-pistachios.png'
p534
sg65
g66
sg55
g11
sS'binary.thisN'
p535
I17
sg56
Vr
sS'binary.thisIndex'
p536
g59
(g98
S'\x11\x00\x00\x00'
tRp537
sg24
S'right'
p538
sS'binary.thisTrialN'
p539
I17
sg25
F1.250036207424273
sg27
F5.8179999999999996
sg69
Vn
sa(dp540
g63
g64
sS'binary.thisRepN'
p541
I0
sg67
g68
sg79
S'8-liquorice_catherine_wheels.png'
p542
sg26
F3.2000000000000002
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'17-jacobs_mini_cheddars_redo.png'
p543
sg65
g66
sg55
g11
sS'binary.thisN'
p544
I18
sg56
Vr
sS'binary.thisIndex'
p545
g59
(g98
S'\x12\x00\x00\x00'
tRp546
sg24
S'right'
p547
sS'binary.thisTrialN'
p548
I18
sg25
F2.8001258992007934
sg27
F4.7670000000000003
sg69
Vn
sa(dp549
g63
g64
sS'binary.thisRepN'
p550
I0
sg67
g68
sg79
S'50-polo.png'
p551
sg26
F5.4999999999999991
sg28
F3.7999999999999998
sg58
g62
sg57
Vn
sg80
S'48-twix.png'
p552
sg65
g66
sg55
g11
sS'binary.thisN'
p553
I19
sg56
Vr
sS'binary.thisIndex'
p554
g59
(g98
S'\x13\x00\x00\x00'
tRp555
sg24
S'right'
p556
sS'binary.thisTrialN'
p557
I19
sg25
F1.0667490979503782
sg27
F1.6339999999999999
sg69
Vn
sa(dp558
g63
g64
sS'binary.thisRepN'
p559
I0
sg67
g68
sg79
S'42-mrkipling_lemon_slices.png'
p560
sg26
F4.6000000000000014
sg28
F3.2000000000000002
sg58
g62
sg57
Vn
sg80
S'16-skips_prawn.png'
p561
sg65
g66
sg55
g11
sS'binary.thisN'
p562
I20
sg56
Vr
sS'binary.thisIndex'
p563
g59
(g98
S'\x14\x00\x00\x00'
tRp564
sg24
S'left'
p565
sS'binary.thisTrialN'
p566
I20
sg25
F1.6167743576152134
sg27
F2.6840000000000002
sg69
Vn
sa(dp567
g63
g64
sS'binary.thisRepN'
p568
I0
sg67
g68
sg79
S'19-caramello_redo.png'
p569
sg26
F5.5999999999999996
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'30-spaghetti_hoops.png'
p570
sg65
g66
sg55
g11
sS'binary.thisN'
p571
I21
sg56
Vr
sS'binary.thisIndex'
p572
g59
(g98
S'\x15\x00\x00\x00'
tRp573
sg24
S'left'
p574
sS'binary.thisTrialN'
p575
I21
sg25
F1.3169061868502467
sg27
F1.8340000000000001
sg69
Vn
sa(dp576
g63
g64
sS'binary.thisRepN'
p577
I0
sg67
g68
sg79
S'23-crunchie_redo.png'
p578
sg26
F5.8999999999999977
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'33-ambrosia_rice.png'
p579
sg65
g66
sg55
g11
sS'binary.thisN'
p580
I22
sg56
Vr
sS'binary.thisIndex'
p581
g59
(g98
S'\x16\x00\x00\x00'
tRp582
sg24
S'left'
p583
sS'binary.thisTrialN'
p584
I22
sg25
F1.1334277767382446
sg27
F1.6839999999999999
sg69
Vn
sa(dp585
g63
g64
sS'binary.thisRepN'
p586
I0
sg67
g68
sg79
S'44-crunch.png'
p587
sg26
F4.3000000000000007
sg28
F3.2999999999999998
sg58
g62
sg57
Vn
sg80
S'26-walkers_smoky_bacon.png'
p588
sg65
g66
sg55
g11
sS'binary.thisN'
p589
I23
sg56
Vr
sS'binary.thisIndex'
p590
g59
(g98
S'\x17\x00\x00\x00'
tRp591
sg24
S'left'
p592
sS'binary.thisTrialN'
p593
I23
sg25
F1.250192441031686
sg27
F2.5169999999999999
sg69
Vn
sa(dp594
g63
g64
sS'binary.thisRepN'
p595
I0
sg67
g68
sg79
S'35-raisins.png'
p596
sg26
F3.7999999999999998
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'49-yorkie.png'
p597
sg65
g66
sg55
g11
sS'binary.thisN'
p598
I24
sg56
Vr
sS'binary.thisIndex'
p599
g59
(g98
S'\x18\x00\x00\x00'
tRp600
sg24
S'right'
p601
sS'binary.thisTrialN'
p602
I24
sg25
F1.0834201931356802
sg27
F3.5009999999999999
sg69
Vn
sa(dp603
g63
g64
sS'binary.thisRepN'
p604
I0
sg67
g68
sg79
S'16-skips_prawn.png'
p605
sg26
F3.9000000000000004
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'42-mrkipling_lemon_slices.png'
p606
sg65
g66
sg55
g11
sS'binary.thisN'
p607
I25
sg56
Vr
sS'binary.thisIndex'
p608
g59
(g98
S'\x19\x00\x00\x00'
tRp609
sg24
S'right'
p610
sS'binary.thisTrialN'
p611
I25
sg25
F1.2832629331787757
sg27
F6.2839999999999998
sg69
Vn
sa(dp612
g63
g64
sS'binary.thisRepN'
p613
I0
sg67
g68
sg79
S'10-bounty_redo.png'
p614
sg26
F2.3999999999999986
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'4-corn.png'
p615
sg65
g66
sg55
g11
sS'binary.thisN'
p616
I26
sg56
Vr
sS'binary.thisIndex'
p617
g59
(g98
S'\x1a\x00\x00\x00'
tRp618
sg24
S'right'
p619
sS'binary.thisTrialN'
p620
I26
sg25
F0.95003945753705921
sg27
F5.4180000000000001
sg69
Vn
sa(dp621
g63
g64
sS'binary.thisRepN'
p622
I0
sg67
g68
sg79
S'3-ellas_strawberries_apples.png'
p623
sg26
F5.3999999999999995
sg28
F3.3999999999999999
sg58
g62
sg57
Vn
sg80
S'13-mccoys_steak_crisps.png'
p624
sg65
g66
sg55
g11
sS'binary.thisN'
p625
I27
sg56
Vr
sS'binary.thisIndex'
p626
g59
(g98
S'\x1b\x00\x00\x00'
tRp627
sg24
S'left'
p628
sS'binary.thisTrialN'
p629
I27
sg25
F0.75011631991219474
sg27
F3.1840000000000002
sg69
Vn
sa(dp630
g63
g64
sS'binary.thisRepN'
p631
I0
sg67
g68
sg79
S'46-pistachios.png'
p632
sg26
F4.6000000000000005
sg28
F4.0999999999999996
sg58
g62
sg57
Vn
sg80
S'29-beans.png'
p633
sg65
g66
sg55
g11
sS'binary.thisN'
p634
I28
sg56
Vr
sS'binary.thisIndex'
p635
g59
(g98
S'\x1c\x00\x00\x00'
tRp636
sg24
S'left'
p637
sS'binary.thisTrialN'
p638
I28
sg25
F0.80012219292621012
sg27
F3.1669999999999998
sg69
Vn
sa(dp639
g63
g64
sS'binary.thisRepN'
p640
I0
sg67
g68
sg79
S'49-yorkie.png'
p641
sg26
F4.5000000000000018
sg28
F3
sg58
g62
sg57
Vn
sg80
S'35-raisins.png'
p642
sg65
g66
sg55
g11
sS'binary.thisN'
p643
I29
sg56
Vr
sS'binary.thisIndex'
p644
g59
(g98
S'\x1d\x00\x00\x00'
tRp645
sg24
S'left'
p646
sS'binary.thisTrialN'
p647
I29
sg25
F2.2168351404725399
sg27
F1.8340000000000001
sg69
Vn
sa(dp648
g63
g64
sS'binary.thisRepN'
p649
I0
sg67
g68
sg79
S'36-fig_rolls.png'
p650
sg26
F2.5999999999999988
sg28
F4
sg58
g62
sg57
Vn
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p651
sg65
g66
sg55
g11
sS'binary.thisN'
p652
I30
sg56
Vr
sS'binary.thisIndex'
p653
g59
(g98
S'\x1e\x00\x00\x00'
tRp654
sg24
S'left'
p655
sS'binary.thisTrialN'
p656
I30
sg25
F2.5334750459587667
sg27
F1.7010000000000001
sg69
Vn
sa(dp657
g63
g64
sS'binary.thisRepN'
p658
I0
sg67
g68
sg79
S'27-hartleys_raspberries_jelly.png'
p659
sg26
F5.5999999999999988
sg28
F3.8999999999999999
sg58
g62
sg57
Vn
sg80
S'51-mars.png'
p660
sg65
g66
sg55
g11
sS'binary.thisN'
p661
I31
sg56
Vr
sS'binary.thisIndex'
p662
g59
(g98
S'\x1f\x00\x00\x00'
tRp663
sg24
S'right'
p664
sS'binary.thisTrialN'
p665
I31
sg25
F1.0335323506224086
sg27
F1.2669999999999999
sg69
Vn
sa(dp666
g63
g64
sS'binary.thisRepN'
p667
I0
sg67
g68
sg79
S'48-twix.png'
p668
sg26
F5.0000000000000018
sg28
F3.1000000000000001
sg58
g62
sg57
Vn
sg80
S'50-polo.png'
p669
sg65
g66
sg55
g11
sS'binary.thisN'
p670
I32
sg56
Vr
sS'binary.thisIndex'
p671
g59
(g98
S' \x00\x00\x00'
tRp672
sg24
S'left'
p673
sS'binary.thisTrialN'
p674
I32
sg25
F0.9833753757593513
sg27
F3.4510000000000001
sg69
Vn
sa(dp675
g63
g64
sS'binary.thisRepN'
p676
I0
sg67
g68
sg79
S'18-mms.png'
p677
sg26
F5.799999999999998
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'43-mrporky_pork_crackles_redo.png'
p678
sg65
g66
sg55
g11
sS'binary.thisN'
p679
I33
sg56
Vr
sS'binary.thisIndex'
p680
g59
(g98
S'!\x00\x00\x00'
tRp681
sg24
S'left'
p682
sS'binary.thisTrialN'
p683
I33
sg25
F1.4333817619517504
sg27
F1.3180000000000001
sg69
Vn
sa(dp684
g63
g64
sS'binary.thisRepN'
p685
I0
sg67
g68
sg79
S'6-sour_patch_kids.png'
p686
sg26
F5.6999999999999993
sg28
F3
sg58
g62
sg57
Vn
sg80
S'38-maltesers.png'
p687
sg65
g66
sg55
g11
sS'binary.thisN'
p688
I34
sg56
Vr
sS'binary.thisIndex'
p689
g59
(g98
S'"\x00\x00\x00'
tRp690
sg24
S'right'
p691
sS'binary.thisTrialN'
p692
I34
sg25
F1.299812861787359
sg27
F3.0339999999999998
sg69
Vn
sa(dp693
g63
g64
sS'binary.thisRepN'
p694
I0
sg67
g68
sg79
S'34-hula_hoops_bbq_beef_redo.png'
p695
sg26
F4.7000000000000011
sg28
F4
sg58
g62
sg57
Vn
sg80
S'36-fig_rolls.png'
p696
sg65
g66
sg55
g11
sS'binary.thisN'
p697
I35
sg56
Vr
sS'binary.thisIndex'
p698
g59
(g98
S'#\x00\x00\x00'
tRp699
sg24
S'right'
p700
sS'binary.thisTrialN'
p701
I35
sg25
F1.5335756854910869
sg27
F3.117
sg69
Vn
sa(dp702
g63
g64
sS'binary.thisRepN'
p703
I0
sg67
g68
sg79
S'21-nakd_banana_crunch.png'
p704
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'1-treacle_cookies.png'
p705
sg65
g66
sg55
g11
sS'binary.thisN'
p706
I36
sg56
Vr
sS'binary.thisIndex'
p707
g59
(g98
S'$\x00\x00\x00'
tRp708
sg24
S'right'
p709
sS'binary.thisTrialN'
p710
I36
sg25
F1.5167617562947271
sg27
F2.8170000000000002
sg69
Vn
sa(dp711
g63
g64
sS'binary.thisRepN'
p712
I0
sg67
g68
sg79
S'26-walkers_smoky_bacon.png'
p713
sg26
F4.7000000000000011
sg28
F3.5
sg58
g62
sg57
Vn
sg80
S'44-crunch.png'
p714
sg65
g66
sg55
g11
sS'binary.thisN'
p715
I37
sg56
Vr
sS'binary.thisIndex'
p716
g59
(g98
S'%\x00\x00\x00'
tRp717
sg24
S'right'
p718
sS'binary.thisTrialN'
p719
I37
sg25
F1.4000928848690819
sg27
F3.0670000000000002
sg69
Vn
sa(dp720
g63
g64
sS'binary.thisRepN'
p721
I0
sg67
g68
sg79
S'17-jacobs_mini_cheddars_redo.png'
p722
sg26
F3.3999999999999995
sg28
F4.2000000000000002
sg58
g62
sg57
Vn
sg80
S'8-liquorice_catherine_wheels.png'
p723
sg65
g66
sg55
g11
sS'binary.thisN'
p724
I38
sg56
Vr
sS'binary.thisIndex'
p725
g59
(g98
S'&\x00\x00\x00'
tRp726
sg24
S'left'
p727
sS'binary.thisTrialN'
p728
I38
sg25
F1.5334240134470747
sg27
F2.0169999999999999
sg69
Vn
sa(dp729
g63
g64
sS'binary.thisRepN'
p730
I0
sg67
g68
sg79
S'1-treacle_cookies.png'
p731
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg58
g62
sg57
Vn
sg80
S'21-nakd_banana_crunch.png'
p732
sg65
g66
sg55
g11
sS'binary.thisN'
p733
I39
sg56
Vr
sS'binary.thisIndex'
p734
g59
(g98
S"'\x00\x00\x00"
tRp735
sg24
S'left'
p736
sS'binary.thisTrialN'
p737
I39
sg25
F0.76681164841284044
sg27
F1.3340000000000001
sg69
Vn
sa(dp738
g63
g64
sg56
Vr
sg29
S'space'
p739
sg57
Vn
sg58
g62
sg30
F452.60453624847651
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp740
g63
g64
sg56
Vr
sg57
Vn
sg31
S'space'
p741
sg58
g62
sg55
g11
sg32
F3.7667469312073081
sg65
g66
sg67
g68
sg69
Vn
sa(dp742
g63
g64
sg81
S'52-aero_mousse.png'
p743
sg82
S'52-aero_mousse.png'
p744
sg56
Vr
sS'practice_loop.thisN'
p745
I0
sS'practice_loop.thisTrialN'
p746
I0
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p747
I0
sg83
S'14-discos_salt_vinegar.png'
p748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'14-discos_salt_vinegar.png'
p749
sS'practice_loop.thisIndex'
p750
g59
(g98
S'\x00\x00\x00\x00'
tRp751
sg34
cdatetime
datetime
p752
(S'\x07\xdf\n\x10\x0e,&\x01[\xa8'
tRp753
sa(dp754
g63
g64
sg81
S'12-topic.png'
p755
sg82
S'39-mackerel.png'
p756
sg56
Vr
sS'practice_loop.thisN'
p757
I1
sS'practice_loop.thisTrialN'
p758
I1
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p759
I0
sg83
S'39-mackerel.png'
p760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'12-topic.png'
p761
sS'practice_loop.thisIndex'
p762
g59
(g98
S'\x01\x00\x00\x00'
tRp763
sg34
g752
(S'\x07\xdf\n\x10\x0e,,\nA\x00'
tRp764
sa(dp765
g63
g64
sg81
S'32-hovis_crackers.png'
p766
sg82
S'32-hovis_crackers.png'
p767
sg56
Vr
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p770
I0
sg83
S'24-food_doctor_apple_walnut_bar.png'
p771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'24-food_doctor_apple_walnut_bar.png'
p772
sS'practice_loop.thisIndex'
p773
g59
(g98
S'\x02\x00\x00\x00'
tRp774
sg34
g752
(S'\x07\xdf\n\x10\x0e,2\r\xea\x80'
tRp775
sa(dp776
g63
g64
sg81
S'53-cheestrings.png'
p777
sg82
S'47-picnic.png'
p778
sg56
Vr
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p781
I0
sg83
S'47-picnic.png'
p782
sg33
g777
sg55
g11
sg65
g66
sg67
g68
sg84
S'53-cheestrings.png'
p783
sS'practice_loop.thisIndex'
p784
g59
(g98
S'\x03\x00\x00\x00'
tRp785
sg34
g752
(S'\x07\xdf\n\x10\x0e,9\x04x\x88'
tRp786
sa(dp787
g63
g64
sg81
g766
sg82
S'24-food_doctor_apple_walnut_bar.png'
p788
sg56
Vr
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p791
I0
sg83
g771
sg33
g771
sg55
g11
sg65
g66
sg67
g68
sg84
S'32-hovis_crackers.png'
p792
sS'practice_loop.thisIndex'
p793
g59
(g98
S'\x04\x00\x00\x00'
tRp794
sg34
g752
(S'\x07\xdf\n\x10\x0e-\x04\x01o0'
tRp795
sa(dp796
g63
g64
sg81
S'15-walnut_whip.png'
p797
sg82
S'28-maple_pecan.png'
p798
sg56
Vr
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p801
I0
sg83
S'28-maple_pecan.png'
p802
sg33
g797
sg55
g11
sg65
g66
sg67
g68
sg84
S'15-walnut_whip.png'
p803
sS'practice_loop.thisIndex'
p804
g59
(g98
S'\x05\x00\x00\x00'
tRp805
sg34
g752
(S'\x07\xdf\n\x10\x0e-\x0b\r\xa40'
tRp806
sa(dp807
g63
g64
sg81
S'37-nakd_cashew_cookie.png'
p808
sg82
S'37-nakd_cashew_cookie.png'
p809
sg56
Vr
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p812
I0
sg83
S'9-yu_mango_pieces.png'
p813
sg33
g813
sg55
g11
sg65
g66
sg67
g68
sg84
S'9-yu_mango_pieces.png'
p814
sS'practice_loop.thisIndex'
p815
g59
(g98
S'\x06\x00\x00\x00'
tRp816
sg34
g752
(S'\x07\xdf\n\x10\x0e-\x12\x06\xce0'
tRp817
sa(dp818
g63
g64
sg81
S'11-snickers.png'
p819
sg82
S'54-frubes_yogurt.png'
p820
sg56
Vr
sS'practice_loop.thisN'
p821
I7
sS'practice_loop.thisTrialN'
p822
I7
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p823
I0
sg83
S'54-frubes_yogurt.png'
p824
sg33
g824
sg55
g11
sg65
g66
sg67
g68
sg84
S'11-snickers.png'
p825
sS'practice_loop.thisIndex'
p826
g59
(g98
S'\x07\x00\x00\x00'
tRp827
sg34
g752
(S'\x07\xdf\n\x10\x0e-\x19\x01g`'
tRp828
sa(dp829
g63
g64
sg81
g797
sg82
S'15-walnut_whip.png'
p830
sg56
Vr
sS'practice_loop.thisN'
p831
I8
sS'practice_loop.thisTrialN'
p832
I8
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p833
I0
sg83
g802
sg33
g802
sg55
g11
sg65
g66
sg67
g68
sg84
S'28-maple_pecan.png'
p834
sS'practice_loop.thisIndex'
p835
g59
(g98
S'\x08\x00\x00\x00'
tRp836
sg34
g752
(S'\x07\xdf\n\x10\x0e-\x1f\x0e\x1dH'
tRp837
sa(dp838
g63
g64
sg81
g777
sg82
S'53-cheestrings.png'
p839
sg56
Vr
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p842
I0
sg83
g782
sg33
g782
sg55
g11
sg65
g66
sg67
g68
sg84
S'47-picnic.png'
p843
sS'practice_loop.thisIndex'
p844
g59
(g98
S'\t\x00\x00\x00'
tRp845
sg34
g752
(S"\x07\xdf\n\x10\x0e-'\x085\x90"
tRp846
sa(dp847
g63
g64
sg81
g819
sg82
S'11-snickers.png'
p848
sg56
Vr
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p851
I0
sg83
g824
sg33
g824
sg55
g11
sg65
g66
sg67
g68
sg84
S'54-frubes_yogurt.png'
p852
sS'practice_loop.thisIndex'
p853
g59
(g98
S'\n\x00\x00\x00'
tRp854
sg34
g752
(S'\x07\xdf\n\x10\x0e-/\x03\x01\x88'
tRp855
sa(dp856
g63
g64
sg81
g743
sg82
S'14-discos_salt_vinegar.png'
p857
sg56
Vr
sS'practice_loop.thisN'
p858
I11
sS'practice_loop.thisTrialN'
p859
I11
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p860
I0
sg83
g748
sg33
g743
sg55
g11
sg65
g66
sg67
g68
sg84
S'52-aero_mousse.png'
p861
sS'practice_loop.thisIndex'
p862
g59
(g98
S'\x0b\x00\x00\x00'
tRp863
sg34
g752
(S'\x07\xdf\n\x10\x0e-6\x04E\xc0'
tRp864
sa(dp865
g63
g64
sg81
g755
sg82
S'12-topic.png'
p866
sg56
Vr
sS'practice_loop.thisN'
p867
I12
sS'practice_loop.thisTrialN'
p868
I12
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p869
I0
sg83
g760
sg33
g755
sg55
g11
sg65
g66
sg67
g68
sg84
S'39-mackerel.png'
p870
sS'practice_loop.thisIndex'
p871
g59
(g98
S'\x0c\x00\x00\x00'
tRp872
sg34
g752
(S'\x07\xdf\n\x10\x0e.\x03\x06\xe5\xa0'
tRp873
sa(dp874
g63
g64
sg81
g808
sg82
S'9-yu_mango_pieces.png'
p875
sg56
Vr
sS'practice_loop.thisN'
p876
I13
sS'practice_loop.thisTrialN'
p877
I13
sg69
Vn
sg57
Vn
sg58
g62
sS'practice_loop.thisRepN'
p878
I0
sg83
g813
sg33
g813
sg55
g11
sg65
g66
sg67
g68
sg84
S'37-nakd_cashew_cookie.png'
p879
sS'practice_loop.thisIndex'
p880
g59
(g98
S'\r\x00\x00\x00'
tRp881
sg34
g752
(S'\x07\xdf\n\x10\x0e.\n\x06A\x90'
tRp882
sa(dp883
g63
g64
sg56
Vr
sg57
Vn
sg58
g62
sg35
S'space'
p884
sg55
g11
sg36
F258.50966595658247
sg65
g66
sg67
g68
sg69
Vn
sa(dp885
S'block_loop.thisRepN'
p886
I0
sg56
Vr
sS'block_loop.thisIndex'
p887
g59
(g98
S'\x00\x00\x00\x00'
tRp888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p889
I0
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p890
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p891
I0
sg69
Vn
sa(dp892
S'trial_loop.thisTrialN'
p893
I0
sS'img_left'
p894
S'40-sardines.png'
p895
sS'block_loop.thisIndex'
p896
g888
sg38
S'right'
p897
sg58
g62
sS'trial_loop.thisN'
p898
I0
sg33
S'40-sardines.png'
p899
sg63
g64
sS'trial_loop.thisIndex'
p900
g59
(g98
S'\x00\x00\x00\x00'
tRp901
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p902
I0
sS'img_right'
p903
S'5-pineapple.png'
p904
sS'block_loop.thisRepN'
p905
I0
sS'img_correct'
p906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p907
I0
sS'img_wrong'
p908
S'5-pineapple.png'
p909
sg55
g11
sS'block_loop.thisTrial'
p910
Nsg69
Vn
sS'block_loop.thisTrialN'
p911
I0
sg39
F1.3668399301168392
sg34
g752
(S'\x07\xdf\n\x10\x0e2,\ra\xc8'
tRp912
sa(dp913
S'trial_loop.thisTrialN'
p914
I1
sg894
S'26-walkers_smoky_bacon.png'
p915
sS'block_loop.thisIndex'
p916
g888
sg38
S'right'
p917
sg58
g62
sS'trial_loop.thisN'
p918
I1
sg33
S'26-walkers_smoky_bacon.png'
p919
sg63
g64
sS'trial_loop.thisIndex'
p920
g59
(g98
S'\x01\x00\x00\x00'
tRp921
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p922
I0
sg903
S'44-crunch.png'
p923
sS'block_loop.thisRepN'
p924
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p925
I0
sg908
S'44-crunch.png'
p926
sg55
g11
sS'block_loop.thisTrial'
p927
Nsg69
Vn
sS'block_loop.thisTrialN'
p928
I0
sg39
F1.0501030913728755
sg34
g752
(S'\x07\xdf\n\x10\x0e23\x04*h'
tRp929
sa(dp930
S'trial_loop.thisTrialN'
p931
I2
sg894
S'35-raisins.png'
p932
sS'block_loop.thisIndex'
p933
g888
sg38
S'left'
p934
sg58
g62
sS'trial_loop.thisN'
p935
I2
sg33
S'35-raisins.png'
p936
sg63
g64
sS'trial_loop.thisIndex'
p937
g59
(g98
S'\x02\x00\x00\x00'
tRp938
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p939
I0
sg903
S'49-yorkie.png'
p940
sS'block_loop.thisRepN'
p941
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p942
I0
sg908
S'49-yorkie.png'
p943
sg55
g11
sS'block_loop.thisTrial'
p944
Nsg69
Vn
sS'block_loop.thisTrialN'
p945
I0
sg39
F1.3500659146193357
sg34
g752
(S'\x07\xdf\n\x10\x0e29\x05r\x88'
tRp946
sa(dp947
S'trial_loop.thisTrialN'
p948
I3
sg894
S'33-ambrosia_rice.png'
p949
sS'block_loop.thisIndex'
p950
g888
sg38
S'left'
p951
sg58
g62
sS'trial_loop.thisN'
p952
I3
sg33
S'23-crunchie_redo.png'
p953
sg63
g64
sS'trial_loop.thisIndex'
p954
g59
(g98
S'\x03\x00\x00\x00'
tRp955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p956
I0
sg903
S'23-crunchie_redo.png'
p957
sS'block_loop.thisRepN'
p958
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p959
I0
sg908
S'33-ambrosia_rice.png'
p960
sg55
g11
sS'block_loop.thisTrial'
p961
Nsg69
Vn
sS'block_loop.thisTrialN'
p962
I0
sg39
F1.8500670550092764
sg34
g752
(S'\x07\xdf\n\x10\x0e3\x03\x0b>\xe8'
tRp963
sa(dp964
S'trial_loop.thisTrialN'
p965
I4
sg894
S'41-peanuts_redo.png'
p966
sS'block_loop.thisIndex'
p967
g888
sg38
S'right'
p968
sg58
g62
sS'trial_loop.thisN'
p969
I4
sg33
S'41-peanuts_redo.png'
p970
sg63
g64
sS'trial_loop.thisIndex'
p971
g59
(g98
S'\x04\x00\x00\x00'
tRp972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p973
I0
sg903
S'45-chewy_nougat_redo.png'
p974
sS'block_loop.thisRepN'
p975
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p976
I0
sg908
S'45-chewy_nougat_redo.png'
p977
sg55
g11
sS'block_loop.thisTrial'
p978
Nsg69
Vn
sS'block_loop.thisTrialN'
p979
I0
sg39
F1.1172125529737968
sg34
g752
(S'\x07\xdf\n\x10\x0e3\n\tj('
tRp980
sa(dp981
S'trial_loop.thisTrialN'
p982
I5
sg894
S'8-liquorice_catherine_wheels.png'
p983
sS'block_loop.thisIndex'
p984
g888
sg38
S'left'
p985
sg58
g62
sS'trial_loop.thisN'
p986
I5
sg33
S'17-jacobs_mini_cheddars_redo.png'
p987
sg63
g64
sS'trial_loop.thisIndex'
p988
g59
(g98
S'\x05\x00\x00\x00'
tRp989
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p990
I0
sg903
S'17-jacobs_mini_cheddars_redo.png'
p991
sS'block_loop.thisRepN'
p992
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p993
I0
sg908
S'8-liquorice_catherine_wheels.png'
p994
sg55
g11
sS'block_loop.thisTrial'
p995
Nsg69
Vn
sS'block_loop.thisTrialN'
p996
I0
sg39
F2.0000709893574822
sg34
g752
(S'\x07\xdf\n\x10\x0e3\x10\x0b\xa4x'
tRp997
sa(dp998
S'trial_loop.thisTrialN'
p999
I6
sg894
S'2-steamed_puddings.png'
p1000
sS'block_loop.thisIndex'
p1001
g888
sg38
S'left'
p1002
sg58
g62
sS'trial_loop.thisN'
p1003
I6
sg33
S'2-steamed_puddings.png'
p1004
sg63
g64
sS'trial_loop.thisIndex'
p1005
g59
(g98
S'\x06\x00\x00\x00'
tRp1006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1007
I0
sg903
S'20-fruit_pastilles.png'
p1008
sS'block_loop.thisRepN'
p1009
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1010
I0
sg908
S'20-fruit_pastilles.png'
p1011
sg55
g11
sS'block_loop.thisTrial'
p1012
Nsg69
Vn
sS'block_loop.thisTrialN'
p1013
I0
sg39
F1.233517924669286
sg34
g752
(S'\x07\xdf\n\x10\x0e3\x17\x0c1\x18'
tRp1014
sa(dp1015
S'trial_loop.thisTrialN'
p1016
I7
sg894
S'48-twix.png'
p1017
sS'block_loop.thisIndex'
p1018
g888
sg38
S'right'
p1019
sg58
g62
sS'trial_loop.thisN'
p1020
I7
sg33
S'48-twix.png'
p1021
sg63
g64
sS'trial_loop.thisIndex'
p1022
g59
(g98
S'\x07\x00\x00\x00'
tRp1023
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1024
I0
sg903
S'50-polo.png'
p1025
sS'block_loop.thisRepN'
p1026
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1027
I0
sg908
S'50-polo.png'
p1028
sg55
g11
sS'block_loop.thisTrial'
p1029
Nsg69
Vn
sS'block_loop.thisTrialN'
p1030
I0
sg39
F1.5001262983387278
sg34
g752
(S'\x07\xdf\n\x10\x0e3\x1e\x01\x11p'
tRp1031
sa(dp1032
S'trial_loop.thisTrialN'
p1033
I8
sg894
S'10-bounty_redo.png'
p1034
sS'block_loop.thisIndex'
p1035
g888
sg38
S'right'
p1036
sg58
g62
sS'trial_loop.thisN'
p1037
I8
sg33
S'4-corn.png'
p1038
sg63
g64
sS'trial_loop.thisIndex'
p1039
g59
(g98
S'\x08\x00\x00\x00'
tRp1040
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1041
I0
sg903
S'4-corn.png'
p1042
sS'block_loop.thisRepN'
p1043
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1044
I0
sg908
S'10-bounty_redo.png'
p1045
sg55
g11
sS'block_loop.thisTrial'
p1046
Nsg69
Vn
sS'block_loop.thisTrialN'
p1047
I0
sg39
F1.9668473996789544
sg34
g752
(S'\x07\xdf\n\x10\x0e3$\tC\x18'
tRp1048
sa(dp1049
S'trial_loop.thisTrialN'
p1050
I9
sg894
S'6-sour_patch_kids.png'
p1051
sS'block_loop.thisIndex'
p1052
g888
sg38
S'right'
p1053
sg58
g62
sS'trial_loop.thisN'
p1054
I9
sg33
S'6-sour_patch_kids.png'
p1055
sg63
g64
sS'trial_loop.thisIndex'
p1056
g59
(g98
S'\t\x00\x00\x00'
tRp1057
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1058
I0
sg903
S'38-maltesers.png'
p1059
sS'block_loop.thisRepN'
p1060
I0
sg906
S'38-maltesers.png'
p1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1062
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p1063
Nsg69
Vn
sS'block_loop.thisTrialN'
p1064
I0
sg39
F1.1332681219573715
sg34
g752
(S'\x07\xdf\n\x10\x0e3+\tR\xb8'
tRp1065
sa(dp1066
S'trial_loop.thisTrialN'
p1067
I10
sg894
S'21-nakd_banana_crunch.png'
p1068
sS'block_loop.thisIndex'
p1069
g888
sg38
S'right'
p1070
sg58
g62
sS'trial_loop.thisN'
p1071
I10
sg33
S'1-treacle_cookies.png'
p1072
sg63
g64
sS'trial_loop.thisIndex'
p1073
g59
(g98
S'\n\x00\x00\x00'
tRp1074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1075
I0
sg903
S'1-treacle_cookies.png'
p1076
sS'block_loop.thisRepN'
p1077
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1078
I0
sg908
S'21-nakd_banana_crunch.png'
p1079
sg55
g11
sS'block_loop.thisTrial'
p1080
Nsg69
Vn
sS'block_loop.thisTrialN'
p1081
I0
sg39
F1.0668927872538916
sg34
g752
(S'\x07\xdf\n\x10\x0e31\x0b\xcb\x88'
tRp1082
sa(dp1083
S'trial_loop.thisTrialN'
p1084
I11
sg894
g1051
sS'block_loop.thisIndex'
p1085
g888
sg38
S'left'
p1086
sg58
g62
sS'trial_loop.thisN'
p1087
I11
sg33
g1061
sg63
g64
sS'trial_loop.thisIndex'
p1088
g59
(g98
S'\x0b\x00\x00\x00'
tRp1089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1090
I0
sg903
g1059
sS'block_loop.thisRepN'
p1091
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1092
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p1093
Nsg69
Vn
sS'block_loop.thisTrialN'
p1094
I0
sg39
F2.9331037915726483
sg34
g752
(S'\x07\xdf\n\x10\x0e37\rR('
tRp1095
sa(dp1096
S'trial_loop.thisTrialN'
p1097
I12
sg894
S'27-hartleys_raspberries_jelly.png'
p1098
sS'block_loop.thisIndex'
p1099
g888
sg38
S'right'
p1100
sg58
g62
sS'trial_loop.thisN'
p1101
I12
sg33
S'51-mars.png'
p1102
sg63
g64
sS'trial_loop.thisIndex'
p1103
g59
(g98
S'\x0c\x00\x00\x00'
tRp1104
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1105
I0
sg903
S'51-mars.png'
p1106
sS'block_loop.thisRepN'
p1107
I0
sg906
S'27-hartleys_raspberries_jelly.png'
p1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1109
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p1110
Nsg69
Vn
sS'block_loop.thisTrialN'
p1111
I0
sg39
F2.3168121045673615
sg34
g752
(S'\x07\xdf\n\x10\x0e4\x03\x0c\xa6H'
tRp1112
sa(dp1113
S'trial_loop.thisTrialN'
p1114
I13
sg894
g895
sS'block_loop.thisIndex'
p1115
g888
sg38
S'left'
p1116
sg58
g62
sS'trial_loop.thisN'
p1117
I13
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1118
g59
(g98
S'\r\x00\x00\x00'
tRp1119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1120
I0
sg903
g904
sS'block_loop.thisRepN'
p1121
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1122
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1123
Nsg69
Vn
sS'block_loop.thisTrialN'
p1124
I0
sg39
F3.0333641429060663
sg34
g752
(S'\x07\xdf\n\x10\x0e4\x0b\x02\xee\x00'
tRp1125
sa(dp1126
S'trial_loop.thisTrialN'
p1127
I14
sg894
S'3-ellas_strawberries_apples.png'
p1128
sS'block_loop.thisIndex'
p1129
g888
sg38
S'left'
p1130
sg58
g62
sS'trial_loop.thisN'
p1131
I14
sg33
S'3-ellas_strawberries_apples.png'
p1132
sg63
g64
sS'trial_loop.thisIndex'
p1133
g59
(g98
S'\x0e\x00\x00\x00'
tRp1134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1135
I0
sg903
S'13-mccoys_steak_crisps.png'
p1136
sS'block_loop.thisRepN'
p1137
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1138
I0
sg908
S'13-mccoys_steak_crisps.png'
p1139
sg55
g11
sS'block_loop.thisTrial'
p1140
Nsg69
Vn
sS'block_loop.thisTrialN'
p1141
I0
sg39
F1.6172205357070197
sg34
g752
(S'\x07\xdf\n\x10\x0e4\x13\x03\xeb\xe8'
tRp1142
sa(dp1143
S'trial_loop.thisTrialN'
p1144
I15
sg894
g1000
sS'block_loop.thisIndex'
p1145
g888
sg38
S'left'
p1146
sg58
g62
sS'trial_loop.thisN'
p1147
I15
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1148
g59
(g98
S'\x0f\x00\x00\x00'
tRp1149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1150
I0
sg903
g1008
sS'block_loop.thisRepN'
p1151
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1152
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1153
Nsg69
Vn
sS'block_loop.thisTrialN'
p1154
I0
sg39
F2.2667016006525955
sg34
g752
(S'\x07\xdf\n\x10\x0e4\x19\r\xc7X'
tRp1155
sa(dp1156
S'trial_loop.thisTrialN'
p1157
I16
sg894
S'45-chewy_nougat_redo.png'
p1158
sS'block_loop.thisIndex'
p1159
g888
sg38
S'left'
p1160
sg58
g62
sS'trial_loop.thisN'
p1161
I16
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1162
g59
(g98
S'\x10\x00\x00\x00'
tRp1163
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1164
I0
sg903
S'41-peanuts_redo.png'
p1165
sS'block_loop.thisRepN'
p1166
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1167
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1168
Nsg69
Vn
sS'block_loop.thisTrialN'
p1169
I0
sg39
F3.1334879323767382
sg34
g752
(S'\x07\xdf\n\x10\x0e4!\x03\x18\xf8'
tRp1170
sa(dp1171
S'trial_loop.thisTrialN'
p1172
I17
sg894
S'44-crunch.png'
p1173
sS'block_loop.thisIndex'
p1174
g888
sg38
S'right'
p1175
sg58
g62
sS'trial_loop.thisN'
p1176
I17
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1177
g59
(g98
S'\x11\x00\x00\x00'
tRp1178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1179
I0
sg903
S'26-walkers_smoky_bacon.png'
p1180
sS'block_loop.thisRepN'
p1181
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1182
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1183
Nsg69
Vn
sS'block_loop.thisTrialN'
p1184
I0
sg39
F2.6167635238998628
sg34
g752
(S'\x07\xdf\n\x10\x0e4)\x05\x86\x10'
tRp1185
sa(dp1186
S'trial_loop.thisTrialN'
p1187
I18
sg894
S'42-mrkipling_lemon_slices.png'
p1188
sS'block_loop.thisIndex'
p1189
g888
sg38
S'left'
p1190
sg58
g62
sS'trial_loop.thisN'
p1191
I18
sg33
S'16-skips_prawn.png'
p1192
sg63
g64
sS'trial_loop.thisIndex'
p1193
g59
(g98
S'\x12\x00\x00\x00'
tRp1194
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1195
I0
sg903
S'16-skips_prawn.png'
p1196
sS'block_loop.thisRepN'
p1197
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1198
I0
sg908
S'42-mrkipling_lemon_slices.png'
p1199
sg55
g11
sS'block_loop.thisTrial'
p1200
Nsg69
Vn
sS'block_loop.thisTrialN'
p1201
I0
sg39
F2.1333847269670514
sg34
g752
(S'\x07\xdf\n\x10\x0e41\x00U\xf0'
tRp1202
sa(dp1203
S'trial_loop.thisTrialN'
p1204
I19
sg894
S'36-fig_rolls.png'
p1205
sS'block_loop.thisIndex'
p1206
g888
sg38
S'right'
p1207
sg58
g62
sS'trial_loop.thisN'
p1208
I19
sg33
S'36-fig_rolls.png'
p1209
sg63
g64
sS'trial_loop.thisIndex'
p1210
g59
(g98
S'\x13\x00\x00\x00'
tRp1211
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1212
I0
sg903
S'34-hula_hoops_bbq_beef_redo.png'
p1213
sS'block_loop.thisRepN'
p1214
I0
sg906
S'34-hula_hoops_bbq_beef_redo.png'
p1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1216
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1217
Nsg69
Vn
sS'block_loop.thisTrialN'
p1218
I0
sg39
F2.4168298376534949
sg34
g752
(S'\x07\xdf\n\x10\x0e48\x02\xc6\xf0'
tRp1219
sa(dp1220
S'trial_loop.thisTrialN'
p1221
I20
sg894
S'49-yorkie.png'
p1222
sS'block_loop.thisIndex'
p1223
g888
sg38
S'right'
p1224
sg58
g62
sS'trial_loop.thisN'
p1225
I20
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1226
g59
(g98
S'\x14\x00\x00\x00'
tRp1227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1228
I0
sg903
S'35-raisins.png'
p1229
sS'block_loop.thisRepN'
p1230
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1231
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1232
Nsg69
Vn
sS'block_loop.thisTrialN'
p1233
I0
sg39
F1.4334387815142691
sg34
g752
(S'\x07\xdf\n\x10\x0e5\x03\t\xc0\x18'
tRp1234
sa(dp1235
S'trial_loop.thisTrialN'
p1236
I21
sg894
g1068
sS'block_loop.thisIndex'
p1237
g888
sg38
S'right'
p1238
sg58
g62
sS'trial_loop.thisN'
p1239
I21
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1240
g59
(g98
S'\x15\x00\x00\x00'
tRp1241
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1242
I0
sg903
g1076
sS'block_loop.thisRepN'
p1243
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1244
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p1245
Nsg69
Vn
sS'block_loop.thisTrialN'
p1246
I0
sg39
F1.4334088462419459
sg34
g752
(S'\x07\xdf\n\x10\x0e5\n\x01~\xd0'
tRp1247
sa(dp1248
S'trial_loop.thisTrialN'
p1249
I22
sg894
g1128
sS'block_loop.thisIndex'
p1250
g888
sg38
S'left'
p1251
sg58
g62
sS'trial_loop.thisN'
p1252
I22
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1253
g59
(g98
S'\x16\x00\x00\x00'
tRp1254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1255
I0
sg903
g1136
sS'block_loop.thisRepN'
p1256
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1257
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1258
Nsg69
Vn
sS'block_loop.thisTrialN'
p1259
I0
sg39
F2.2000574187004531
sg34
g752
(S'\x07\xdf\n\x10\x0e5\x10\x08\xba`'
tRp1260
sa(dp1261
S'trial_loop.thisTrialN'
p1262
I23
sg894
g1017
sS'block_loop.thisIndex'
p1263
g888
sg38
S'left'
p1264
sg58
g62
sS'trial_loop.thisN'
p1265
I23
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1266
g59
(g98
S'\x17\x00\x00\x00'
tRp1267
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1268
I0
sg903
g1025
sS'block_loop.thisRepN'
p1269
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1270
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1271
Nsg69
Vn
sS'block_loop.thisTrialN'
p1272
I0
sg39
F2.5005086145174573
sg34
g752
(S'\x07\xdf\n\x10\x0e5\x17\x0c\\\x10'
tRp1273
sa(dp1274
S'trial_loop.thisTrialN'
p1275
I24
sg894
g932
sS'block_loop.thisIndex'
p1276
g888
sg38
S'left'
p1277
sg58
g62
sS'trial_loop.thisN'
p1278
I24
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1279
g59
(g98
S'\x18\x00\x00\x00'
tRp1280
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1281
I0
sg903
g940
sS'block_loop.thisRepN'
p1282
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1283
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1284
Nsg69
Vn
sS'block_loop.thisTrialN'
p1285
I0
sg39
F0.90021319614970707
sg34
g752
(S'\x07\xdf\n\x10\x0e5\x1f\x05\x05('
tRp1286
sa(dp1287
S'trial_loop.thisTrialN'
p1288
I25
sg894
S'43-mrporky_pork_crackles_redo.png'
p1289
sS'block_loop.thisIndex'
p1290
g888
sg38
S'right'
p1291
sg58
g62
sS'trial_loop.thisN'
p1292
I25
sg33
S'43-mrporky_pork_crackles_redo.png'
p1293
sg63
g64
sS'trial_loop.thisIndex'
p1294
g59
(g98
S'\x19\x00\x00\x00'
tRp1295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1296
I0
sg903
S'18-mms.png'
p1297
sS'block_loop.thisRepN'
p1298
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1299
I0
sg908
S'18-mms.png'
p1300
sg55
g11
sS'block_loop.thisTrial'
p1301
Nsg69
Vn
sS'block_loop.thisTrialN'
p1302
I0
sg39
F2.2501568038023834
sg34
g752
(S'\x07\xdf\n\x10\x0e5%\x04*h'
tRp1303
sa(dp1304
S'trial_loop.thisTrialN'
p1305
I26
sg894
g1158
sS'block_loop.thisIndex'
p1306
g888
sg38
S'right'
p1307
sg58
g62
sS'trial_loop.thisN'
p1308
I26
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1309
g59
(g98
S'\x1a\x00\x00\x00'
tRp1310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1311
I0
sg903
g1165
sS'block_loop.thisRepN'
p1312
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1313
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1314
Nsg69
Vn
sS'block_loop.thisTrialN'
p1315
I0
sg39
F1.5335004196640512
sg34
g752
(S'\x07\xdf\n\x10\x0e5,\x08\x83\xb0'
tRp1316
sa(dp1317
S'trial_loop.thisTrialN'
p1318
I27
sg894
S'13-mccoys_steak_crisps.png'
p1319
sS'block_loop.thisIndex'
p1320
g888
sg38
S'right'
p1321
sg58
g62
sS'trial_loop.thisN'
p1322
I27
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1323
g59
(g98
S'\x1b\x00\x00\x00'
tRp1324
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1325
I0
sg903
S'3-ellas_strawberries_apples.png'
p1326
sS'block_loop.thisRepN'
p1327
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1328
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1329
Nsg69
Vn
sS'block_loop.thisTrialN'
p1330
I0
sg39
F0.95010987669957103
sg34
g752
(S'\x07\xdf\n\x10\x0e53\x01\xec0'
tRp1331
sa(dp1332
S'trial_loop.thisTrialN'
p1333
I28
sg894
g1158
sS'block_loop.thisIndex'
p1334
g888
sg38
S'right'
p1335
sg58
g62
sS'trial_loop.thisN'
p1336
I28
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1337
g59
(g98
S'\x1c\x00\x00\x00'
tRp1338
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1339
I0
sg903
g1165
sS'block_loop.thisRepN'
p1340
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1341
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1342
Nsg69
Vn
sS'block_loop.thisTrialN'
p1343
I0
sg39
F0.86685133402716019
sg34
g752
(S'\x07\xdf\n\x10\x0e59\x01\x86\xa0'
tRp1344
sa(dp1345
S'trial_loop.thisTrialN'
p1346
I29
sg894
g895
sS'block_loop.thisIndex'
p1347
g888
sg38
S'left'
p1348
sg58
g62
sS'trial_loop.thisN'
p1349
I29
sg33
g909
sg63
g64
sS'trial_loop.thisIndex'
p1350
g59
(g98
S'\x1d\x00\x00\x00'
tRp1351
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1352
I0
sg903
g904
sS'block_loop.thisRepN'
p1353
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1354
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1355
Nsg69
Vn
sS'block_loop.thisTrialN'
p1356
I0
sg39
F0.76678057275057654
sg34
g752
(S'\x07\xdf\n\x10\x0e6\x02\x0f6\x88'
tRp1357
sa(dp1358
S'trial_loop.thisTrialN'
p1359
I30
sg894
S'46-pistachios.png'
p1360
sS'block_loop.thisIndex'
p1361
g888
sg38
S'left'
p1362
sg58
g62
sS'trial_loop.thisN'
p1363
I30
sg33
S'46-pistachios.png'
p1364
sg63
g64
sS'trial_loop.thisIndex'
p1365
g59
(g98
S'\x1e\x00\x00\x00'
tRp1366
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1367
I0
sg903
S'29-beans.png'
p1368
sS'block_loop.thisRepN'
p1369
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1370
I0
sg908
S'29-beans.png'
p1371
sg55
g11
sS'block_loop.thisTrial'
p1372
Nsg69
Vn
sS'block_loop.thisTrialN'
p1373
I0
sg39
F1.5667710504822026
sg34
g752
(S'\x07\xdf\n\x10\x0e6\x08\x0c5\x00'
tRp1374
sa(dp1375
S'trial_loop.thisTrialN'
p1376
I31
sg894
S'51-mars.png'
p1377
sS'block_loop.thisIndex'
p1378
g888
sg38
S'left'
p1379
sg58
g62
sS'trial_loop.thisN'
p1380
I31
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p1381
g59
(g98
S'\x1f\x00\x00\x00'
tRp1382
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1383
I0
sg903
S'27-hartleys_raspberries_jelly.png'
p1384
sS'block_loop.thisRepN'
p1385
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1386
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p1387
Nsg69
Vn
sS'block_loop.thisTrialN'
p1388
I0
sg39
F3.4167810859253223
sg34
g752
(S'\x07\xdf\n\x10\x0e6\x0f\x06\x16\x98'
tRp1389
sa(dp1390
S'trial_loop.thisTrialN'
p1391
I32
sg894
g895
sS'block_loop.thisIndex'
p1392
g888
sg38
S'left'
p1393
sg58
g62
sS'trial_loop.thisN'
p1394
I32
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1395
g59
(g98
S' \x00\x00\x00'
tRp1396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1397
I0
sg903
g904
sS'block_loop.thisRepN'
p1398
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1399
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1400
Nsg69
Vn
sS'block_loop.thisTrialN'
p1401
I0
sg39
F0.95019055938610109
sg34
g752
(S'\x07\xdf\n\x10\x0e6\x17\r\x07\xf0'
tRp1402
sa(dp1403
S'trial_loop.thisTrialN'
p1404
I33
sg894
g983
sS'block_loop.thisIndex'
p1405
g888
sg38
S'right'
p1406
sg58
g62
sS'trial_loop.thisN'
p1407
I33
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1408
g59
(g98
S'!\x00\x00\x00'
tRp1409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1410
I0
sg903
g991
sS'block_loop.thisRepN'
p1411
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1412
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1413
Nsg69
Vn
sS'block_loop.thisTrialN'
p1414
I0
sg39
F2.3837567796254007
sg34
g752
(S'\x07\xdf\n\x10\x0e6\x1d\x0c\xa6H'
tRp1415
sa(dp1416
S'trial_loop.thisTrialN'
p1417
I34
sg894
S'4-corn.png'
p1418
sS'block_loop.thisIndex'
p1419
g888
sg38
S'right'
p1420
sg58
g62
sS'trial_loop.thisN'
p1421
I34
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1422
g59
(g98
S'"\x00\x00\x00'
tRp1423
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1424
I0
sg903
S'10-bounty_redo.png'
p1425
sS'block_loop.thisRepN'
p1426
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1427
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1428
Nsg69
Vn
sS'block_loop.thisTrialN'
p1429
I0
sg39
F2.4500628355599474
sg34
g752
(S'\x07\xdf\n\x10\x0e6%\x03\xe4\x18'
tRp1430
sa(dp1431
S'trial_loop.thisTrialN'
p1432
I35
sg894
g1205
sS'block_loop.thisIndex'
p1433
g888
sg38
S'left'
p1434
sg58
g62
sS'trial_loop.thisN'
p1435
I35
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1436
g59
(g98
S'#\x00\x00\x00'
tRp1437
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1438
I0
sg903
g1213
sS'block_loop.thisRepN'
p1439
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1440
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1441
Nsg69
Vn
sS'block_loop.thisTrialN'
p1442
I0
sg39
F2.5667690547961683
sg34
g752
(S'\x07\xdf\n\x10\x0e6,\x0b\x17\xd8'
tRp1443
sa(dp1444
S'trial_loop.thisTrialN'
p1445
I36
sg894
g1222
sS'block_loop.thisIndex'
p1446
g888
sg38
S'right'
p1447
sg58
g62
sS'trial_loop.thisN'
p1448
I36
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1449
g59
(g98
S'$\x00\x00\x00'
tRp1450
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1451
I0
sg903
g1229
sS'block_loop.thisRepN'
p1452
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1453
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1454
Nsg69
Vn
sS'block_loop.thisTrialN'
p1455
I0
sg39
F1.0167503523807682
sg34
g752
(S'\x07\xdf\n\x10\x0e64\x050 '
tRp1456
sa(dp1457
S'trial_loop.thisTrialN'
p1458
I37
sg894
g1098
sS'block_loop.thisIndex'
p1459
g888
sg38
S'left'
p1460
sg58
g62
sS'trial_loop.thisN'
p1461
I37
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p1462
g59
(g98
S'%\x00\x00\x00'
tRp1463
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1464
I0
sg903
g1106
sS'block_loop.thisRepN'
p1465
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1466
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p1467
Nsg69
Vn
sS'block_loop.thisTrialN'
p1468
I0
sg39
F1.1502465525991283
sg34
g752
(S'\x07\xdf\n\x10\x0e6:\x05\xc0\xa8'
tRp1469
sa(dp1470
S'trial_loop.thisTrialN'
p1471
I38
sg894
g949
sS'block_loop.thisIndex'
p1472
g888
sg38
S'left'
p1473
sg58
g62
sS'trial_loop.thisN'
p1474
I38
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p1475
g59
(g98
S'&\x00\x00\x00'
tRp1476
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1477
I0
sg903
g957
sS'block_loop.thisRepN'
p1478
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1479
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1480
Nsg69
Vn
sS'block_loop.thisTrialN'
p1481
I0
sg39
F3.583477497799322
sg34
g752
(S'\x07\xdf\n\x10\x0e7\x04\x08\xb6x'
tRp1482
sa(dp1483
S'trial_loop.thisTrialN'
p1484
I39
sg894
S'31-hobnobs.png'
p1485
sS'block_loop.thisIndex'
p1486
g888
sg38
S'left'
p1487
sg58
g62
sS'trial_loop.thisN'
p1488
I39
sg33
S'31-hobnobs.png'
p1489
sg63
g64
sS'trial_loop.thisIndex'
p1490
g59
(g98
S"'\x00\x00\x00"
tRp1491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1492
I0
sg903
S'25-kitkat.png'
p1493
sS'block_loop.thisRepN'
p1494
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1495
I0
sg908
S'25-kitkat.png'
p1496
sg55
g11
sS'block_loop.thisTrial'
p1497
Nsg69
Vn
sS'block_loop.thisTrialN'
p1498
I0
sg39
F2.7667888405885606
sg34
g752
(S'\x07\xdf\n\x10\x0e7\r\x02\xc6\xf0'
tRp1499
sa(dp1500
S'trial_loop.thisTrialN'
p1501
I40
sg894
g966
sS'block_loop.thisIndex'
p1502
g888
sg38
S'left'
p1503
sg58
g62
sS'trial_loop.thisN'
p1504
I40
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1505
g59
(g98
S'(\x00\x00\x00'
tRp1506
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1507
I0
sg903
g974
sS'block_loop.thisRepN'
p1508
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1509
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1510
Nsg69
Vn
sS'block_loop.thisTrialN'
p1511
I0
sg39
F0.76659041250240989
sg34
g752
(S'\x07\xdf\n\x10\x0e7\x14\x0e\xfb\xf0'
tRp1512
sa(dp1513
S'trial_loop.thisTrialN'
p1514
I41
sg894
S'50-polo.png'
p1515
sS'block_loop.thisIndex'
p1516
g888
sg38
S'right'
p1517
sg58
g62
sS'trial_loop.thisN'
p1518
I41
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1519
g59
(g98
S')\x00\x00\x00'
tRp1520
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1521
I0
sg903
S'48-twix.png'
p1522
sS'block_loop.thisRepN'
p1523
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1524
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1525
Nsg69
Vn
sS'block_loop.thisTrialN'
p1526
I0
sg39
F0.98342412748752395
sg34
g752
(S'\x07\xdf\n\x10\x0e7\x1a\x0b\xfah'
tRp1527
sa(dp1528
S'trial_loop.thisTrialN'
p1529
I42
sg894
S'17-jacobs_mini_cheddars_redo.png'
p1530
sS'block_loop.thisIndex'
p1531
g888
sg38
S'left'
p1532
sg58
g62
sS'trial_loop.thisN'
p1533
I42
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p1534
g59
(g98
S'*\x00\x00\x00'
tRp1535
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1536
I0
sg903
S'8-liquorice_catherine_wheels.png'
p1537
sS'block_loop.thisRepN'
p1538
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1539
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p1540
Nsg69
Vn
sS'block_loop.thisTrialN'
p1541
I0
sg39
F1.9000777746878157
sg34
g752
(S'\x07\xdf\n\x10\x0e7 \x0cPX'
tRp1542
sa(dp1543
S'trial_loop.thisTrialN'
p1544
I43
sg894
g1017
sS'block_loop.thisIndex'
p1545
g888
sg38
S'left'
p1546
sg58
g62
sS'trial_loop.thisN'
p1547
I43
sg33
g1028
sg63
g64
sS'trial_loop.thisIndex'
p1548
g59
(g98
S'+\x00\x00\x00'
tRp1549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1550
I0
sg903
g1025
sS'block_loop.thisRepN'
p1551
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1552
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1553
Nsg69
Vn
sS'block_loop.thisTrialN'
p1554
I0
sg39
F1.9668428381155536
sg34
g752
(S"\x07\xdf\n\x10\x0e7'\x0b/H"
tRp1555
sa(dp1556
S'trial_loop.thisTrialN'
p1557
I44
sg894
g949
sS'block_loop.thisIndex'
p1558
g888
sg38
S'right'
p1559
sg58
g62
sS'trial_loop.thisN'
p1560
I44
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p1561
g59
(g98
S',\x00\x00\x00'
tRp1562
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1563
I0
sg903
g957
sS'block_loop.thisRepN'
p1564
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1565
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p1566
Nsg69
Vn
sS'block_loop.thisTrialN'
p1567
I0
sg39
F1.516715570443921
sg34
g752
(S'\x07\xdf\n\x10\x0e7.\x0b>\xe8'
tRp1568
sa(dp1569
S'trial_loop.thisTrialN'
p1570
I45
sg894
g1360
sS'block_loop.thisIndex'
p1571
g888
sg38
S'left'
p1572
sg58
g62
sS'trial_loop.thisN'
p1573
I45
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p1574
g59
(g98
S'-\x00\x00\x00'
tRp1575
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1576
I0
sg903
g1368
sS'block_loop.thisRepN'
p1577
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1578
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p1579
Nsg69
Vn
sS'block_loop.thisTrialN'
p1580
I0
sg39
F1.5667525191238383
sg34
g752
(S'\x07\xdf\n\x10\x0e75\x04h\xe8'
tRp1581
sa(dp1582
S'trial_loop.thisTrialN'
p1583
I46
sg894
g1205
sS'block_loop.thisIndex'
p1584
g888
sg38
S'left'
p1585
sg58
g62
sS'trial_loop.thisN'
p1586
I46
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p1587
g59
(g98
S'.\x00\x00\x00'
tRp1588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1589
I0
sg903
g1213
sS'block_loop.thisRepN'
p1590
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1591
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1592
Nsg69
Vn
sS'block_loop.thisTrialN'
p1593
I0
sg39
F1.05020914776469
sg34
g752
(S'\x07\xdf\n\x10\x0e7;\r\x8c\xc0'
tRp1594
sa(dp1595
S'trial_loop.thisTrialN'
p1596
I47
sg894
g1158
sS'block_loop.thisIndex'
p1597
g888
sg38
S'right'
p1598
sg58
g62
sS'trial_loop.thisN'
p1599
I47
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1600
g59
(g98
S'/\x00\x00\x00'
tRp1601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1602
I0
sg903
g1165
sS'block_loop.thisRepN'
p1603
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1604
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1605
Nsg69
Vn
sS'block_loop.thisTrialN'
p1606
I0
sg39
F0.86677521291130688
sg34
g752
(S'\x07\xdf\n\x10\x0e8\x05\x0e\xd4\xe0'
tRp1607
sa(dp1608
S'trial_loop.thisTrialN'
p1609
I48
sg894
g1000
sS'block_loop.thisIndex'
p1610
g888
sg38
S'left'
p1611
sg58
g62
sS'trial_loop.thisN'
p1612
I48
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1613
g59
(g98
S'0\x00\x00\x00'
tRp1614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1615
I0
sg903
g1008
sS'block_loop.thisRepN'
p1616
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1617
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1618
Nsg69
Vn
sS'block_loop.thisTrialN'
p1619
I0
sg39
F0.66692363483889494
sg34
g752
(S'\x07\xdf\n\x10\x0e8\x0b\rB\x88'
tRp1620
sa(dp1621
S'trial_loop.thisTrialN'
p1622
I49
sg894
g1377
sS'block_loop.thisIndex'
p1623
g888
sg38
S'right'
p1624
sg58
g62
sS'trial_loop.thisN'
p1625
I49
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p1626
g59
(g98
S'1\x00\x00\x00'
tRp1627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1628
I0
sg903
g1384
sS'block_loop.thisRepN'
p1629
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1630
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p1631
Nsg69
Vn
sS'block_loop.thisTrialN'
p1632
I0
sg39
F1.0667778928327607
sg34
g752
(S'\x07\xdf\n\x10\x0e8\x11\x08\x978'
tRp1633
sa(dp1634
S'trial_loop.thisTrialN'
p1635
I50
sg894
g1222
sS'block_loop.thisIndex'
p1636
g888
sg38
S'right'
p1637
sg58
g62
sS'trial_loop.thisN'
p1638
I50
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p1639
g59
(g98
S'2\x00\x00\x00'
tRp1640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1641
I0
sg903
g1229
sS'block_loop.thisRepN'
p1642
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1643
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p1644
Nsg69
Vn
sS'block_loop.thisTrialN'
p1645
I0
sg39
F0.89993237479575328
sg34
g752
(S'\x07\xdf\n\x10\x0e8\x17\n\x1d\xd8'
tRp1646
sa(dp1647
S'trial_loop.thisTrialN'
p1648
I51
sg894
g1319
sS'block_loop.thisIndex'
p1649
g888
sg38
S'right'
p1650
sg58
g62
sS'trial_loop.thisN'
p1651
I51
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1652
g59
(g98
S'3\x00\x00\x00'
tRp1653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1654
I0
sg903
g1326
sS'block_loop.thisRepN'
p1655
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1656
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1657
Nsg69
Vn
sS'block_loop.thisTrialN'
p1658
I0
sg39
F0.93349922225388582
sg34
g752
(S'\x07\xdf\n\x10\x0e8\x1d\t?0'
tRp1659
sa(dp1660
S'trial_loop.thisTrialN'
p1661
I52
sg894
g915
sS'block_loop.thisIndex'
p1662
g888
sg38
S'left'
p1663
sg58
g62
sS'trial_loop.thisN'
p1664
I52
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1665
g59
(g98
S'4\x00\x00\x00'
tRp1666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1667
I0
sg903
g923
sS'block_loop.thisRepN'
p1668
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1669
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1670
Nsg69
Vn
sS'block_loop.thisTrialN'
p1671
I0
sg39
F2.8334680895713973
sg34
g752
(S'\x07\xdf\n\x10\x0e8#\x08\x9f\x08'
tRp1672
sa(dp1673
S'trial_loop.thisTrialN'
p1674
I53
sg894
g1205
sS'block_loop.thisIndex'
p1675
g888
sg38
S'left'
p1676
sg58
g62
sS'trial_loop.thisN'
p1677
I53
sg33
g1209
sg63
g64
sS'trial_loop.thisIndex'
p1678
g59
(g98
S'5\x00\x00\x00'
tRp1679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1680
I0
sg903
g1213
sS'block_loop.thisRepN'
p1681
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1682
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1683
Nsg69
Vn
sS'block_loop.thisTrialN'
p1684
I0
sg39
F0.93349580107678776
sg34
g752
(S'\x07\xdf\n\x10\x0e8+\x06\x87\xe0'
tRp1685
sa(dp1686
S'trial_loop.thisTrialN'
p1687
I54
sg894
S'38-maltesers.png'
p1688
sS'block_loop.thisIndex'
p1689
g888
sg38
S'right'
p1690
sg58
g62
sS'trial_loop.thisN'
p1691
I54
sg33
g1061
sg63
g64
sS'trial_loop.thisIndex'
p1692
g59
(g98
S'6\x00\x00\x00'
tRp1693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1694
I0
sg903
S'6-sour_patch_kids.png'
p1695
sS'block_loop.thisRepN'
p1696
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1697
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg69
Vn
sS'block_loop.thisTrialN'
p1699
I0
sg39
F1.6998130898682575
sg34
g752
(S'\x07\xdf\n\x10\x0e81\x06&8'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I55
sg894
g1173
sS'block_loop.thisIndex'
p1703
g888
sg38
S'right'
p1704
sg58
g62
sS'trial_loop.thisN'
p1705
I55
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1706
g59
(g98
S'7\x00\x00\x00'
tRp1707
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1708
I0
sg903
g1180
sS'block_loop.thisRepN'
p1709
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1710
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1711
Nsg69
Vn
sS'block_loop.thisTrialN'
p1712
I0
sg39
F1.0834296013636049
sg34
g752
(S'\x07\xdf\n\x10\x0e88\x01\xec0'
tRp1713
sa(dp1714
S'trial_loop.thisTrialN'
p1715
I56
sg894
S'5-pineapple.png'
p1716
sS'block_loop.thisIndex'
p1717
g888
sg38
S'right'
p1718
sg58
g62
sS'trial_loop.thisN'
p1719
I56
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1720
g59
(g98
S'8\x00\x00\x00'
tRp1721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1722
I0
sg903
S'40-sardines.png'
p1723
sS'block_loop.thisRepN'
p1724
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1725
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1726
Nsg69
Vn
sS'block_loop.thisTrialN'
p1727
I0
sg39
F0.93353001281866455
sg34
g752
(S'\x07\xdf\n\x10\x0e9\x02\x03\xeb\xe8'
tRp1728
sa(dp1729
S'trial_loop.thisTrialN'
p1730
I57
sg894
S'34-hula_hoops_bbq_beef_redo.png'
p1731
sS'block_loop.thisIndex'
p1732
g888
sg38
S'right'
p1733
sg58
g62
sS'trial_loop.thisN'
p1734
I57
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p1735
g59
(g98
S'9\x00\x00\x00'
tRp1736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1737
I0
sg903
S'36-fig_rolls.png'
p1738
sS'block_loop.thisRepN'
p1739
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1740
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1741
Nsg69
Vn
sS'block_loop.thisTrialN'
p1742
I0
sg39
F0.70015891352886683
sg34
g752
(S'\x07\xdf\n\x10\x0e9\x08\x03K\xc0'
tRp1743
sa(dp1744
S'trial_loop.thisTrialN'
p1745
I58
sg894
g1068
sS'block_loop.thisIndex'
p1746
g888
sg38
S'right'
p1747
sg58
g62
sS'trial_loop.thisN'
p1748
I58
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1749
g59
(g98
S':\x00\x00\x00'
tRp1750
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1751
I0
sg903
g1076
sS'block_loop.thisRepN'
p1752
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1753
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p1754
Nsg69
Vn
sS'block_loop.thisTrialN'
p1755
I0
sg39
F0.66693874502016115
sg34
g752
(S'\x07\xdf\n\x10\x0e9\r\x0e\x9aH'
tRp1756
sa(dp1757
S'trial_loop.thisTrialN'
p1758
I59
sg894
g1716
sS'block_loop.thisIndex'
p1759
g888
sg38
S'right'
p1760
sg58
g62
sS'trial_loop.thisN'
p1761
I59
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p1762
g59
(g98
S';\x00\x00\x00'
tRp1763
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1764
I0
sg903
g1723
sS'block_loop.thisRepN'
p1765
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1766
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p1767
Nsg69
Vn
sS'block_loop.thisTrialN'
p1768
I0
sg39
F0.78363983249801095
sg34
g752
(S'\x07\xdf\n\x10\x0e9\x13\t\xee\xf8'
tRp1769
sa(dp1770
S'trial_loop.thisTrialN'
p1771
I60
sg894
S'29-beans.png'
p1772
sS'block_loop.thisIndex'
p1773
g888
sg38
S'right'
p1774
sg58
g62
sS'trial_loop.thisN'
p1775
I60
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p1776
g59
(g98
S'<\x00\x00\x00'
tRp1777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1778
I0
sg903
S'46-pistachios.png'
p1779
sS'block_loop.thisRepN'
p1780
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1781
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p1782
Nsg69
Vn
sS'block_loop.thisTrialN'
p1783
I0
sg39
F1.1002173015622247
sg34
g752
(S'\x07\xdf\n\x10\x0e9\x19\x07+\xf0'
tRp1784
sa(dp1785
S'trial_loop.thisTrialN'
p1786
I61
sg894
g1319
sS'block_loop.thisIndex'
p1787
g888
sg38
S'right'
p1788
sg58
g62
sS'trial_loop.thisN'
p1789
I61
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1790
g59
(g98
S'=\x00\x00\x00'
tRp1791
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1792
I0
sg903
g1326
sS'block_loop.thisRepN'
p1793
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1794
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1795
Nsg69
Vn
sS'block_loop.thisTrialN'
p1796
I0
sg39
F0.65010856524895644
sg34
g752
(S'\x07\xdf\n\x10\x0e9\x1f\t+\xa8'
tRp1797
sa(dp1798
S'trial_loop.thisTrialN'
p1799
I62
sg894
S'18-mms.png'
p1800
sS'block_loop.thisIndex'
p1801
g888
sg38
S'right'
p1802
sg58
g62
sS'trial_loop.thisN'
p1803
I62
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p1804
g59
(g98
S'>\x00\x00\x00'
tRp1805
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1806
I0
sg903
S'43-mrporky_pork_crackles_redo.png'
p1807
sS'block_loop.thisRepN'
p1808
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1809
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p1810
Nsg69
Vn
sS'block_loop.thisTrialN'
p1811
I0
sg39
F2.3167510936327744
sg34
g752
(S'\x07\xdf\n\x10\x0e9%\x04A\xd8'
tRp1812
sa(dp1813
S'trial_loop.thisTrialN'
p1814
I63
sg894
g1515
sS'block_loop.thisIndex'
p1815
g888
sg38
S'right'
p1816
sg58
g62
sS'trial_loop.thisN'
p1817
I63
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p1818
g59
(g98
S'?\x00\x00\x00'
tRp1819
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1820
I0
sg903
g1522
sS'block_loop.thisRepN'
p1821
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1822
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p1823
Nsg69
Vn
sS'block_loop.thisTrialN'
p1824
I0
sg39
F0.96721203979541315
sg34
g752
(S'\x07\xdf\n\x10\x0e9,\t\x918'
tRp1825
sa(dp1826
S'trial_loop.thisTrialN'
p1827
I64
sg894
g1289
sS'block_loop.thisIndex'
p1828
g888
sg38
S'left'
p1829
sg58
g62
sS'trial_loop.thisN'
p1830
I64
sg33
g1300
sg63
g64
sS'trial_loop.thisIndex'
p1831
g59
(g98
S'@\x00\x00\x00'
tRp1832
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1833
I0
sg903
g1297
sS'block_loop.thisRepN'
p1834
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1835
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p1836
Nsg69
Vn
sS'block_loop.thisTrialN'
p1837
I0
sg39
F1.0502028756091022
sg34
g752
(S'\x07\xdf\n\x10\x0e92\t\xa8\xa8'
tRp1838
sa(dp1839
S'trial_loop.thisTrialN'
p1840
I65
sg894
g1188
sS'block_loop.thisIndex'
p1841
g888
sg38
S'right'
p1842
sg58
g62
sS'trial_loop.thisN'
p1843
I65
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p1844
g59
(g98
S'A\x00\x00\x00'
tRp1845
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1846
I0
sg903
g1196
sS'block_loop.thisRepN'
p1847
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1848
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p1849
Nsg69
Vn
sS'block_loop.thisTrialN'
p1850
I0
sg39
F1.4333466949174181
sg34
g752
(S'\x07\xdf\n\x10\x0e98\n\xf0\xc8'
tRp1851
sa(dp1852
S'trial_loop.thisTrialN'
p1853
I66
sg894
S'1-treacle_cookies.png'
p1854
sS'block_loop.thisIndex'
p1855
g888
sg38
S'left'
p1856
sg58
g62
sS'trial_loop.thisN'
p1857
I66
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p1858
g59
(g98
S'B\x00\x00\x00'
tRp1859
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1860
I0
sg903
S'21-nakd_banana_crunch.png'
p1861
sS'block_loop.thisRepN'
p1862
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1863
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg69
Vn
sS'block_loop.thisTrialN'
p1865
I0
sg39
F0.68355681201501284
sg34
g752
(S'\x07\xdf\n\x10\x0e:\x03\x02\xab\x98'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I67
sg894
S'25-kitkat.png'
p1869
sS'block_loop.thisIndex'
p1870
g888
sg38
S'right'
p1871
sg58
g62
sS'trial_loop.thisN'
p1872
I67
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p1873
g59
(g98
S'C\x00\x00\x00'
tRp1874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1875
I0
sg903
S'31-hobnobs.png'
p1876
sS'block_loop.thisRepN'
p1877
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1878
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p1879
Nsg69
Vn
sS'block_loop.thisTrialN'
p1880
I0
sg39
F1.0834173421571904
sg34
g752
(S'\x07\xdf\n\x10\x0e:\x08\r\xbb\xa0'
tRp1881
sa(dp1882
S'trial_loop.thisTrialN'
p1883
I68
sg894
S'7-olives.png'
p1884
sS'block_loop.thisIndex'
p1885
g888
sg38
S'left'
p1886
sg58
g62
sS'trial_loop.thisN'
p1887
I68
sg33
S'7-olives.png'
p1888
sg63
g64
sS'trial_loop.thisIndex'
p1889
g59
(g98
S'D\x00\x00\x00'
tRp1890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1891
I0
sg903
S'22-daim.png'
p1892
sS'block_loop.thisRepN'
p1893
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1894
I0
sg908
S'22-daim.png'
p1895
sg55
g11
sS'block_loop.thisTrial'
p1896
Nsg69
Vn
sS'block_loop.thisTrialN'
p1897
I0
sg39
F2.2005150007098564
sg34
g752
(S'\x07\xdf\n\x10\x0e:\x0f\x00>\x80'
tRp1898
sa(dp1899
S'trial_loop.thisTrialN'
p1900
I69
sg894
g1128
sS'block_loop.thisIndex'
p1901
g888
sg38
S'left'
p1902
sg58
g62
sS'trial_loop.thisN'
p1903
I69
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p1904
g59
(g98
S'E\x00\x00\x00'
tRp1905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1906
I0
sg903
g1136
sS'block_loop.thisRepN'
p1907
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1908
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p1909
Nsg69
Vn
sS'block_loop.thisTrialN'
p1910
I0
sg39
F0.68352915752620902
sg34
g752
(S'\x07\xdf\n\x10\x0e:\x16\x03\xe00'
tRp1911
sa(dp1912
S'trial_loop.thisTrialN'
p1913
I70
sg894
g1731
sS'block_loop.thisIndex'
p1914
g888
sg38
S'right'
p1915
sg58
g62
sS'trial_loop.thisN'
p1916
I70
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p1917
g59
(g98
S'F\x00\x00\x00'
tRp1918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1919
I0
sg903
g1738
sS'block_loop.thisRepN'
p1920
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1921
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1922
Nsg69
Vn
sS'block_loop.thisTrialN'
p1923
I0
sg39
F0.90021975339914206
sg34
g752
(S'\x07\xdf\n\x10\x0e:\x1b\x0e\xb5\xa0'
tRp1924
sa(dp1925
S'trial_loop.thisTrialN'
p1926
I71
sg894
g966
sS'block_loop.thisIndex'
p1927
g888
sg38
S'left'
p1928
sg58
g62
sS'trial_loop.thisN'
p1929
I71
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p1930
g59
(g98
S'G\x00\x00\x00'
tRp1931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1932
I0
sg903
g974
sS'block_loop.thisRepN'
p1933
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1934
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p1935
Nsg69
Vn
sS'block_loop.thisTrialN'
p1936
I0
sg39
F1.2334318251305376
sg34
g752
(S'\x07\xdf\n\x10\x0e:!\r\x9c`'
tRp1937
sa(dp1938
S'trial_loop.thisTrialN'
p1939
I72
sg894
g1173
sS'block_loop.thisIndex'
p1940
g888
sg38
S'right'
p1941
sg58
g62
sS'trial_loop.thisN'
p1942
I72
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p1943
g59
(g98
S'H\x00\x00\x00'
tRp1944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1945
I0
sg903
g1180
sS'block_loop.thisRepN'
p1946
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1947
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p1948
Nsg69
Vn
sS'block_loop.thisTrialN'
p1949
I0
sg39
F0.96687876044234145
sg34
g752
(S'\x07\xdf\n\x10\x0e:(\x02|\xb8'
tRp1950
sa(dp1951
S'trial_loop.thisTrialN'
p1952
I73
sg894
g1034
sS'block_loop.thisIndex'
p1953
g888
sg38
S'right'
p1954
sg58
g62
sS'trial_loop.thisN'
p1955
I73
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p1956
g59
(g98
S'I\x00\x00\x00'
tRp1957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1958
I0
sg903
g1042
sS'block_loop.thisRepN'
p1959
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1960
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p1961
Nsg69
Vn
sS'block_loop.thisTrialN'
p1962
I0
sg39
F2.4168381054914789
sg34
g752
(S'\x07\xdf\n\x10\x0e:.\x02\x94('
tRp1963
sa(dp1964
S'trial_loop.thisTrialN'
p1965
I74
sg894
g1731
sS'block_loop.thisIndex'
p1966
g888
sg38
S'left'
p1967
sg58
g62
sS'trial_loop.thisN'
p1968
I74
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p1969
g59
(g98
S'J\x00\x00\x00'
tRp1970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1971
I0
sg903
g1738
sS'block_loop.thisRepN'
p1972
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1973
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p1974
Nsg69
Vn
sS'block_loop.thisTrialN'
p1975
I0
sg39
F2.7168186047965719
sg34
g752
(S'\x07\xdf\n\x10\x0e:5\tN\xd0'
tRp1976
sa(dp1977
S'trial_loop.thisTrialN'
p1978
I75
sg894
S'20-fruit_pastilles.png'
p1979
sS'block_loop.thisIndex'
p1980
g888
sg38
S'right'
p1981
sg58
g62
sS'trial_loop.thisN'
p1982
I75
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p1983
g59
(g98
S'K\x00\x00\x00'
tRp1984
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1985
I0
sg903
S'2-steamed_puddings.png'
p1986
sS'block_loop.thisRepN'
p1987
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p1988
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p1989
Nsg69
Vn
sS'block_loop.thisTrialN'
p1990
I0
sg39
F1.0668639923751471
sg34
g752
(S'\x07\xdf\n\x10\x0e;\x01\x05\x89\xf8'
tRp1991
sa(dp1992
S'trial_loop.thisTrialN'
p1993
I76
sg894
g1772
sS'block_loop.thisIndex'
p1994
g888
sg38
S'right'
p1995
sg58
g62
sS'trial_loop.thisN'
p1996
I76
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p1997
g59
(g98
S'L\x00\x00\x00'
tRp1998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p1999
I0
sg903
g1779
sS'block_loop.thisRepN'
p2000
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2001
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2002
Nsg69
Vn
sS'block_loop.thisTrialN'
p2003
I0
sg39
F0.68340827604697552
sg34
g752
(S'\x07\xdf\n\x10\x0e;\x07\x07\x10\x98'
tRp2004
sa(dp2005
S'trial_loop.thisTrialN'
p2006
I77
sg894
g915
sS'block_loop.thisIndex'
p2007
g888
sg38
S'left'
p2008
sg58
g62
sS'trial_loop.thisN'
p2009
I77
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2010
g59
(g98
S'M\x00\x00\x00'
tRp2011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2012
I0
sg903
g923
sS'block_loop.thisRepN'
p2013
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2014
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2015
Nsg69
Vn
sS'block_loop.thisTrialN'
p2016
I0
sg39
F1.0835573251897586
sg34
g752
(S'\x07\xdf\n\x10\x0e;\r\x02\xde`'
tRp2017
sa(dp2018
S'trial_loop.thisTrialN'
p2019
I78
sg894
g1979
sS'block_loop.thisIndex'
p2020
g888
sg38
S'right'
p2021
sg58
g62
sS'trial_loop.thisN'
p2022
I78
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2023
g59
(g98
S'N\x00\x00\x00'
tRp2024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2025
I0
sg903
g1986
sS'block_loop.thisRepN'
p2026
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2027
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2028
Nsg69
Vn
sS'block_loop.thisTrialN'
p2029
I0
sg39
F0.76687779110943666
sg34
g752
(S'\x07\xdf\n\x10\x0e;\x13\x04\x9f\x98'
tRp2030
sa(dp2031
S'trial_loop.thisTrialN'
p2032
I79
sg894
g1485
sS'block_loop.thisIndex'
p2033
g888
sg38
S'left'
p2034
sg58
g62
sS'trial_loop.thisN'
p2035
I79
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p2036
g59
(g98
S'O\x00\x00\x00'
tRp2037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2038
I0
sg903
g1493
sS'block_loop.thisRepN'
p2039
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2040
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p2041
Nsg69
Vn
sS'block_loop.thisTrialN'
p2042
I0
sg39
F0.85017026041896315
sg34
g752
(S'\x07\xdf\n\x10\x0e;\x19\x01\xa1\xf8'
tRp2043
sa(dp2044
S'trial_loop.thisTrialN'
p2045
I80
sg894
g1128
sS'block_loop.thisIndex'
p2046
g888
sg38
S'left'
p2047
sg58
g62
sS'trial_loop.thisN'
p2048
I80
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2049
g59
(g98
S'P\x00\x00\x00'
tRp2050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2051
I0
sg903
g1136
sS'block_loop.thisRepN'
p2052
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2053
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2054
Nsg69
Vn
sS'block_loop.thisTrialN'
p2055
I0
sg39
F0.71687647965518408
sg34
g752
(S'\x07\xdf\n\x10\x0e;\x1e\x0f\x13`'
tRp2056
sa(dp2057
S'trial_loop.thisTrialN'
p2058
I81
sg894
g966
sS'block_loop.thisIndex'
p2059
g888
sg38
S'left'
p2060
sg58
g62
sS'trial_loop.thisN'
p2061
I81
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2062
g59
(g98
S'Q\x00\x00\x00'
tRp2063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2064
I0
sg903
g974
sS'block_loop.thisRepN'
p2065
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2066
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2067
Nsg69
Vn
sS'block_loop.thisTrialN'
p2068
I0
sg39
F0.95012071041855961
sg34
g752
(S'\x07\xdf\n\x10\x0e;$\x0b\x1f\xa8'
tRp2069
sa(dp2070
S'trial_loop.thisTrialN'
p2071
I82
sg894
g1772
sS'block_loop.thisIndex'
p2072
g888
sg38
S'right'
p2073
sg58
g62
sS'trial_loop.thisN'
p2074
I82
sg33
g1371
sg63
g64
sS'trial_loop.thisIndex'
p2075
g59
(g98
S'R\x00\x00\x00'
tRp2076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2077
I0
sg903
g1779
sS'block_loop.thisRepN'
p2078
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2079
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2080
Nsg69
Vn
sS'block_loop.thisTrialN'
p2081
I0
sg39
F0.6501216797514644
sg34
g752
(S'\x07\xdf\n\x10\x0e;*\n\xf8\x98'
tRp2082
sa(dp2083
S'trial_loop.thisTrialN'
p2084
I83
sg894
S'19-caramello_redo.png'
p2085
sS'block_loop.thisIndex'
p2086
g888
sg38
S'left'
p2087
sg58
g62
sS'trial_loop.thisN'
p2088
I83
sg33
S'30-spaghetti_hoops.png'
p2089
sg63
g64
sS'trial_loop.thisIndex'
p2090
g59
(g98
S'S\x00\x00\x00'
tRp2091
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2092
I0
sg903
S'30-spaghetti_hoops.png'
p2093
sS'block_loop.thisRepN'
p2094
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2095
I0
sg908
S'19-caramello_redo.png'
p2096
sg55
g11
sS'block_loop.thisTrial'
p2097
Nsg69
Vn
sS'block_loop.thisTrialN'
p2098
I0
sg39
F1.8172186540650728
sg34
g752
(S'\x07\xdf\n\x10\x0e;0\x06\x0e\xc8'
tRp2099
sa(dp2100
S'trial_loop.thisTrialN'
p2101
I84
sg894
g1158
sS'block_loop.thisIndex'
p2102
g888
sg38
S'right'
p2103
sg58
g62
sS'trial_loop.thisN'
p2104
I84
sg33
g970
sg63
g64
sS'trial_loop.thisIndex'
p2105
g59
(g98
S'T\x00\x00\x00'
tRp2106
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2107
I0
sg903
g1165
sS'block_loop.thisRepN'
p2108
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2109
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p2110
Nsg69
Vn
sS'block_loop.thisTrialN'
p2111
I0
sg39
F0.65016273383662337
sg34
g752
(S'\x07\xdf\n\x10\x0e;7\x03\xc0\xf0'
tRp2112
sa(dp2113
S'trial_loop.thisTrialN'
p2114
I85
sg894
S'16-skips_prawn.png'
p2115
sS'block_loop.thisIndex'
p2116
g888
sg38
S'left'
p2117
sg58
g62
sS'trial_loop.thisN'
p2118
I85
sg33
g1199
sg63
g64
sS'trial_loop.thisIndex'
p2119
g59
(g98
S'U\x00\x00\x00'
tRp2120
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2121
I0
sg903
S'42-mrkipling_lemon_slices.png'
p2122
sS'block_loop.thisRepN'
p2123
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2124
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p2125
Nsg69
Vn
sS'block_loop.thisTrialN'
p2126
I0
sg39
F1.1833013643663435
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00\x00\x0e\x19`'
tRp2127
sa(dp2128
S'trial_loop.thisTrialN'
p2129
I86
sg894
g1688
sS'block_loop.thisIndex'
p2130
g888
sg38
S'left'
p2131
sg58
g62
sS'trial_loop.thisN'
p2132
I86
sg33
g1061
sg63
g64
sS'trial_loop.thisIndex'
p2133
g59
(g98
S'V\x00\x00\x00'
tRp2134
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2135
I0
sg903
g1695
sS'block_loop.thisRepN'
p2136
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2137
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p2138
Nsg69
Vn
sS'block_loop.thisTrialN'
p2139
I0
sg39
F1.1665855088176613
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00\x07\x02F\x08'
tRp2140
sa(dp2141
S'trial_loop.thisTrialN'
p2142
I87
sg894
g1000
sS'block_loop.thisIndex'
p2143
g888
sg38
S'left'
p2144
sg58
g62
sS'trial_loop.thisN'
p2145
I87
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2146
g59
(g98
S'W\x00\x00\x00'
tRp2147
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2148
I0
sg903
g1008
sS'block_loop.thisRepN'
p2149
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2150
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2151
Nsg69
Vn
sS'block_loop.thisTrialN'
p2152
I0
sg39
F0.70011643394900602
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00\r\x057\xf0'
tRp2153
sa(dp2154
S'trial_loop.thisTrialN'
p2155
I88
sg894
g1319
sS'block_loop.thisIndex'
p2156
g888
sg38
S'right'
p2157
sg58
g62
sS'trial_loop.thisN'
p2158
I88
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2159
g59
(g98
S'X\x00\x00\x00'
tRp2160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2161
I0
sg903
g1326
sS'block_loop.thisRepN'
p2162
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2163
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2164
Nsg69
Vn
sS'block_loop.thisTrialN'
p2165
I0
sg39
F0.75012401755157043
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00\x13\x01D8'
tRp2166
sa(dp2167
S'trial_loop.thisTrialN'
p2168
I89
sg894
g1530
sS'block_loop.thisIndex'
p2169
g888
sg38
S'left'
p2170
sg58
g62
sS'trial_loop.thisN'
p2171
I89
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2172
g59
(g98
S'Y\x00\x00\x00'
tRp2173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2174
I0
sg903
g1537
sS'block_loop.thisRepN'
p2175
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2176
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2177
Nsg69
Vn
sS'block_loop.thisTrialN'
p2178
I0
sg39
F1.5505392910417868
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00\x18\rFp'
tRp2179
sa(dp2180
S'trial_loop.thisTrialN'
p2181
I90
sg894
g1051
sS'block_loop.thisIndex'
p2182
g888
sg38
S'right'
p2183
sg58
g62
sS'trial_loop.thisN'
p2184
I90
sg33
g1061
sg63
g64
sS'trial_loop.thisIndex'
p2185
g59
(g98
S'Z\x00\x00\x00'
tRp2186
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2187
I0
sg903
g1059
sS'block_loop.thisRepN'
p2188
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2189
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p2190
Nsg69
Vn
sS'block_loop.thisTrialN'
p2191
I0
sg39
F1.1999145846930332
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00\x1f\x06\xe9\x88'
tRp2192
sa(dp2193
S'trial_loop.thisTrialN'
p2194
I91
sg894
g2115
sS'block_loop.thisIndex'
p2195
g888
sg38
S'left'
p2196
sg58
g62
sS'trial_loop.thisN'
p2197
I91
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p2198
g59
(g98
S'[\x00\x00\x00'
tRp2199
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2200
I0
sg903
g2122
sS'block_loop.thisRepN'
p2201
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2202
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p2203
Nsg69
Vn
sS'block_loop.thisTrialN'
p2204
I0
sg39
F1.1333009082081844
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00%\nXp'
tRp2205
sa(dp2206
S'trial_loop.thisTrialN'
p2207
I92
sg894
g915
sS'block_loop.thisIndex'
p2208
g888
sg38
S'left'
p2209
sg58
g62
sS'trial_loop.thisN'
p2210
I92
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p2211
g59
(g98
S'\\\x00\x00\x00'
tRp2212
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2213
I0
sg903
g923
sS'block_loop.thisRepN'
p2214
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2215
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2216
Nsg69
Vn
sS'block_loop.thisTrialN'
p2217
I0
sg39
F1.6502362890787481
sg34
g752
(S'\x07\xdf\n\x10\x0f\x00+\r\x0f\xc0'
tRp2218
sa(dp2219
S'trial_loop.thisTrialN'
p2220
I93
sg894
g1034
sS'block_loop.thisIndex'
p2221
g888
sg38
S'right'
p2222
sg58
g62
sS'trial_loop.thisN'
p2223
I93
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2224
g59
(g98
S']\x00\x00\x00'
tRp2225
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2226
I0
sg903
g1042
sS'block_loop.thisRepN'
p2227
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2228
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2229
Nsg69
Vn
sS'block_loop.thisTrialN'
p2230
I0
sg39
F2.066868839036033
sg34
g752
(S'\x07\xdf\n\x10\x0f\x002\x08\x1e '
tRp2231
sa(dp2232
S'trial_loop.thisTrialN'
p2233
I94
sg894
g1854
sS'block_loop.thisIndex'
p2234
g888
sg38
S'left'
p2235
sg58
g62
sS'trial_loop.thisN'
p2236
I94
sg33
g1079
sg63
g64
sS'trial_loop.thisIndex'
p2237
g59
(g98
S'^\x00\x00\x00'
tRp2238
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2239
I0
sg903
g1861
sS'block_loop.thisRepN'
p2240
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2241
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p2242
Nsg69
Vn
sS'block_loop.thisTrialN'
p2243
I0
sg39
F0.78358680430392269
sg34
g752
(S'\x07\xdf\n\x10\x0f\x009\t\x9c\xf0'
tRp2244
sa(dp2245
S'trial_loop.thisTrialN'
p2246
I95
sg894
g2085
sS'block_loop.thisIndex'
p2247
g888
sg38
S'right'
p2248
sg58
g62
sS'trial_loop.thisN'
p2249
I95
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p2250
g59
(g98
S'_\x00\x00\x00'
tRp2251
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2252
I0
sg903
g2093
sS'block_loop.thisRepN'
p2253
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2254
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p2255
Nsg69
Vn
sS'block_loop.thisTrialN'
p2256
I0
sg39
F1.0835065777755517
sg34
g752
(S'\x07\xdf\n\x10\x0f\x01\x03\x06\xd9\xe8'
tRp2257
sa(dp2258
S'trial_loop.thisTrialN'
p2259
I96
sg894
g1854
sS'block_loop.thisIndex'
p2260
g888
sg38
S'left'
p2261
sg58
g62
sS'trial_loop.thisN'
p2262
I96
sg33
g1079
sg63
g64
sS'trial_loop.thisIndex'
p2263
g59
(g98
S'`\x00\x00\x00'
tRp2264
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2265
I0
sg903
g1861
sS'block_loop.thisRepN'
p2266
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2267
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p2268
Nsg69
Vn
sS'block_loop.thisTrialN'
p2269
I0
sg39
F0.61677521291130688
sg34
g752
(S'\x07\xdf\n\x10\x0f\x01\t\x08\x9b '
tRp2270
sa(dp2271
S'trial_loop.thisTrialN'
p2272
I97
sg894
g2115
sS'block_loop.thisIndex'
p2273
g888
sg38
S'left'
p2274
sg58
g62
sS'trial_loop.thisN'
p2275
I97
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p2276
g59
(g98
S'a\x00\x00\x00'
tRp2277
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2278
I0
sg903
g2122
sS'block_loop.thisRepN'
p2279
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2280
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p2281
Nsg69
Vn
sS'block_loop.thisTrialN'
p2282
I0
sg39
F1.2334349612028745
sg34
g752
(S'\x07\xdf\n\x10\x0f\x01\x0f\x03< '
tRp2283
sa(dp2284
S'trial_loop.thisTrialN'
p2285
I98
sg894
S'30-spaghetti_hoops.png'
p2286
sS'block_loop.thisIndex'
p2287
g888
sg38
S'left'
p2288
sg58
g62
sS'trial_loop.thisN'
p2289
I98
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p2290
g59
(g98
S'b\x00\x00\x00'
tRp2291
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2292
I0
sg903
S'19-caramello_redo.png'
p2293
sS'block_loop.thisRepN'
p2294
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2295
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p2296
Nsg69
Vn
sS'block_loop.thisTrialN'
p2297
I0
sg39
F1.316747102264344
sg34
g752
(S'\x07\xdf\n\x10\x0f\x01\x15\x07^\xb8'
tRp2298
sa(dp2299
S'trial_loop.thisTrialN'
p2300
I99
sg894
g1979
sS'block_loop.thisIndex'
p2301
g888
sg38
S'right'
p2302
sg58
g62
sS'trial_loop.thisN'
p2303
I99
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2304
g59
(g98
S'c\x00\x00\x00'
tRp2305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2306
I0
sg903
g1986
sS'block_loop.thisRepN'
p2307
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2308
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2309
Nsg69
Vn
sS'block_loop.thisTrialN'
p2310
I0
sg39
F0.66691593719588127
sg34
g752
(S'\x07\xdf\n\x10\x0f\x01\x1b\x0c\xb2\x00'
tRp2311
sa(dp2312
S'trial_loop.thisTrialN'
p2313
I100
sg894
g915
sS'block_loop.thisIndex'
p2314
g888
sg38
S'left'
p2315
sg58
g62
sS'trial_loop.thisN'
p2316
I100
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2317
g59
(g98
S'd\x00\x00\x00'
tRp2318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2319
I0
sg903
g923
sS'block_loop.thisRepN'
p2320
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2321
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2322
Nsg69
Vn
sS'block_loop.thisTrialN'
p2323
I0
sg39
F0.9333923105696158
sg34
g752
(S'\x07\xdf\n\x10\x0f\x01!\x08\x06\xb0'
tRp2324
sa(dp2325
S'trial_loop.thisTrialN'
p2326
I101
sg894
g1688
sS'block_loop.thisIndex'
p2327
g888
sg38
S'left'
p2328
sg58
g62
sS'trial_loop.thisN'
p2329
I101
sg33
g1061
sg63
g64
sS'trial_loop.thisIndex'
p2330
g59
(g98
S'e\x00\x00\x00'
tRp2331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2332
I0
sg903
g1695
sS'block_loop.thisRepN'
p2333
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2334
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p2335
Nsg69
Vn
sS'block_loop.thisTrialN'
p2336
I0
sg39
F0.83326909129027626
sg34
g752
(S"\x07\xdf\n\x10\x0f\x01'\x07\xa5\x08"
tRp2337
sa(dp2338
S'trial_loop.thisTrialN'
p2339
I102
sg894
g2085
sS'block_loop.thisIndex'
p2340
g888
sg38
S'right'
p2341
sg58
g62
sS'trial_loop.thisN'
p2342
I102
sg33
g2096
sg63
g64
sS'trial_loop.thisIndex'
p2343
g59
(g98
S'f\x00\x00\x00'
tRp2344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2345
I0
sg903
g2093
sS'block_loop.thisRepN'
p2346
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2347
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p2348
Nsg69
Vn
sS'block_loop.thisTrialN'
p2349
I0
sg39
F0.86685504030174343
sg34
g752
(S'\x07\xdf\n\x10\x0f\x01-\x05\x95\xb0'
tRp2350
sa(dp2351
S'trial_loop.thisTrialN'
p2352
I103
sg894
g1731
sS'block_loop.thisIndex'
p2353
g888
sg38
S'right'
p2354
sg58
g62
sS'trial_loop.thisN'
p2355
I103
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p2356
g59
(g98
S'g\x00\x00\x00'
tRp2357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2358
I0
sg903
g1738
sS'block_loop.thisRepN'
p2359
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2360
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p2361
Nsg69
Vn
sS'block_loop.thisTrialN'
p2362
I0
sg39
F1.4501631899911445
sg34
g752
(S'\x07\xdf\n\x10\x0f\x013\x04\x03X'
tRp2363
sa(dp2364
S'trial_loop.thisTrialN'
p2365
I104
sg894
g1979
sS'block_loop.thisIndex'
p2366
g888
sg38
S'right'
p2367
sg58
g62
sS'trial_loop.thisN'
p2368
I104
sg33
g1011
sg63
g64
sS'trial_loop.thisIndex'
p2369
g59
(g98
S'h\x00\x00\x00'
tRp2370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2371
I0
sg903
g1986
sS'block_loop.thisRepN'
p2372
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2373
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2374
Nsg69
Vn
sS'block_loop.thisTrialN'
p2375
I0
sg39
F0.73352875838827458
sg34
g752
(S'\x07\xdf\n\x10\x0f\x019\x0b}h'
tRp2376
sa(dp2377
S'trial_loop.thisTrialN'
p2378
I105
sg894
g1360
sS'block_loop.thisIndex'
p2379
g888
sg38
S'left'
p2380
sg58
g62
sS'trial_loop.thisN'
p2381
I105
sg33
g1371
sg63
g64
sS'trial_loop.thisIndex'
p2382
g59
(g98
S'i\x00\x00\x00'
tRp2383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2384
I0
sg903
g1368
sS'block_loop.thisRepN'
p2385
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2386
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2387
Nsg69
Vn
sS'block_loop.thisTrialN'
p2388
I0
sg39
F0.7168827518071339
sg34
g752
(S'\x07\xdf\n\x10\x0f\x02\x03\x07\xc4H'
tRp2389
sa(dp2390
S'trial_loop.thisTrialN'
p2391
I106
sg894
g1377
sS'block_loop.thisIndex'
p2392
g888
sg38
S'right'
p2393
sg58
g62
sS'trial_loop.thisN'
p2394
I106
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p2395
g59
(g98
S'j\x00\x00\x00'
tRp2396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2397
I0
sg903
g1384
sS'block_loop.thisRepN'
p2398
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2399
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p2400
Nsg69
Vn
sS'block_loop.thisTrialN'
p2401
I0
sg39
F0.88345999279044918
sg34
g752
(S'\x07\xdf\n\x10\x0f\x02\t\x04\x0f\x10'
tRp2402
sa(dp2403
S'trial_loop.thisTrialN'
p2404
I107
sg894
g1515
sS'block_loop.thisIndex'
p2405
g888
sg38
S'right'
p2406
sg58
g62
sS'trial_loop.thisN'
p2407
I107
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2408
g59
(g98
S'k\x00\x00\x00'
tRp2409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2410
I0
sg903
g1522
sS'block_loop.thisRepN'
p2411
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2412
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p2413
Nsg69
Vn
sS'block_loop.thisTrialN'
p2414
I0
sg39
F1.3333993809937965
sg34
g752
(S'\x07\xdf\n\x10\x0f\x02\x0f\x02\xb7P'
tRp2415
sa(dp2416
S'trial_loop.thisTrialN'
p2417
I108
sg894
g1530
sS'block_loop.thisIndex'
p2418
g888
sg38
S'left'
p2419
sg58
g62
sS'trial_loop.thisN'
p2420
I108
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2421
g59
(g98
S'l\x00\x00\x00'
tRp2422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2423
I0
sg903
g1537
sS'block_loop.thisRepN'
p2424
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2425
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2426
Nsg69
Vn
sS'block_loop.thisTrialN'
p2427
I0
sg39
F0.85019934039883083
sg34
g752
(S'\x07\xdf\n\x10\x0f\x02\x15\x08I\x18'
tRp2428
sa(dp2429
S'trial_loop.thisTrialN'
p2430
I109
sg894
g1051
sS'block_loop.thisIndex'
p2431
g888
sg38
S'right'
p2432
sg58
g62
sS'trial_loop.thisN'
p2433
I109
sg33
g1061
sg63
g64
sS'trial_loop.thisIndex'
p2434
g59
(g98
S'm\x00\x00\x00'
tRp2435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2436
I0
sg903
g1059
sS'block_loop.thisRepN'
p2437
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2438
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p2439
Nsg69
Vn
sS'block_loop.thisTrialN'
p2440
I0
sg39
F1.0998298536214861
sg34
g752
(S'\x07\xdf\n\x10\x0f\x02\x1b\x06x@'
tRp2441
sa(dp2442
S'trial_loop.thisTrialN'
p2443
I110
sg894
g949
sS'block_loop.thisIndex'
p2444
g888
sg38
S'right'
p2445
sg58
g62
sS'trial_loop.thisN'
p2446
I110
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2447
g59
(g98
S'n\x00\x00\x00'
tRp2448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2449
I0
sg903
g957
sS'block_loop.thisRepN'
p2450
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2451
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2452
Nsg69
Vn
sS'block_loop.thisTrialN'
p2453
I0
sg39
F4.0500968192209257
sg34
g752
(S'\x07\xdf\n\x10\x0f\x02!\x08\xb6x'
tRp2454
sa(dp2455
S'trial_loop.thisTrialN'
p2456
I111
sg894
g1884
sS'block_loop.thisIndex'
p2457
g888
sg38
S'left'
p2458
sg58
g62
sS'trial_loop.thisN'
p2459
I111
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p2460
g59
(g98
S'o\x00\x00\x00'
tRp2461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2462
I0
sg903
g1892
sS'block_loop.thisRepN'
p2463
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2464
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p2465
Nsg69
Vn
sS'block_loop.thisTrialN'
p2466
I0
sg39
F2.1000929989095312
sg34
g752
(S'\x07\xdf\n\x10\x0f\x02*\t\xeb\x10'
tRp2467
sa(dp2468
S'trial_loop.thisTrialN'
p2469
I112
sg894
g1418
sS'block_loop.thisIndex'
p2470
g888
sg38
S'left'
p2471
sg58
g62
sS'trial_loop.thisN'
p2472
I112
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2473
g59
(g98
S'p\x00\x00\x00'
tRp2474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2475
I0
sg903
g1425
sS'block_loop.thisRepN'
p2476
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2477
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2478
Nsg69
Vn
sS'block_loop.thisTrialN'
p2479
I0
sg39
F0.80027956692356383
sg34
g752
(S'\x07\xdf\n\x10\x0f\x021\x0b\xe2\xf8'
tRp2480
sa(dp2481
S'trial_loop.thisTrialN'
p2482
I113
sg894
g1884
sS'block_loop.thisIndex'
p2483
g888
sg38
S'left'
p2484
sg58
g62
sS'trial_loop.thisN'
p2485
I113
sg33
g1895
sg63
g64
sS'trial_loop.thisIndex'
p2486
g59
(g98
S'q\x00\x00\x00'
tRp2487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2488
I0
sg903
g1892
sS'block_loop.thisRepN'
p2489
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2490
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p2491
Nsg69
Vn
sS'block_loop.thisTrialN'
p2492
I0
sg39
F1.0000937971817621
sg34
g752
(S'\x07\xdf\n\x10\x0f\x027\tZ\x88'
tRp2493
sa(dp2494
S'trial_loop.thisTrialN'
p2495
I114
sg894
g1418
sS'block_loop.thisIndex'
p2496
g888
sg38
S'left'
p2497
sg58
g62
sS'trial_loop.thisN'
p2498
I114
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2499
g59
(g98
S'r\x00\x00\x00'
tRp2500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2501
I0
sg903
g1425
sS'block_loop.thisRepN'
p2502
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2503
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2504
Nsg69
Vn
sS'block_loop.thisTrialN'
p2505
I0
sg39
F0.63351216569208191
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03\x01\t\xee\xf8'
tRp2506
sa(dp2507
S'trial_loop.thisTrialN'
p2508
I115
sg894
g1800
sS'block_loop.thisIndex'
p2509
g888
sg38
S'right'
p2510
sg58
g62
sS'trial_loop.thisN'
p2511
I115
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p2512
g59
(g98
S's\x00\x00\x00'
tRp2513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2514
I0
sg903
g1807
sS'block_loop.thisRepN'
p2515
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2516
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p2517
Nsg69
Vn
sS'block_loop.thisTrialN'
p2518
I0
sg39
F1.2335253372111765
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03\x07\x04\xc6\xa8'
tRp2519
sa(dp2520
S'trial_loop.thisTrialN'
p2521
I116
sg894
g1869
sS'block_loop.thisIndex'
p2522
g888
sg38
S'right'
p2523
sg58
g62
sS'trial_loop.thisN'
p2524
I116
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p2525
g59
(g98
S't\x00\x00\x00'
tRp2526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2527
I0
sg903
g1876
sS'block_loop.thisRepN'
p2528
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2529
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p2530
Nsg69
Vn
sS'block_loop.thisTrialN'
p2531
I0
sg39
F0.85021273999518598
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03\r\x08\xed('
tRp2532
sa(dp2533
S'trial_loop.thisTrialN'
p2534
I117
sg894
g1800
sS'block_loop.thisIndex'
p2535
g888
sg38
S'right'
p2536
sg58
g62
sS'trial_loop.thisN'
p2537
I117
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p2538
g59
(g98
S'u\x00\x00\x00'
tRp2539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2540
I0
sg903
g1807
sS'block_loop.thisRepN'
p2541
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2542
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p2543
Nsg69
Vn
sS'block_loop.thisTrialN'
p2544
I0
sg39
F1.0667710504822026
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03\x13\x07\x1cP'
tRp2545
sa(dp2546
S'trial_loop.thisTrialN'
p2547
I118
sg894
g1360
sS'block_loop.thisIndex'
p2548
g888
sg38
S'left'
p2549
sg58
g62
sS'trial_loop.thisN'
p2550
I118
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p2551
g59
(g98
S'v\x00\x00\x00'
tRp2552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2553
I0
sg903
g1368
sS'block_loop.thisRepN'
p2554
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2555
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2556
Nsg69
Vn
sS'block_loop.thisTrialN'
p2557
I0
sg39
F0.96679836285329657
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03\x19\x08\x9f\x08'
tRp2558
sa(dp2559
S'trial_loop.thisTrialN'
p2560
I119
sg894
g1485
sS'block_loop.thisIndex'
p2561
g888
sg38
S'left'
p2562
sg58
g62
sS'trial_loop.thisN'
p2563
I119
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p2564
g59
(g98
S'w\x00\x00\x00'
tRp2565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2566
I0
sg903
g1493
sS'block_loop.thisRepN'
p2567
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2568
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p2569
Nsg69
Vn
sS'block_loop.thisTrialN'
p2570
I0
sg39
F0.96717953864572337
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03\x1f\x08{\xe0'
tRp2571
sa(dp2572
S'trial_loop.thisTrialN'
p2573
I120
sg894
g1173
sS'block_loop.thisIndex'
p2574
g888
sg38
S'right'
p2575
sg58
g62
sS'trial_loop.thisN'
p2576
I120
sg33
g926
sg63
g64
sS'trial_loop.thisIndex'
p2577
g59
(g98
S'x\x00\x00\x00'
tRp2578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2579
I0
sg903
g1180
sS'block_loop.thisRepN'
p2580
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2581
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p2582
Nsg69
Vn
sS'block_loop.thisTrialN'
p2583
I0
sg39
F0.96685908869039849
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03%\x08\x93P'
tRp2584
sa(dp2585
S'trial_loop.thisTrialN'
p2586
I121
sg894
g1485
sS'block_loop.thisIndex'
p2587
g888
sg38
S'left'
p2588
sg58
g62
sS'trial_loop.thisN'
p2589
I121
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p2590
g59
(g98
S'y\x00\x00\x00'
tRp2591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2592
I0
sg903
g1493
sS'block_loop.thisRepN'
p2593
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2594
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p2595
Nsg69
Vn
sS'block_loop.thisTrialN'
p2596
I0
sg39
F1.1334899280664104
sg34
g752
(S'\x07\xdf\n\x10\x0f\x03+\x08\xaa\xc0'
tRp2597
sa(dp2598
S'trial_loop.thisTrialN'
p2599
I122
sg894
g1854
sS'block_loop.thisIndex'
p2600
g888
sg38
S'left'
p2601
sg58
g62
sS'trial_loop.thisN'
p2602
I122
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2603
g59
(g98
S'z\x00\x00\x00'
tRp2604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2605
I0
sg903
g1861
sS'block_loop.thisRepN'
p2606
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2607
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p2608
Nsg69
Vn
sS'block_loop.thisTrialN'
p2609
I0
sg39
F0.65010685466404539
sg34
g752
(S'\x07\xdf\n\x10\x0f\x031\x0b#\x90'
tRp2610
sa(dp2611
S'trial_loop.thisTrialN'
p2612
I123
sg894
g1772
sS'block_loop.thisIndex'
p2613
g888
sg38
S'right'
p2614
sg58
g62
sS'trial_loop.thisN'
p2615
I123
sg33
g1371
sg63
g64
sS'trial_loop.thisIndex'
p2616
g59
(g98
S'{\x00\x00\x00'
tRp2617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2618
I0
sg903
g1779
sS'block_loop.thisRepN'
p2619
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2620
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p2621
Nsg69
Vn
sS'block_loop.thisTrialN'
p2622
I0
sg39
F0.55013331174268387
sg34
g752
(S'\x07\xdf\n\x10\x0f\x037\x069\xc0'
tRp2623
sa(dp2624
S'trial_loop.thisTrialN'
p2625
I124
sg894
g1034
sS'block_loop.thisIndex'
p2626
g888
sg38
S'right'
p2627
sg58
g62
sS'trial_loop.thisN'
p2628
I124
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2629
g59
(g98
S'|\x00\x00\x00'
tRp2630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2631
I0
sg903
g1042
sS'block_loop.thisRepN'
p2632
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2633
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2634
Nsg69
Vn
sS'block_loop.thisTrialN'
p2635
I0
sg39
F0.71677441463907599
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04\x00\x0f&\xe8'
tRp2636
sa(dp2637
S'trial_loop.thisTrialN'
p2638
I125
sg894
g1319
sS'block_loop.thisIndex'
p2639
g888
sg38
S'right'
p2640
sg58
g62
sS'trial_loop.thisN'
p2641
I125
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p2642
g59
(g98
S'}\x00\x00\x00'
tRp2643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2644
I0
sg903
g1326
sS'block_loop.thisRepN'
p2645
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2646
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p2647
Nsg69
Vn
sS'block_loop.thisTrialN'
p2648
I0
sg39
F0.90019751577347051
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04\x06\x0bm\xc8'
tRp2649
sa(dp2650
S'trial_loop.thisTrialN'
p2651
I126
sg894
g1688
sS'block_loop.thisIndex'
p2652
g888
sg38
S'left'
p2653
sg58
g62
sS'trial_loop.thisN'
p2654
I126
sg33
g1061
sg63
g64
sS'trial_loop.thisIndex'
p2655
g59
(g98
S'~\x00\x00\x00'
tRp2656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2657
I0
sg903
g1695
sS'block_loop.thisRepN'
p2658
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2659
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p2660
Nsg69
Vn
sS'block_loop.thisTrialN'
p2661
I0
sg39
F1.2665256952968775
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04\x0c\nT\x88'
tRp2662
sa(dp2663
S'trial_loop.thisTrialN'
p2664
I127
sg894
g1188
sS'block_loop.thisIndex'
p2665
g888
sg38
S'right'
p2666
sg58
g62
sS'trial_loop.thisN'
p2667
I127
sg33
g1199
sg63
g64
sS'trial_loop.thisIndex'
p2668
g59
(g98
S'\x7f\x00\x00\x00'
tRp2669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2670
I0
sg903
g1196
sS'block_loop.thisRepN'
p2671
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2672
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p2673
Nsg69
Vn
sS'block_loop.thisTrialN'
p2674
I0
sg39
F0.84997610880236607
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04\x12\x0e\xf4 '
tRp2675
sa(dp2676
S'trial_loop.thisTrialN'
p2677
I128
sg894
g2286
sS'block_loop.thisIndex'
p2678
g888
sg38
S'left'
p2679
sg58
g62
sS'trial_loop.thisN'
p2680
I128
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p2681
g59
(g98
S'\x80\x00\x00\x00'
tRp2682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2683
I0
sg903
g2293
sS'block_loop.thisRepN'
p2684
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2685
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p2686
Nsg69
Vn
sS'block_loop.thisTrialN'
p2687
I0
sg39
F2.0667528042213235
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04\x18\r#H'
tRp2688
sa(dp2689
S'trial_loop.thisTrialN'
p2690
I129
sg894
S'22-daim.png'
p2691
sS'block_loop.thisIndex'
p2692
g888
sg38
S'right'
p2693
sg58
g62
sS'trial_loop.thisN'
p2694
I129
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p2695
g59
(g98
S'\x81\x00\x00\x00'
tRp2696
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2697
I0
sg903
S'7-olives.png'
p2698
sS'block_loop.thisRepN'
p2699
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2700
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p2701
Nsg69
Vn
sS'block_loop.thisTrialN'
p2702
I0
sg39
F0.78351267887046561
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04\x1f\x0e\xa2\x18'
tRp2703
sa(dp2704
S'trial_loop.thisTrialN'
p2705
I130
sg894
g1515
sS'block_loop.thisIndex'
p2706
g888
sg38
S'right'
p2707
sg58
g62
sS'trial_loop.thisN'
p2708
I130
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p2709
g59
(g98
S'\x82\x00\x00\x00'
tRp2710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2711
I0
sg903
g1522
sS'block_loop.thisRepN'
p2712
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2713
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p2714
Nsg69
Vn
sS'block_loop.thisTrialN'
p2715
I0
sg39
F1.0668679837435775
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04%\x0b\xdf\x10'
tRp2716
sa(dp2717
S'trial_loop.thisTrialN'
p2718
I131
sg894
S'23-crunchie_redo.png'
p2719
sS'block_loop.thisIndex'
p2720
g888
sg38
S'left'
p2721
sg58
g62
sS'trial_loop.thisN'
p2722
I131
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2723
g59
(g98
S'\x83\x00\x00\x00'
tRp2724
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2725
I0
sg903
S'33-ambrosia_rice.png'
p2726
sS'block_loop.thisRepN'
p2727
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2728
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2729
Nsg69
Vn
sS'block_loop.thisTrialN'
p2730
I0
sg39
F2.5501632470150071
sg34
g752
(S'\x07\xdf\n\x10\x0f\x04+\re\xb0'
tRp2731
sa(dp2732
S'trial_loop.thisTrialN'
p2733
I132
sg894
g1222
sS'block_loop.thisIndex'
p2734
g888
sg38
S'right'
p2735
sg58
g62
sS'trial_loop.thisN'
p2736
I132
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p2737
g59
(g98
S'\x84\x00\x00\x00'
tRp2738
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2739
I0
sg903
g1229
sS'block_loop.thisRepN'
p2740
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2741
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p2742
Nsg69
Vn
sS'block_loop.thisTrialN'
p2743
I0
sg39
F0.66688486153361737
sg34
g752
(S'\x07\xdf\n\x10\x0f\x043\x07\x00\xf8'
tRp2744
sa(dp2745
S'trial_loop.thisTrialN'
p2746
I133
sg894
g1377
sS'block_loop.thisIndex'
p2747
g888
sg38
S'right'
p2748
sg58
g62
sS'trial_loop.thisN'
p2749
I133
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p2750
g59
(g98
S'\x85\x00\x00\x00'
tRp2751
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2752
I0
sg903
g1384
sS'block_loop.thisRepN'
p2753
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2754
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p2755
Nsg69
Vn
sS'block_loop.thisTrialN'
p2756
I0
sg39
F0.96676785738964099
sg34
g752
(S'\x07\xdf\n\x10\x0f\x049\x02\x94('
tRp2757
sa(dp2758
S'trial_loop.thisTrialN'
p2759
I134
sg894
g2719
sS'block_loop.thisIndex'
p2760
g888
sg38
S'left'
p2761
sg58
g62
sS'trial_loop.thisN'
p2762
I134
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2763
g59
(g98
S'\x86\x00\x00\x00'
tRp2764
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2765
I0
sg903
g2726
sS'block_loop.thisRepN'
p2766
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2767
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2768
Nsg69
Vn
sS'block_loop.thisTrialN'
p2769
I0
sg39
F1.1168573210816248
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05\x03\x02m\x18'
tRp2770
sa(dp2771
S'trial_loop.thisTrialN'
p2772
I135
sg894
g1884
sS'block_loop.thisIndex'
p2773
g888
sg38
S'left'
p2774
sg58
g62
sS'trial_loop.thisN'
p2775
I135
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p2776
g59
(g98
S'\x87\x00\x00\x00'
tRp2777
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2778
I0
sg903
g1892
sS'block_loop.thisRepN'
p2779
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2780
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p2781
Nsg69
Vn
sS'block_loop.thisTrialN'
p2782
I0
sg39
F0.63354039037949406
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05\t\x04\xabP'
tRp2783
sa(dp2784
S'trial_loop.thisTrialN'
p2785
I136
sg894
g2719
sS'block_loop.thisIndex'
p2786
g888
sg38
S'right'
p2787
sg58
g62
sS'trial_loop.thisN'
p2788
I136
sg33
g960
sg63
g64
sS'trial_loop.thisIndex'
p2789
g59
(g98
S'\x88\x00\x00\x00'
tRp2790
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2791
I0
sg903
g2726
sS'block_loop.thisRepN'
p2792
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2793
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2794
Nsg69
Vn
sS'block_loop.thisTrialN'
p2795
I0
sg39
F0.60013405299832812
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05\x0e\x0f\x03\xc0'
tRp2796
sa(dp2797
S'trial_loop.thisTrialN'
p2798
I137
sg894
g1000
sS'block_loop.thisIndex'
p2799
g888
sg38
S'left'
p2800
sg58
g62
sS'trial_loop.thisN'
p2801
I137
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p2802
g59
(g98
S'\x89\x00\x00\x00'
tRp2803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2804
I0
sg903
g1008
sS'block_loop.thisRepN'
p2805
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2806
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p2807
Nsg69
Vn
sS'block_loop.thisTrialN'
p2808
I0
sg39
F0.65011911387045984
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05\x14\tf@'
tRp2809
sa(dp2810
S'trial_loop.thisTrialN'
p2811
I138
sg894
g1800
sS'block_loop.thisIndex'
p2812
g888
sg38
S'right'
p2813
sg58
g62
sS'trial_loop.thisN'
p2814
I138
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p2815
g59
(g98
S'\x8a\x00\x00\x00'
tRp2816
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2817
I0
sg903
g1807
sS'block_loop.thisRepN'
p2818
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2819
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p2820
Nsg69
Vn
sS'block_loop.thisTrialN'
p2821
I0
sg39
F1.0835259644300095
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05\x1a\x04|p'
tRp2822
sa(dp2823
S'trial_loop.thisTrialN'
p2824
I139
sg894
g2085
sS'block_loop.thisIndex'
p2825
g888
sg38
S'right'
p2826
sg58
g62
sS'trial_loop.thisN'
p2827
I139
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p2828
g59
(g98
S'\x8b\x00\x00\x00'
tRp2829
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2830
I0
sg903
g2093
sS'block_loop.thisRepN'
p2831
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2832
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p2833
Nsg69
Vn
sS'block_loop.thisTrialN'
p2834
I0
sg39
F1.1835180387097353
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05 \x06=\xa8'
tRp2835
sa(dp2836
S'trial_loop.thisTrialN'
p2837
I140
sg894
g983
sS'block_loop.thisIndex'
p2838
g888
sg38
S'right'
p2839
sg58
g62
sS'trial_loop.thisN'
p2840
I140
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2841
g59
(g98
S'\x8c\x00\x00\x00'
tRp2842
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2843
I0
sg903
g991
sS'block_loop.thisRepN'
p2844
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2845
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2846
Nsg69
Vn
sS'block_loop.thisTrialN'
p2847
I0
sg39
F1.0500905470689759
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05&\t\xac\x90'
tRp2848
sa(dp2849
S'trial_loop.thisTrialN'
p2850
I141
sg894
g1068
sS'block_loop.thisIndex'
p2851
g888
sg38
S'right'
p2852
sg58
g62
sS'trial_loop.thisN'
p2853
I141
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p2854
g59
(g98
S'\x8d\x00\x00\x00'
tRp2855
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2856
I0
sg903
g1076
sS'block_loop.thisRepN'
p2857
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2858
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p2859
Nsg69
Vn
sS'block_loop.thisTrialN'
p2860
I0
sg39
F0.60053775151391164
sg34
g752
(S'\x07\xdf\n\x10\x0f\x05,\n\xf4\xb0'
tRp2861
sa(dp2862
S'trial_loop.thisTrialN'
p2863
I142
sg894
g1418
sS'block_loop.thisIndex'
p2864
g888
sg38
S'left'
p2865
sg58
g62
sS'trial_loop.thisN'
p2866
I142
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p2867
g59
(g98
S'\x8e\x00\x00\x00'
tRp2868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2869
I0
sg903
g1425
sS'block_loop.thisRepN'
p2870
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2871
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p2872
Nsg69
Vn
sS'block_loop.thisTrialN'
p2873
I0
sg39
F1.0834646683979372
sg34
g752
(S'\x07\xdf\n\x10\x0f\x052\x05SH'
tRp2874
sa(dp2875
S'trial_loop.thisTrialN'
p2876
I143
sg894
g1869
sS'block_loop.thisIndex'
p2877
g888
sg38
S'right'
p2878
sg58
g62
sS'trial_loop.thisN'
p2879
I143
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p2880
g59
(g98
S'\x8f\x00\x00\x00'
tRp2881
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2882
I0
sg903
g1876
sS'block_loop.thisRepN'
p2883
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2884
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p2885
Nsg69
Vn
sS'block_loop.thisTrialN'
p2886
I0
sg39
F1.1500863276196469
sg34
g752
(S'\x07\xdf\n\x10\x0f\x058\x07\x14\x80'
tRp2887
sa(dp2888
S'trial_loop.thisTrialN'
p2889
I144
sg894
g1716
sS'block_loop.thisIndex'
p2890
g888
sg38
S'right'
p2891
sg58
g62
sS'trial_loop.thisN'
p2892
I144
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2893
g59
(g98
S'\x90\x00\x00\x00'
tRp2894
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2895
I0
sg903
g1723
sS'block_loop.thisRepN'
p2896
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2897
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2898
Nsg69
Vn
sS'block_loop.thisTrialN'
p2899
I0
sg39
F1.0502011650205532
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06\x02\t\xcb\xd0'
tRp2900
sa(dp2901
S'trial_loop.thisTrialN'
p2902
I145
sg894
g1017
sS'block_loop.thisIndex'
p2903
g888
sg38
S'left'
p2904
sg58
g62
sS'trial_loop.thisN'
p2905
I145
sg33
g1028
sg63
g64
sS'trial_loop.thisIndex'
p2906
g59
(g98
S'\x91\x00\x00\x00'
tRp2907
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2908
I0
sg903
g1025
sS'block_loop.thisRepN'
p2909
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2910
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p2911
Nsg69
Vn
sS'block_loop.thisTrialN'
p2912
I0
sg39
F0.75017533516074764
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06\x08\x0b\x13\xf0'
tRp2913
sa(dp2914
S'trial_loop.thisTrialN'
p2915
I146
sg894
g1716
sS'block_loop.thisIndex'
p2916
g888
sg38
S'right'
p2917
sg58
g62
sS'trial_loop.thisN'
p2918
I146
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2919
g59
(g98
S'\x92\x00\x00\x00'
tRp2920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2921
I0
sg903
g1723
sS'block_loop.thisRepN'
p2922
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2923
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2924
Nsg69
Vn
sS'block_loop.thisTrialN'
p2925
I0
sg39
F0.78353776748190285
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06\x0e\x07\xd7\xd0'
tRp2926
sa(dp2927
S'trial_loop.thisTrialN'
p2928
I147
sg894
g1098
sS'block_loop.thisIndex'
p2929
g888
sg38
S'left'
p2930
sg58
g62
sS'trial_loop.thisN'
p2931
I147
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p2932
g59
(g98
S'\x93\x00\x00\x00'
tRp2933
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2934
I0
sg903
g1106
sS'block_loop.thisRepN'
p2935
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2936
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p2937
Nsg69
Vn
sS'block_loop.thisTrialN'
p2938
I0
sg39
F0.76684443466001539
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06\x14\x05\x14\xc8'
tRp2939
sa(dp2940
S'trial_loop.thisTrialN'
p2941
I148
sg894
g1716
sS'block_loop.thisIndex'
p2942
g888
sg38
S'right'
p2943
sg58
g62
sS'trial_loop.thisN'
p2944
I148
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p2945
g59
(g98
S'\x94\x00\x00\x00'
tRp2946
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2947
I0
sg903
g1723
sS'block_loop.thisRepN'
p2948
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2949
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p2950
Nsg69
Vn
sS'block_loop.thisTrialN'
p2951
I0
sg39
F0.70010987669957103
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06\x1a\x02\x13@'
tRp2952
sa(dp2953
S'trial_loop.thisTrialN'
p2954
I149
sg894
g983
sS'block_loop.thisIndex'
p2955
g888
sg38
S'right'
p2956
sg58
g62
sS'trial_loop.thisN'
p2957
I149
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2958
g59
(g98
S'\x95\x00\x00\x00'
tRp2959
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2960
I0
sg903
g991
sS'block_loop.thisRepN'
p2961
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2962
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2963
Nsg69
Vn
sS'block_loop.thisTrialN'
p2964
I0
sg39
F0.88342150458629476
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06\x1f\r#H'
tRp2965
sa(dp2966
S'trial_loop.thisTrialN'
p2967
I150
sg894
g2719
sS'block_loop.thisIndex'
p2968
g888
sg38
S'left'
p2969
sg58
g62
sS'trial_loop.thisN'
p2970
I150
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p2971
g59
(g98
S'\x96\x00\x00\x00'
tRp2972
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2973
I0
sg903
g2726
sS'block_loop.thisRepN'
p2974
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2975
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p2976
Nsg69
Vn
sS'block_loop.thisTrialN'
p2977
I0
sg39
F1.450142662950384
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06%\x0b\xcb\x88'
tRp2978
sa(dp2979
S'trial_loop.thisTrialN'
p2980
I151
sg894
g1530
sS'block_loop.thisIndex'
p2981
g888
sg38
S'left'
p2982
sg58
g62
sS'trial_loop.thisN'
p2983
I151
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p2984
g59
(g98
S'\x97\x00\x00\x00'
tRp2985
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2986
I0
sg903
g1537
sS'block_loop.thisRepN'
p2987
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p2988
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p2989
Nsg69
Vn
sS'block_loop.thisTrialN'
p2990
I0
sg39
F0.95008535828674212
sg34
g752
(S'\x07\xdf\n\x10\x0f\x06,\x04\x03X'
tRp2991
sa(dp2992
S'trial_loop.thisTrialN'
p2993
I152
sg894
g2691
sS'block_loop.thisIndex'
p2994
g888
sg38
S'right'
p2995
sg58
g62
sS'trial_loop.thisN'
p2996
I152
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p2997
g59
(g98
S'\x98\x00\x00\x00'
tRp2998
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p2999
I0
sg903
g2698
sS'block_loop.thisRepN'
p3000
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3001
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p3002
Nsg69
Vn
sS'block_loop.thisTrialN'
p3003
I0
sg39
F0.56689193195779808
sg34
g752
(S'\x07\xdf\n\x10\x0f\x062\x03\xa1\xb0'
tRp3004
sa(dp3005
S'trial_loop.thisTrialN'
p3006
I153
sg894
g2286
sS'block_loop.thisIndex'
p3007
g888
sg38
S'left'
p3008
sg58
g62
sS'trial_loop.thisN'
p3009
I153
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p3010
g59
(g98
S'\x99\x00\x00\x00'
tRp3011
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3012
I0
sg903
g2293
sS'block_loop.thisRepN'
p3013
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3014
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p3015
Nsg69
Vn
sS'block_loop.thisTrialN'
p3016
I0
sg39
F0.9167582780974044
sg34
g752
(S'\x07\xdf\n\x10\x0f\x067\x0c\xc9p'
tRp3017
sa(dp3018
S'trial_loop.thisTrialN'
p3019
I154
sg894
g1869
sS'block_loop.thisIndex'
p3020
g888
sg38
S'right'
p3021
sg58
g62
sS'trial_loop.thisN'
p3022
I154
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p3023
g59
(g98
S'\x9a\x00\x00\x00'
tRp3024
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3025
I0
sg903
g1876
sS'block_loop.thisRepN'
p3026
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3027
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p3028
Nsg69
Vn
sS'block_loop.thisTrialN'
p3029
I0
sg39
F0.7001175743425847
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07\x01\x0c)H'
tRp3030
sa(dp3031
S'trial_loop.thisTrialN'
p3032
I155
sg894
g1530
sS'block_loop.thisIndex'
p3033
g888
sg38
S'left'
p3034
sg58
g62
sS'trial_loop.thisN'
p3035
I155
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3036
g59
(g98
S'\x9b\x00\x00\x00'
tRp3037
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3038
I0
sg903
g1537
sS'block_loop.thisRepN'
p3039
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3040
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3041
Nsg69
Vn
sS'block_loop.thisTrialN'
p3042
I0
sg39
F0.73345149687884259
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07\x07\x07\xfa\xf8'
tRp3043
sa(dp3044
S'trial_loop.thisTrialN'
p3045
I156
sg894
g1485
sS'block_loop.thisIndex'
p3046
g888
sg38
S'left'
p3047
sg58
g62
sS'trial_loop.thisN'
p3048
I156
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p3049
g59
(g98
S'\x9c\x00\x00\x00'
tRp3050
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3051
I0
sg903
g1493
sS'block_loop.thisRepN'
p3052
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3053
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p3054
Nsg69
Vn
sS'block_loop.thisTrialN'
p3055
I0
sg39
F0.93353514457703568
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07\r\x04\x80X'
tRp3056
sa(dp3057
S'trial_loop.thisTrialN'
p3058
I157
sg894
g1289
sS'block_loop.thisIndex'
p3059
g888
sg38
S'left'
p3060
sg58
g62
sS'trial_loop.thisN'
p3061
I157
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p3062
g59
(g98
S'\x9d\x00\x00\x00'
tRp3063
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3064
I0
sg903
g1297
sS'block_loop.thisRepN'
p3065
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3066
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p3067
Nsg69
Vn
sS'block_loop.thisTrialN'
p3068
I0
sg39
F1.2167952267773217
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07\x13\x03\xe00'
tRp3069
sa(dp3070
S'trial_loop.thisTrialN'
p3071
I158
sg894
g1188
sS'block_loop.thisIndex'
p3072
g888
sg38
S'right'
p3073
sg58
g62
sS'trial_loop.thisN'
p3074
I158
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p3075
g59
(g98
S'\x9e\x00\x00\x00'
tRp3076
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3077
I0
sg903
g1196
sS'block_loop.thisRepN'
p3078
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3079
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p3080
Nsg69
Vn
sS'block_loop.thisTrialN'
p3081
I0
sg39
F0.81675565519981319
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07\x19\x07\xc4H'
tRp3082
sa(dp3083
S'trial_loop.thisTrialN'
p3084
I159
sg894
g1098
sS'block_loop.thisIndex'
p3085
g888
sg38
S'left'
p3086
sg58
g62
sS'trial_loop.thisN'
p3087
I159
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p3088
g59
(g98
S'\x9f\x00\x00\x00'
tRp3089
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3090
I0
sg903
g1106
sS'block_loop.thisRepN'
p3091
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3092
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p3093
Nsg69
Vn
sS'block_loop.thisTrialN'
p3094
I0
sg39
F1.0168507068156032
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07\x1f\x05zX'
tRp3095
sa(dp3096
S'trial_loop.thisTrialN'
p3097
I160
sg894
g2115
sS'block_loop.thisIndex'
p3098
g888
sg38
S'left'
p3099
sg58
g62
sS'trial_loop.thisN'
p3100
I160
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p3101
g59
(g98
S'\xa0\x00\x00\x00'
tRp3102
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3103
I0
sg903
g2122
sS'block_loop.thisRepN'
p3104
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3105
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p3106
Nsg69
Vn
sS'block_loop.thisTrialN'
p3107
I0
sg39
F0.8999931006328552
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07%\x06I`'
tRp3108
sa(dp3109
S'trial_loop.thisTrialN'
p3110
I161
sg894
g1051
sS'block_loop.thisIndex'
p3111
g888
sg38
S'right'
p3112
sg58
g62
sS'trial_loop.thisN'
p3113
I161
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p3114
g59
(g98
S'\xa1\x00\x00\x00'
tRp3115
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3116
I0
sg903
g1059
sS'block_loop.thisRepN'
p3117
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3118
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p3119
Nsg69
Vn
sS'block_loop.thisTrialN'
p3120
I0
sg39
F1.799765250452765
sg34
g752
(S'\x07\xdf\n\x10\x0f\x07+\x050 '
tRp3121
sa(dp3122
S'trial_loop.thisTrialN'
p3123
I162
sg894
g1205
sS'block_loop.thisIndex'
p3124
g888
sg38
S'right'
p3125
sg58
g62
sS'trial_loop.thisN'
p3126
I162
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p3127
g59
(g98
S'\xa2\x00\x00\x00'
tRp3128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3129
I0
sg903
g1213
sS'block_loop.thisRepN'
p3130
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3131
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p3132
Nsg69
Vn
sS'block_loop.thisTrialN'
p3133
I0
sg39
F2.1333736081505776
sg34
g752
(S'\x07\xdf\n\x10\x0f\x072\x02\xa3\xc8'
tRp3134
sa(dp3135
S'trial_loop.thisTrialN'
p3136
I163
sg894
g2691
sS'block_loop.thisIndex'
p3137
g888
sg38
S'right'
p3138
sg58
g62
sS'trial_loop.thisN'
p3139
I163
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p3140
g59
(g98
S'\xa3\x00\x00\x00'
tRp3141
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3142
I0
sg903
g2698
sS'block_loop.thisRepN'
p3143
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3144
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p3145
Nsg69
Vn
sS'block_loop.thisTrialN'
p3146
I0
sg39
F0.88373026553017553
sg34
g752
(S'\x07\xdf\n\x10\x0f\x079\x05SH'
tRp3147
sa(dp3148
S'trial_loop.thisTrialN'
p3149
I164
sg894
g932
sS'block_loop.thisIndex'
p3150
g888
sg38
S'left'
p3151
sg58
g62
sS'trial_loop.thisN'
p3152
I164
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3153
g59
(g98
S'\xa4\x00\x00\x00'
tRp3154
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3155
I0
sg903
g940
sS'block_loop.thisRepN'
p3156
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3157
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3158
Nsg69
Vn
sS'block_loop.thisTrialN'
p3159
I0
sg39
F0.88345486102844006
sg34
g752
(S'\x07\xdf\n\x10\x0f\x08\x03\x03\xfb\x88'
tRp3160
sa(dp3161
S'trial_loop.thisTrialN'
p3162
I165
sg894
g1731
sS'block_loop.thisIndex'
p3163
g888
sg38
S'left'
p3164
sg58
g62
sS'trial_loop.thisN'
p3165
I165
sg33
g1215
sg63
g64
sS'trial_loop.thisIndex'
p3166
g59
(g98
S'\xa5\x00\x00\x00'
tRp3167
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3168
I0
sg903
g1738
sS'block_loop.thisRepN'
p3169
I0
sg906
g1215
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3170
I0
sg908
g1209
sg55
g11
sS'block_loop.thisTrial'
p3171
Nsg69
Vn
sS'block_loop.thisTrialN'
p3172
I0
sg39
F1.4001134119171184
sg34
g752
(S'\x07\xdf\n\x10\x0f\x08\t\x02\xa7\xb0'
tRp3173
sa(dp3174
S'trial_loop.thisTrialN'
p3175
I166
sg894
g932
sS'block_loop.thisIndex'
p3176
g888
sg38
S'left'
p3177
sg58
g62
sS'trial_loop.thisN'
p3178
I166
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3179
g59
(g98
S'\xa6\x00\x00\x00'
tRp3180
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3181
I0
sg903
g940
sS'block_loop.thisRepN'
p3182
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3183
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3184
Nsg69
Vn
sS'block_loop.thisTrialN'
p3185
I0
sg39
F0.63352984175799065
sg34
g752
(S'\x07\xdf\n\x10\x0f\x08\x0f\tj('
tRp3186
sa(dp3187
S'trial_loop.thisTrialN'
p3188
I167
sg894
g2691
sS'block_loop.thisIndex'
p3189
g888
sg38
S'right'
p3190
sg58
g62
sS'trial_loop.thisN'
p3191
I167
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p3192
g59
(g98
S'\xa7\x00\x00\x00'
tRp3193
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3194
I0
sg903
g2698
sS'block_loop.thisRepN'
p3195
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3196
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p3197
Nsg69
Vn
sS'block_loop.thisTrialN'
p3198
I0
sg39
F0.61683679404086433
sg34
g752
(S'\x07\xdf\n\x10\x0f\x08\x15\x04E\xc0'
tRp3199
sa(dp3200
S'trial_loop.thisTrialN'
p3201
I168
sg894
g1418
sS'block_loop.thisIndex'
p3202
g888
sg38
S'left'
p3203
sg58
g62
sS'trial_loop.thisN'
p3204
I168
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p3205
g59
(g98
S'\xa8\x00\x00\x00'
tRp3206
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3207
I0
sg903
g1425
sS'block_loop.thisRepN'
p3208
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3209
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p3210
Nsg69
Vn
sS'block_loop.thisTrialN'
p3211
I0
sg39
F0.91677566906946595
sg34
g752
(S'\x07\xdf\n\x10\x0f\x08\x1a\x0e%\x18'
tRp3212
sa(dp3213
S'trial_loop.thisTrialN'
p3214
I169
sg894
g895
sS'block_loop.thisIndex'
p3215
g888
sg38
S'left'
p3216
sg58
g62
sS'trial_loop.thisN'
p3217
I169
sg33
g899
sg63
g64
sS'trial_loop.thisIndex'
p3218
g59
(g98
S'\xa9\x00\x00\x00'
tRp3219
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3220
I0
sg903
g904
sS'block_loop.thisRepN'
p3221
I0
sg906
g899
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3222
I0
sg908
g909
sg55
g11
sS'block_loop.thisTrial'
p3223
Nsg69
Vn
sS'block_loop.thisTrialN'
p3224
I0
sg39
F1.3171644854810438
sg34
g752
(S'\x07\xdf\n\x10\x0f\x08 \rFp'
tRp3225
sa(dp3226
S'trial_loop.thisTrialN'
p3227
I170
sg894
g932
sS'block_loop.thisIndex'
p3228
g888
sg38
S'left'
p3229
sg58
g62
sS'trial_loop.thisN'
p3230
I170
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3231
g59
(g98
S'\xaa\x00\x00\x00'
tRp3232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3233
I0
sg903
g940
sS'block_loop.thisRepN'
p3234
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3235
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3236
Nsg69
Vn
sS'block_loop.thisTrialN'
p3237
I0
sg39
F0.66677110750242718
sg34
g752
(S"\x07\xdf\n\x10\x0f\x08'\x03[`"
tRp3238
sa(dp3239
S'trial_loop.thisTrialN'
p3240
I171
sg894
g966
sS'block_loop.thisIndex'
p3241
g888
sg38
S'left'
p3242
sg58
g62
sS'trial_loop.thisN'
p3243
I171
sg33
g977
sg63
g64
sS'trial_loop.thisIndex'
p3244
g59
(g98
S'\xab\x00\x00\x00'
tRp3245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3246
I0
sg903
g974
sS'block_loop.thisRepN'
p3247
I0
sg906
g970
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3248
I0
sg908
g977
sg55
g11
sS'block_loop.thisTrial'
p3249
Nsg69
Vn
sS'block_loop.thisTrialN'
p3250
I0
sg39
F0.75019985357357655
sg34
g752
(S'\x07\xdf\n\x10\x0f\x08,\x0e,\xe8'
tRp3251
sa(dp3252
S'trial_loop.thisTrialN'
p3253
I172
sg894
g1128
sS'block_loop.thisIndex'
p3254
g888
sg38
S'left'
p3255
sg58
g62
sS'trial_loop.thisN'
p3256
I172
sg33
g1132
sg63
g64
sS'trial_loop.thisIndex'
p3257
g59
(g98
S'\xac\x00\x00\x00'
tRp3258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3259
I0
sg903
g1136
sS'block_loop.thisRepN'
p3260
I0
sg906
g1132
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3261
I0
sg908
g1139
sg55
g11
sS'block_loop.thisTrial'
p3262
Nsg69
Vn
sS'block_loop.thisTrialN'
p3263
I0
sg39
F0.61687955871457234
sg34
g752
(S'\x07\xdf\n\x10\x0f\x082\n\xf0\xc8'
tRp3264
sa(dp3265
S'trial_loop.thisTrialN'
p3266
I173
sg894
g1360
sS'block_loop.thisIndex'
p3267
g888
sg38
S'left'
p3268
sg58
g62
sS'trial_loop.thisN'
p3269
I173
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p3270
g59
(g98
S'\xad\x00\x00\x00'
tRp3271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3272
I0
sg903
g1368
sS'block_loop.thisRepN'
p3273
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3274
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p3275
Nsg69
Vn
sS'block_loop.thisTrialN'
p3276
I0
sg39
F0.86686473362715333
sg34
g752
(S'\x07\xdf\n\x10\x0f\x088\x05\x8d\xe0'
tRp3277
sa(dp3278
S'trial_loop.thisTrialN'
p3279
I174
sg894
g2691
sS'block_loop.thisIndex'
p3280
g888
sg38
S'right'
p3281
sg58
g62
sS'trial_loop.thisN'
p3282
I174
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p3283
g59
(g98
S'\xae\x00\x00\x00'
tRp3284
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3285
I0
sg903
g2698
sS'block_loop.thisRepN'
p3286
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3287
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p3288
Nsg69
Vn
sS'block_loop.thisTrialN'
p3289
I0
sg39
F0.66686690037386143
sg34
g752
(S'\x07\xdf\n\x10\x0f\t\x02\x03\xfb\x88'
tRp3290
sa(dp3291
S'trial_loop.thisTrialN'
p3292
I175
sg894
g1515
sS'block_loop.thisIndex'
p3293
g888
sg38
S'right'
p3294
sg58
g62
sS'trial_loop.thisN'
p3295
I175
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3296
g59
(g98
S'\xaf\x00\x00\x00'
tRp3297
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3298
I0
sg903
g1522
sS'block_loop.thisRepN'
p3299
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3300
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3301
Nsg69
Vn
sS'block_loop.thisTrialN'
p3302
I0
sg39
F1.0835365130478749
sg34
g752
(S'\x07\xdf\n\x10\x0f\t\x07\x0e\x92x'
tRp3303
sa(dp3304
S'trial_loop.thisTrialN'
p3305
I176
sg894
g1068
sS'block_loop.thisIndex'
p3306
g888
sg38
S'right'
p3307
sg58
g62
sS'trial_loop.thisN'
p3308
I176
sg33
g1079
sg63
g64
sS'trial_loop.thisIndex'
p3309
g59
(g98
S'\xb0\x00\x00\x00'
tRp3310
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3311
I0
sg903
g1076
sS'block_loop.thisRepN'
p3312
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3313
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p3314
Nsg69
Vn
sS'block_loop.thisTrialN'
p3315
I0
sg39
F0.6668275568736135
sg34
g752
(S'\x07\xdf\n\x10\x0f\t\x0e\x01\x11p'
tRp3316
sa(dp3317
S'trial_loop.thisTrialN'
p3318
I177
sg894
g1034
sS'block_loop.thisIndex'
p3319
g888
sg38
S'right'
p3320
sg58
g62
sS'trial_loop.thisN'
p3321
I177
sg33
g1038
sg63
g64
sS'trial_loop.thisIndex'
p3322
g59
(g98
S'\xb1\x00\x00\x00'
tRp3323
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3324
I0
sg903
g1042
sS'block_loop.thisRepN'
p3325
I0
sg906
g1038
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3326
I0
sg908
g1045
sg55
g11
sS'block_loop.thisTrial'
p3327
Nsg69
Vn
sS'block_loop.thisTrialN'
p3328
I0
sg39
F0.63351701235660585
sg34
g752
(S'\x07\xdf\n\x10\x0f\t\x13\x0b\xe6\xe0'
tRp3329
sa(dp3330
S'trial_loop.thisTrialN'
p3331
I178
sg894
g1188
sS'block_loop.thisIndex'
p3332
g888
sg38
S'right'
p3333
sg58
g62
sS'trial_loop.thisN'
p3334
I178
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p3335
g59
(g98
S'\xb2\x00\x00\x00'
tRp3336
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3337
I0
sg903
g1196
sS'block_loop.thisRepN'
p3338
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3339
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p3340
Nsg69
Vn
sS'block_loop.thisTrialN'
p3341
I0
sg39
F1.0000729850435164
sg34
g752
(S'\x07\xdf\n\x10\x0f\t\x19\x06\xbe\x90'
tRp3342
sa(dp3343
S'trial_loop.thisTrialN'
p3344
I179
sg894
g1869
sS'block_loop.thisIndex'
p3345
g888
sg38
S'right'
p3346
sg58
g62
sS'trial_loop.thisN'
p3347
I179
sg33
g1489
sg63
g64
sS'trial_loop.thisIndex'
p3348
g59
(g98
S'\xb3\x00\x00\x00'
tRp3349
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3350
I0
sg903
g1876
sS'block_loop.thisRepN'
p3351
I0
sg906
g1489
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3352
I0
sg908
g1496
sg55
g11
sS'block_loop.thisTrial'
p3353
Nsg69
Vn
sS'block_loop.thisTrialN'
p3354
I0
sg39
F0.90022574045724468
sg34
g752
(S'\x07\xdf\n\x10\x0f\t\x1f\x07S\x00'
tRp3355
sa(dp3356
S'trial_loop.thisTrialN'
p3357
I180
sg894
g1800
sS'block_loop.thisIndex'
p3358
g888
sg38
S'right'
p3359
sg58
g62
sS'trial_loop.thisN'
p3360
I180
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p3361
g59
(g98
S'\xb4\x00\x00\x00'
tRp3362
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3363
I0
sg903
g1807
sS'block_loop.thisRepN'
p3364
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3365
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p3366
Nsg69
Vn
sS'block_loop.thisTrialN'
p3367
I0
sg39
F0.85012664045279962
sg34
g752
(S'\x07\xdf\n\x10\x0f\t%\x069\xc0'
tRp3368
sa(dp3369
S'trial_loop.thisTrialN'
p3370
I181
sg894
g949
sS'block_loop.thisIndex'
p3371
g888
sg38
S'right'
p3372
sg58
g62
sS'trial_loop.thisN'
p3373
I181
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3374
g59
(g98
S'\xb5\x00\x00\x00'
tRp3375
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3376
I0
sg903
g957
sS'block_loop.thisRepN'
p3377
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3378
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3379
Nsg69
Vn
sS'block_loop.thisTrialN'
p3380
I0
sg39
F2.3168149555458513
sg34
g752
(S'\x07\xdf\n\x10\x0f\t+\x04h\xe8'
tRp3381
sa(dp3382
S'trial_loop.thisTrialN'
p3383
I182
sg894
g2085
sS'block_loop.thisIndex'
p3384
g888
sg38
S'right'
p3385
sg58
g62
sS'trial_loop.thisN'
p3386
I182
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p3387
g59
(g98
S'\xb6\x00\x00\x00'
tRp3388
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3389
I0
sg903
g2093
sS'block_loop.thisRepN'
p3390
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3391
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p3392
Nsg69
Vn
sS'block_loop.thisTrialN'
p3393
I0
sg39
F1.1170816930716683
sg34
g752
(S'\x07\xdf\n\x10\x0f\t2\t\xb4`'
tRp3394
sa(dp3395
S'trial_loop.thisTrialN'
p3396
I183
sg894
g1884
sS'block_loop.thisIndex'
p3397
g888
sg38
S'left'
p3398
sg58
g62
sS'trial_loop.thisN'
p3399
I183
sg33
g1888
sg63
g64
sS'trial_loop.thisIndex'
p3400
g59
(g98
S'\xb7\x00\x00\x00'
tRp3401
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3402
I0
sg903
g1892
sS'block_loop.thisRepN'
p3403
I0
sg906
g1888
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3404
I0
sg908
g1895
sg55
g11
sS'block_loop.thisTrial'
p3405
Nsg69
Vn
sS'block_loop.thisTrialN'
p3406
I0
sg39
F0.91676854162506061
sg34
g752
(S'\x07\xdf\n\x10\x0f\t8\x0c-0'
tRp3407
sa(dp3408
S'trial_loop.thisTrialN'
p3409
I184
sg894
g1222
sS'block_loop.thisIndex'
p3410
g888
sg38
S'right'
p3411
sg58
g62
sS'trial_loop.thisN'
p3412
I184
sg33
g936
sg63
g64
sS'trial_loop.thisIndex'
p3413
g59
(g98
S'\xb8\x00\x00\x00'
tRp3414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3415
I0
sg903
g1229
sS'block_loop.thisRepN'
p3416
I0
sg906
g936
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3417
I0
sg908
g943
sg55
g11
sS'block_loop.thisTrial'
p3418
Nsg69
Vn
sS'block_loop.thisTrialN'
p3419
I0
sg39
F0.633446593197732
sg34
g752
(S'\x07\xdf\n\x10\x0f\n\x02\x0bRp'
tRp3420
sa(dp3421
S'trial_loop.thisTrialN'
p3422
I185
sg894
g1289
sS'block_loop.thisIndex'
p3423
g888
sg38
S'left'
p3424
sg58
g62
sS'trial_loop.thisN'
p3425
I185
sg33
g1293
sg63
g64
sS'trial_loop.thisIndex'
p3426
g59
(g98
S'\xb9\x00\x00\x00'
tRp3427
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3428
I0
sg903
g1297
sS'block_loop.thisRepN'
p3429
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3430
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p3431
Nsg69
Vn
sS'block_loop.thisTrialN'
p3432
I0
sg39
F1.3834166579254088
sg34
g752
(S'\x07\xdf\n\x10\x0f\n\x08\x06.\x08'
tRp3433
sa(dp3434
S'trial_loop.thisTrialN'
p3435
I186
sg894
g2115
sS'block_loop.thisIndex'
p3436
g888
sg38
S'left'
p3437
sg58
g62
sS'trial_loop.thisN'
p3438
I186
sg33
g1192
sg63
g64
sS'trial_loop.thisIndex'
p3439
g59
(g98
S'\xba\x00\x00\x00'
tRp3440
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3441
I0
sg903
g2122
sS'block_loop.thisRepN'
p3442
I0
sg906
g1192
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3443
I0
sg908
g1199
sg55
g11
sS'block_loop.thisTrial'
p3444
Nsg69
Vn
sS'block_loop.thisTrialN'
p3445
I0
sg39
F1.3000959639284702
sg34
g752
(S'\x07\xdf\n\x10\x0f\n\x0e\x0c\xb2\x00'
tRp3446
sa(dp3447
S'trial_loop.thisTrialN'
p3448
I187
sg894
g1098
sS'block_loop.thisIndex'
p3449
g888
sg38
S'left'
p3450
sg58
g62
sS'trial_loop.thisN'
p3451
I187
sg33
g1108
sg63
g64
sS'trial_loop.thisIndex'
p3452
g59
(g98
S'\xbb\x00\x00\x00'
tRp3453
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3454
I0
sg903
g1106
sS'block_loop.thisRepN'
p3455
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3456
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p3457
Nsg69
Vn
sS'block_loop.thisTrialN'
p3458
I0
sg39
F1.0000952226728259
sg34
g752
(S'\x07\xdf\n\x10\x0f\n\x15\x02\x88p'
tRp3459
sa(dp3460
S'trial_loop.thisTrialN'
p3461
I188
sg894
g983
sS'block_loop.thisIndex'
p3462
g888
sg38
S'right'
p3463
sg58
g62
sS'trial_loop.thisN'
p3464
I188
sg33
g987
sg63
g64
sS'trial_loop.thisIndex'
p3465
g59
(g98
S'\xbc\x00\x00\x00'
tRp3466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3467
I0
sg903
g991
sS'block_loop.thisRepN'
p3468
I0
sg906
g987
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3469
I0
sg908
g994
sg55
g11
sS'block_loop.thisTrial'
p3470
Nsg69
Vn
sS'block_loop.thisTrialN'
p3471
I0
sg39
F0.93344790464470861
sg34
g752
(S'\x07\xdf\n\x10\x0f\n\x1b\x02\xdax'
tRp3472
sa(dp3473
S'trial_loop.thisTrialN'
p3474
I189
sg894
g1772
sS'block_loop.thisIndex'
p3475
g888
sg38
S'right'
p3476
sg58
g62
sS'trial_loop.thisN'
p3477
I189
sg33
g1364
sg63
g64
sS'trial_loop.thisIndex'
p3478
g59
(g98
S'\xbd\x00\x00\x00'
tRp3479
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3480
I0
sg903
g1779
sS'block_loop.thisRepN'
p3481
I0
sg906
g1364
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3482
I0
sg908
g1371
sg55
g11
sS'block_loop.thisTrial'
p3483
Nsg69
Vn
sS'block_loop.thisTrialN'
p3484
I0
sg39
F0.9167582780974044
sg34
g752
(S'\x07\xdf\n\x10\x0f\n!\x02x\xd0'
tRp3485
sa(dp3486
S'trial_loop.thisTrialN'
p3487
I190
sg894
g1289
sS'block_loop.thisIndex'
p3488
g888
sg38
S'left'
p3489
sg58
g62
sS'trial_loop.thisN'
p3490
I190
sg33
g1300
sg63
g64
sS'trial_loop.thisIndex'
p3491
g59
(g98
S'\xbe\x00\x00\x00'
tRp3492
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3493
I0
sg903
g1297
sS'block_loop.thisRepN'
p3494
I0
sg906
g1293
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3495
I0
sg908
g1300
sg55
g11
sS'block_loop.thisTrial'
p3496
Nsg69
Vn
sS'block_loop.thisTrialN'
p3497
I0
sg39
F0.96676643189857714
sg34
g752
(S"\x07\xdf\n\x10\x0f\n'\x01\x9e\x10"
tRp3498
sa(dp3499
S'trial_loop.thisTrialN'
p3500
I191
sg894
g1979
sS'block_loop.thisIndex'
p3501
g888
sg38
S'right'
p3502
sg58
g62
sS'trial_loop.thisN'
p3503
I191
sg33
g1004
sg63
g64
sS'trial_loop.thisIndex'
p3504
g59
(g98
S'\xbf\x00\x00\x00'
tRp3505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3506
I0
sg903
g1986
sS'block_loop.thisRepN'
p3507
I0
sg906
g1004
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3508
I0
sg908
g1011
sg55
g11
sS'block_loop.thisTrial'
p3509
Nsg69
Vn
sS'block_loop.thisTrialN'
p3510
I0
sg39
F1.0167914064659271
sg34
g752
(S'\x07\xdf\n\x10\x0f\n-\x01\xb5\x80'
tRp3511
sa(dp3512
S'trial_loop.thisTrialN'
p3513
I192
sg894
g2286
sS'block_loop.thisIndex'
p3514
g888
sg38
S'left'
p3515
sg58
g62
sS'trial_loop.thisN'
p3516
I192
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p3517
g59
(g98
S'\xc0\x00\x00\x00'
tRp3518
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3519
I0
sg903
g2293
sS'block_loop.thisRepN'
p3520
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3521
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p3522
Nsg69
Vn
sS'block_loop.thisTrialN'
p3523
I0
sg39
F0.78344910205487395
sg34
g752
(S'\x07\xdf\n\x10\x0f\n3\x02\x84\x88'
tRp3524
sa(dp3525
S'trial_loop.thisTrialN'
p3526
I193
sg894
g1854
sS'block_loop.thisIndex'
p3527
g888
sg38
S'left'
p3528
sg58
g62
sS'trial_loop.thisN'
p3529
I193
sg33
g1072
sg63
g64
sS'trial_loop.thisIndex'
p3530
g59
(g98
S'\xc1\x00\x00\x00'
tRp3531
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3532
I0
sg903
g1861
sS'block_loop.thisRepN'
p3533
I0
sg906
g1072
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3534
I0
sg908
g1079
sg55
g11
sS'block_loop.thisTrial'
p3535
Nsg69
Vn
sS'block_loop.thisTrialN'
p3536
I0
sg39
F0.73352590740978485
sg34
g752
(S'\x07\xdf\n\x10\x0f\n8\x0e\xff\xd8'
tRp3537
sa(dp3538
S'trial_loop.thisTrialN'
p3539
I194
sg894
g1017
sS'block_loop.thisIndex'
p3540
g888
sg38
S'left'
p3541
sg58
g62
sS'trial_loop.thisN'
p3542
I194
sg33
g1021
sg63
g64
sS'trial_loop.thisIndex'
p3543
g59
(g98
S'\xc2\x00\x00\x00'
tRp3544
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3545
I0
sg903
g1025
sS'block_loop.thisRepN'
p3546
I0
sg906
g1021
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3547
I0
sg908
g1028
sg55
g11
sS'block_loop.thisTrial'
p3548
Nsg69
Vn
sS'block_loop.thisTrialN'
p3549
I0
sg39
F1.7667486417922191
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0b\x02\x0bJ\xa0'
tRp3550
sa(dp3551
S'trial_loop.thisTrialN'
p3552
I195
sg894
g1688
sS'block_loop.thisIndex'
p3553
g888
sg38
S'left'
p3554
sg58
g62
sS'trial_loop.thisN'
p3555
I195
sg33
g1055
sg63
g64
sS'trial_loop.thisIndex'
p3556
g59
(g98
S'\xc3\x00\x00\x00'
tRp3557
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3558
I0
sg903
g1695
sS'block_loop.thisRepN'
p3559
I0
sg906
g1061
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3560
I0
sg908
g1055
sg55
g11
sS'block_loop.thisTrial'
p3561
Nsg69
Vn
sS'block_loop.thisTrialN'
p3562
I0
sg39
F2.316521874985483
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0b\t\x08AH'
tRp3563
sa(dp3564
S'trial_loop.thisTrialN'
p3565
I196
sg894
g2719
sS'block_loop.thisIndex'
p3566
g888
sg38
S'right'
p3567
sg58
g62
sS'trial_loop.thisN'
p3568
I196
sg33
g953
sg63
g64
sS'trial_loop.thisIndex'
p3569
g59
(g98
S'\xc4\x00\x00\x00'
tRp3570
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3571
I0
sg903
g2726
sS'block_loop.thisRepN'
p3572
I0
sg906
g953
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3573
I0
sg908
g960
sg55
g11
sS'block_loop.thisTrial'
p3574
Nsg69
Vn
sS'block_loop.thisTrialN'
p3575
I0
sg39
F0.76688035699044121
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0b\x10\r\x90\xa8'
tRp3576
sa(dp3577
S'trial_loop.thisTrialN'
p3578
I197
sg894
g2286
sS'block_loop.thisIndex'
p3579
g888
sg38
S'left'
p3580
sg58
g62
sS'trial_loop.thisN'
p3581
I197
sg33
g2089
sg63
g64
sS'trial_loop.thisIndex'
p3582
g59
(g98
S'\xc5\x00\x00\x00'
tRp3583
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3584
I0
sg903
g2293
sS'block_loop.thisRepN'
p3585
I0
sg906
g2089
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3586
I0
sg908
g2096
sg55
g11
sS'block_loop.thisTrial'
p3587
Nsg69
Vn
sS'block_loop.thisTrialN'
p3588
I0
sg39
F0.7167615852340532
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0b\x16\n\x8f '
tRp3589
sa(dp3590
S'trial_loop.thisTrialN'
p3591
I198
sg894
g1173
sS'block_loop.thisIndex'
p3592
g888
sg38
S'right'
p3593
sg58
g62
sS'trial_loop.thisN'
p3594
I198
sg33
g919
sg63
g64
sS'trial_loop.thisIndex'
p3595
g59
(g98
S'\xc6\x00\x00\x00'
tRp3596
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3597
I0
sg903
g1180
sS'block_loop.thisRepN'
p3598
I0
sg906
g919
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3599
I0
sg908
g926
sg55
g11
sS'block_loop.thisTrial'
p3600
Nsg69
Vn
sS'block_loop.thisTrialN'
p3601
I0
sg39
F2.9667590193530486
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0b\x1c\x06\xd9\xe8'
tRp3602
sa(dp3603
S'trial_loop.thisTrialN'
p3604
I199
sg894
g1377
sS'block_loop.thisIndex'
p3605
g888
sg38
S'right'
p3606
sg58
g62
sS'trial_loop.thisN'
p3607
I199
sg33
g1102
sg63
g64
sS'trial_loop.thisIndex'
p3608
g59
(g98
S'\xc7\x00\x00\x00'
tRp3609
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3610
I0
sg903
g1384
sS'block_loop.thisRepN'
p3611
I0
sg906
g1108
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3612
I0
sg908
g1102
sg55
g11
sS'block_loop.thisTrial'
p3613
Nsg69
Vn
sS'block_loop.thisTrialN'
p3614
I0
sg39
F0.85019705961531145
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0b$\x06\xa7 '
tRp3615
sa(dp3616
S'block_loop.thisRepN'
p3617
I0
sg55
g11
sg41
F16.466835995764995
sg56
Vr
sS'block_loop.thisIndex'
p3618
g888
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3619
I0
sg40
S'space'
p3620
sg63
g64
sS'block_loop.thisTrial'
p3621
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3622
I0
sg69
Vn
sa(dp3623
S'block_loop.thisRepN'
p3624
I1
sg56
Vr
sS'block_loop.thisIndex'
p3625
g59
(g98
S'\x00\x00\x00\x00'
tRp3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p3627
I1
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p3628
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p3629
I0
sg69
Vn
sa(dp3630
S'trial_loop.thisTrialN'
p3631
I0
sS'img_left'
p3632
S'23-crunchie_redo.png'
p3633
sS'block_loop.thisIndex'
p3634
g3626
sg38
S'left'
p3635
sg58
g62
sS'trial_loop.thisN'
p3636
I0
sg33
S'23-crunchie_redo.png'
p3637
sg63
g64
sS'trial_loop.thisIndex'
p3638
g59
(g98
S'\x00\x00\x00\x00'
tRp3639
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3640
I0
sS'img_right'
p3641
S'33-ambrosia_rice.png'
p3642
sS'block_loop.thisRepN'
p3643
I1
sS'img_correct'
p3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3645
I1
sS'img_wrong'
p3646
S'33-ambrosia_rice.png'
p3647
sg55
g11
sS'block_loop.thisTrial'
p3648
Nsg69
Vn
sS'block_loop.thisTrialN'
p3649
I0
sg39
F1.3668687249955838
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c\x03\x0c\xaa0'
tRp3650
sa(dp3651
S'trial_loop.thisTrialN'
p3652
I1
sg3632
S'30-spaghetti_hoops.png'
p3653
sS'block_loop.thisIndex'
p3654
g3626
sg38
S'left'
p3655
sg58
g62
sS'trial_loop.thisN'
p3656
I1
sg33
S'30-spaghetti_hoops.png'
p3657
sg63
g64
sS'trial_loop.thisIndex'
p3658
g59
(g98
S'\x01\x00\x00\x00'
tRp3659
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3660
I0
sg3641
S'19-caramello_redo.png'
p3661
sS'block_loop.thisRepN'
p3662
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3663
I1
sg3646
S'19-caramello_redo.png'
p3664
sg55
g11
sS'block_loop.thisTrial'
p3665
Nsg69
Vn
sS'block_loop.thisTrialN'
p3666
I0
sg39
F1.5834963142551715
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c\n\x03r\xd0'
tRp3667
sa(dp3668
S'trial_loop.thisTrialN'
p3669
I2
sg3632
S'21-nakd_banana_crunch.png'
p3670
sS'block_loop.thisIndex'
p3671
g3626
sg38
S'right'
p3672
sg58
g62
sS'trial_loop.thisN'
p3673
I2
sg33
S'1-treacle_cookies.png'
p3674
sg63
g64
sS'trial_loop.thisIndex'
p3675
g59
(g98
S'\x02\x00\x00\x00'
tRp3676
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3677
I0
sg3641
S'1-treacle_cookies.png'
p3678
sS'block_loop.thisRepN'
p3679
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3680
I1
sg3646
S'21-nakd_banana_crunch.png'
p3681
sg55
g11
sS'block_loop.thisTrial'
p3682
Nsg69
Vn
sS'block_loop.thisTrialN'
p3683
I0
sg39
F0.71685452712699771
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c\x10\x0c\xd1@'
tRp3684
sa(dp3685
S'trial_loop.thisTrialN'
p3686
I3
sg3632
S'25-kitkat.png'
p3687
sS'block_loop.thisIndex'
p3688
g3626
sg38
S'right'
p3689
sg58
g62
sS'trial_loop.thisN'
p3690
I3
sg33
S'31-hobnobs.png'
p3691
sg63
g64
sS'trial_loop.thisIndex'
p3692
g59
(g98
S'\x03\x00\x00\x00'
tRp3693
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3694
I0
sg3641
S'31-hobnobs.png'
p3695
sS'block_loop.thisRepN'
p3696
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3697
I1
sg3646
S'25-kitkat.png'
p3698
sg55
g11
sS'block_loop.thisTrial'
p3699
Nsg69
Vn
sS'block_loop.thisTrialN'
p3700
I0
sg39
F0.66682042942920816
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c\x16\t\x18 '
tRp3701
sa(dp3702
S'trial_loop.thisTrialN'
p3703
I4
sg3632
S'5-pineapple.png'
p3704
sS'block_loop.thisIndex'
p3705
g3626
sg38
S'right'
p3706
sg58
g62
sS'trial_loop.thisN'
p3707
I4
sg33
S'40-sardines.png'
p3708
sg63
g64
sS'trial_loop.thisIndex'
p3709
g59
(g98
S'\x04\x00\x00\x00'
tRp3710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3711
I0
sg3641
S'40-sardines.png'
p3712
sS'block_loop.thisRepN'
p3713
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3714
I1
sg3646
S'5-pineapple.png'
p3715
sg55
g11
sS'block_loop.thisTrial'
p3716
Nsg69
Vn
sS'block_loop.thisTrialN'
p3717
I0
sg39
F0.95051072424030281
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c\x1c\x04l\xd0'
tRp3718
sa(dp3719
S'trial_loop.thisTrialN'
p3720
I5
sg3632
S'38-maltesers.png'
p3721
sS'block_loop.thisIndex'
p3722
g3626
sg38
S'left'
p3723
sg58
g62
sS'trial_loop.thisN'
p3724
I5
sg33
S'38-maltesers.png'
p3725
sg63
g64
sS'trial_loop.thisIndex'
p3726
g59
(g98
S'\x05\x00\x00\x00'
tRp3727
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3728
I0
sg3641
S'6-sour_patch_kids.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3731
I1
sg3646
S'6-sour_patch_kids.png'
p3732
sg55
g11
sS'block_loop.thisTrial'
p3733
Nsg69
Vn
sS'block_loop.thisTrialN'
p3734
I0
sg39
F1.716578837531415
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c"\x04I\xa8'
tRp3735
sa(dp3736
S'trial_loop.thisTrialN'
p3737
I6
sg3632
S'43-mrporky_pork_crackles_redo.png'
p3738
sS'block_loop.thisIndex'
p3739
g3626
sg38
S'left'
p3740
sg58
g62
sS'trial_loop.thisN'
p3741
I6
sg33
S'18-mms.png'
p3742
sg63
g64
sS'trial_loop.thisIndex'
p3743
g59
(g98
S'\x06\x00\x00\x00'
tRp3744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3745
I0
sg3641
S'18-mms.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3644
S'43-mrporky_pork_crackles_redo.png'
p3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3749
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p3750
Nsg69
Vn
sS'block_loop.thisTrialN'
p3751
I0
sg39
F1.2001651856771787
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c)\x00N '
tRp3752
sa(dp3753
S'trial_loop.thisTrialN'
p3754
I7
sg3632
S'26-walkers_smoky_bacon.png'
p3755
sS'block_loop.thisIndex'
p3756
g3626
sg38
S'left'
p3757
sg58
g62
sS'trial_loop.thisN'
p3758
I7
sg33
S'26-walkers_smoky_bacon.png'
p3759
sg63
g64
sS'trial_loop.thisIndex'
p3760
g59
(g98
S'\x07\x00\x00\x00'
tRp3761
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3762
I0
sg3641
S'44-crunch.png'
p3763
sS'block_loop.thisRepN'
p3764
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3765
I1
sg3646
S'44-crunch.png'
p3766
sg55
g11
sS'block_loop.thisTrial'
p3767
Nsg69
Vn
sS'block_loop.thisTrialN'
p3768
I0
sg39
F0.90015959776064847
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c/\x03\xf7\xa0'
tRp3769
sa(dp3770
S'trial_loop.thisTrialN'
p3771
I8
sg3632
g3653
sS'block_loop.thisIndex'
p3772
g3626
sg38
S'left'
p3773
sg58
g62
sS'trial_loop.thisN'
p3774
I8
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3775
g59
(g98
S'\x08\x00\x00\x00'
tRp3776
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3777
I0
sg3641
g3661
sS'block_loop.thisRepN'
p3778
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3779
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3780
Nsg69
Vn
sS'block_loop.thisTrialN'
p3781
I0
sg39
F1.3167485277554078
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c5\x02\xde`'
tRp3782
sa(dp3783
S'trial_loop.thisTrialN'
p3784
I9
sg3632
S'7-olives.png'
p3785
sS'block_loop.thisIndex'
p3786
g3626
sg38
S'left'
p3787
sg58
g62
sS'trial_loop.thisN'
p3788
I9
sg33
S'7-olives.png'
p3789
sg63
g64
sS'trial_loop.thisIndex'
p3790
g59
(g98
S'\t\x00\x00\x00'
tRp3791
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3792
I0
sg3641
S'22-daim.png'
p3793
sS'block_loop.thisRepN'
p3794
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3795
I1
sg3646
S'22-daim.png'
p3796
sg55
g11
sS'block_loop.thisTrial'
p3797
Nsg69
Vn
sS'block_loop.thisTrialN'
p3798
I0
sg39
F0.83385097594873514
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0c;\x081\xa8'
tRp3799
sa(dp3800
S'trial_loop.thisTrialN'
p3801
I10
sg3632
g3704
sS'block_loop.thisIndex'
p3802
g3626
sg38
S'right'
p3803
sg58
g62
sS'trial_loop.thisN'
p3804
I10
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p3805
g59
(g98
S'\n\x00\x00\x00'
tRp3806
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3807
I0
sg3641
g3712
sS'block_loop.thisRepN'
p3808
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3809
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p3810
Nsg69
Vn
sS'block_loop.thisTrialN'
p3811
I0
sg39
F0.81685715002458892
sg34
g752
(S'\x07\xdf\n\x10\x0f\r\x05\x06&8'
tRp3812
sa(dp3813
S'trial_loop.thisTrialN'
p3814
I11
sg3632
S'8-liquorice_catherine_wheels.png'
p3815
sS'block_loop.thisIndex'
p3816
g3626
sg38
S'right'
p3817
sg58
g62
sS'trial_loop.thisN'
p3818
I11
sg33
S'8-liquorice_catherine_wheels.png'
p3819
sg63
g64
sS'trial_loop.thisIndex'
p3820
g59
(g98
S'\x0b\x00\x00\x00'
tRp3821
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3822
I0
sg3641
S'17-jacobs_mini_cheddars_redo.png'
p3823
sS'block_loop.thisRepN'
p3824
I1
sg3644
S'17-jacobs_mini_cheddars_redo.png'
p3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3826
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p3827
Nsg69
Vn
sS'block_loop.thisTrialN'
p3828
I0
sg39
F0.93352031948961667
sg34
g752
(S'\x07\xdf\n\x10\x0f\r\x0b\x03\xdcH'
tRp3829
sa(dp3830
S'trial_loop.thisTrialN'
p3831
I12
sg3632
S'18-mms.png'
p3832
sS'block_loop.thisIndex'
p3833
g3626
sg38
S'right'
p3834
sg58
g62
sS'trial_loop.thisN'
p3835
I12
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p3836
g59
(g98
S'\x0c\x00\x00\x00'
tRp3837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3838
I0
sg3641
S'43-mrporky_pork_crackles_redo.png'
p3839
sS'block_loop.thisRepN'
p3840
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3841
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p3842
Nsg69
Vn
sS'block_loop.thisTrialN'
p3843
I0
sg39
F1.1834681465916219
sg34
g752
(S'\x07\xdf\n\x10\x0f\r\x11\x03z\xa0'
tRp3844
sa(dp3845
S'trial_loop.thisTrialN'
p3846
I13
sg3632
S'44-crunch.png'
p3847
sS'block_loop.thisIndex'
p3848
g3626
sg38
S'right'
p3849
sg58
g62
sS'trial_loop.thisN'
p3850
I13
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p3851
g59
(g98
S'\r\x00\x00\x00'
tRp3852
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3853
I0
sg3641
S'26-walkers_smoky_bacon.png'
p3854
sS'block_loop.thisRepN'
p3855
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3856
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p3857
Nsg69
Vn
sS'block_loop.thisTrialN'
p3858
I0
sg39
F1.033437698140915
sg34
g752
(S'\x07\xdf\n\x10\x0f\r\x17\x06\xa7 '
tRp3859
sa(dp3860
S'trial_loop.thisTrialN'
p3861
I14
sg3632
S'13-mccoys_steak_crisps.png'
p3862
sS'block_loop.thisIndex'
p3863
g3626
sg38
S'right'
p3864
sg58
g62
sS'trial_loop.thisN'
p3865
I14
sg33
S'3-ellas_strawberries_apples.png'
p3866
sg63
g64
sS'trial_loop.thisIndex'
p3867
g59
(g98
S'\x0e\x00\x00\x00'
tRp3868
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3869
I0
sg3641
S'3-ellas_strawberries_apples.png'
p3870
sS'block_loop.thisRepN'
p3871
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3872
I1
sg3646
S'13-mccoys_steak_crisps.png'
p3873
sg55
g11
sS'block_loop.thisTrial'
p3874
Nsg69
Vn
sS'block_loop.thisTrialN'
p3875
I0
sg39
F0.66677909024292603
sg34
g752
(S'\x07\xdf\n\x10\x0f\r\x1d\x07\xb4\xa8'
tRp3876
sa(dp3877
S'trial_loop.thisTrialN'
p3878
I15
sg3632
S'40-sardines.png'
p3879
sS'block_loop.thisIndex'
p3880
g3626
sg38
S'left'
p3881
sg58
g62
sS'trial_loop.thisN'
p3882
I15
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p3883
g59
(g98
S'\x0f\x00\x00\x00'
tRp3884
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3885
I0
sg3641
S'5-pineapple.png'
p3886
sS'block_loop.thisRepN'
p3887
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3888
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p3889
Nsg69
Vn
sS'block_loop.thisTrialN'
p3890
I0
sg39
F0.80056295416216017
sg34
g752
(S'\x07\xdf\n\x10\x0f\r#\x03C\xf0'
tRp3891
sa(dp3892
S'trial_loop.thisTrialN'
p3893
I16
sg3632
S'19-caramello_redo.png'
p3894
sS'block_loop.thisIndex'
p3895
g3626
sg38
S'right'
p3896
sg58
g62
sS'trial_loop.thisN'
p3897
I16
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p3898
g59
(g98
S'\x10\x00\x00\x00'
tRp3899
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3900
I0
sg3641
S'30-spaghetti_hoops.png'
p3901
sS'block_loop.thisRepN'
p3902
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3903
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p3904
Nsg69
Vn
sS'block_loop.thisTrialN'
p3905
I0
sg39
F0.73344009296124568
sg34
g752
(S'\x07\xdf\n\x10\x0f\r)\x00\x80\xe8'
tRp3906
sa(dp3907
S'trial_loop.thisTrialN'
p3908
I17
sg3632
S'45-chewy_nougat_redo.png'
p3909
sS'block_loop.thisIndex'
p3910
g3626
sg38
S'right'
p3911
sg58
g62
sS'trial_loop.thisN'
p3912
I17
sg33
S'41-peanuts_redo.png'
p3913
sg63
g64
sS'trial_loop.thisIndex'
p3914
g59
(g98
S'\x11\x00\x00\x00'
tRp3915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3916
I0
sg3641
S'41-peanuts_redo.png'
p3917
sS'block_loop.thisRepN'
p3918
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3919
I1
sg3646
S'45-chewy_nougat_redo.png'
p3920
sg55
g11
sS'block_loop.thisTrial'
p3921
Nsg69
Vn
sS'block_loop.thisTrialN'
p3922
I0
sg39
F0.7834302855990245
sg34
g752
(S'\x07\xdf\n\x10\x0f\r.\x0cH\x88'
tRp3923
sa(dp3924
S'trial_loop.thisTrialN'
p3925
I18
sg3632
g3738
sS'block_loop.thisIndex'
p3926
g3626
sg38
S'left'
p3927
sg58
g62
sS'trial_loop.thisN'
p3928
I18
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p3929
g59
(g98
S'\x12\x00\x00\x00'
tRp3930
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3931
I0
sg3641
g3746
sS'block_loop.thisRepN'
p3932
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3933
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p3934
Nsg69
Vn
sS'block_loop.thisTrialN'
p3935
I0
sg39
F1.2668618256320769
sg34
g752
(S'\x07\xdf\n\x10\x0f\r4\t\x85\x80'
tRp3936
sa(dp3937
S'trial_loop.thisTrialN'
p3938
I19
sg3632
S'20-fruit_pastilles.png'
p3939
sS'block_loop.thisIndex'
p3940
g3626
sg38
S'right'
p3941
sg58
g62
sS'trial_loop.thisN'
p3942
I19
sg33
S'2-steamed_puddings.png'
p3943
sg63
g64
sS'trial_loop.thisIndex'
p3944
g59
(g98
S'\x13\x00\x00\x00'
tRp3945
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3946
I0
sg3641
S'2-steamed_puddings.png'
p3947
sS'block_loop.thisRepN'
p3948
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3949
I1
sg3646
S'20-fruit_pastilles.png'
p3950
sg55
g11
sS'block_loop.thisTrial'
p3951
Nsg69
Vn
sS'block_loop.thisTrialN'
p3952
I0
sg39
F0.93352972771754139
sg34
g752
(S'\x07\xdf\n\x10\x0f\r:\x0e%\x18'
tRp3953
sa(dp3954
S'trial_loop.thisTrialN'
p3955
I20
sg3632
S'46-pistachios.png'
p3956
sS'block_loop.thisIndex'
p3957
g3626
sg38
S'left'
p3958
sg58
g62
sS'trial_loop.thisN'
p3959
I20
sg33
S'46-pistachios.png'
p3960
sg63
g64
sS'trial_loop.thisIndex'
p3961
g59
(g98
S'\x14\x00\x00\x00'
tRp3962
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3963
I0
sg3641
S'29-beans.png'
p3964
sS'block_loop.thisRepN'
p3965
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3966
I1
sg3646
S'29-beans.png'
p3967
sg55
g11
sS'block_loop.thisTrial'
p3968
Nsg69
Vn
sS'block_loop.thisTrialN'
p3969
I0
sg39
F0.86674670313004754
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e\x04\r\x84\xf0'
tRp3970
sa(dp3971
S'trial_loop.thisTrialN'
p3972
I21
sg3632
S'4-corn.png'
p3973
sS'block_loop.thisIndex'
p3974
g3626
sg38
S'left'
p3975
sg58
g62
sS'trial_loop.thisN'
p3976
I21
sg33
S'4-corn.png'
p3977
sg63
g64
sS'trial_loop.thisIndex'
p3978
g59
(g98
S'\x15\x00\x00\x00'
tRp3979
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3980
I0
sg3641
S'10-bounty_redo.png'
p3981
sS'block_loop.thisRepN'
p3982
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3983
I1
sg3646
S'10-bounty_redo.png'
p3984
sg55
g11
sS'block_loop.thisTrial'
p3985
Nsg69
Vn
sS'block_loop.thisTrialN'
p3986
I0
sg39
F1.2338013119078823
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e\n\x0c-0'
tRp3987
sa(dp3988
S'trial_loop.thisTrialN'
p3989
I22
sg3632
g3738
sS'block_loop.thisIndex'
p3990
g3626
sg38
S'left'
p3991
sg58
g62
sS'trial_loop.thisN'
p3992
I22
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p3993
g59
(g98
S'\x16\x00\x00\x00'
tRp3994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p3995
I0
sg3641
g3746
sS'block_loop.thisRepN'
p3996
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p3997
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p3998
Nsg69
Vn
sS'block_loop.thisTrialN'
p3999
I0
sg39
F1.1001089643868909
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e\x11\x00\xd2\xf0'
tRp4000
sa(dp4001
S'trial_loop.thisTrialN'
p4002
I23
sg3632
S'27-hartleys_raspberries_jelly.png'
p4003
sS'block_loop.thisIndex'
p4004
g3626
sg38
S'left'
p4005
sg58
g62
sS'trial_loop.thisN'
p4006
I23
sg33
S'27-hartleys_raspberries_jelly.png'
p4007
sg63
g64
sS'trial_loop.thisIndex'
p4008
g59
(g98
S'\x17\x00\x00\x00'
tRp4009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4010
I0
sg3641
S'51-mars.png'
p4011
sS'block_loop.thisRepN'
p4012
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4013
I1
sg3646
S'51-mars.png'
p4014
sg55
g11
sS'block_loop.thisTrial'
p4015
Nsg69
Vn
sS'block_loop.thisTrialN'
p4016
I0
sg39
F0.93344533876370406
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e\x17\x02\xd2\xa8'
tRp4017
sa(dp4018
S'trial_loop.thisTrialN'
p4019
I24
sg3632
S'34-hula_hoops_bbq_beef_redo.png'
p4020
sS'block_loop.thisIndex'
p4021
g3626
sg38
S'left'
p4022
sg58
g62
sS'trial_loop.thisN'
p4023
I24
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p4024
sg63
g64
sS'trial_loop.thisIndex'
p4025
g59
(g98
S'\x18\x00\x00\x00'
tRp4026
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4027
I0
sg3641
S'36-fig_rolls.png'
p4028
sS'block_loop.thisRepN'
p4029
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4030
I1
sg3646
S'36-fig_rolls.png'
p4031
sg55
g11
sS'block_loop.thisTrial'
p4032
Nsg69
Vn
sS'block_loop.thisTrialN'
p4033
I0
sg39
F1.7334466502143187
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e\x1d\x02m\x18'
tRp4034
sa(dp4035
S'trial_loop.thisTrialN'
p4036
I25
sg3632
S'31-hobnobs.png'
p4037
sS'block_loop.thisIndex'
p4038
g3626
sg38
S'left'
p4039
sg58
g62
sS'trial_loop.thisN'
p4040
I25
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4041
g59
(g98
S'\x19\x00\x00\x00'
tRp4042
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4043
I0
sg3641
S'25-kitkat.png'
p4044
sS'block_loop.thisRepN'
p4045
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4046
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4047
Nsg69
Vn
sS'block_loop.thisTrialN'
p4048
I0
sg39
F2.3001415795806679
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e#\x0e0\xd0'
tRp4049
sa(dp4050
S'trial_loop.thisTrialN'
p4051
I26
sg3632
S'35-raisins.png'
p4052
sS'block_loop.thisIndex'
p4053
g3626
sg38
S'left'
p4054
sg58
g62
sS'trial_loop.thisN'
p4055
I26
sg33
S'49-yorkie.png'
p4056
sg63
g64
sS'trial_loop.thisIndex'
p4057
g59
(g98
S'\x1a\x00\x00\x00'
tRp4058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4059
I0
sg3641
S'49-yorkie.png'
p4060
sS'block_loop.thisRepN'
p4061
I1
sg3644
S'35-raisins.png'
p4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4063
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p4064
Nsg69
Vn
sS'block_loop.thisTrialN'
p4065
I0
sg39
F0.68390320586695452
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e+\x03\xffp'
tRp4066
sa(dp4067
S'trial_loop.thisTrialN'
p4068
I27
sg3632
g3879
sS'block_loop.thisIndex'
p4069
g3626
sg38
S'left'
p4070
sg58
g62
sS'trial_loop.thisN'
p4071
I27
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4072
g59
(g98
S'\x1b\x00\x00\x00'
tRp4073
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4074
I0
sg3641
g3886
sS'block_loop.thisRepN'
p4075
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4076
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4077
Nsg69
Vn
sS'block_loop.thisTrialN'
p4078
I0
sg39
F0.86685133403079817
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e0\x0e\xd0\xf8'
tRp4079
sa(dp4080
S'trial_loop.thisTrialN'
p4081
I28
sg3632
g4003
sS'block_loop.thisIndex'
p4082
g3626
sg38
S'left'
p4083
sg58
g62
sS'trial_loop.thisN'
p4084
I28
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p4085
g59
(g98
S'\x1c\x00\x00\x00'
tRp4086
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4087
I0
sg3641
g4011
sS'block_loop.thisRepN'
p4088
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4089
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p4090
Nsg69
Vn
sS'block_loop.thisTrialN'
p4091
I0
sg39
F0.90011512249839143
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0e6\r>\xa0'
tRp4092
sa(dp4093
S'trial_loop.thisTrialN'
p4094
I29
sg3632
g3862
sS'block_loop.thisIndex'
p4095
g3626
sg38
S'right'
p4096
sg58
g62
sS'trial_loop.thisN'
p4097
I29
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p4098
g59
(g98
S'\x1d\x00\x00\x00'
tRp4099
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4100
I0
sg3641
g3870
sS'block_loop.thisRepN'
p4101
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4102
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p4103
Nsg69
Vn
sS'block_loop.thisTrialN'
p4104
I0
sg39
F0.63344459751169779
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f\x00\x0cc\xe0'
tRp4105
sa(dp4106
S'trial_loop.thisTrialN'
p4107
I30
sg3632
S'1-treacle_cookies.png'
p4108
sS'block_loop.thisIndex'
p4109
g3626
sg38
S'left'
p4110
sg58
g62
sS'trial_loop.thisN'
p4111
I30
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4112
g59
(g98
S'\x1e\x00\x00\x00'
tRp4113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4114
I0
sg3641
S'21-nakd_banana_crunch.png'
p4115
sS'block_loop.thisRepN'
p4116
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4117
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4118
Nsg69
Vn
sS'block_loop.thisTrialN'
p4119
I0
sg39
F0.58353024089592509
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f\x06\x07?x'
tRp4120
sa(dp4121
S'trial_loop.thisTrialN'
p4122
I31
sg3632
S'17-jacobs_mini_cheddars_redo.png'
p4123
sS'block_loop.thisIndex'
p4124
g3626
sg38
S'left'
p4125
sg58
g62
sS'trial_loop.thisN'
p4126
I31
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4127
g59
(g98
S'\x1f\x00\x00\x00'
tRp4128
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4129
I0
sg3641
S'8-liquorice_catherine_wheels.png'
p4130
sS'block_loop.thisRepN'
p4131
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4132
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p4133
Nsg69
Vn
sS'block_loop.thisTrialN'
p4134
I0
sg39
F0.76685925974743441
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f\x0c\x01cx'
tRp4135
sa(dp4136
S'trial_loop.thisTrialN'
p4137
I32
sg3632
S'2-steamed_puddings.png'
p4138
sS'block_loop.thisIndex'
p4139
g3626
sg38
S'left'
p4140
sg58
g62
sS'trial_loop.thisN'
p4141
I32
sg33
g3950
sg63
g64
sS'trial_loop.thisIndex'
p4142
g59
(g98
S' \x00\x00\x00'
tRp4143
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4144
I0
sg3641
S'20-fruit_pastilles.png'
p4145
sS'block_loop.thisRepN'
p4146
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4147
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p4148
Nsg69
Vn
sS'block_loop.thisTrialN'
p4149
I0
sg39
F0.73354443876814912
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f\x11\r\xa40'
tRp4150
sa(dp4151
S'trial_loop.thisTrialN'
p4152
I33
sg3632
S'29-beans.png'
p4153
sS'block_loop.thisIndex'
p4154
g3626
sg38
S'right'
p4155
sg58
g62
sS'trial_loop.thisN'
p4156
I33
sg33
g3967
sg63
g64
sS'trial_loop.thisIndex'
p4157
g59
(g98
S'!\x00\x00\x00'
tRp4158
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4159
I0
sg3641
S'46-pistachios.png'
p4160
sS'block_loop.thisRepN'
p4161
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4162
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4163
Nsg69
Vn
sS'block_loop.thisTrialN'
p4164
I0
sg39
F0.95008222221440519
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f\x17\t\xeb\x10'
tRp4165
sa(dp4166
S'trial_loop.thisTrialN'
p4167
I34
sg3632
S'3-ellas_strawberries_apples.png'
p4168
sS'block_loop.thisIndex'
p4169
g3626
sg38
S'left'
p4170
sg58
g62
sS'trial_loop.thisN'
p4171
I34
sg33
g3873
sg63
g64
sS'trial_loop.thisIndex'
p4172
g59
(g98
S'"\x00\x00\x00'
tRp4173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4174
I0
sg3641
S'13-mccoys_steak_crisps.png'
p4175
sS'block_loop.thisRepN'
p4176
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4177
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p4178
Nsg69
Vn
sS'block_loop.thisTrialN'
p4179
I0
sg39
F0.68344647915728274
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f\x1d\t\xc7\xe8'
tRp4180
sa(dp4181
S'trial_loop.thisTrialN'
p4182
I35
sg3632
S'42-mrkipling_lemon_slices.png'
p4183
sS'block_loop.thisIndex'
p4184
g3626
sg38
S'right'
p4185
sg58
g62
sS'trial_loop.thisN'
p4186
I35
sg33
S'16-skips_prawn.png'
p4187
sg63
g64
sS'trial_loop.thisIndex'
p4188
g59
(g98
S'#\x00\x00\x00'
tRp4189
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4190
I0
sg3641
S'16-skips_prawn.png'
p4191
sS'block_loop.thisRepN'
p4192
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4193
I1
sg3646
S'42-mrkipling_lemon_slices.png'
p4194
sg55
g11
sS'block_loop.thisTrial'
p4195
Nsg69
Vn
sS'block_loop.thisTrialN'
p4196
I0
sg39
F0.88332970308692893
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f#\x05W0'
tRp4197
sa(dp4198
S'trial_loop.thisTrialN'
p4199
I36
sg3632
g4168
sS'block_loop.thisIndex'
p4200
g3626
sg38
S'left'
p4201
sg58
g62
sS'trial_loop.thisN'
p4202
I36
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p4203
g59
(g98
S'$\x00\x00\x00'
tRp4204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4205
I0
sg3641
g4175
sS'block_loop.thisRepN'
p4206
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4207
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p4208
Nsg69
Vn
sS'block_loop.thisTrialN'
p4209
I0
sg39
F0.98342754866098403
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f)\x04=\xf0'
tRp4210
sa(dp4211
S'trial_loop.thisTrialN'
p4212
I37
sg3632
S'22-daim.png'
p4213
sS'block_loop.thisIndex'
p4214
g3626
sg38
S'right'
p4215
sg58
g62
sS'trial_loop.thisN'
p4216
I37
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4217
g59
(g98
S'%\x00\x00\x00'
tRp4218
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4219
I0
sg3641
S'7-olives.png'
p4220
sS'block_loop.thisRepN'
p4221
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4222
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4223
Nsg69
Vn
sS'block_loop.thisTrialN'
p4224
I0
sg39
F0.75011261364124948
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f/\x04U`'
tRp4225
sa(dp4226
S'trial_loop.thisTrialN'
p4227
I38
sg3632
g3670
sS'block_loop.thisIndex'
p4228
g3626
sg38
S'right'
p4229
sg58
g62
sS'trial_loop.thisN'
p4230
I38
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4231
g59
(g98
S'&\x00\x00\x00'
tRp4232
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4233
I0
sg3641
g3678
sS'block_loop.thisRepN'
p4234
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4235
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4236
Nsg69
Vn
sS'block_loop.thisTrialN'
p4237
I0
sg39
F0.63354894331132527
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f5\x01\x19@'
tRp4238
sa(dp4239
S'trial_loop.thisTrialN'
p4240
I39
sg3632
g4138
sS'block_loop.thisIndex'
p4241
g3626
sg38
S'left'
p4242
sg58
g62
sS'trial_loop.thisN'
p4243
I39
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p4244
g59
(g98
S"'\x00\x00\x00"
tRp4245
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4246
I0
sg3641
g4145
sS'block_loop.thisRepN'
p4247
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4248
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p4249
Nsg69
Vn
sS'block_loop.thisTrialN'
p4250
I0
sg39
F0.66680161296972074
sg34
g752
(S'\x07\xdf\n\x10\x0f\x0f:\x0b7\x18'
tRp4251
sa(dp4252
S'trial_loop.thisTrialN'
p4253
I40
sg3632
g3847
sS'block_loop.thisIndex'
p4254
g3626
sg38
S'right'
p4255
sg58
g62
sS'trial_loop.thisN'
p4256
I40
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4257
g59
(g98
S'(\x00\x00\x00'
tRp4258
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4259
I0
sg3641
g3854
sS'block_loop.thisRepN'
p4260
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4261
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4262
Nsg69
Vn
sS'block_loop.thisTrialN'
p4263
I0
sg39
F0.91677652436192147
sg34
g752
(S'\x07\xdf\n\x10\x0f\x10\x04\x06\xc6`'
tRp4264
sa(dp4265
S'trial_loop.thisTrialN'
p4266
I41
sg3632
g4020
sS'block_loop.thisIndex'
p4267
g3626
sg38
S'left'
p4268
sg58
g62
sS'trial_loop.thisN'
p4269
I41
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p4270
g59
(g98
S')\x00\x00\x00'
tRp4271
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4272
I0
sg3641
g4028
sS'block_loop.thisRepN'
p4273
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4274
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p4275
Nsg69
Vn
sS'block_loop.thisTrialN'
p4276
I0
sg39
F0.88353725430351915
sg34
g752
(S'\x07\xdf\n\x10\x0f\x10\n\x05\xeb\xa0'
tRp4277
sa(dp4278
S'trial_loop.thisTrialN'
p4279
I42
sg3632
S'51-mars.png'
p4280
sS'block_loop.thisIndex'
p4281
g3626
sg38
S'right'
p4282
sg58
g62
sS'trial_loop.thisN'
p4283
I42
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p4284
g59
(g98
S'*\x00\x00\x00'
tRp4285
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4286
I0
sg3641
S'27-hartleys_raspberries_jelly.png'
p4287
sS'block_loop.thisRepN'
p4288
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4289
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p4290
Nsg69
Vn
sS'block_loop.thisTrialN'
p4291
I0
sg39
F0.8001951779697265
sg34
g752
(S'\x07\xdf\n\x10\x0f\x10\x10\x04\x93\xe0'
tRp4292
sa(dp4293
S'trial_loop.thisTrialN'
p4294
I43
sg3632
g4108
sS'block_loop.thisIndex'
p4295
g3626
sg38
S'left'
p4296
sg58
g62
sS'trial_loop.thisN'
p4297
I43
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4298
g59
(g98
S'+\x00\x00\x00'
tRp4299
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4300
I0
sg3641
g4115
sS'block_loop.thisRepN'
p4301
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4302
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4303
Nsg69
Vn
sS'block_loop.thisTrialN'
p4304
I0
sg39
F0.68339202546849265
sg34
g752
(S'\x07\xdf\n\x10\x0f\x10\x16\x02\x0fX'
tRp4305
sa(dp4306
S'trial_loop.thisTrialN'
p4307
I44
sg3632
S'48-twix.png'
p4308
sS'block_loop.thisIndex'
p4309
g3626
sg38
S'left'
p4310
sg58
g62
sS'trial_loop.thisN'
p4311
I44
sg33
S'48-twix.png'
p4312
sg63
g64
sS'trial_loop.thisIndex'
p4313
g59
(g98
S',\x00\x00\x00'
tRp4314
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4315
I0
sg3641
S'50-polo.png'
p4316
sS'block_loop.thisRepN'
p4317
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4318
I1
sg3646
S'50-polo.png'
p4319
sg55
g11
sS'block_loop.thisTrial'
p4320
Nsg69
Vn
sS'block_loop.thisTrialN'
p4321
I0
sg39
F0.76727521747307037
sg34
g752
(S'\x07\xdf\n\x10\x0f\x10\x1b\r\x1f`'
tRp4322
sa(dp4323
S'trial_loop.thisTrialN'
p4324
I45
sg3632
g3894
sS'block_loop.thisIndex'
p4325
g3626
sg38
S'right'
p4326
sg58
g62
sS'trial_loop.thisN'
p4327
I45
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4328
g59
(g98
S'-\x00\x00\x00'
tRp4329
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4330
I0
sg3641
g3901
sS'block_loop.thisRepN'
p4331
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4332
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4333
Nsg69
Vn
sS'block_loop.thisTrialN'
p4334
I0
sg39
F1.0166254795331042
sg34
g752
(S'\x07\xdf\n\x10\x0f\x10!\n\x1d\xd8'
tRp4335
sa(dp4336
S'trial_loop.thisTrialN'
p4337
I46
sg3632
g3939
sS'block_loop.thisIndex'
p4338
g3626
sg38
S'right'
p4339
sg58
g62
sS'trial_loop.thisN'
p4340
I46
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p4341
g59
(g98
S'.\x00\x00\x00'
tRp4342
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4343
I0
sg3641
g3947
sS'block_loop.thisRepN'
p4344
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4345
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p4346
Nsg69
Vn
sS'block_loop.thisTrialN'
p4347
I0
sg39
F0.78351324906543596
sg34
g752
(S"\x07\xdf\n\x10\x0f\x10'\n\xae`"
tRp4348
sa(dp4349
S'trial_loop.thisTrialN'
p4350
I47
sg3632
g3973
sS'block_loop.thisIndex'
p4351
g3626
sg38
S'left'
p4352
sg58
g62
sS'trial_loop.thisN'
p4353
I47
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p4354
g59
(g98
S'/\x00\x00\x00'
tRp4355
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4356
I0
sg3641
g3981
sS'block_loop.thisRepN'
p4357
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4358
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p4359
Nsg69
Vn
sS'block_loop.thisTrialN'
p4360
I0
sg39
F0.75019101554062217
sg34
g752
(S'\x07\xdf\n\x10\x0f\x10-\x07\xebX'
tRp4361
sa(dp4362
S'trial_loop.thisTrialN'
p4363
I48
sg3632
g3909
sS'block_loop.thisIndex'
p4364
g3626
sg38
S'right'
p4365
sg58
g62
sS'trial_loop.thisN'
p4366
I48
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p4367
g59
(g98
S'0\x00\x00\x00'
tRp4368
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4369
I0
sg3641
g3917
sS'block_loop.thisRepN'
p4370
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4371
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p4372
Nsg69
Vn
sS'block_loop.thisTrialN'
p4373
I0
sg39
F0.91685492626493215
sg34
g752
(S'\x07\xdf\n\x10\x0f\x103\x04\xaf8'
tRp4374
sa(dp4375
S'trial_loop.thisTrialN'
p4376
I49
sg3632
S'49-yorkie.png'
p4377
sS'block_loop.thisIndex'
p4378
g3626
sg38
S'right'
p4379
sg58
g62
sS'trial_loop.thisN'
p4380
I49
sg33
g4062
sg63
g64
sS'trial_loop.thisIndex'
p4381
g59
(g98
S'1\x00\x00\x00'
tRp4382
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4383
I0
sg3641
S'35-raisins.png'
p4384
sS'block_loop.thisRepN'
p4385
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4386
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p4387
Nsg69
Vn
sS'block_loop.thisTrialN'
p4388
I0
sg39
F0.68353657006809954
sg34
g752
(S'\x07\xdf\n\x10\x0f\x109\x03\xd0\x90'
tRp4389
sa(dp4390
S'trial_loop.thisTrialN'
p4391
I50
sg3632
g3894
sS'block_loop.thisIndex'
p4392
g3626
sg38
S'right'
p4393
sg58
g62
sS'trial_loop.thisN'
p4394
I50
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p4395
g59
(g98
S'2\x00\x00\x00'
tRp4396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4397
I0
sg3641
g3901
sS'block_loop.thisRepN'
p4398
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4399
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p4400
Nsg69
Vn
sS'block_loop.thisTrialN'
p4401
I0
sg39
F0.81683975905980333
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11\x02\x0e\xe4\x80'
tRp4402
sa(dp4403
S'trial_loop.thisTrialN'
p4404
I51
sg3632
S'6-sour_patch_kids.png'
p4405
sS'block_loop.thisIndex'
p4406
g3626
sg38
S'right'
p4407
sg58
g62
sS'trial_loop.thisN'
p4408
I51
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4409
g59
(g98
S'3\x00\x00\x00'
tRp4410
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4411
I0
sg3641
S'38-maltesers.png'
p4412
sS'block_loop.thisRepN'
p4413
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4414
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4415
Nsg69
Vn
sS'block_loop.thisTrialN'
p4416
I0
sg39
F1.2165392089336819
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11\x08\x0c\x9a\x90'
tRp4417
sa(dp4418
S'trial_loop.thisTrialN'
p4419
I52
sg3632
g4153
sS'block_loop.thisIndex'
p4420
g3626
sg38
S'right'
p4421
sg58
g62
sS'trial_loop.thisN'
p4422
I52
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p4423
g59
(g98
S'4\x00\x00\x00'
tRp4424
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4425
I0
sg3641
g4160
sS'block_loop.thisRepN'
p4426
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4427
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4428
Nsg69
Vn
sS'block_loop.thisTrialN'
p4429
I0
sg39
F2.4167386063527374
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11\x0f\x01\x01\xd0'
tRp4430
sa(dp4431
S'trial_loop.thisTrialN'
p4432
I53
sg3632
S'36-fig_rolls.png'
p4433
sS'block_loop.thisIndex'
p4434
g3626
sg38
S'right'
p4435
sg58
g62
sS'trial_loop.thisN'
p4436
I53
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p4437
g59
(g98
S'5\x00\x00\x00'
tRp4438
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4439
I0
sg3641
S'34-hula_hoops_bbq_beef_redo.png'
p4440
sS'block_loop.thisRepN'
p4441
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4442
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p4443
Nsg69
Vn
sS'block_loop.thisTrialN'
p4444
I0
sg39
F0.86672788667419809
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11\x16\x07\xf7\x10'
tRp4445
sa(dp4446
S'trial_loop.thisTrialN'
p4447
I54
sg3632
g3687
sS'block_loop.thisIndex'
p4448
g3626
sg38
S'right'
p4449
sg58
g62
sS'trial_loop.thisN'
p4450
I54
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4451
g59
(g98
S'6\x00\x00\x00'
tRp4452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4453
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4454
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4455
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4456
Nsg69
Vn
sS'block_loop.thisTrialN'
p4457
I0
sg39
F1.7168280130281346
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11\x1c\x06d\xb8'
tRp4458
sa(dp4459
S'trial_loop.thisTrialN'
p4460
I55
sg3632
g3862
sS'block_loop.thisIndex'
p4461
g3626
sg38
S'right'
p4462
sg58
g62
sS'trial_loop.thisN'
p4463
I55
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p4464
g59
(g98
S'7\x00\x00\x00'
tRp4465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4466
I0
sg3641
g3870
sS'block_loop.thisRepN'
p4467
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4468
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p4469
Nsg69
Vn
sS'block_loop.thisTrialN'
p4470
I0
sg39
F0.65058125743962592
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11#\x02\xa7\xb0'
tRp4471
sa(dp4472
S'trial_loop.thisTrialN'
p4473
I56
sg3632
g3755
sS'block_loop.thisIndex'
p4474
g3626
sg38
S'left'
p4475
sg58
g62
sS'trial_loop.thisN'
p4476
I56
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4477
g59
(g98
S'8\x00\x00\x00'
tRp4478
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4479
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4480
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4481
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4482
Nsg69
Vn
sS'block_loop.thisTrialN'
p4483
I0
sg39
F0.80019061640632572
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11(\r\x00 '
tRp4484
sa(dp4485
S'trial_loop.thisTrialN'
p4486
I57
sg3632
g3738
sS'block_loop.thisIndex'
p4487
g3626
sg38
S'left'
p4488
sg58
g62
sS'trial_loop.thisN'
p4489
I57
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p4490
g59
(g98
S'9\x00\x00\x00'
tRp4491
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4492
I0
sg3641
g3746
sS'block_loop.thisRepN'
p4493
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4494
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p4495
Nsg69
Vn
sS'block_loop.thisTrialN'
p4496
I0
sg39
F1.1667876431747572
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11.\n{\x98'
tRp4497
sa(dp4498
S'trial_loop.thisTrialN'
p4499
I58
sg3632
S'10-bounty_redo.png'
p4500
sS'block_loop.thisIndex'
p4501
g3626
sg38
S'right'
p4502
sg58
g62
sS'trial_loop.thisN'
p4503
I58
sg33
g3984
sg63
g64
sS'trial_loop.thisIndex'
p4504
g59
(g98
S':\x00\x00\x00'
tRp4505
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4506
I0
sg3641
S'4-corn.png'
p4507
sS'block_loop.thisRepN'
p4508
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4509
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p4510
Nsg69
Vn
sS'block_loop.thisTrialN'
p4511
I0
sg39
F0.71686507574486313
sg34
g752
(S'\x07\xdf\n\x10\x0f\x114\r\xac\x00'
tRp4512
sa(dp4513
S'trial_loop.thisTrialN'
p4514
I59
sg3632
g3633
sS'block_loop.thisIndex'
p4515
g3626
sg38
S'left'
p4516
sg58
g62
sS'trial_loop.thisN'
p4517
I59
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4518
g59
(g98
S';\x00\x00\x00'
tRp4519
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4520
I0
sg3641
g3642
sS'block_loop.thisRepN'
p4521
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4522
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4523
Nsg69
Vn
sS'block_loop.thisTrialN'
p4524
I0
sg39
F2.8500336985634931
sg34
g752
(S'\x07\xdf\n\x10\x0f\x11:\t\xb8H'
tRp4525
sa(dp4526
S'trial_loop.thisTrialN'
p4527
I60
sg3632
g4168
sS'block_loop.thisIndex'
p4528
g3626
sg38
S'left'
p4529
sg58
g62
sS'trial_loop.thisN'
p4530
I60
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p4531
g59
(g98
S'<\x00\x00\x00'
tRp4532
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4533
I0
sg3641
g4175
sS'block_loop.thisRepN'
p4534
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4535
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p4536
Nsg69
Vn
sS'block_loop.thisTrialN'
p4537
I0
sg39
F0.68388495960971341
sg34
g752
(S'\x07\xdf\n\x10\x0f\x12\x06\x07\xdb\xb8'
tRp4538
sa(dp4539
S'trial_loop.thisTrialN'
p4540
I61
sg3632
g4308
sS'block_loop.thisIndex'
p4541
g3626
sg38
S'left'
p4542
sg58
g62
sS'trial_loop.thisN'
p4543
I61
sg33
g4312
sg63
g64
sS'trial_loop.thisIndex'
p4544
g59
(g98
S'=\x00\x00\x00'
tRp4545
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4546
I0
sg3641
g4316
sS'block_loop.thisRepN'
p4547
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4548
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p4549
Nsg69
Vn
sS'block_loop.thisTrialN'
p4550
I0
sg39
F1.750070704259997
sg34
g752
(S'\x07\xdf\n\x10\x0f\x12\x0c\x03\xa9\x80'
tRp4551
sa(dp4552
S'trial_loop.thisTrialN'
p4553
I62
sg3632
g3785
sS'block_loop.thisIndex'
p4554
g3626
sg38
S'left'
p4555
sg58
g62
sS'trial_loop.thisN'
p4556
I62
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4557
g59
(g98
S'>\x00\x00\x00'
tRp4558
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4559
I0
sg3641
g3793
sS'block_loop.thisRepN'
p4560
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4561
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4562
Nsg69
Vn
sS'block_loop.thisTrialN'
p4563
I0
sg39
F0.65020008165083709
sg34
g752
(S'\x07\xdf\n\x10\x0f\x12\x13\x00e\x90'
tRp4564
sa(dp4565
S'trial_loop.thisTrialN'
p4566
I63
sg3632
g4037
sS'block_loop.thisIndex'
p4567
g3626
sg38
S'left'
p4568
sg58
g62
sS'trial_loop.thisN'
p4569
I63
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4570
g59
(g98
S'?\x00\x00\x00'
tRp4571
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4572
I0
sg3641
g4044
sS'block_loop.thisRepN'
p4573
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4574
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4575
Nsg69
Vn
sS'block_loop.thisTrialN'
p4576
I0
sg39
F0.80020772227362613
sg34
g752
(S'\x07\xdf\n\x10\x0f\x12\x18\n\xbe\x00'
tRp4577
sa(dp4578
S'trial_loop.thisTrialN'
p4579
I64
sg3632
S'50-polo.png'
p4580
sS'block_loop.thisIndex'
p4581
g3626
sg38
S'right'
p4582
sg58
g62
sS'trial_loop.thisN'
p4583
I64
sg33
g4312
sg63
g64
sS'trial_loop.thisIndex'
p4584
g59
(g98
S'@\x00\x00\x00'
tRp4585
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4586
I0
sg3641
S'48-twix.png'
p4587
sS'block_loop.thisRepN'
p4588
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4589
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p4590
Nsg69
Vn
sS'block_loop.thisTrialN'
p4591
I0
sg39
F2.0168030954773712
sg34
g752
(S'\x07\xdf\n\x10\x0f\x12\x1e\x089x'
tRp4592
sa(dp4593
S'trial_loop.thisTrialN'
p4594
I65
sg3632
g3832
sS'block_loop.thisIndex'
p4595
g3626
sg38
S'right'
p4596
sg58
g62
sS'trial_loop.thisN'
p4597
I65
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p4598
g59
(g98
S'A\x00\x00\x00'
tRp4599
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4600
I0
sg3641
g3839
sS'block_loop.thisRepN'
p4601
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4602
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p4603
Nsg69
Vn
sS'block_loop.thisTrialN'
p4604
I0
sg39
F0.71722914566271356
sg34
g752
(S'\x07\xdf\n\x10\x0f\x12%\t\x00\xb0'
tRp4605
sa(dp4606
S'trial_loop.thisTrialN'
p4607
I66
sg3632
g3755
sS'block_loop.thisIndex'
p4608
g3626
sg38
S'left'
p4609
sg58
g62
sS'trial_loop.thisN'
p4610
I66
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p4611
g59
(g98
S'B\x00\x00\x00'
tRp4612
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4613
I0
sg3641
g3763
sS'block_loop.thisRepN'
p4614
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4615
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p4616
Nsg69
Vn
sS'block_loop.thisTrialN'
p4617
I0
sg39
F0.88353012685547583
sg34
g752
(S'\x07\xdf\n\x10\x0f\x12+\x05\x0c\xf8'
tRp4618
sa(dp4619
S'trial_loop.thisTrialN'
p4620
I67
sg3632
g3973
sS'block_loop.thisIndex'
p4621
g3626
sg38
S'left'
p4622
sg58
g62
sS'trial_loop.thisN'
p4623
I67
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p4624
g59
(g98
S'C\x00\x00\x00'
tRp4625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4626
I0
sg3641
g3981
sS'block_loop.thisRepN'
p4627
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4628
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p4629
Nsg69
Vn
sS'block_loop.thisTrialN'
p4630
I0
sg39
F0.63354096057446441
sg34
g752
(S'\x07\xdf\n\x10\x0f\x121\x03\xf3\xb8'
tRp4631
sa(dp4632
S'trial_loop.thisTrialN'
p4633
I68
sg3632
g4003
sS'block_loop.thisIndex'
p4634
g3626
sg38
S'left'
p4635
sg58
g62
sS'trial_loop.thisN'
p4636
I68
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p4637
g59
(g98
S'D\x00\x00\x00'
tRp4638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4639
I0
sg3641
g4011
sS'block_loop.thisRepN'
p4640
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4641
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p4642
Nsg69
Vn
sS'block_loop.thisTrialN'
p4643
I0
sg39
F1.25012002618314
sg34
g752
(S'\x07\xdf\n\x10\x0f\x126\x0e\r\xa8'
tRp4644
sa(dp4645
S'trial_loop.thisTrialN'
p4646
I69
sg3632
g4405
sS'block_loop.thisIndex'
p4647
g3626
sg38
S'right'
p4648
sg58
g62
sS'trial_loop.thisN'
p4649
I69
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4650
g59
(g98
S'E\x00\x00\x00'
tRp4651
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4652
I0
sg3641
g4412
sS'block_loop.thisRepN'
p4653
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4654
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4655
Nsg69
Vn
sS'block_loop.thisTrialN'
p4656
I0
sg39
F0.94987296040926594
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13\x01\x03,\x80'
tRp4657
sa(dp4658
S'trial_loop.thisTrialN'
p4659
I70
sg3632
S'41-peanuts_redo.png'
p4660
sS'block_loop.thisIndex'
p4661
g3626
sg38
S'left'
p4662
sg58
g62
sS'trial_loop.thisN'
p4663
I70
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p4664
g59
(g98
S'F\x00\x00\x00'
tRp4665
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4666
I0
sg3641
S'45-chewy_nougat_redo.png'
p4667
sS'block_loop.thisRepN'
p4668
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4669
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p4670
Nsg69
Vn
sS'block_loop.thisTrialN'
p4671
I0
sg39
F0.6001063985095243
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13\x07\x02\xca\xd8'
tRp4672
sa(dp4673
S'trial_loop.thisTrialN'
p4674
I71
sg3632
g4108
sS'block_loop.thisIndex'
p4675
g3626
sg38
S'left'
p4676
sg58
g62
sS'trial_loop.thisN'
p4677
I71
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p4678
g59
(g98
S'G\x00\x00\x00'
tRp4679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4680
I0
sg3641
g4115
sS'block_loop.thisRepN'
p4681
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4682
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p4683
Nsg69
Vn
sS'block_loop.thisTrialN'
p4684
I0
sg39
F0.61721084238160984
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13\x0c\x0co\x98'
tRp4685
sa(dp4686
S'trial_loop.thisTrialN'
p4687
I72
sg3632
g4037
sS'block_loop.thisIndex'
p4688
g3626
sg38
S'left'
p4689
sg58
g62
sS'trial_loop.thisN'
p4690
I72
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4691
g59
(g98
S'H\x00\x00\x00'
tRp4692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4693
I0
sg3641
g4044
sS'block_loop.thisRepN'
p4694
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4695
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4696
Nsg69
Vn
sS'block_loop.thisTrialN'
p4697
I0
sg39
F0.98343838237633463
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13\x12\x07GH'
tRp4698
sa(dp4699
S'trial_loop.thisTrialN'
p4700
I73
sg3632
g3956
sS'block_loop.thisIndex'
p4701
g3626
sg38
S'left'
p4702
sg58
g62
sS'trial_loop.thisN'
p4703
I73
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p4704
g59
(g98
S'I\x00\x00\x00'
tRp4705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4706
I0
sg3641
g3964
sS'block_loop.thisRepN'
p4707
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4708
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p4709
Nsg69
Vn
sS'block_loop.thisTrialN'
p4710
I0
sg39
F0.70015663274534745
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13\x18\x07^\xb8'
tRp4711
sa(dp4712
S'trial_loop.thisTrialN'
p4713
I74
sg3632
g4168
sS'block_loop.thisIndex'
p4714
g3626
sg38
S'left'
p4715
sg58
g62
sS'trial_loop.thisN'
p4716
I74
sg33
g3873
sg63
g64
sS'trial_loop.thisIndex'
p4717
g59
(g98
S'J\x00\x00\x00'
tRp4718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4719
I0
sg3641
g4175
sS'block_loop.thisRepN'
p4720
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4721
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p4722
Nsg69
Vn
sS'block_loop.thisTrialN'
p4723
I0
sg39
F0.90019209891033825
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13\x1e\x03k\x00'
tRp4724
sa(dp4725
S'trial_loop.thisTrialN'
p4726
I75
sg3632
g4123
sS'block_loop.thisIndex'
p4727
g3626
sg38
S'left'
p4728
sg58
g62
sS'trial_loop.thisN'
p4729
I75
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4730
g59
(g98
S'K\x00\x00\x00'
tRp4731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4732
I0
sg3641
g4130
sS'block_loop.thisRepN'
p4733
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4734
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p4735
Nsg69
Vn
sS'block_loop.thisTrialN'
p4736
I0
sg39
F1.9000769193917222
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13$\x02Q\xc0'
tRp4737
sa(dp4738
S'trial_loop.thisTrialN'
p4739
I76
sg3632
g4213
sS'block_loop.thisIndex'
p4740
g3626
sg38
S'right'
p4741
sg58
g62
sS'trial_loop.thisN'
p4742
I76
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p4743
g59
(g98
S'L\x00\x00\x00'
tRp4744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4745
I0
sg3641
g4220
sS'block_loop.thisRepN'
p4746
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4747
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p4748
Nsg69
Vn
sS'block_loop.thisTrialN'
p4749
I0
sg39
F0.6668683258612873
sg34
g752
(S'\x07\xdf\n\x10\x0f\x13+\x01o0'
tRp4750
sa(dp4751
S'trial_loop.thisTrialN'
p4752
I77
sg3632
g3704
sS'block_loop.thisIndex'
p4753
g3626
sg38
S'right'
p4754
sg58
g62
sS'trial_loop.thisN'
p4755
I77
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p4756
g59
(g98
S'M\x00\x00\x00'
tRp4757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4758
I0
sg3641
g3712
sS'block_loop.thisRepN'
p4759
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4760
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p4761
Nsg69
Vn
sS'block_loop.thisTrialN'
p4762
I0
sg39
F2.0334060522836808
sg34
g752
(S'\x07\xdf\n\x10\x0f\x130\x0c\x06 '
tRp4763
sa(dp4764
S'trial_loop.thisTrialN'
p4765
I78
sg3632
g4052
sS'block_loop.thisIndex'
p4766
g3626
sg38
S'left'
p4767
sg58
g62
sS'trial_loop.thisN'
p4768
I78
sg33
g4062
sg63
g64
sS'trial_loop.thisIndex'
p4769
g59
(g98
S'N\x00\x00\x00'
tRp4770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4771
I0
sg3641
g4060
sS'block_loop.thisRepN'
p4772
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4773
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p4774
Nsg69
Vn
sS'block_loop.thisTrialN'
p4775
I0
sg39
F0.65019181381285307
sg34
g752
(S'\x07\xdf\n\x10\x0f\x137\r\x0b\xd8'
tRp4776
sa(dp4777
S'trial_loop.thisTrialN'
p4778
I79
sg3632
g4183
sS'block_loop.thisIndex'
p4779
g3626
sg38
S'right'
p4780
sg58
g62
sS'trial_loop.thisN'
p4781
I79
sg33
g4187
sg63
g64
sS'trial_loop.thisIndex'
p4782
g59
(g98
S'O\x00\x00\x00'
tRp4783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4784
I0
sg3641
g4191
sS'block_loop.thisRepN'
p4785
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4786
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p4787
Nsg69
Vn
sS'block_loop.thisTrialN'
p4788
I0
sg39
F1.2000252026482485
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14\x01\x08%\xf0'
tRp4789
sa(dp4790
S'trial_loop.thisTrialN'
p4791
I80
sg3632
g3687
sS'block_loop.thisIndex'
p4792
g3626
sg38
S'right'
p4793
sg58
g62
sS'trial_loop.thisN'
p4794
I80
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p4795
g59
(g98
S'P\x00\x00\x00'
tRp4796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4797
I0
sg3641
g3695
sS'block_loop.thisRepN'
p4798
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4799
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p4800
Nsg69
Vn
sS'block_loop.thisTrialN'
p4801
I0
sg39
F1.1667753839683428
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14\x07\x0b\xcfp'
tRp4802
sa(dp4803
S'trial_loop.thisTrialN'
p4804
I81
sg3632
g4405
sS'block_loop.thisIndex'
p4805
g3626
sg38
S'right'
p4806
sg58
g62
sS'trial_loop.thisN'
p4807
I81
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p4808
g59
(g98
S'Q\x00\x00\x00'
tRp4809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4810
I0
sg3641
g4412
sS'block_loop.thisRepN'
p4811
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4812
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4813
Nsg69
Vn
sS'block_loop.thisTrialN'
p4814
I0
sg39
F1.4169490085441794
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14\r\x0e\xc1X'
tRp4815
sa(dp4816
S'trial_loop.thisTrialN'
p4817
I82
sg3632
S'33-ambrosia_rice.png'
p4818
sS'block_loop.thisIndex'
p4819
g3626
sg38
S'right'
p4820
sg58
g62
sS'trial_loop.thisN'
p4821
I82
sg33
g3647
sg63
g64
sS'trial_loop.thisIndex'
p4822
g59
(g98
S'R\x00\x00\x00'
tRp4823
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4824
I0
sg3641
S'23-crunchie_redo.png'
p4825
sS'block_loop.thisRepN'
p4826
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4827
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4828
Nsg69
Vn
sS'block_loop.thisTrialN'
p4829
I0
sg39
F1.2501861688797362
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14\x14\x06|('
tRp4830
sa(dp4831
S'trial_loop.thisTrialN'
p4832
I83
sg3632
g3815
sS'block_loop.thisIndex'
p4833
g3626
sg38
S'right'
p4834
sg58
g62
sS'trial_loop.thisN'
p4835
I83
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4836
g59
(g98
S'S\x00\x00\x00'
tRp4837
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4838
I0
sg3641
g3823
sS'block_loop.thisRepN'
p4839
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4840
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p4841
Nsg69
Vn
sS'block_loop.thisTrialN'
p4842
I0
sg39
F0.80012276312481845
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14\x1a\n\x9e\xc0'
tRp4843
sa(dp4844
S'trial_loop.thisTrialN'
p4845
I84
sg3632
g4020
sS'block_loop.thisIndex'
p4846
g3626
sg38
S'left'
p4847
sg58
g62
sS'trial_loop.thisN'
p4848
I84
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p4849
g59
(g98
S'T\x00\x00\x00'
tRp4850
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4851
I0
sg3641
g4028
sS'block_loop.thisRepN'
p4852
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4853
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p4854
Nsg69
Vn
sS'block_loop.thisTrialN'
p4855
I0
sg39
F1.083528530311014
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14 \x08\x1a8'
tRp4856
sa(dp4857
S'trial_loop.thisTrialN'
p4858
I85
sg3632
g4500
sS'block_loop.thisIndex'
p4859
g3626
sg38
S'right'
p4860
sg58
g62
sS'trial_loop.thisN'
p4861
I85
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p4862
g59
(g98
S'U\x00\x00\x00'
tRp4863
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4864
I0
sg3641
g4507
sS'block_loop.thisRepN'
p4865
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4866
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p4867
Nsg69
Vn
sS'block_loop.thisTrialN'
p4868
I0
sg39
F0.80017949758985196
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14&\t\xdbp'
tRp4869
sa(dp4870
S'trial_loop.thisTrialN'
p4871
I86
sg3632
g4580
sS'block_loop.thisIndex'
p4872
g3626
sg38
S'right'
p4873
sg58
g62
sS'trial_loop.thisN'
p4874
I86
sg33
g4312
sg63
g64
sS'trial_loop.thisIndex'
p4875
g59
(g98
S'V\x00\x00\x00'
tRp4876
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4877
I0
sg3641
g4587
sS'block_loop.thisRepN'
p4878
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4879
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p4880
Nsg69
Vn
sS'block_loop.thisTrialN'
p4881
I0
sg39
F1.2838918589732202
sg34
g752
(S'\x07\xdf\n\x10\x0f\x14,\x07S\x00'
tRp4882
sa(dp4883
S'trial_loop.thisTrialN'
p4884
I87
sg3632
g4433
sS'block_loop.thisIndex'
p4885
g3626
sg38
S'right'
p4886
sg58
g62
sS'trial_loop.thisN'
p4887
I87
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p4888
g59
(g98
S'W\x00\x00\x00'
tRp4889
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4890
I0
sg3641
g4440
sS'block_loop.thisRepN'
p4891
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4892
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p4893
Nsg69
Vn
sS'block_loop.thisTrialN'
p4894
I0
sg39
F0.86677635330124758
sg34
g752
(S'\x07\xdf\n\x10\x0f\x142\x0c-0'
tRp4895
sa(dp4896
S'trial_loop.thisTrialN'
p4897
I88
sg3632
g4580
sS'block_loop.thisIndex'
p4898
g3626
sg38
S'right'
p4899
sg58
g62
sS'trial_loop.thisN'
p4900
I88
sg33
g4312
sg63
g64
sS'trial_loop.thisIndex'
p4901
g59
(g98
S'X\x00\x00\x00'
tRp4902
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4903
I0
sg3641
g4587
sS'block_loop.thisRepN'
p4904
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4905
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p4906
Nsg69
Vn
sS'block_loop.thisTrialN'
p4907
I0
sg39
F0.90008604252216173
sg34
g752
(S'\x07\xdf\n\x10\x0f\x148\n\xd9X'
tRp4908
sa(dp4909
S'trial_loop.thisTrialN'
p4910
I89
sg3632
g4123
sS'block_loop.thisIndex'
p4911
g3626
sg38
S'left'
p4912
sg58
g62
sS'trial_loop.thisN'
p4913
I89
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p4914
g59
(g98
S'Y\x00\x00\x00'
tRp4915
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4916
I0
sg3641
g4130
sS'block_loop.thisRepN'
p4917
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4918
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p4919
Nsg69
Vn
sS'block_loop.thisTrialN'
p4920
I0
sg39
F0.61692061279973132
sg34
g752
(S'\x07\xdf\n\x10\x0f\x15\x02\t\xc0\x18'
tRp4921
sa(dp4922
S'trial_loop.thisTrialN'
p4923
I90
sg3632
g3721
sS'block_loop.thisIndex'
p4924
g3626
sg38
S'left'
p4925
sg58
g62
sS'trial_loop.thisN'
p4926
I90
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p4927
g59
(g98
S'Z\x00\x00\x00'
tRp4928
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4929
I0
sg3641
g3729
sS'block_loop.thisRepN'
p4930
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4931
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p4932
Nsg69
Vn
sS'block_loop.thisTrialN'
p4933
I0
sg39
F1.2498229542543413
sg34
g752
(S'\x07\xdf\n\x10\x0f\x15\x08\x04]0'
tRp4934
sa(dp4935
S'trial_loop.thisTrialN'
p4936
I91
sg3632
g4138
sS'block_loop.thisIndex'
p4937
g3626
sg38
S'left'
p4938
sg58
g62
sS'trial_loop.thisN'
p4939
I91
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p4940
g59
(g98
S'[\x00\x00\x00'
tRp4941
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4942
I0
sg3641
g4145
sS'block_loop.thisRepN'
p4943
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4944
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p4945
Nsg69
Vn
sS'block_loop.thisTrialN'
p4946
I0
sg39
F0.70019198487352696
sg34
g752
(S'\x07\xdf\n\x10\x0f\x15\x0e\x08\xbeH'
tRp4947
sa(dp4948
S'trial_loop.thisTrialN'
p4949
I92
sg3632
g4308
sS'block_loop.thisIndex'
p4950
g3626
sg38
S'left'
p4951
sg58
g62
sS'trial_loop.thisN'
p4952
I92
sg33
g4312
sg63
g64
sS'trial_loop.thisIndex'
p4953
g59
(g98
S'\\\x00\x00\x00'
tRp4954
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4955
I0
sg3641
g4316
sS'block_loop.thisRepN'
p4956
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4957
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p4958
Nsg69
Vn
sS'block_loop.thisTrialN'
p4959
I0
sg39
F0.60018822158235707
sg34
g752
(S'\x07\xdf\n\x10\x0f\x15\x14\x04\x8c\x10'
tRp4960
sa(dp4961
S'trial_loop.thisTrialN'
p4962
I93
sg3632
g4020
sS'block_loop.thisIndex'
p4963
g3626
sg38
S'left'
p4964
sg58
g62
sS'trial_loop.thisN'
p4965
I93
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p4966
g59
(g98
S']\x00\x00\x00'
tRp4967
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4968
I0
sg3641
g4028
sS'block_loop.thisRepN'
p4969
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4970
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p4971
Nsg69
Vn
sS'block_loop.thisTrialN'
p4972
I0
sg39
F1.0667679144098656
sg34
g752
(S'\x07\xdf\n\x10\x0f\x15\x19\x0e0\xd0'
tRp4973
sa(dp4974
S'trial_loop.thisTrialN'
p4975
I94
sg3632
g4818
sS'block_loop.thisIndex'
p4976
g3626
sg38
S'right'
p4977
sg58
g62
sS'trial_loop.thisN'
p4978
I94
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p4979
g59
(g98
S'^\x00\x00\x00'
tRp4980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4981
I0
sg3641
g4825
sS'block_loop.thisRepN'
p4982
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4983
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p4984
Nsg69
Vn
sS'block_loop.thisTrialN'
p4985
I0
sg39
F1.1167640940948331
sg34
g752
(S'\x07\xdf\n\x10\x0f\x15 \x00qH'
tRp4986
sa(dp4987
S'trial_loop.thisTrialN'
p4988
I95
sg3632
g4052
sS'block_loop.thisIndex'
p4989
g3626
sg38
S'left'
p4990
sg58
g62
sS'trial_loop.thisN'
p4991
I95
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p4992
g59
(g98
S'_\x00\x00\x00'
tRp4993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p4994
I0
sg3641
g4060
sS'block_loop.thisRepN'
p4995
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p4996
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p4997
Nsg69
Vn
sS'block_loop.thisTrialN'
p4998
I0
sg39
F0.7835192361199006
sg34
g752
(S'\x07\xdf\n\x10\x0f\x15&\x02\xea\x18'
tRp4999
sa(dp5000
S'trial_loop.thisTrialN'
p5001
I96
sg3632
g3670
sS'block_loop.thisIndex'
p5002
g3626
sg38
S'right'
p5003
sg58
g62
sS'trial_loop.thisN'
p5004
I96
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5005
g59
(g98
S'`\x00\x00\x00'
tRp5006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5007
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5008
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5009
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5010
Nsg69
Vn
sS'block_loop.thisTrialN'
p5011
I0
sg39
F0.55020316071022535
sg34
g752
(S"\x07\xdf\n\x10\x0f\x15,\x00'\x10"
tRp5012
sa(dp5013
S'trial_loop.thisTrialN'
p5014
I97
sg3632
g4153
sS'block_loop.thisIndex'
p5015
g3626
sg38
S'right'
p5016
sg58
g62
sS'trial_loop.thisN'
p5017
I97
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5018
g59
(g98
S'a\x00\x00\x00'
tRp5019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5020
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5021
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5022
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5023
Nsg69
Vn
sS'block_loop.thisTrialN'
p5024
I0
sg39
F0.65010058251209557
sg34
g752
(S'\x07\xdf\n\x10\x0f\x151\x08\xd5\xb8'
tRp5025
sa(dp5026
S'trial_loop.thisTrialN'
p5027
I98
sg3632
g3670
sS'block_loop.thisIndex'
p5028
g3626
sg38
S'right'
p5029
sg58
g62
sS'trial_loop.thisN'
p5030
I98
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5031
g59
(g98
S'b\x00\x00\x00'
tRp5032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5033
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5034
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5035
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5036
Nsg69
Vn
sS'block_loop.thisTrialN'
p5037
I0
sg39
F0.66690995014505461
sg34
g752
(S'\x07\xdf\n\x10\x0f\x157\x04*h'
tRp5038
sa(dp5039
S'trial_loop.thisTrialN'
p5040
I99
sg3632
g3973
sS'block_loop.thisIndex'
p5041
g3626
sg38
S'left'
p5042
sg58
g62
sS'trial_loop.thisN'
p5043
I99
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p5044
g59
(g98
S'c\x00\x00\x00'
tRp5045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5046
I0
sg3641
g3981
sS'block_loop.thisRepN'
p5047
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5048
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p5049
Nsg69
Vn
sS'block_loop.thisTrialN'
p5050
I0
sg39
F0.58352767501492053
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16\x00\x0e\xc1X'
tRp5051
sa(dp5052
S'trial_loop.thisTrialN'
p5053
I100
sg3632
g3670
sS'block_loop.thisIndex'
p5054
g3626
sg38
S'right'
p5055
sg58
g62
sS'trial_loop.thisN'
p5056
I100
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5057
g59
(g98
S'd\x00\x00\x00'
tRp5058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5059
I0
sg3641
g3678
sS'block_loop.thisRepN'
p5060
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5061
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5062
Nsg69
Vn
sS'block_loop.thisTrialN'
p5063
I0
sg39
F0.46678724404046079
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16\x06\x08\xe5X'
tRp5064
sa(dp5065
S'trial_loop.thisTrialN'
p5066
I101
sg3632
g4183
sS'block_loop.thisIndex'
p5067
g3626
sg38
S'right'
p5068
sg58
g62
sS'trial_loop.thisN'
p5069
I101
sg33
g4194
sg63
g64
sS'trial_loop.thisIndex'
p5070
g59
(g98
S'e\x00\x00\x00'
tRp5071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5072
I0
sg3641
g4191
sS'block_loop.thisRepN'
p5073
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5074
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p5075
Nsg69
Vn
sS'block_loop.thisTrialN'
p5076
I0
sg39
F1.2167738444404677
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16\x0c\x01_\x90'
tRp5077
sa(dp5078
S'trial_loop.thisTrialN'
p5079
I102
sg3632
g4377
sS'block_loop.thisIndex'
p5080
g3626
sg38
S'right'
p5081
sg58
g62
sS'trial_loop.thisN'
p5082
I102
sg33
g4062
sg63
g64
sS'trial_loop.thisIndex'
p5083
g59
(g98
S'f\x00\x00\x00'
tRp5084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5085
I0
sg3641
g4384
sS'block_loop.thisRepN'
p5086
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5087
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p5088
Nsg69
Vn
sS'block_loop.thisTrialN'
p5089
I0
sg39
F0.63353440332502942
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16\x12\x05\t\x10'
tRp5090
sa(dp5091
S'trial_loop.thisTrialN'
p5092
I103
sg3632
g3738
sS'block_loop.thisIndex'
p5093
g3626
sg38
S'left'
p5094
sg58
g62
sS'trial_loop.thisN'
p5095
I103
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5096
g59
(g98
S'g\x00\x00\x00'
tRp5097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5098
I0
sg3641
g3746
sS'block_loop.thisRepN'
p5099
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5100
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5101
Nsg69
Vn
sS'block_loop.thisTrialN'
p5102
I0
sg39
F0.76690059893371654
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16\x18\x00#('
tRp5103
sa(dp5104
S'trial_loop.thisTrialN'
p5105
I104
sg3632
g4500
sS'block_loop.thisIndex'
p5106
g3626
sg38
S'right'
p5107
sg58
g62
sS'trial_loop.thisN'
p5108
I104
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p5109
g59
(g98
S'h\x00\x00\x00'
tRp5110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5111
I0
sg3641
g4507
sS'block_loop.thisRepN'
p5112
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5113
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p5114
Nsg69
Vn
sS'block_loop.thisTrialN'
p5115
I0
sg39
F0.58379025011163321
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16\x1d\x0c%`'
tRp5116
sa(dp5117
S'trial_loop.thisTrialN'
p5118
I105
sg3632
g4052
sS'block_loop.thisIndex'
p5119
g3626
sg38
S'left'
p5120
sg58
g62
sS'trial_loop.thisN'
p5121
I105
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p5122
g59
(g98
S'i\x00\x00\x00'
tRp5123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5124
I0
sg3641
g4060
sS'block_loop.thisRepN'
p5125
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5126
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p5127
Nsg69
Vn
sS'block_loop.thisTrialN'
p5128
I0
sg39
F0.68352402576056193
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16#\x06I`'
tRp5129
sa(dp5130
S'trial_loop.thisTrialN'
p5131
I106
sg3632
g3956
sS'block_loop.thisIndex'
p5132
g3626
sg38
S'left'
p5133
sg58
g62
sS'trial_loop.thisN'
p5134
I106
sg33
g3967
sg63
g64
sS'trial_loop.thisIndex'
p5135
g59
(g98
S'j\x00\x00\x00'
tRp5136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5137
I0
sg3641
g3964
sS'block_loop.thisRepN'
p5138
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5139
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5140
Nsg69
Vn
sS'block_loop.thisTrialN'
p5141
I0
sg39
F0.75021439356351038
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16)\x02\x17('
tRp5142
sa(dp5143
S'trial_loop.thisTrialN'
p5144
I107
sg3632
g3847
sS'block_loop.thisIndex'
p5145
g3626
sg38
S'right'
p5146
sg58
g62
sS'trial_loop.thisN'
p5147
I107
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5148
g59
(g98
S'k\x00\x00\x00'
tRp5149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5150
I0
sg3641
g3854
sS'block_loop.thisRepN'
p5151
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5152
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5153
Nsg69
Vn
sS'block_loop.thisTrialN'
p5154
I0
sg39
F0.98349796782349586
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16.\x0e\x1dH'
tRp5155
sa(dp5156
S'trial_loop.thisTrialN'
p5157
I108
sg3632
g3653
sS'block_loop.thisIndex'
p5158
g3626
sg38
S'left'
p5159
sg58
g62
sS'trial_loop.thisN'
p5160
I108
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5161
g59
(g98
S'l\x00\x00\x00'
tRp5162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5163
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5164
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5165
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5166
Nsg69
Vn
sS'block_loop.thisTrialN'
p5167
I0
sg39
F1.0168561236714595
sg34
g752
(S'\x07\xdf\n\x10\x0f\x164\x0e4\xb8'
tRp5168
sa(dp5169
S'trial_loop.thisTrialN'
p5170
I109
sg3632
g3815
sS'block_loop.thisIndex'
p5171
g3626
sg38
S'right'
p5172
sg58
g62
sS'trial_loop.thisN'
p5173
I109
sg33
g3819
sg63
g64
sS'trial_loop.thisIndex'
p5174
g59
(g98
S'm\x00\x00\x00'
tRp5175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5176
I0
sg3641
g3823
sS'block_loop.thisRepN'
p5177
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5178
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p5179
Nsg69
Vn
sS'block_loop.thisTrialN'
p5180
I0
sg39
F0.78343969382694922
sg34
g752
(S'\x07\xdf\n\x10\x0f\x16:\x0f\x03\xc0'
tRp5181
sa(dp5182
S'trial_loop.thisTrialN'
p5183
I110
sg3632
g4660
sS'block_loop.thisIndex'
p5184
g3626
sg38
S'left'
p5185
sg58
g62
sS'trial_loop.thisN'
p5186
I110
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p5187
g59
(g98
S'n\x00\x00\x00'
tRp5188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5189
I0
sg3641
g4667
sS'block_loop.thisRepN'
p5190
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5191
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p5192
Nsg69
Vn
sS'block_loop.thisTrialN'
p5193
I0
sg39
F0.66687972977160825
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17\x04\x0c@\xb8'
tRp5194
sa(dp5195
S'trial_loop.thisTrialN'
p5196
I111
sg3632
g3633
sS'block_loop.thisIndex'
p5197
g3626
sg38
S'left'
p5198
sg58
g62
sS'trial_loop.thisN'
p5199
I111
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5200
g59
(g98
S'o\x00\x00\x00'
tRp5201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5202
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5203
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5204
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5205
Nsg69
Vn
sS'block_loop.thisTrialN'
p5206
I0
sg39
F1.4501232762959262
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17\n\x07\x95h'
tRp5207
sa(dp5208
S'trial_loop.thisTrialN'
p5209
I112
sg3632
g3956
sS'block_loop.thisIndex'
p5210
g3626
sg38
S'left'
p5211
sg58
g62
sS'trial_loop.thisN'
p5212
I112
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5213
g59
(g98
S'p\x00\x00\x00'
tRp5214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5215
I0
sg3641
g3964
sS'block_loop.thisRepN'
p5216
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5217
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5218
Nsg69
Vn
sS'block_loop.thisTrialN'
p5219
I0
sg39
F0.90011683308694046
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17\x10\x0f\x0b\x90'
tRp5220
sa(dp5221
S'trial_loop.thisTrialN'
p5222
I113
sg3632
g3755
sS'block_loop.thisIndex'
p5223
g3626
sg38
S'left'
p5224
sg58
g62
sS'trial_loop.thisN'
p5225
I113
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5226
g59
(g98
S'q\x00\x00\x00'
tRp5227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5228
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5229
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5230
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5231
Nsg69
Vn
sS'block_loop.thisTrialN'
p5232
I0
sg39
F0.9834845682271407
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17\x16\r\xf2P'
tRp5233
sa(dp5234
S'trial_loop.thisTrialN'
p5235
I114
sg3632
g4183
sS'block_loop.thisIndex'
p5236
g3626
sg38
S'right'
p5237
sg58
g62
sS'trial_loop.thisN'
p5238
I114
sg33
g4187
sg63
g64
sS'trial_loop.thisIndex'
p5239
g59
(g98
S'r\x00\x00\x00'
tRp5240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5241
I0
sg3641
g4191
sS'block_loop.thisRepN'
p5242
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5243
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p5244
Nsg69
Vn
sS'block_loop.thisTrialN'
p5245
I0
sg39
F0.90003073354819207
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17\x1c\x0eH@'
tRp5246
sa(dp5247
S'trial_loop.thisTrialN'
p5248
I115
sg3632
g4213
sS'block_loop.thisIndex'
p5249
g3626
sg38
S'right'
p5250
sg58
g62
sS'trial_loop.thisN'
p5251
I115
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5252
g59
(g98
S's\x00\x00\x00'
tRp5253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5254
I0
sg3641
g4220
sS'block_loop.thisRepN'
p5255
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5256
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5257
Nsg69
Vn
sS'block_loop.thisTrialN'
p5258
I0
sg39
F1.100625561644847
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17"\r/\x00'
tRp5259
sa(dp5260
S'trial_loop.thisTrialN'
p5261
I116
sg3632
g3847
sS'block_loop.thisIndex'
p5262
g3626
sg38
S'right'
p5263
sg58
g62
sS'trial_loop.thisN'
p5264
I116
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5265
g59
(g98
S't\x00\x00\x00'
tRp5266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5267
I0
sg3641
g3854
sS'block_loop.thisRepN'
p5268
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5269
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5270
Nsg69
Vn
sS'block_loop.thisTrialN'
p5271
I0
sg39
F0.63344716339270235
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17(\x0f.\xb8'
tRp5272
sa(dp5273
S'trial_loop.thisTrialN'
p5274
I117
sg3632
g3653
sS'block_loop.thisIndex'
p5275
g3626
sg38
S'left'
p5276
sg58
g62
sS'trial_loop.thisN'
p5277
I117
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5278
g59
(g98
S'u\x00\x00\x00'
tRp5279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5280
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5281
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5282
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5283
Nsg69
Vn
sS'block_loop.thisTrialN'
p5284
I0
sg39
F0.66680047257614206
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17.\nD\xe8'
tRp5285
sa(dp5286
S'trial_loop.thisTrialN'
p5287
I118
sg3632
g4037
sS'block_loop.thisIndex'
p5288
g3626
sg38
S'left'
p5289
sg58
g62
sS'trial_loop.thisN'
p5290
I118
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5291
g59
(g98
S'v\x00\x00\x00'
tRp5292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5293
I0
sg3641
g4044
sS'block_loop.thisRepN'
p5294
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5295
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5296
Nsg69
Vn
sS'block_loop.thisTrialN'
p5297
I0
sg39
F0.66685121999034891
sg34
g752
(S'\x07\xdf\n\x10\x0f\x174\x05\x99\x98'
tRp5298
sa(dp5299
S'trial_loop.thisTrialN'
p5300
I119
sg3632
g4213
sS'block_loop.thisIndex'
p5301
g3626
sg38
S'right'
p5302
sg58
g62
sS'trial_loop.thisN'
p5303
I119
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5304
g59
(g98
S'w\x00\x00\x00'
tRp5305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5306
I0
sg3641
g4220
sS'block_loop.thisRepN'
p5307
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5308
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5309
Nsg69
Vn
sS'block_loop.thisTrialN'
p5310
I0
sg39
F0.63346883082704153
sg34
g752
(S'\x07\xdf\n\x10\x0f\x17:\x00\xeeH'
tRp5311
sa(dp5312
S'trial_loop.thisTrialN'
p5313
I120
sg3632
g3815
sS'block_loop.thisIndex'
p5314
g3626
sg38
S'right'
p5315
sg58
g62
sS'trial_loop.thisN'
p5316
I120
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5317
g59
(g98
S'x\x00\x00\x00'
tRp5318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5319
I0
sg3641
g3823
sS'block_loop.thisRepN'
p5320
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5321
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p5322
Nsg69
Vn
sS'block_loop.thisTrialN'
p5323
I0
sg39
F0.84993762059457367
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18\x03\x0bJ\xa0'
tRp5324
sa(dp5325
S'trial_loop.thisTrialN'
p5326
I121
sg3632
g4138
sS'block_loop.thisIndex'
p5327
g3626
sg38
S'left'
p5328
sg58
g62
sS'trial_loop.thisN'
p5329
I121
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p5330
g59
(g98
S'y\x00\x00\x00'
tRp5331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5332
I0
sg3641
g4145
sS'block_loop.thisRepN'
p5333
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5334
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p5335
Nsg69
Vn
sS'block_loop.thisTrialN'
p5336
I0
sg39
F0.68393998348983587
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18\t\ty\xc8'
tRp5337
sa(dp5338
S'trial_loop.thisTrialN'
p5339
I122
sg3632
g3633
sS'block_loop.thisIndex'
p5340
g3626
sg38
S'left'
p5341
sg58
g62
sS'trial_loop.thisN'
p5342
I122
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5343
g59
(g98
S'z\x00\x00\x00'
tRp5344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5345
I0
sg3641
g3642
sS'block_loop.thisRepN'
p5346
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5347
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5348
Nsg69
Vn
sS'block_loop.thisTrialN'
p5349
I0
sg39
F1.0168541279890633
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18\x0f\x05\t\x10'
tRp5350
sa(dp5351
S'trial_loop.thisTrialN'
p5352
I123
sg3632
g3785
sS'block_loop.thisIndex'
p5353
g3626
sg38
S'left'
p5354
sg58
g62
sS'trial_loop.thisN'
p5355
I123
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5356
g59
(g98
S'{\x00\x00\x00'
tRp5357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5358
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5359
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5360
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5361
Nsg69
Vn
sS'block_loop.thisTrialN'
p5362
I0
sg39
F0.66680218316469109
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18\x15\x05\xd8\x18'
tRp5363
sa(dp5364
S'trial_loop.thisTrialN'
p5365
I124
sg3632
g4500
sS'block_loop.thisIndex'
p5366
g3626
sg38
S'right'
p5367
sg58
g62
sS'trial_loop.thisN'
p5368
I124
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p5369
g59
(g98
S'|\x00\x00\x00'
tRp5370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5371
I0
sg3641
g4507
sS'block_loop.thisRepN'
p5372
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5373
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p5374
Nsg69
Vn
sS'block_loop.thisTrialN'
p5375
I0
sg39
F0.65012994758944842
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18\x1b\x01,\xc8'
tRp5376
sa(dp5377
S'trial_loop.thisTrialN'
p5378
I125
sg3632
g3687
sS'block_loop.thisIndex'
p5379
g3626
sg38
S'right'
p5380
sg58
g62
sS'trial_loop.thisN'
p5381
I125
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p5382
g59
(g98
S'}\x00\x00\x00'
tRp5383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5384
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5385
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5386
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5387
Nsg69
Vn
sS'block_loop.thisTrialN'
p5388
I0
sg39
F0.73348428312965552
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18 \x0b\xc3\xb8'
tRp5389
sa(dp5390
S'trial_loop.thisTrialN'
p5391
I126
sg3632
g4213
sS'block_loop.thisIndex'
p5392
g3626
sg38
S'right'
p5393
sg58
g62
sS'trial_loop.thisN'
p5394
I126
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5395
g59
(g98
S'~\x00\x00\x00'
tRp5396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5397
I0
sg3641
g4220
sS'block_loop.thisRepN'
p5398
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5399
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5400
Nsg69
Vn
sS'block_loop.thisTrialN'
p5401
I0
sg39
F0.60021616116864607
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18&\x08\x0e\x80'
tRp5402
sa(dp5403
S'trial_loop.thisTrialN'
p5404
I127
sg3632
g4153
sS'block_loop.thisIndex'
p5405
g3626
sg38
S'right'
p5406
sg58
g62
sS'trial_loop.thisN'
p5407
I127
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5408
g59
(g98
S'\x7f\x00\x00\x00'
tRp5409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5410
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5411
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5412
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5413
Nsg69
Vn
sS'block_loop.thisTrialN'
p5414
I0
sg39
F0.75021981041936669
sg34
g752
(S'\x07\xdf\n\x10\x0f\x18,\x02\xab\x98'
tRp5415
sa(dp5416
S'trial_loop.thisTrialN'
p5417
I128
sg3632
g4280
sS'block_loop.thisIndex'
p5418
g3626
sg38
S'right'
p5419
sg58
g62
sS'trial_loop.thisN'
p5420
I128
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5421
g59
(g98
S'\x80\x00\x00\x00'
tRp5422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5423
I0
sg3641
g4287
sS'block_loop.thisRepN'
p5424
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5425
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p5426
Nsg69
Vn
sS'block_loop.thisTrialN'
p5427
I0
sg39
F1.0001830328001233
sg34
g752
(S'\x07\xdf\n\x10\x0f\x181\x0es8'
tRp5428
sa(dp5429
S'trial_loop.thisTrialN'
p5430
I129
sg3632
g4108
sS'block_loop.thisIndex'
p5431
g3626
sg38
S'left'
p5432
sg58
g62
sS'trial_loop.thisN'
p5433
I129
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5434
g59
(g98
S'\x81\x00\x00\x00'
tRp5435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5436
I0
sg3641
g4115
sS'block_loop.thisRepN'
p5437
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5438
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5439
Nsg69
Vn
sS'block_loop.thisTrialN'
p5440
I0
sg39
F0.66677481377337244
sg34
g752
(S'\x07\xdf\n\x10\x0f\x187\x0f\x03\xc0'
tRp5441
sa(dp5442
S'trial_loop.thisTrialN'
p5443
I130
sg3632
g4153
sS'block_loop.thisIndex'
p5444
g3626
sg38
S'right'
p5445
sg58
g62
sS'trial_loop.thisN'
p5446
I130
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5447
g59
(g98
S'\x82\x00\x00\x00'
tRp5448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5449
I0
sg3641
g4160
sS'block_loop.thisRepN'
p5450
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5451
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5452
Nsg69
Vn
sS'block_loop.thisTrialN'
p5453
I0
sg39
F0.61674955410489929
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19\x01\nXp'
tRp5454
sa(dp5455
S'trial_loop.thisTrialN'
p5456
I131
sg3632
g4108
sS'block_loop.thisIndex'
p5457
g3626
sg38
S'left'
p5458
sg58
g62
sS'trial_loop.thisN'
p5459
I131
sg33
g3674
sg63
g64
sS'trial_loop.thisIndex'
p5460
g59
(g98
S'\x83\x00\x00\x00'
tRp5461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5462
I0
sg3641
g4115
sS'block_loop.thisRepN'
p5463
I1
sg3644
g3674
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5464
I1
sg3646
g3681
sg55
g11
sS'block_loop.thisTrial'
p5465
Nsg69
Vn
sS'block_loop.thisTrialN'
p5466
I0
sg39
F0.60011666202626657
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19\x07\x054\x08'
tRp5467
sa(dp5468
S'trial_loop.thisTrialN'
p5469
I132
sg3632
g4660
sS'block_loop.thisIndex'
p5470
g3626
sg38
S'left'
p5471
sg58
g62
sS'trial_loop.thisN'
p5472
I132
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p5473
g59
(g98
S'\x84\x00\x00\x00'
tRp5474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5475
I0
sg3641
g4667
sS'block_loop.thisRepN'
p5476
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5477
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p5478
Nsg69
Vn
sS'block_loop.thisTrialN'
p5479
I0
sg39
F0.61687015048664762
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19\x0c\x0e\xd4\xe0'
tRp5480
sa(dp5481
S'trial_loop.thisTrialN'
p5482
I133
sg3632
g4020
sS'block_loop.thisIndex'
p5483
g3626
sg38
S'left'
p5484
sg58
g62
sS'trial_loop.thisN'
p5485
I133
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p5486
g59
(g98
S'\x85\x00\x00\x00'
tRp5487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5488
I0
sg3641
g4028
sS'block_loop.thisRepN'
p5489
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5490
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p5491
Nsg69
Vn
sS'block_loop.thisTrialN'
p5492
I0
sg39
F1.2672609625842597
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19\x12\tu\xe0'
tRp5493
sa(dp5494
S'trial_loop.thisTrialN'
p5495
I134
sg3632
g3721
sS'block_loop.thisIndex'
p5496
g3626
sg38
S'left'
p5497
sg58
g62
sS'trial_loop.thisN'
p5498
I134
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5499
g59
(g98
S'\x86\x00\x00\x00'
tRp5500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5501
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5502
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5503
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5504
Nsg69
Vn
sS'block_loop.thisTrialN'
p5505
I0
sg39
F1.049834244124213
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19\x18\x0e\x11\x90'
tRp5506
sa(dp5507
S'trial_loop.thisTrialN'
p5508
I135
sg3632
g4003
sS'block_loop.thisIndex'
p5509
g3626
sg38
S'left'
p5510
sg58
g62
sS'trial_loop.thisN'
p5511
I135
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5512
g59
(g98
S'\x87\x00\x00\x00'
tRp5513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5514
I0
sg3641
g4011
sS'block_loop.thisRepN'
p5515
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5516
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p5517
Nsg69
Vn
sS'block_loop.thisTrialN'
p5518
I0
sg39
F0.88344260182566359
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19\x1f\x00\x17p'
tRp5519
sa(dp5520
S'trial_loop.thisTrialN'
p5521
I136
sg3632
g4580
sS'block_loop.thisIndex'
p5522
g3626
sg38
S'right'
p5523
sg58
g62
sS'trial_loop.thisN'
p5524
I136
sg33
g4319
sg63
g64
sS'trial_loop.thisIndex'
p5525
g59
(g98
S'\x88\x00\x00\x00'
tRp5526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5527
I0
sg3641
g4587
sS'block_loop.thisRepN'
p5528
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5529
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p5530
Nsg69
Vn
sS'block_loop.thisTrialN'
p5531
I0
sg39
F1.0840126264120045
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19$\x0e\x05\xd8'
tRp5532
sa(dp5533
S'trial_loop.thisTrialN'
p5534
I137
sg3632
S'16-skips_prawn.png'
p5535
sS'block_loop.thisIndex'
p5536
g3626
sg38
S'left'
p5537
sg58
g62
sS'trial_loop.thisN'
p5538
I137
sg33
g4187
sg63
g64
sS'trial_loop.thisIndex'
p5539
g59
(g98
S'\x89\x00\x00\x00'
tRp5540
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5541
I0
sg3641
S'42-mrkipling_lemon_slices.png'
p5542
sS'block_loop.thisRepN'
p5543
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5544
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p5545
Nsg69
Vn
sS'block_loop.thisTrialN'
p5546
I0
sg39
F1.1166623141762102
sg34
g752
(S'\x07\xdf\n\x10\x0f\x19+\x00\x84\xd0'
tRp5547
sa(dp5548
S'trial_loop.thisTrialN'
p5549
I138
sg3632
g3721
sS'block_loop.thisIndex'
p5550
g3626
sg38
S'left'
p5551
sg58
g62
sS'trial_loop.thisN'
p5552
I138
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p5553
g59
(g98
S'\x8a\x00\x00\x00'
tRp5554
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5555
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5556
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5557
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5558
Nsg69
Vn
sS'block_loop.thisTrialN'
p5559
I0
sg39
F1.3003194806187821
sg34
g752
(S'\x07\xdf\n\x10\x0f\x191\x02\xbf '
tRp5560
sa(dp5561
S'trial_loop.thisTrialN'
p5562
I139
sg3632
g3909
sS'block_loop.thisIndex'
p5563
g3626
sg38
S'right'
p5564
sg58
g62
sS'trial_loop.thisN'
p5565
I139
sg33
g3920
sg63
g64
sS'trial_loop.thisIndex'
p5566
g59
(g98
S'\x8b\x00\x00\x00'
tRp5567
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5568
I0
sg3641
g3917
sS'block_loop.thisRepN'
p5569
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5570
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p5571
Nsg69
Vn
sS'block_loop.thisTrialN'
p5572
I0
sg39
F0.6168330877662811
sg34
g752
(S'\x07\xdf\n\x10\x0f\x197\x07\xd7\xd0'
tRp5573
sa(dp5574
S'trial_loop.thisTrialN'
p5575
I140
sg3632
g4138
sS'block_loop.thisIndex'
p5576
g3626
sg38
S'left'
p5577
sg58
g62
sS'trial_loop.thisN'
p5578
I140
sg33
g3950
sg63
g64
sS'trial_loop.thisIndex'
p5579
g59
(g98
S'\x8c\x00\x00\x00'
tRp5580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5581
I0
sg3641
g4145
sS'block_loop.thisRepN'
p5582
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5583
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p5584
Nsg69
Vn
sS'block_loop.thisTrialN'
p5585
I0
sg39
F0.61678918270627037
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a\x01\x02t\xe8'
tRp5586
sa(dp5587
S'trial_loop.thisTrialN'
p5588
I141
sg3632
g4818
sS'block_loop.thisIndex'
p5589
g3626
sg38
S'right'
p5590
sg58
g62
sS'trial_loop.thisN'
p5591
I141
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5592
g59
(g98
S'\x8d\x00\x00\x00'
tRp5593
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5594
I0
sg3641
g4825
sS'block_loop.thisRepN'
p5595
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5596
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5597
Nsg69
Vn
sS'block_loop.thisTrialN'
p5598
I0
sg39
F1.3168420398396847
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a\x06\x0c\x92\xc0'
tRp5599
sa(dp5600
S'trial_loop.thisTrialN'
p5601
I142
sg3632
g3832
sS'block_loop.thisIndex'
p5602
g3626
sg38
S'right'
p5603
sg58
g62
sS'trial_loop.thisN'
p5604
I142
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p5605
g59
(g98
S'\x8e\x00\x00\x00'
tRp5606
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5607
I0
sg3641
g3839
sS'block_loop.thisRepN'
p5608
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5609
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5610
Nsg69
Vn
sS'block_loop.thisTrialN'
p5611
I0
sg39
F0.8835056084462849
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a\r\x02\xa3\xc8'
tRp5612
sa(dp5613
S'trial_loop.thisTrialN'
p5614
I143
sg3632
g4123
sS'block_loop.thisIndex'
p5615
g3626
sg38
S'left'
p5616
sg58
g62
sS'trial_loop.thisN'
p5617
I143
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5618
g59
(g98
S'\x8f\x00\x00\x00'
tRp5619
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5620
I0
sg3641
g4130
sS'block_loop.thisRepN'
p5621
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5622
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p5623
Nsg69
Vn
sS'block_loop.thisTrialN'
p5624
I0
sg39
F1.0167437951313332
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a\x13\x01L\x08'
tRp5625
sa(dp5626
S'trial_loop.thisTrialN'
p5627
I144
sg3632
g3653
sS'block_loop.thisIndex'
p5628
g3626
sg38
S'left'
p5629
sg58
g62
sS'trial_loop.thisN'
p5630
I144
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5631
g59
(g98
S'\x90\x00\x00\x00'
tRp5632
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5633
I0
sg3641
g3661
sS'block_loop.thisRepN'
p5634
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5635
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5636
Nsg69
Vn
sS'block_loop.thisTrialN'
p5637
I0
sg39
F0.98392390396838891
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a\x19\x02\x1b\x10'
tRp5638
sa(dp5639
S'trial_loop.thisTrialN'
p5640
I145
sg3632
g4377
sS'block_loop.thisIndex'
p5641
g3626
sg38
S'right'
p5642
sg58
g62
sS'trial_loop.thisN'
p5643
I145
sg33
g4062
sg63
g64
sS'trial_loop.thisIndex'
p5644
g59
(g98
S'\x91\x00\x00\x00'
tRp5645
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5646
I0
sg3641
g4384
sS'block_loop.thisRepN'
p5647
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5648
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p5649
Nsg69
Vn
sS'block_loop.thisTrialN'
p5650
I0
sg39
F1.0001893049557111
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a\x1f\x022\x80'
tRp5651
sa(dp5652
S'trial_loop.thisTrialN'
p5653
I146
sg3632
g4003
sS'block_loop.thisIndex'
p5654
g3626
sg38
S'left'
p5655
sg58
g62
sS'trial_loop.thisN'
p5656
I146
sg33
g4014
sg63
g64
sS'trial_loop.thisIndex'
p5657
g59
(g98
S'\x92\x00\x00\x00'
tRp5658
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5659
I0
sg3641
g4011
sS'block_loop.thisRepN'
p5660
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5661
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p5662
Nsg69
Vn
sS'block_loop.thisTrialN'
p5663
I0
sg39
F0.71686279496498173
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a%\x02\xc3\x08'
tRp5664
sa(dp5665
S'trial_loop.thisTrialN'
p5666
I147
sg3632
g3755
sS'block_loop.thisIndex'
p5667
g3626
sg38
S'left'
p5668
sg58
g62
sS'trial_loop.thisN'
p5669
I147
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p5670
g59
(g98
S'\x93\x00\x00\x00'
tRp5671
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5672
I0
sg3641
g3763
sS'block_loop.thisRepN'
p5673
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5674
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p5675
Nsg69
Vn
sS'block_loop.thisTrialN'
p5676
I0
sg39
F0.68342566701539909
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a*\x0eP\x10'
tRp5677
sa(dp5678
S'trial_loop.thisTrialN'
p5679
I148
sg3632
g3687
sS'block_loop.thisIndex'
p5680
g3626
sg38
S'right'
p5681
sg58
g62
sS'trial_loop.thisN'
p5682
I148
sg33
g3698
sg63
g64
sS'trial_loop.thisIndex'
p5683
g59
(g98
S'\x94\x00\x00\x00'
tRp5684
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5685
I0
sg3641
g3695
sS'block_loop.thisRepN'
p5686
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5687
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p5688
Nsg69
Vn
sS'block_loop.thisTrialN'
p5689
I0
sg39
F0.98327872759546153
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a0\t\xdfX'
tRp5690
sa(dp5691
S'trial_loop.thisTrialN'
p5692
I149
sg3632
g3894
sS'block_loop.thisIndex'
p5693
g3626
sg38
S'right'
p5694
sg58
g62
sS'trial_loop.thisN'
p5695
I149
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p5696
g59
(g98
S'\x95\x00\x00\x00'
tRp5697
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5698
I0
sg3641
g3901
sS'block_loop.thisRepN'
p5699
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5700
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p5701
Nsg69
Vn
sS'block_loop.thisTrialN'
p5702
I0
sg39
F0.86685732108526281
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1a6\n5H'
tRp5703
sa(dp5704
S'trial_loop.thisTrialN'
p5705
I150
sg3632
g4433
sS'block_loop.thisIndex'
p5706
g3626
sg38
S'right'
p5707
sg58
g62
sS'trial_loop.thisN'
p5708
I150
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p5709
g59
(g98
S'\x96\x00\x00\x00'
tRp5710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5711
I0
sg3641
g4440
sS'block_loop.thisRepN'
p5712
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5713
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p5714
Nsg69
Vn
sS'block_loop.thisTrialN'
p5715
I0
sg39
F1.2338805690997106
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b\x00\x08\xa2\xf0'
tRp5716
sa(dp5717
S'trial_loop.thisTrialN'
p5718
I151
sg3632
g4183
sS'block_loop.thisIndex'
p5719
g3626
sg38
S'right'
p5720
sg58
g62
sS'trial_loop.thisN'
p5721
I151
sg33
g4187
sg63
g64
sS'trial_loop.thisIndex'
p5722
g59
(g98
S'\x97\x00\x00\x00'
tRp5723
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5724
I0
sg3641
g4191
sS'block_loop.thisRepN'
p5725
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5726
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p5727
Nsg69
Vn
sS'block_loop.thisTrialN'
p5728
I0
sg39
F0.85000233780010603
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b\x06\x0c\xc5\x88'
tRp5729
sa(dp5730
S'trial_loop.thisTrialN'
p5731
I152
sg3632
g4168
sS'block_loop.thisIndex'
p5732
g3626
sg38
S'left'
p5733
sg58
g62
sS'trial_loop.thisN'
p5734
I152
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p5735
g59
(g98
S'\x98\x00\x00\x00'
tRp5736
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5737
I0
sg3641
g4175
sS'block_loop.thisRepN'
p5738
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5739
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p5740
Nsg69
Vn
sS'block_loop.thisTrialN'
p5741
I0
sg39
F0.7667851343176153
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b\x0c\n\xf4\xb0'
tRp5742
sa(dp5743
S'trial_loop.thisTrialN'
p5744
I153
sg3632
g3909
sS'block_loop.thisIndex'
p5745
g3626
sg38
S'right'
p5746
sg58
g62
sS'trial_loop.thisN'
p5747
I153
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p5748
g59
(g98
S'\x99\x00\x00\x00'
tRp5749
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5750
I0
sg3641
g3917
sS'block_loop.thisRepN'
p5751
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5752
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p5753
Nsg69
Vn
sS'block_loop.thisTrialN'
p5754
I0
sg39
F0.8834682606284332
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b\x12\x07\xf7\x10'
tRp5755
sa(dp5756
S'trial_loop.thisTrialN'
p5757
I154
sg3632
g3721
sS'block_loop.thisIndex'
p5758
g3626
sg38
S'left'
p5759
sg58
g62
sS'trial_loop.thisN'
p5760
I154
sg33
g3732
sg63
g64
sS'trial_loop.thisIndex'
p5761
g59
(g98
S'\x9a\x00\x00\x00'
tRp5762
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5763
I0
sg3641
g3729
sS'block_loop.thisRepN'
p5764
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5765
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p5766
Nsg69
Vn
sS'block_loop.thisTrialN'
p5767
I0
sg39
F1.2331518590654014
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b\x18\x06\x9fP'
tRp5768
sa(dp5769
S'trial_loop.thisTrialN'
p5770
I155
sg3632
g4280
sS'block_loop.thisIndex'
p5771
g3626
sg38
S'right'
p5772
sg58
g62
sS'trial_loop.thisN'
p5773
I155
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5774
g59
(g98
S'\x9b\x00\x00\x00'
tRp5775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5776
I0
sg3641
g4287
sS'block_loop.thisRepN'
p5777
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5778
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p5779
Nsg69
Vn
sS'block_loop.thisTrialN'
p5780
I0
sg39
F0.78353377610983443
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b\x1e\n\xc1\xe8'
tRp5781
sa(dp5782
S'trial_loop.thisTrialN'
p5783
I156
sg3632
g4123
sS'block_loop.thisIndex'
p5784
g3626
sg38
S'left'
p5785
sg58
g62
sS'trial_loop.thisN'
p5786
I156
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p5787
g59
(g98
S'\x9c\x00\x00\x00'
tRp5788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5789
I0
sg3641
g4130
sS'block_loop.thisRepN'
p5790
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5791
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p5792
Nsg69
Vn
sS'block_loop.thisTrialN'
p5793
I0
sg39
F0.88352955666050548
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b$\x07\xc0`'
tRp5794
sa(dp5795
S'trial_loop.thisTrialN'
p5796
I157
sg3632
g3909
sS'block_loop.thisIndex'
p5797
g3626
sg38
S'right'
p5798
sg58
g62
sS'trial_loop.thisN'
p5799
I157
sg33
g3920
sg63
g64
sS'trial_loop.thisIndex'
p5800
g59
(g98
S'\x9d\x00\x00\x00'
tRp5801
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5802
I0
sg3641
g3917
sS'block_loop.thisRepN'
p5803
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5804
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p5805
Nsg69
Vn
sS'block_loop.thisTrialN'
p5806
I0
sg39
F0.600156860822608
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b*\x06\xa7 '
tRp5807
sa(dp5808
S'trial_loop.thisTrialN'
p5809
I158
sg3632
g3939
sS'block_loop.thisIndex'
p5810
g3626
sg38
S'right'
p5811
sg58
g62
sS'trial_loop.thisN'
p5812
I158
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p5813
g59
(g98
S'\x9e\x00\x00\x00'
tRp5814
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5815
I0
sg3641
g3947
sS'block_loop.thisRepN'
p5816
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5817
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p5818
Nsg69
Vn
sS'block_loop.thisTrialN'
p5819
I0
sg39
F0.63344117633459973
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b0\x01\t\xa0'
tRp5820
sa(dp5821
S'trial_loop.thisTrialN'
p5822
I159
sg3632
g3862
sS'block_loop.thisIndex'
p5823
g3626
sg38
S'right'
p5824
sg58
g62
sS'trial_loop.thisN'
p5825
I159
sg33
g3873
sg63
g64
sS'trial_loop.thisIndex'
p5826
g59
(g98
S'\x9f\x00\x00\x00'
tRp5827
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5828
I0
sg3641
g3870
sS'block_loop.thisRepN'
p5829
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5830
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p5831
Nsg69
Vn
sS'block_loop.thisTrialN'
p5832
I0
sg39
F0.63345771201056777
sg34
g752
(S"\x07\xdf\n\x10\x0f\x1b5\x0b'x"
tRp5833
sa(dp5834
S'trial_loop.thisTrialN'
p5835
I160
sg3632
g4660
sS'block_loop.thisIndex'
p5836
g3626
sg38
S'left'
p5837
sg58
g62
sS'trial_loop.thisN'
p5838
I160
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p5839
g59
(g98
S'\xa0\x00\x00\x00'
tRp5840
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5841
I0
sg3641
g4667
sS'block_loop.thisRepN'
p5842
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5843
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p5844
Nsg69
Vn
sS'block_loop.thisTrialN'
p5845
I0
sg39
F0.70014408844144782
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1b;\x06\x03\x10'
tRp5846
sa(dp5847
S'trial_loop.thisTrialN'
p5848
I161
sg3632
g4818
sS'block_loop.thisIndex'
p5849
g3626
sg38
S'right'
p5850
sg58
g62
sS'trial_loop.thisN'
p5851
I161
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p5852
g59
(g98
S'\xa1\x00\x00\x00'
tRp5853
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5854
I0
sg3641
g4825
sS'block_loop.thisRepN'
p5855
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5856
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p5857
Nsg69
Vn
sS'block_loop.thisTrialN'
p5858
I0
sg39
F1.4001775589240424
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c\x05\x02\x0bp'
tRp5859
sa(dp5860
S'trial_loop.thisTrialN'
p5861
I162
sg3632
g3939
sS'block_loop.thisIndex'
p5862
g3626
sg38
S'right'
p5863
sg58
g62
sS'trial_loop.thisN'
p5864
I162
sg33
g3943
sg63
g64
sS'trial_loop.thisIndex'
p5865
g59
(g98
S'\xa2\x00\x00\x00'
tRp5866
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5867
I0
sg3641
g3947
sS'block_loop.thisRepN'
p5868
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5869
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p5870
Nsg69
Vn
sS'block_loop.thisTrialN'
p5871
I0
sg39
F0.60023383723455481
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c\x0b\x08\x93P'
tRp5872
sa(dp5873
S'trial_loop.thisTrialN'
p5874
I163
sg3632
g4280
sS'block_loop.thisIndex'
p5875
g3626
sg38
S'right'
p5876
sg58
g62
sS'trial_loop.thisN'
p5877
I163
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5878
g59
(g98
S'\xa3\x00\x00\x00'
tRp5879
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5880
I0
sg3641
g4287
sS'block_loop.thisRepN'
p5881
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5882
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p5883
Nsg69
Vn
sS'block_loop.thisTrialN'
p5884
I0
sg39
F1.2501371320504404
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c\x11\x02\xf1\xe8'
tRp5885
sa(dp5886
S'trial_loop.thisTrialN'
p5887
I164
sg3632
g5535
sS'block_loop.thisIndex'
p5888
g3626
sg38
S'left'
p5889
sg58
g62
sS'trial_loop.thisN'
p5890
I164
sg33
g4187
sg63
g64
sS'trial_loop.thisIndex'
p5891
g59
(g98
S'\xa4\x00\x00\x00'
tRp5892
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5893
I0
sg3641
g5542
sS'block_loop.thisRepN'
p5894
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5895
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p5896
Nsg69
Vn
sS'block_loop.thisTrialN'
p5897
I0
sg39
F0.76671271946906927
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c\x17\x07S\x00'
tRp5898
sa(dp5899
S'trial_loop.thisTrialN'
p5900
I165
sg3632
g3832
sS'block_loop.thisIndex'
p5901
g3626
sg38
S'right'
p5902
sg58
g62
sS'trial_loop.thisN'
p5903
I165
sg33
g3742
sg63
g64
sS'trial_loop.thisIndex'
p5904
g59
(g98
S'\xa5\x00\x00\x00'
tRp5905
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5906
I0
sg3641
g3839
sS'block_loop.thisRepN'
p5907
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5908
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p5909
Nsg69
Vn
sS'block_loop.thisTrialN'
p5910
I0
sg39
F0.71678154208348133
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c\x1d\x04Qx'
tRp5911
sa(dp5912
S'trial_loop.thisTrialN'
p5913
I166
sg3632
g3956
sS'block_loop.thisIndex'
p5914
g3626
sg38
S'left'
p5915
sg58
g62
sS'trial_loop.thisN'
p5916
I166
sg33
g3960
sg63
g64
sS'trial_loop.thisIndex'
p5917
g59
(g98
S'\xa6\x00\x00\x00'
tRp5918
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5919
I0
sg3641
g3964
sS'block_loop.thisRepN'
p5920
I1
sg3644
g3960
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5921
I1
sg3646
g3967
sg55
g11
sS'block_loop.thisTrial'
p5922
Nsg69
Vn
sS'block_loop.thisTrialN'
p5923
I0
sg39
F0.70019654644056573
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c#\x00\x9c@'
tRp5924
sa(dp5925
S'trial_loop.thisTrialN'
p5926
I167
sg3632
g4377
sS'block_loop.thisIndex'
p5927
g3626
sg38
S'right'
p5928
sg58
g62
sS'trial_loop.thisN'
p5929
I167
sg33
g4062
sg63
g64
sS'trial_loop.thisIndex'
p5930
g59
(g98
S'\xa7\x00\x00\x00'
tRp5931
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5932
I0
sg3641
g4384
sS'block_loop.thisRepN'
p5933
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5934
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p5935
Nsg69
Vn
sS'block_loop.thisTrialN'
p5936
I0
sg39
F0.65011398211208871
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c(\x0b\xacH'
tRp5937
sa(dp5938
S'trial_loop.thisTrialN'
p5939
I168
sg3632
g4580
sS'block_loop.thisIndex'
p5940
g3626
sg38
S'right'
p5941
sg58
g62
sS'trial_loop.thisN'
p5942
I168
sg33
g4319
sg63
g64
sS'trial_loop.thisIndex'
p5943
g59
(g98
S'\xa8\x00\x00\x00'
tRp5944
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5945
I0
sg3641
g4587
sS'block_loop.thisRepN'
p5946
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5947
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p5948
Nsg69
Vn
sS'block_loop.thisTrialN'
p5949
I0
sg39
F0.71721745665490744
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c.\x06\xc2x'
tRp5950
sa(dp5951
S'trial_loop.thisTrialN'
p5952
I169
sg3632
g3785
sS'block_loop.thisIndex'
p5953
g3626
sg38
S'left'
p5954
sg58
g62
sS'trial_loop.thisN'
p5955
I169
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p5956
g59
(g98
S'\xa9\x00\x00\x00'
tRp5957
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5958
I0
sg3641
g3793
sS'block_loop.thisRepN'
p5959
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5960
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p5961
Nsg69
Vn
sS'block_loop.thisTrialN'
p5962
I0
sg39
F0.66677794984934735
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c4\x03\r@'
tRp5963
sa(dp5964
S'trial_loop.thisTrialN'
p5965
I170
sg3632
g3879
sS'block_loop.thisIndex'
p5966
g3626
sg38
S'left'
p5967
sg58
g62
sS'trial_loop.thisN'
p5968
I170
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5969
g59
(g98
S'\xaa\x00\x00\x00'
tRp5970
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5971
I0
sg3641
g3886
sS'block_loop.thisRepN'
p5972
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5973
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p5974
Nsg69
Vn
sS'block_loop.thisTrialN'
p5975
I0
sg39
F0.95020224839390721
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1c9\r\xa40'
tRp5976
sa(dp5977
S'trial_loop.thisTrialN'
p5978
I171
sg3632
g4280
sS'block_loop.thisIndex'
p5979
g3626
sg38
S'right'
p5980
sg58
g62
sS'trial_loop.thisN'
p5981
I171
sg33
g4007
sg63
g64
sS'trial_loop.thisIndex'
p5982
g59
(g98
S'\xab\x00\x00\x00'
tRp5983
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5984
I0
sg3641
g4287
sS'block_loop.thisRepN'
p5985
I1
sg3644
g4007
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5986
I1
sg3646
g4014
sg55
g11
sS'block_loop.thisTrial'
p5987
Nsg69
Vn
sS'block_loop.thisTrialN'
p5988
I0
sg39
F0.65018440127460053
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d\x03\r} '
tRp5989
sa(dp5990
S'trial_loop.thisTrialN'
p5991
I172
sg3632
g3704
sS'block_loop.thisIndex'
p5992
g3626
sg38
S'right'
p5993
sg58
g62
sS'trial_loop.thisN'
p5994
I172
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p5995
g59
(g98
S'\xac\x00\x00\x00'
tRp5996
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p5997
I0
sg3641
g3712
sS'block_loop.thisRepN'
p5998
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p5999
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6000
Nsg69
Vn
sS'block_loop.thisTrialN'
p6001
I0
sg39
F0.73352448191872099
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d\t\x08\x978'
tRp6002
sa(dp6003
S'trial_loop.thisTrialN'
p6004
I173
sg3632
g4052
sS'block_loop.thisIndex'
p6005
g3626
sg38
S'left'
p6006
sg58
g62
sS'trial_loop.thisN'
p6007
I173
sg33
g4056
sg63
g64
sS'trial_loop.thisIndex'
p6008
g59
(g98
S'\xad\x00\x00\x00'
tRp6009
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6010
I0
sg3641
g4060
sS'block_loop.thisRepN'
p6011
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6012
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p6013
Nsg69
Vn
sS'block_loop.thisTrialN'
p6014
I0
sg39
F1.2667677433491917
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d\x0f\x05\x1c\x98'
tRp6015
sa(dp6016
S'trial_loop.thisTrialN'
p6017
I174
sg3632
g5535
sS'block_loop.thisIndex'
p6018
g3626
sg38
S'left'
p6019
sg58
g62
sS'trial_loop.thisN'
p6020
I174
sg33
g4187
sg63
g64
sS'trial_loop.thisIndex'
p6021
g59
(g98
S'\xae\x00\x00\x00'
tRp6022
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6023
I0
sg3641
g5542
sS'block_loop.thisRepN'
p6024
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6025
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p6026
Nsg69
Vn
sS'block_loop.thisTrialN'
p6027
I0
sg39
F1.0667679144062276
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d\x15\t\xb8H'
tRp6028
sa(dp6029
S'trial_loop.thisTrialN'
p6030
I175
sg3632
g3862
sS'block_loop.thisIndex'
p6031
g3626
sg38
S'right'
p6032
sg58
g62
sS'trial_loop.thisN'
p6033
I175
sg33
g3866
sg63
g64
sS'trial_loop.thisIndex'
p6034
g59
(g98
S'\xaf\x00\x00\x00'
tRp6035
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6036
I0
sg3641
g3870
sS'block_loop.thisRepN'
p6037
I1
sg3644
g3866
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6038
I1
sg3646
g3873
sg55
g11
sS'block_loop.thisTrial'
p6039
Nsg69
Vn
sS'block_loop.thisTrialN'
p6040
I0
sg39
F0.7002065248634608
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d\x1b\x0b>\xe8'
tRp6041
sa(dp6042
S'trial_loop.thisTrialN'
p6043
I176
sg3632
g5535
sS'block_loop.thisIndex'
p6044
g3626
sg38
S'left'
p6045
sg58
g62
sS'trial_loop.thisN'
p6046
I176
sg33
g4187
sg63
g64
sS'trial_loop.thisIndex'
p6047
g59
(g98
S'\xb0\x00\x00\x00'
tRp6048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6049
I0
sg3641
g5542
sS'block_loop.thisRepN'
p6050
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6051
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p6052
Nsg69
Vn
sS'block_loop.thisTrialN'
p6053
I0
sg39
F0.98329754405131098
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d!\x07\x0c\xb0'
tRp6054
sa(dp6055
S'trial_loop.thisTrialN'
p6056
I177
sg3632
g4500
sS'block_loop.thisIndex'
p6057
g3626
sg38
S'right'
p6058
sg58
g62
sS'trial_loop.thisN'
p6059
I177
sg33
g3977
sg63
g64
sS'trial_loop.thisIndex'
p6060
g59
(g98
S'\xb1\x00\x00\x00'
tRp6061
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6062
I0
sg3641
g4507
sS'block_loop.thisRepN'
p6063
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6064
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p6065
Nsg69
Vn
sS'block_loop.thisTrialN'
p6066
I0
sg39
F1.2002050993723969
sg34
g752
(S"\x07\xdf\n\x10\x0f\x1d'\x07^\xb8"
tRp6067
sa(dp6068
S'trial_loop.thisTrialN'
p6069
I178
sg3632
g3704
sS'block_loop.thisIndex'
p6070
g3626
sg38
S'right'
p6071
sg58
g62
sS'trial_loop.thisN'
p6072
I178
sg33
g3715
sg63
g64
sS'trial_loop.thisIndex'
p6073
g59
(g98
S'\xb2\x00\x00\x00'
tRp6074
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6075
I0
sg3641
g3712
sS'block_loop.thisRepN'
p6076
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6077
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6078
Nsg69
Vn
sS'block_loop.thisTrialN'
p6079
I0
sg39
F0.8167992751696147
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d-\n\xcd\xa0'
tRp6080
sa(dp6081
S'trial_loop.thisTrialN'
p6082
I179
sg3632
g3633
sS'block_loop.thisIndex'
p6083
g3626
sg38
S'left'
p6084
sg58
g62
sS'trial_loop.thisN'
p6085
I179
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6086
g59
(g98
S'\xb3\x00\x00\x00'
tRp6087
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6088
I0
sg3641
g3642
sS'block_loop.thisRepN'
p6089
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6090
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6091
Nsg69
Vn
sS'block_loop.thisTrialN'
p6092
I0
sg39
F0.98345634353972855
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d3\x08\x83\xb0'
tRp6093
sa(dp6094
S'trial_loop.thisTrialN'
p6095
I180
sg3632
g4405
sS'block_loop.thisIndex'
p6096
g3626
sg38
S'right'
p6097
sg58
g62
sS'trial_loop.thisN'
p6098
I180
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6099
g59
(g98
S'\xb4\x00\x00\x00'
tRp6100
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6101
I0
sg3641
g4412
sS'block_loop.thisRepN'
p6102
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6103
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6104
Nsg69
Vn
sS'block_loop.thisTrialN'
p6105
I0
sg39
F1.3835991205305618
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1d9\x08\xd5\xb8'
tRp6106
sa(dp6107
S'trial_loop.thisTrialN'
p6108
I181
sg3632
g3785
sS'block_loop.thisIndex'
p6109
g3626
sg38
S'left'
p6110
sg58
g62
sS'trial_loop.thisN'
p6111
I181
sg33
g3789
sg63
g64
sS'trial_loop.thisIndex'
p6112
g59
(g98
S'\xb5\x00\x00\x00'
tRp6113
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6114
I0
sg3641
g3793
sS'block_loop.thisRepN'
p6115
I1
sg3644
g3789
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6116
I1
sg3646
g3796
sg55
g11
sS'block_loop.thisTrial'
p6117
Nsg69
Vn
sS'block_loop.thisTrialN'
p6118
I0
sg39
F0.66687288742468809
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e\x03\x0f\x1f\x18'
tRp6119
sa(dp6120
S'trial_loop.thisTrialN'
p6121
I182
sg3632
g3894
sS'block_loop.thisIndex'
p6122
g3626
sg38
S'right'
p6123
sg58
g62
sS'trial_loop.thisN'
p6124
I182
sg33
g3657
sg63
g64
sS'trial_loop.thisIndex'
p6125
g59
(g98
S'\xb6\x00\x00\x00'
tRp6126
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6127
I0
sg3641
g3901
sS'block_loop.thisRepN'
p6128
I1
sg3644
g3657
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6129
I1
sg3646
g3664
sg55
g11
sS'block_loop.thisTrial'
p6130
Nsg69
Vn
sS'block_loop.thisTrialN'
p6131
I0
sg39
F1.1833184702300059
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e\t\n\xb2H'
tRp6132
sa(dp6133
S'trial_loop.thisTrialN'
p6134
I183
sg3632
g4308
sS'block_loop.thisIndex'
p6135
g3626
sg38
S'left'
p6136
sg58
g62
sS'trial_loop.thisN'
p6137
I183
sg33
g4312
sg63
g64
sS'trial_loop.thisIndex'
p6138
g59
(g98
S'\xb7\x00\x00\x00'
tRp6139
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6140
I0
sg3641
g4316
sS'block_loop.thisRepN'
p6141
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6142
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p6143
Nsg69
Vn
sS'block_loop.thisTrialN'
p6144
I0
sg39
F0.76672098730705329
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e\x0f\r\xde\xc8'
tRp6145
sa(dp6146
S'trial_loop.thisTrialN'
p6147
I184
sg3632
g3939
sS'block_loop.thisIndex'
p6148
g3626
sg38
S'right'
p6149
sg58
g62
sS'trial_loop.thisN'
p6150
I184
sg33
g3950
sg63
g64
sS'trial_loop.thisIndex'
p6151
g59
(g98
S'\xb8\x00\x00\x00'
tRp6152
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6153
I0
sg3641
g3947
sS'block_loop.thisRepN'
p6154
I1
sg3644
g3943
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6155
I1
sg3646
g3950
sg55
g11
sS'block_loop.thisTrial'
p6156
Nsg69
Vn
sS'block_loop.thisTrialN'
p6157
I0
sg39
F0.63345258024855866
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e\x15\n\xe1('
tRp6158
sa(dp6159
S'trial_loop.thisTrialN'
p6160
I185
sg3632
g3815
sS'block_loop.thisIndex'
p6161
g3626
sg38
S'right'
p6162
sg58
g62
sS'trial_loop.thisN'
p6163
I185
sg33
g3825
sg63
g64
sS'trial_loop.thisIndex'
p6164
g59
(g98
S'\xb9\x00\x00\x00'
tRp6165
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6166
I0
sg3641
g3823
sS'block_loop.thisRepN'
p6167
I1
sg3644
g3825
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6168
I1
sg3646
g3819
sg55
g11
sS'block_loop.thisTrial'
p6169
Nsg69
Vn
sS'block_loop.thisTrialN'
p6170
I0
sg39
F1.0001123285437643
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e\x1b\x05\xb8\xd8'
tRp6171
sa(dp6172
S'trial_loop.thisTrialN'
p6173
I186
sg3632
g4433
sS'block_loop.thisIndex'
p6174
g3626
sg38
S'right'
p6175
sg58
g62
sS'trial_loop.thisN'
p6176
I186
sg33
g4031
sg63
g64
sS'trial_loop.thisIndex'
p6177
g59
(g98
S'\xba\x00\x00\x00'
tRp6178
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6179
I0
sg3641
g4440
sS'block_loop.thisRepN'
p6180
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6181
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p6182
Nsg69
Vn
sS'block_loop.thisTrialN'
p6183
I0
sg39
F0.98389710477204062
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e!\x06MH'
tRp6184
sa(dp6185
S'trial_loop.thisTrialN'
p6186
I187
sg3632
g3973
sS'block_loop.thisIndex'
p6187
g3626
sg38
S'left'
p6188
sg58
g62
sS'trial_loop.thisN'
p6189
I187
sg33
g3984
sg63
g64
sS'trial_loop.thisIndex'
p6190
g59
(g98
S'\xbb\x00\x00\x00'
tRp6191
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6192
I0
sg3641
g3981
sS'block_loop.thisRepN'
p6193
I1
sg3644
g3977
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6194
I1
sg3646
g3984
sg55
g11
sS'block_loop.thisTrial'
p6195
Nsg69
Vn
sS'block_loop.thisTrialN'
p6196
I0
sg39
F0.65009088918668567
sg34
g752
(S"\x07\xdf\n\x10\x0f\x1e'\x06\x9fP"
tRp6197
sa(dp6198
S'trial_loop.thisTrialN'
p6199
I188
sg3632
g4377
sS'block_loop.thisIndex'
p6200
g3626
sg38
S'right'
p6201
sg58
g62
sS'trial_loop.thisN'
p6202
I188
sg33
g4062
sg63
g64
sS'trial_loop.thisIndex'
p6203
g59
(g98
S'\xbc\x00\x00\x00'
tRp6204
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6205
I0
sg3641
g4384
sS'block_loop.thisRepN'
p6206
I1
sg3644
g4062
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6207
I1
sg3646
g4056
sg55
g11
sS'block_loop.thisTrial'
p6208
Nsg69
Vn
sS'block_loop.thisTrialN'
p6209
I0
sg39
F0.93351718341364176
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e-\x01\xb9h'
tRp6210
sa(dp6211
S'trial_loop.thisTrialN'
p6212
I189
sg3632
g4308
sS'block_loop.thisIndex'
p6213
g3626
sg38
S'left'
p6214
sg58
g62
sS'trial_loop.thisN'
p6215
I189
sg33
g4312
sg63
g64
sS'trial_loop.thisIndex'
p6216
g59
(g98
S'\xbd\x00\x00\x00'
tRp6217
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6218
I0
sg3641
g4316
sS'block_loop.thisRepN'
p6219
I1
sg3644
g4312
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6220
I1
sg3646
g4319
sg55
g11
sS'block_loop.thisTrial'
p6221
Nsg69
Vn
sS'block_loop.thisTrialN'
p6222
I0
sg39
F0.71679465658235131
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e3\x01S\xd8'
tRp6223
sa(dp6224
S'trial_loop.thisTrialN'
p6225
I190
sg3632
g4818
sS'block_loop.thisIndex'
p6226
g3626
sg38
S'right'
p6227
sg58
g62
sS'trial_loop.thisN'
p6228
I190
sg33
g3637
sg63
g64
sS'trial_loop.thisIndex'
p6229
g59
(g98
S'\xbe\x00\x00\x00'
tRp6230
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6231
I0
sg3641
g4825
sS'block_loop.thisRepN'
p6232
I1
sg3644
g3637
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6233
I1
sg3646
g3647
sg55
g11
sS'block_loop.thisTrial'
p6234
Nsg69
Vn
sS'block_loop.thisTrialN'
p6235
I0
sg39
F0.85019449373430689
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1e8\x0c\xa2`'
tRp6236
sa(dp6237
S'trial_loop.thisTrialN'
p6238
I191
sg3632
g3879
sS'block_loop.thisIndex'
p6239
g3626
sg38
S'right'
p6240
sg58
g62
sS'trial_loop.thisN'
p6241
I191
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6242
g59
(g98
S'\xbf\x00\x00\x00'
tRp6243
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6244
I0
sg3641
g3886
sS'block_loop.thisRepN'
p6245
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6246
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6247
Nsg69
Vn
sS'block_loop.thisTrialN'
p6248
I0
sg39
F0.58352681972246501
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f\x02\n\xd5p'
tRp6249
sa(dp6250
S'trial_loop.thisTrialN'
p6251
I192
sg3632
g3847
sS'block_loop.thisIndex'
p6252
g3626
sg38
S'right'
p6253
sg58
g62
sS'trial_loop.thisN'
p6254
I192
sg33
g3759
sg63
g64
sS'trial_loop.thisIndex'
p6255
g59
(g98
S'\xc0\x00\x00\x00'
tRp6256
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6257
I0
sg3641
g3854
sS'block_loop.thisRepN'
p6258
I1
sg3644
g3759
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6259
I1
sg3646
g3766
sg55
g11
sS'block_loop.thisTrial'
p6260
Nsg69
Vn
sS'block_loop.thisTrialN'
p6261
I0
sg39
F0.80055440122669097
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f\x08\x04\xf9p'
tRp6262
sa(dp6263
S'trial_loop.thisTrialN'
p6264
I193
sg3632
g5535
sS'block_loop.thisIndex'
p6265
g3626
sg38
S'left'
p6266
sg58
g62
sS'trial_loop.thisN'
p6267
I193
sg33
g4194
sg63
g64
sS'trial_loop.thisIndex'
p6268
g59
(g98
S'\xc1\x00\x00\x00'
tRp6269
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6270
I0
sg3641
g5542
sS'block_loop.thisRepN'
p6271
I1
sg3644
g4187
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6272
I1
sg3646
g4194
sg55
g11
sS'block_loop.thisTrial'
p6273
Nsg69
Vn
sS'block_loop.thisTrialN'
p6274
I0
sg39
F1.1499771351518575
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f\x0e\x02q\x00'
tRp6275
sa(dp6276
S'trial_loop.thisTrialN'
p6277
I194
sg3632
g3879
sS'block_loop.thisIndex'
p6278
g3626
sg38
S'left'
p6279
sg58
g62
sS'trial_loop.thisN'
p6280
I194
sg33
g3708
sg63
g64
sS'trial_loop.thisIndex'
p6281
g59
(g98
S'\xc2\x00\x00\x00'
tRp6282
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6283
I0
sg3641
g3886
sS'block_loop.thisRepN'
p6284
I1
sg3644
g3708
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6285
I1
sg3646
g3715
sg55
g11
sS'block_loop.thisTrial'
p6286
Nsg69
Vn
sS'block_loop.thisTrialN'
p6287
I0
sg39
F1.1667534314401564
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f\x14\x05b\xe8'
tRp6288
sa(dp6289
S'trial_loop.thisTrialN'
p6290
I195
sg3632
g3832
sS'block_loop.thisIndex'
p6291
g3626
sg38
S'right'
p6292
sg58
g62
sS'trial_loop.thisN'
p6293
I195
sg33
g3748
sg63
g64
sS'trial_loop.thisIndex'
p6294
g59
(g98
S'\xc3\x00\x00\x00'
tRp6295
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6296
I0
sg3641
g3839
sS'block_loop.thisRepN'
p6297
I1
sg3644
g3748
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6298
I1
sg3646
g3742
sg55
g11
sS'block_loop.thisTrial'
p6299
Nsg69
Vn
sS'block_loop.thisTrialN'
p6300
I0
sg39
F1.0834327374395798
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f\x1a\x08T\xd0'
tRp6301
sa(dp6302
S'trial_loop.thisTrialN'
p6303
I196
sg3632
g4405
sS'block_loop.thisIndex'
p6304
g3626
sg38
S'right'
p6305
sg58
g62
sS'trial_loop.thisN'
p6306
I196
sg33
g3725
sg63
g64
sS'trial_loop.thisIndex'
p6307
g59
(g98
S'\xc4\x00\x00\x00'
tRp6308
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6309
I0
sg3641
g4412
sS'block_loop.thisRepN'
p6310
I1
sg3644
g3725
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6311
I1
sg3646
g3732
sg55
g11
sS'block_loop.thisTrial'
p6312
Nsg69
Vn
sS'block_loop.thisTrialN'
p6313
I0
sg39
F0.89983458624192281
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f \n\x19\xf0'
tRp6314
sa(dp6315
S'trial_loop.thisTrialN'
p6316
I197
sg3632
g4660
sS'block_loop.thisIndex'
p6317
g3626
sg38
S'left'
p6318
sg58
g62
sS'trial_loop.thisN'
p6319
I197
sg33
g3913
sg63
g64
sS'trial_loop.thisIndex'
p6320
g59
(g98
S'\xc5\x00\x00\x00'
tRp6321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6322
I0
sg3641
g4667
sS'block_loop.thisRepN'
p6323
I1
sg3644
g3913
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6324
I1
sg3646
g3920
sg55
g11
sS'block_loop.thisTrial'
p6325
Nsg69
Vn
sS'block_loop.thisTrialN'
p6326
I0
sg39
F1.1168721461726818
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f&\t\x00\xb0'
tRp6327
sa(dp6328
S'trial_loop.thisTrialN'
p6329
I198
sg3632
g4433
sS'block_loop.thisIndex'
p6330
g3626
sg38
S'right'
p6331
sg58
g62
sS'trial_loop.thisN'
p6332
I198
sg33
g4024
sg63
g64
sS'trial_loop.thisIndex'
p6333
g59
(g98
S'\xc6\x00\x00\x00'
tRp6334
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6335
I0
sg3641
g4440
sS'block_loop.thisRepN'
p6336
I1
sg3644
g4024
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6337
I1
sg3646
g4031
sg55
g11
sS'block_loop.thisTrial'
p6338
Nsg69
Vn
sS'block_loop.thisTrialN'
p6339
I0
sg39
F1.1167581070403685
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f,\x0by\x80'
tRp6340
sa(dp6341
S'trial_loop.thisTrialN'
p6342
I199
sg3632
g4037
sS'block_loop.thisIndex'
p6343
g3626
sg38
S'left'
p6344
sg58
g62
sS'trial_loop.thisN'
p6345
I199
sg33
g3691
sg63
g64
sS'trial_loop.thisIndex'
p6346
g59
(g98
S'\xc7\x00\x00\x00'
tRp6347
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6348
I0
sg3641
g4044
sS'block_loop.thisRepN'
p6349
I1
sg3644
g3691
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6350
I1
sg3646
g3698
sg55
g11
sS'block_loop.thisTrial'
p6351
Nsg69
Vn
sS'block_loop.thisTrialN'
p6352
I0
sg39
F1.3167442512858543
sg34
g752
(S'\x07\xdf\n\x10\x0f\x1f2\r\xb3\xd0'
tRp6353
sa(dp6354
S'block_loop.thisRepN'
p6355
I1
sg55
g11
sg41
F26.216631580628018
sg56
Vr
sS'block_loop.thisIndex'
p6356
g3626
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6357
I1
sg40
S'space'
p6358
sg63
g64
sS'block_loop.thisTrial'
p6359
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6360
I0
sg69
Vn
sa(dp6361
S'block_loop.thisRepN'
p6362
I2
sg56
Vr
sS'block_loop.thisIndex'
p6363
g59
(g98
S'\x00\x00\x00\x00'
tRp6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p6365
I2
sg37
Nsg55
g11
sg63
g64
sS'block_loop.thisTrial'
p6366
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p6367
I0
sg69
Vn
sa(dp6368
S'trial_loop.thisTrialN'
p6369
I0
sS'img_left'
p6370
S'17-jacobs_mini_cheddars_redo.png'
p6371
sS'block_loop.thisIndex'
p6372
g6364
sg38
S'left'
p6373
sg58
g62
sS'trial_loop.thisN'
p6374
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6375
sg63
g64
sS'trial_loop.thisIndex'
p6376
g59
(g98
S'\x00\x00\x00\x00'
tRp6377
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6378
I0
sS'img_right'
p6379
S'8-liquorice_catherine_wheels.png'
p6380
sS'block_loop.thisRepN'
p6381
I2
sS'img_correct'
p6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6383
I2
sS'img_wrong'
p6384
S'8-liquorice_catherine_wheels.png'
p6385
sg55
g11
sS'block_loop.thisTrial'
p6386
Nsg69
Vn
sS'block_loop.thisTrialN'
p6387
I0
sg39
F0.90018953303297167
sg34
g752
(S'\x07\xdf\n\x10\x0f \x1c\x07\x89\xb0'
tRp6388
sa(dp6389
S'trial_loop.thisTrialN'
p6390
I1
sg6370
S'16-skips_prawn.png'
p6391
sS'block_loop.thisIndex'
p6392
g6364
sg38
S'left'
p6393
sg58
g62
sS'trial_loop.thisN'
p6394
I1
sg33
S'16-skips_prawn.png'
p6395
sg63
g64
sS'trial_loop.thisIndex'
p6396
g59
(g98
S'\x01\x00\x00\x00'
tRp6397
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6398
I0
sg6379
S'42-mrkipling_lemon_slices.png'
p6399
sS'block_loop.thisRepN'
p6400
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6401
I2
sg6384
S'42-mrkipling_lemon_slices.png'
p6402
sg55
g11
sS'block_loop.thisTrial'
p6403
Nsg69
Vn
sS'block_loop.thisTrialN'
p6404
I0
sg39
F0.91666048954721191
sg34
g752
(S'\x07\xdf\n\x10\x0f "\x06pp'
tRp6405
sa(dp6406
S'trial_loop.thisTrialN'
p6407
I2
sg6370
S'3-ellas_strawberries_apples.png'
p6408
sS'block_loop.thisIndex'
p6409
g6364
sg38
S'left'
p6410
sg58
g62
sS'trial_loop.thisN'
p6411
I2
sg33
S'13-mccoys_steak_crisps.png'
p6412
sg63
g64
sS'trial_loop.thisIndex'
p6413
g59
(g98
S'\x02\x00\x00\x00'
tRp6414
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6415
I0
sg6379
S'13-mccoys_steak_crisps.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6382
S'3-ellas_strawberries_apples.png'
p6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6419
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6420
Nsg69
Vn
sS'block_loop.thisTrialN'
p6421
I0
sg39
F0.80020772227362613
sg34
g752
(S'\x07\xdf\n\x10\x0f (\x05\xd0H'
tRp6422
sa(dp6423
S'trial_loop.thisTrialN'
p6424
I3
sg6370
S'49-yorkie.png'
p6425
sS'block_loop.thisIndex'
p6426
g6364
sg38
S'right'
p6427
sg58
g62
sS'trial_loop.thisN'
p6428
I3
sg33
S'35-raisins.png'
p6429
sg63
g64
sS'trial_loop.thisIndex'
p6430
g59
(g98
S'\x03\x00\x00\x00'
tRp6431
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6432
I0
sg6379
S'35-raisins.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6435
I2
sg6384
S'49-yorkie.png'
p6436
sg55
g11
sS'block_loop.thisTrial'
p6437
Nsg69
Vn
sS'block_loop.thisTrialN'
p6438
I0
sg39
F0.83348833151467261
sg34
g752
(S'\x07\xdf\n\x10\x0f .\x03K\xc0'
tRp6439
sa(dp6440
S'trial_loop.thisTrialN'
p6441
I4
sg6370
S'51-mars.png'
p6442
sS'block_loop.thisIndex'
p6443
g6364
sg38
S'right'
p6444
sg58
g62
sS'trial_loop.thisN'
p6445
I4
sg33
S'27-hartleys_raspberries_jelly.png'
p6446
sg63
g64
sS'trial_loop.thisIndex'
p6447
g59
(g98
S'\x04\x00\x00\x00'
tRp6448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6449
I0
sg6379
S'27-hartleys_raspberries_jelly.png'
p6450
sS'block_loop.thisRepN'
p6451
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6452
I2
sg6384
S'51-mars.png'
p6453
sg55
g11
sS'block_loop.thisTrial'
p6454
Nsg69
Vn
sS'block_loop.thisTrialN'
p6455
I0
sg39
F0.85017425178739359
sg34
g752
(S'\x07\xdf\n\x10\x0f 4\x01<h'
tRp6456
sa(dp6457
S'trial_loop.thisTrialN'
p6458
I5
sg6370
S'25-kitkat.png'
p6459
sS'block_loop.thisIndex'
p6460
g6364
sg38
S'right'
p6461
sg58
g62
sS'trial_loop.thisN'
p6462
I5
sg33
S'31-hobnobs.png'
p6463
sg63
g64
sS'trial_loop.thisIndex'
p6464
g59
(g98
S'\x05\x00\x00\x00'
tRp6465
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6466
I0
sg6379
S'31-hobnobs.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6469
I2
sg6384
S'25-kitkat.png'
p6470
sg55
g11
sS'block_loop.thisTrial'
p6471
Nsg69
Vn
sS'block_loop.thisTrialN'
p6472
I0
sg39
F0.85019249805191066
sg34
g752
(S'\x07\xdf\n\x10\x0f 9\x0e\xb1\xb8'
tRp6473
sa(dp6474
S'trial_loop.thisTrialN'
p6475
I6
sg6370
S'30-spaghetti_hoops.png'
p6476
sS'block_loop.thisIndex'
p6477
g6364
sg38
S'left'
p6478
sg58
g62
sS'trial_loop.thisN'
p6479
I6
sg33
S'19-caramello_redo.png'
p6480
sg63
g64
sS'trial_loop.thisIndex'
p6481
g59
(g98
S'\x06\x00\x00\x00'
tRp6482
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6483
I0
sg6379
S'19-caramello_redo.png'
p6484
sS'block_loop.thisRepN'
p6485
I2
sg6382
S'30-spaghetti_hoops.png'
p6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6487
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6488
Nsg69
Vn
sS'block_loop.thisTrialN'
p6489
I0
sg39
F0.80021484971803147
sg34
g752
(S'\x07\xdf\n\x10\x0f!\x03\x0c\xe0\xe0'
tRp6490
sa(dp6491
S'trial_loop.thisTrialN'
p6492
I7
sg6370
S'38-maltesers.png'
p6493
sS'block_loop.thisIndex'
p6494
g6364
sg38
S'left'
p6495
sg58
g62
sS'trial_loop.thisN'
p6496
I7
sg33
S'6-sour_patch_kids.png'
p6497
sg63
g64
sS'trial_loop.thisIndex'
p6498
g59
(g98
S'\x07\x00\x00\x00'
tRp6499
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6500
I0
sg6379
S'6-sour_patch_kids.png'
p6501
sS'block_loop.thisRepN'
p6502
I2
sg6382
S'38-maltesers.png'
p6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6504
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p6505
Nsg69
Vn
sS'block_loop.thisTrialN'
p6506
I0
sg39
F1.1665986233201693
sg34
g752
(S'\x07\xdf\n\x10\x0f!\t\nXp'
tRp6507
sa(dp6508
S'trial_loop.thisTrialN'
p6509
I8
sg6370
S'41-peanuts_redo.png'
p6510
sS'block_loop.thisIndex'
p6511
g6364
sg38
S'left'
p6512
sg58
g62
sS'trial_loop.thisN'
p6513
I8
sg33
S'41-peanuts_redo.png'
p6514
sg63
g64
sS'trial_loop.thisIndex'
p6515
g59
(g98
S'\x08\x00\x00\x00'
tRp6516
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6517
I0
sg6379
S'45-chewy_nougat_redo.png'
p6518
sS'block_loop.thisRepN'
p6519
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6520
I2
sg6384
S'45-chewy_nougat_redo.png'
p6521
sg55
g11
sS'block_loop.thisTrial'
p6522
Nsg69
Vn
sS'block_loop.thisTrialN'
p6523
I0
sg39
F0.68348838853489724
sg34
g752
(S'\x07\xdf\n\x10\x0f!\x0f\rJX'
tRp6524
sa(dp6525
S'trial_loop.thisTrialN'
p6526
I9
sg6370
S'34-hula_hoops_bbq_beef_redo.png'
p6527
sS'block_loop.thisIndex'
p6528
g6364
sg38
S'left'
p6529
sg58
g62
sS'trial_loop.thisN'
p6530
I9
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6531
sg63
g64
sS'trial_loop.thisIndex'
p6532
g59
(g98
S'\t\x00\x00\x00'
tRp6533
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6534
I0
sg6379
S'36-fig_rolls.png'
p6535
sS'block_loop.thisRepN'
p6536
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6537
I2
sg6384
S'36-fig_rolls.png'
p6538
sg55
g11
sS'block_loop.thisTrial'
p6539
Nsg69
Vn
sS'block_loop.thisTrialN'
p6540
I0
sg39
F1.0834284609736642
sg34
g752
(S'\x07\xdf\n\x10\x0f!\x15\t\x1c\x08'
tRp6541
sa(dp6542
S'trial_loop.thisTrialN'
p6543
I10
sg6370
S'35-raisins.png'
p6544
sS'block_loop.thisIndex'
p6545
g6364
sg38
S'left'
p6546
sg58
g62
sS'trial_loop.thisN'
p6547
I10
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p6548
g59
(g98
S'\n\x00\x00\x00'
tRp6549
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6550
I0
sg6379
S'49-yorkie.png'
p6551
sS'block_loop.thisRepN'
p6552
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6553
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p6554
Nsg69
Vn
sS'block_loop.thisTrialN'
p6555
I0
sg39
F0.73343866747745778
sg34
g752
(S'\x07\xdf\n\x10\x0f!\x1b\n\xdd@'
tRp6556
sa(dp6557
S'trial_loop.thisTrialN'
p6558
I11
sg6370
S'43-mrporky_pork_crackles_redo.png'
p6559
sS'block_loop.thisIndex'
p6560
g6364
sg38
S'left'
p6561
sg58
g62
sS'trial_loop.thisN'
p6562
I11
sg33
S'43-mrporky_pork_crackles_redo.png'
p6563
sg63
g64
sS'trial_loop.thisIndex'
p6564
g59
(g98
S'\x0b\x00\x00\x00'
tRp6565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6566
I0
sg6379
S'18-mms.png'
p6567
sS'block_loop.thisRepN'
p6568
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6569
I2
sg6384
S'18-mms.png'
p6570
sg55
g11
sS'block_loop.thisTrial'
p6571
Nsg69
Vn
sS'block_loop.thisTrialN'
p6572
I0
sg39
F0.91691166072996566
sg34
g752
(S'\x07\xdf\n\x10\x0f!!\x07b\xa0'
tRp6573
sa(dp6574
S'trial_loop.thisTrialN'
p6575
I12
sg6370
g6391
sS'block_loop.thisIndex'
p6576
g6364
sg38
S'left'
p6577
sg58
g62
sS'trial_loop.thisN'
p6578
I12
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6579
g59
(g98
S'\x0c\x00\x00\x00'
tRp6580
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6581
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6582
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6583
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6584
Nsg69
Vn
sS'block_loop.thisTrialN'
p6585
I0
sg39
F0.93336408588220365
sg34
g752
(S"\x07\xdf\n\x10\x0f!'\x06\x83\xf8"
tRp6586
sa(dp6587
S'trial_loop.thisTrialN'
p6588
I13
sg6370
S'19-caramello_redo.png'
p6589
sS'block_loop.thisIndex'
p6590
g6364
sg38
S'right'
p6591
sg58
g62
sS'trial_loop.thisN'
p6592
I13
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p6593
g59
(g98
S'\r\x00\x00\x00'
tRp6594
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6595
I0
sg6379
S'30-spaghetti_hoops.png'
p6596
sS'block_loop.thisRepN'
p6597
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6598
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6599
Nsg69
Vn
sS'block_loop.thisTrialN'
p6600
I0
sg39
F1.1668503646978934
sg34
g752
(S'\x07\xdf\n\x10\x0f!-\x06"P'
tRp6601
sa(dp6602
S'trial_loop.thisTrialN'
p6603
I14
sg6370
S'5-pineapple.png'
p6604
sS'block_loop.thisIndex'
p6605
g6364
sg38
S'right'
p6606
sg58
g62
sS'trial_loop.thisN'
p6607
I14
sg33
S'40-sardines.png'
p6608
sg63
g64
sS'trial_loop.thisIndex'
p6609
g59
(g98
S'\x0e\x00\x00\x00'
tRp6610
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6611
I0
sg6379
S'40-sardines.png'
p6612
sS'block_loop.thisRepN'
p6613
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6614
I2
sg6384
S'5-pineapple.png'
p6615
sg55
g11
sS'block_loop.thisTrial'
p6616
Nsg69
Vn
sS'block_loop.thisTrialN'
p6617
I0
sg39
F1.4334593085586675
sg34
g752
(S'\x07\xdf\n\x10\x0f!3\t\x148'
tRp6618
sa(dp6619
S'trial_loop.thisTrialN'
p6620
I15
sg6370
g6589
sS'block_loop.thisIndex'
p6621
g6364
sg38
S'right'
p6622
sg58
g62
sS'trial_loop.thisN'
p6623
I15
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p6624
g59
(g98
S'\x0f\x00\x00\x00'
tRp6625
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6626
I0
sg6379
g6596
sS'block_loop.thisRepN'
p6627
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6628
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6629
Nsg69
Vn
sS'block_loop.thisTrialN'
p6630
I0
sg39
F1.2667503523807682
sg34
g752
(S'\x07\xdf\n\x10\x0f!:\x01\r\x88'
tRp6631
sa(dp6632
S'trial_loop.thisTrialN'
p6633
I16
sg6370
g6408
sS'block_loop.thisIndex'
p6634
g6364
sg38
S'left'
p6635
sg58
g62
sS'trial_loop.thisN'
p6636
I16
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6637
g59
(g98
S'\x10\x00\x00\x00'
tRp6638
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6639
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6640
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6641
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6642
Nsg69
Vn
sS'block_loop.thisTrialN'
p6643
I0
sg39
F1.0172760727655259
sg34
g752
(S'\x07\xdf\n\x10\x0f"\x04\x05n\xa0'
tRp6644
sa(dp6645
S'trial_loop.thisTrialN'
p6646
I17
sg6370
S'48-twix.png'
p6647
sS'block_loop.thisIndex'
p6648
g6364
sg38
S'left'
p6649
sg58
g62
sS'trial_loop.thisN'
p6650
I17
sg33
S'48-twix.png'
p6651
sg63
g64
sS'trial_loop.thisIndex'
p6652
g59
(g98
S'\x11\x00\x00\x00'
tRp6653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6654
I0
sg6379
S'50-polo.png'
p6655
sS'block_loop.thisRepN'
p6656
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6657
I2
sg6384
S'50-polo.png'
p6658
sg55
g11
sS'block_loop.thisTrial'
p6659
Nsg69
Vn
sS'block_loop.thisTrialN'
p6660
I0
sg39
F1.0668548692447075
sg34
g752
(S'\x07\xdf\n\x10\x0f"\n\x06=\xa8'
tRp6661
sa(dp6662
S'trial_loop.thisTrialN'
p6663
I18
sg6370
g6442
sS'block_loop.thisIndex'
p6664
g6364
sg38
S'right'
p6665
sg58
g62
sS'trial_loop.thisN'
p6666
I18
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6667
g59
(g98
S'\x12\x00\x00\x00'
tRp6668
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6669
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6670
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6671
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6672
Nsg69
Vn
sS'block_loop.thisTrialN'
p6673
I0
sg39
F0.96685395692838938
sg34
g752
(S'\x07\xdf\n\x10\x0f"\x10\x07\xc4H'
tRp6674
sa(dp6675
S'trial_loop.thisTrialN'
p6676
I19
sg6370
S'50-polo.png'
p6677
sS'block_loop.thisIndex'
p6678
g6364
sg38
S'right'
p6679
sg58
g62
sS'trial_loop.thisN'
p6680
I19
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p6681
g59
(g98
S'\x13\x00\x00\x00'
tRp6682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6683
I0
sg6379
S'48-twix.png'
p6684
sS'block_loop.thisRepN'
p6685
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6686
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p6687
Nsg69
Vn
sS'block_loop.thisTrialN'
p6688
I0
sg39
F1.0001268685300602
sg34
g752
(S'\x07\xdf\n\x10\x0f"\x16\x07\xdb\xb8'
tRp6689
sa(dp6690
S'trial_loop.thisTrialN'
p6691
I20
sg6370
g6510
sS'block_loop.thisIndex'
p6692
g6364
sg38
S'left'
p6693
sg58
g62
sS'trial_loop.thisN'
p6694
I20
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p6695
g59
(g98
S'\x14\x00\x00\x00'
tRp6696
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6697
I0
sg6379
g6518
sS'block_loop.thisRepN'
p6698
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6699
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p6700
Nsg69
Vn
sS'block_loop.thisTrialN'
p6701
I0
sg39
F0.76686211072592414
sg34
g752
(S'\x07\xdf\n\x10\x0f"\x1c\x08l@'
tRp6702
sa(dp6703
S'trial_loop.thisTrialN'
p6704
I21
sg6370
S'13-mccoys_steak_crisps.png'
p6705
sS'block_loop.thisIndex'
p6706
g6364
sg38
S'right'
p6707
sg58
g62
sS'trial_loop.thisN'
p6708
I21
sg33
g6412
sg63
g64
sS'trial_loop.thisIndex'
p6709
g59
(g98
S'\x15\x00\x00\x00'
tRp6710
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6711
I0
sg6379
S'3-ellas_strawberries_apples.png'
p6712
sS'block_loop.thisRepN'
p6713
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6714
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6715
Nsg69
Vn
sS'block_loop.thisTrialN'
p6716
I0
sg39
F1.0000846740549605
sg34
g752
(S'\x07\xdf\n\x10\x0f""\x05,8'
tRp6717
sa(dp6718
S'trial_loop.thisTrialN'
p6719
I22
sg6370
S'1-treacle_cookies.png'
p6720
sS'block_loop.thisIndex'
p6721
g6364
sg38
S'left'
p6722
sg58
g62
sS'trial_loop.thisN'
p6723
I22
sg33
S'1-treacle_cookies.png'
p6724
sg63
g64
sS'trial_loop.thisIndex'
p6725
g59
(g98
S'\x16\x00\x00\x00'
tRp6726
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6727
I0
sg6379
S'21-nakd_banana_crunch.png'
p6728
sS'block_loop.thisRepN'
p6729
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6730
I2
sg6384
S'21-nakd_banana_crunch.png'
p6731
sg55
g11
sS'block_loop.thisTrial'
p6732
Nsg69
Vn
sS'block_loop.thisTrialN'
p6733
I0
sg39
F0.73342640826740535
sg34
g752
(S'\x07\xdf\n\x10\x0f"(\x05\xc0\xa8'
tRp6734
sa(dp6735
S'trial_loop.thisTrialN'
p6736
I23
sg6370
S'20-fruit_pastilles.png'
p6737
sS'block_loop.thisIndex'
p6738
g6364
sg38
S'right'
p6739
sg58
g62
sS'trial_loop.thisN'
p6740
I23
sg33
S'2-steamed_puddings.png'
p6741
sg63
g64
sS'trial_loop.thisIndex'
p6742
g59
(g98
S'\x17\x00\x00\x00'
tRp6743
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6744
I0
sg6379
S'2-steamed_puddings.png'
p6745
sS'block_loop.thisRepN'
p6746
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6747
I2
sg6384
S'20-fruit_pastilles.png'
p6748
sg55
g11
sS'block_loop.thisTrial'
p6749
Nsg69
Vn
sS'block_loop.thisTrialN'
p6750
I0
sg39
F0.65022260438126978
sg34
g752
(S'\x07\xdf\n\x10\x0f".\x02F\x08'
tRp6751
sa(dp6752
S'trial_loop.thisTrialN'
p6753
I24
sg6370
S'10-bounty_redo.png'
p6754
sS'block_loop.thisIndex'
p6755
g6364
sg38
S'right'
p6756
sg58
g62
sS'trial_loop.thisN'
p6757
I24
sg33
S'4-corn.png'
p6758
sg63
g64
sS'trial_loop.thisIndex'
p6759
g59
(g98
S'\x18\x00\x00\x00'
tRp6760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6761
I0
sg6379
S'4-corn.png'
p6762
sS'block_loop.thisRepN'
p6763
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6764
I2
sg6384
S'10-bounty_redo.png'
p6765
sg55
g11
sS'block_loop.thisTrial'
p6766
Nsg69
Vn
sS'block_loop.thisTrialN'
p6767
I0
sg39
F0.98350481017041602
sg34
g752
(S'\x07\xdf\n\x10\x0f"3\x0c\x9ex'
tRp6768
sa(dp6769
S'trial_loop.thisTrialN'
p6770
I25
sg6370
g6559
sS'block_loop.thisIndex'
p6771
g6364
sg38
S'left'
p6772
sg58
g62
sS'trial_loop.thisN'
p6773
I25
sg33
g6570
sg63
g64
sS'trial_loop.thisIndex'
p6774
g59
(g98
S'\x19\x00\x00\x00'
tRp6775
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6776
I0
sg6379
g6567
sS'block_loop.thisRepN'
p6777
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6778
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p6779
Nsg69
Vn
sS'block_loop.thisTrialN'
p6780
I0
sg39
F2.0168464303496876
sg34
g752
(S'\x07\xdf\n\x10\x0f"9\x0c\xf4h'
tRp6781
sa(dp6782
S'trial_loop.thisTrialN'
p6783
I26
sg6370
g6442
sS'block_loop.thisIndex'
p6784
g6364
sg38
S'right'
p6785
sg58
g62
sS'trial_loop.thisN'
p6786
I26
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p6787
g59
(g98
S'\x1a\x00\x00\x00'
tRp6788
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6789
I0
sg6379
g6450
sS'block_loop.thisRepN'
p6790
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6791
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6792
Nsg69
Vn
sS'block_loop.thisTrialN'
p6793
I0
sg39
F0.8502201525370765
sg34
g752
(S'\x07\xdf\n\x10\x0f#\x04\r\xbb\xa0'
tRp6794
sa(dp6795
S'trial_loop.thisTrialN'
p6796
I27
sg6370
S'33-ambrosia_rice.png'
p6797
sS'block_loop.thisIndex'
p6798
g6364
sg38
S'right'
p6799
sg58
g62
sS'trial_loop.thisN'
p6800
I27
sg33
S'23-crunchie_redo.png'
p6801
sg63
g64
sS'trial_loop.thisIndex'
p6802
g59
(g98
S'\x1b\x00\x00\x00'
tRp6803
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6804
I0
sg6379
S'23-crunchie_redo.png'
p6805
sS'block_loop.thisRepN'
p6806
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6807
I2
sg6384
S'33-ambrosia_rice.png'
p6808
sg55
g11
sS'block_loop.thisTrial'
p6809
Nsg69
Vn
sS'block_loop.thisTrialN'
p6810
I0
sg39
F1.0501045168639394
sg34
g752
(S'\x07\xdf\n\x10\x0f#\n\x0b\xea\xc8'
tRp6811
sa(dp6812
S'trial_loop.thisTrialN'
p6813
I28
sg6370
g6391
sS'block_loop.thisIndex'
p6814
g6364
sg38
S'left'
p6815
sg58
g62
sS'trial_loop.thisN'
p6816
I28
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p6817
g59
(g98
S'\x1c\x00\x00\x00'
tRp6818
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6819
I0
sg6379
g6399
sS'block_loop.thisRepN'
p6820
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6821
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p6822
Nsg69
Vn
sS'block_loop.thisTrialN'
p6823
I0
sg39
F0.83333266810586792
sg34
g752
(S'\x07\xdf\n\x10\x0f#\x10\r2\xe8'
tRp6824
sa(dp6825
S'trial_loop.thisTrialN'
p6826
I29
sg6370
S'2-steamed_puddings.png'
p6827
sS'block_loop.thisIndex'
p6828
g6364
sg38
S'left'
p6829
sg58
g62
sS'trial_loop.thisN'
p6830
I29
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p6831
g59
(g98
S'\x1d\x00\x00\x00'
tRp6832
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6833
I0
sg6379
S'20-fruit_pastilles.png'
p6834
sS'block_loop.thisRepN'
p6835
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6836
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p6837
Nsg69
Vn
sS'block_loop.thisTrialN'
p6838
I0
sg39
F0.73344465452828445
sg34
g752
(S"\x07\xdf\n\x10\x0f#\x16\x0b'x"
tRp6839
sa(dp6840
S'trial_loop.thisTrialN'
p6841
I30
sg6370
S'45-chewy_nougat_redo.png'
p6842
sS'block_loop.thisIndex'
p6843
g6364
sg38
S'right'
p6844
sg58
g62
sS'trial_loop.thisN'
p6845
I30
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p6846
g59
(g98
S'\x1e\x00\x00\x00'
tRp6847
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6848
I0
sg6379
S'41-peanuts_redo.png'
p6849
sS'block_loop.thisRepN'
p6850
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6851
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p6852
Nsg69
Vn
sS'block_loop.thisTrialN'
p6853
I0
sg39
F0.66662057585199364
sg34
g752
(S'\x07\xdf\n\x10\x0f#\x1c\x07nX'
tRp6854
sa(dp6855
S'trial_loop.thisTrialN'
p6856
I31
sg6370
g6754
sS'block_loop.thisIndex'
p6857
g6364
sg38
S'right'
p6858
sg58
g62
sS'trial_loop.thisN'
p6859
I31
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p6860
g59
(g98
S'\x1f\x00\x00\x00'
tRp6861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6862
I0
sg6379
g6762
sS'block_loop.thisRepN'
p6863
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6864
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p6865
Nsg69
Vn
sS'block_loop.thisTrialN'
p6866
I0
sg39
F0.65008347664479516
sg34
g752
(S'\x07\xdf\n\x10\x0f#"\x03\x01\x88'
tRp6867
sa(dp6868
S'trial_loop.thisTrialN'
p6869
I32
sg6370
g6408
sS'block_loop.thisIndex'
p6870
g6364
sg38
S'left'
p6871
sg58
g62
sS'trial_loop.thisN'
p6872
I32
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p6873
g59
(g98
S' \x00\x00\x00'
tRp6874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6875
I0
sg6379
g6416
sS'block_loop.thisRepN'
p6876
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6877
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p6878
Nsg69
Vn
sS'block_loop.thisTrialN'
p6879
I0
sg39
F0.68364946880683419
sg34
g752
(S"\x07\xdf\n\x10\x0f#'\r\x98x"
tRp6880
sa(dp6881
S'trial_loop.thisTrialN'
p6882
I33
sg6370
S'31-hobnobs.png'
p6883
sS'block_loop.thisIndex'
p6884
g6364
sg38
S'left'
p6885
sg58
g62
sS'trial_loop.thisN'
p6886
I33
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p6887
g59
(g98
S'!\x00\x00\x00'
tRp6888
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6889
I0
sg6379
S'25-kitkat.png'
p6890
sS'block_loop.thisRepN'
p6891
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6892
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p6893
Nsg69
Vn
sS'block_loop.thisTrialN'
p6894
I0
sg39
F0.91678279651387129
sg34
g752
(S"\x07\xdf\n\x10\x0f#-\t'\xc0"
tRp6895
sa(dp6896
S'trial_loop.thisTrialN'
p6897
I34
sg6370
S'29-beans.png'
p6898
sS'block_loop.thisIndex'
p6899
g6364
sg38
S'right'
p6900
sg58
g62
sS'trial_loop.thisN'
p6901
I34
sg33
S'46-pistachios.png'
p6902
sg63
g64
sS'trial_loop.thisIndex'
p6903
g59
(g98
S'"\x00\x00\x00'
tRp6904
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6905
I0
sg6379
S'46-pistachios.png'
p6906
sS'block_loop.thisRepN'
p6907
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6908
I2
sg6384
S'29-beans.png'
p6909
sg55
g11
sS'block_loop.thisTrial'
p6910
Nsg69
Vn
sS'block_loop.thisTrialN'
p6911
I0
sg39
F1.166770822404942
sg34
g752
(S'\x07\xdf\n\x10\x0f#3\x08M\x00'
tRp6912
sa(dp6913
S'trial_loop.thisTrialN'
p6914
I35
sg6370
S'27-hartleys_raspberries_jelly.png'
p6915
sS'block_loop.thisIndex'
p6916
g6364
sg38
S'left'
p6917
sg58
g62
sS'trial_loop.thisN'
p6918
I35
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p6919
g59
(g98
S'#\x00\x00\x00'
tRp6920
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6921
I0
sg6379
S'51-mars.png'
p6922
sS'block_loop.thisRepN'
p6923
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6924
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p6925
Nsg69
Vn
sS'block_loop.thisTrialN'
p6926
I0
sg39
F0.91682584628506447
sg34
g752
(S'\x07\xdf\n\x10\x0f#9\x0b>\xe8'
tRp6927
sa(dp6928
S'trial_loop.thisTrialN'
p6929
I36
sg6370
S'44-crunch.png'
p6930
sS'block_loop.thisIndex'
p6931
g6364
sg38
S'right'
p6932
sg58
g62
sS'trial_loop.thisN'
p6933
I36
sg33
S'44-crunch.png'
p6934
sg63
g64
sS'trial_loop.thisIndex'
p6935
g59
(g98
S'$\x00\x00\x00'
tRp6936
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6937
I0
sg6379
S'26-walkers_smoky_bacon.png'
p6938
sS'block_loop.thisRepN'
p6939
I2
sg6382
S'26-walkers_smoky_bacon.png'
p6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6941
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p6942
Nsg69
Vn
sS'block_loop.thisTrialN'
p6943
I0
sg39
F1.1001274957452551
sg34
g752
(S'\x07\xdf\n\x10\x0f$\x03\n\x9e\xc0'
tRp6944
sa(dp6945
S'trial_loop.thisTrialN'
p6946
I37
sg6370
S'36-fig_rolls.png'
p6947
sS'block_loop.thisIndex'
p6948
g6364
sg38
S'right'
p6949
sg58
g62
sS'trial_loop.thisN'
p6950
I37
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p6951
g59
(g98
S'%\x00\x00\x00'
tRp6952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6953
I0
sg6379
S'34-hula_hoops_bbq_beef_redo.png'
p6954
sS'block_loop.thisRepN'
p6955
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6956
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p6957
Nsg69
Vn
sS'block_loop.thisTrialN'
p6958
I0
sg39
F1.0505623839635518
sg34
g752
(S'\x07\xdf\n\x10\x0f$\t\x0c\x9ex'
tRp6959
sa(dp6960
S'trial_loop.thisTrialN'
p6961
I38
sg6370
g6930
sS'block_loop.thisIndex'
p6962
g6364
sg38
S'right'
p6963
sg58
g62
sS'trial_loop.thisN'
p6964
I38
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p6965
g59
(g98
S'&\x00\x00\x00'
tRp6966
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6967
I0
sg6379
g6938
sS'block_loop.thisRepN'
p6968
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6969
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p6970
Nsg69
Vn
sS'block_loop.thisTrialN'
p6971
I0
sg39
F0.86687015048664762
sg34
g752
(S'\x07\xdf\n\x10\x0f$\x0f\r\xe6\x98'
tRp6972
sa(dp6973
S'trial_loop.thisTrialN'
p6974
I39
sg6370
S'4-corn.png'
p6975
sS'block_loop.thisIndex'
p6976
g6364
sg38
S'left'
p6977
sg58
g62
sS'trial_loop.thisN'
p6978
I39
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p6979
g59
(g98
S"'\x00\x00\x00"
tRp6980
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6981
I0
sg6379
S'10-bounty_redo.png'
p6982
sS'block_loop.thisRepN'
p6983
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6984
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p6985
Nsg69
Vn
sS'block_loop.thisTrialN'
p6986
I0
sg39
F1.0335329208173789
sg34
g752
(S'\x07\xdf\n\x10\x0f$\x15\x0cT@'
tRp6987
sa(dp6988
S'trial_loop.thisTrialN'
p6989
I40
sg6370
g6589
sS'block_loop.thisIndex'
p6990
g6364
sg38
S'right'
p6991
sg58
g62
sS'trial_loop.thisN'
p6992
I40
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p6993
g59
(g98
S'(\x00\x00\x00'
tRp6994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p6995
I0
sg6379
g6596
sS'block_loop.thisRepN'
p6996
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p6997
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p6998
Nsg69
Vn
sS'block_loop.thisTrialN'
p6999
I0
sg39
F1.4335311532086052
sg34
g752
(S'\x07\xdf\n\x10\x0f$\x1b\r]\xe0'
tRp7000
sa(dp7001
S'trial_loop.thisTrialN'
p7002
I41
sg6370
g6647
sS'block_loop.thisIndex'
p7003
g6364
sg38
S'left'
p7004
sg58
g62
sS'trial_loop.thisN'
p7005
I41
sg33
g6658
sg63
g64
sS'trial_loop.thisIndex'
p7006
g59
(g98
S')\x00\x00\x00'
tRp7007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7008
I0
sg6379
g6655
sS'block_loop.thisRepN'
p7009
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7010
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p7011
Nsg69
Vn
sS'block_loop.thisTrialN'
p7012
I0
sg39
F0.66687972977160825
sg34
g752
(S'\x07\xdf\n\x10\x0f$"\x05W0'
tRp7013
sa(dp7014
S'trial_loop.thisTrialN'
p7015
I42
sg6370
g6883
sS'block_loop.thisIndex'
p7016
g6364
sg38
S'left'
p7017
sg58
g62
sS'trial_loop.thisN'
p7018
I42
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7019
g59
(g98
S'*\x00\x00\x00'
tRp7020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7021
I0
sg6379
g6890
sS'block_loop.thisRepN'
p7022
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7023
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7024
Nsg69
Vn
sS'block_loop.thisTrialN'
p7025
I0
sg39
F0.80012475880721468
sg34
g752
(S'\x07\xdf\n\x10\x0f$(\x00\xab\xe0'
tRp7026
sa(dp7027
S'trial_loop.thisTrialN'
p7028
I43
sg6370
g6754
sS'block_loop.thisIndex'
p7029
g6364
sg38
S'right'
p7030
sg58
g62
sS'trial_loop.thisN'
p7031
I43
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p7032
g59
(g98
S'+\x00\x00\x00'
tRp7033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7034
I0
sg6379
g6762
sS'block_loop.thisRepN'
p7035
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7036
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p7037
Nsg69
Vn
sS'block_loop.thisTrialN'
p7038
I0
sg39
F0.80010822313124663
sg34
g752
(S'\x07\xdf\n\x10\x0f$-\ri\x98'
tRp7039
sa(dp7040
S'trial_loop.thisTrialN'
p7041
I44
sg6370
S'7-olives.png'
p7042
sS'block_loop.thisIndex'
p7043
g6364
sg38
S'left'
p7044
sg58
g62
sS'trial_loop.thisN'
p7045
I44
sg33
S'7-olives.png'
p7046
sg63
g64
sS'trial_loop.thisIndex'
p7047
g59
(g98
S',\x00\x00\x00'
tRp7048
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7049
I0
sg6379
S'22-daim.png'
p7050
sS'block_loop.thisRepN'
p7051
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7052
I2
sg6384
S'22-daim.png'
p7053
sg55
g11
sS'block_loop.thisTrial'
p7054
Nsg69
Vn
sS'block_loop.thisTrialN'
p7055
I0
sg39
F0.71691354237555061
sg34
g752
(S'\x07\xdf\n\x10\x0f$3\n\xe1('
tRp7056
sa(dp7057
S'trial_loop.thisTrialN'
p7058
I45
sg6370
S'40-sardines.png'
p7059
sS'block_loop.thisIndex'
p7060
g6364
sg38
S'left'
p7061
sg58
g62
sS'trial_loop.thisN'
p7062
I45
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7063
g59
(g98
S'-\x00\x00\x00'
tRp7064
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7065
I0
sg6379
S'5-pineapple.png'
p7066
sS'block_loop.thisRepN'
p7067
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7068
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7069
Nsg69
Vn
sS'block_loop.thisTrialN'
p7070
I0
sg39
F1.1834325093623193
sg34
g752
(S'\x07\xdf\n\x10\x0f$9\x06\xedp'
tRp7071
sa(dp7072
S'trial_loop.thisTrialN'
p7073
I46
sg6370
g6975
sS'block_loop.thisIndex'
p7074
g6364
sg38
S'left'
p7075
sg58
g62
sS'trial_loop.thisN'
p7076
I46
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p7077
g59
(g98
S'.\x00\x00\x00'
tRp7078
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7079
I0
sg6379
g6982
sS'block_loop.thisRepN'
p7080
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7081
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p7082
Nsg69
Vn
sS'block_loop.thisTrialN'
p7083
I0
sg39
F0.66677253298985306
sg34
g752
(S'\x07\xdf\n\x10\x0f%\x03\n\\X'
tRp7084
sa(dp7085
S'trial_loop.thisTrialN'
p7086
I47
sg6370
g6720
sS'block_loop.thisIndex'
p7087
g6364
sg38
S'left'
p7088
sg58
g62
sS'trial_loop.thisN'
p7089
I47
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p7090
g59
(g98
S'/\x00\x00\x00'
tRp7091
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7092
I0
sg6379
g6728
sS'block_loop.thisRepN'
p7093
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7094
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p7095
Nsg69
Vn
sS'block_loop.thisTrialN'
p7096
I0
sg39
F0.63344630809660885
sg34
g752
(S'\x07\xdf\n\x10\x0f%\t\x05\xb1\x08'
tRp7097
sa(dp7098
S'trial_loop.thisTrialN'
p7099
I48
sg6370
S'18-mms.png'
p7100
sS'block_loop.thisIndex'
p7101
g6364
sg38
S'right'
p7102
sg58
g62
sS'trial_loop.thisN'
p7103
I48
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p7104
g59
(g98
S'0\x00\x00\x00'
tRp7105
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7106
I0
sg6379
S'43-mrporky_pork_crackles_redo.png'
p7107
sS'block_loop.thisRepN'
p7108
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7109
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p7110
Nsg69
Vn
sS'block_loop.thisTrialN'
p7111
I0
sg39
F0.73391592122789007
sg34
g752
(S'\x07\xdf\n\x10\x0f%\x0f\x00\xc78'
tRp7112
sa(dp7113
S'trial_loop.thisTrialN'
p7114
I49
sg6370
g6705
sS'block_loop.thisIndex'
p7115
g6364
sg38
S'right'
p7116
sg58
g62
sS'trial_loop.thisN'
p7117
I49
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7118
g59
(g98
S'1\x00\x00\x00'
tRp7119
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7120
I0
sg6379
g6712
sS'block_loop.thisRepN'
p7121
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7122
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7123
Nsg69
Vn
sS'block_loop.thisTrialN'
p7124
I0
sg39
F1.0835313812858658
sg34
g752
(S'\x07\xdf\n\x10\x0f%\x14\x0cPX'
tRp7125
sa(dp7126
S'trial_loop.thisTrialN'
p7127
I50
sg6370
g6476
sS'block_loop.thisIndex'
p7128
g6364
sg38
S'left'
p7129
sg58
g62
sS'trial_loop.thisN'
p7130
I50
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7131
g59
(g98
S'2\x00\x00\x00'
tRp7132
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7133
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7134
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7135
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7136
Nsg69
Vn
sS'block_loop.thisTrialN'
p7137
I0
sg39
F1.1001571459200932
sg34
g752
(S'\x07\xdf\n\x10\x0f%\x1a\x0e\x15x'
tRp7138
sa(dp7139
S'trial_loop.thisTrialN'
p7140
I51
sg6370
S'8-liquorice_catherine_wheels.png'
p7141
sS'block_loop.thisIndex'
p7142
g6364
sg38
S'right'
p7143
sg58
g62
sS'trial_loop.thisN'
p7144
I51
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7145
g59
(g98
S'3\x00\x00\x00'
tRp7146
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7147
I0
sg6379
S'17-jacobs_mini_cheddars_redo.png'
p7148
sS'block_loop.thisRepN'
p7149
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7150
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7151
Nsg69
Vn
sS'block_loop.thisTrialN'
p7152
I0
sg39
F0.88344231672817841
sg34
g752
(S'\x07\xdf\n\x10\x0f%!\x00\xcf\x08'
tRp7153
sa(dp7154
S'trial_loop.thisTrialN'
p7155
I52
sg6370
g6647
sS'block_loop.thisIndex'
p7156
g6364
sg38
S'left'
p7157
sg58
g62
sS'trial_loop.thisN'
p7158
I52
sg33
g6658
sg63
g64
sS'trial_loop.thisIndex'
p7159
g59
(g98
S'4\x00\x00\x00'
tRp7160
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7161
I0
sg6379
g6655
sS'block_loop.thisRepN'
p7162
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7163
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p7164
Nsg69
Vn
sS'block_loop.thisTrialN'
p7165
I0
sg39
F0.6668877125121071
sg34
g752
(S'\x07\xdf\n\x10\x0f%&\x0e\xf8\x08'
tRp7166
sa(dp7167
S'trial_loop.thisTrialN'
p7168
I53
sg6370
g6827
sS'block_loop.thisIndex'
p7169
g6364
sg38
S'left'
p7170
sg58
g62
sS'trial_loop.thisN'
p7171
I53
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7172
g59
(g98
S'5\x00\x00\x00'
tRp7173
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7174
I0
sg6379
g6834
sS'block_loop.thisRepN'
p7175
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7176
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7177
Nsg69
Vn
sS'block_loop.thisTrialN'
p7178
I0
sg39
F0.56686114139301935
sg34
g752
(S'\x07\xdf\n\x10\x0f%,\nL\xb8'
tRp7179
sa(dp7180
S'trial_loop.thisTrialN'
p7181
I54
sg6370
S'21-nakd_banana_crunch.png'
p7182
sS'block_loop.thisIndex'
p7183
g6364
sg38
S'right'
p7184
sg58
g62
sS'trial_loop.thisN'
p7185
I54
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p7186
g59
(g98
S'6\x00\x00\x00'
tRp7187
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7188
I0
sg6379
S'1-treacle_cookies.png'
p7189
sS'block_loop.thisRepN'
p7190
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7191
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p7192
Nsg69
Vn
sS'block_loop.thisTrialN'
p7193
I0
sg39
F0.61722851844751858
sg34
g752
(S'\x07\xdf\n\x10\x0f%2\x046 '
tRp7194
sa(dp7195
S'trial_loop.thisTrialN'
p7196
I55
sg6370
g6947
sS'block_loop.thisIndex'
p7197
g6364
sg38
S'right'
p7198
sg58
g62
sS'trial_loop.thisN'
p7199
I55
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7200
g59
(g98
S'7\x00\x00\x00'
tRp7201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7202
I0
sg6379
g6954
sS'block_loop.thisRepN'
p7203
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7204
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7205
Nsg69
Vn
sS'block_loop.thisTrialN'
p7206
I0
sg39
F1.1001255000592209
sg34
g752
(S'\x07\xdf\n\x10\x0f%7\x0e\x15x'
tRp7207
sa(dp7208
S'trial_loop.thisTrialN'
p7209
I56
sg6370
g6797
sS'block_loop.thisIndex'
p7210
g6364
sg38
S'right'
p7211
sg58
g62
sS'trial_loop.thisN'
p7212
I56
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p7213
g59
(g98
S'8\x00\x00\x00'
tRp7214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7215
I0
sg6379
g6805
sS'block_loop.thisRepN'
p7216
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7217
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p7218
Nsg69
Vn
sS'block_loop.thisTrialN'
p7219
I0
sg39
F1.7334928360651247
sg34
g752
(S'\x07\xdf\n\x10\x0f&\x02\x00\xd2\xf0'
tRp7220
sa(dp7221
S'trial_loop.thisTrialN'
p7222
I57
sg6370
g7182
sS'block_loop.thisIndex'
p7223
g6364
sg38
S'right'
p7224
sg58
g62
sS'trial_loop.thisN'
p7225
I57
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p7226
g59
(g98
S'9\x00\x00\x00'
tRp7227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7228
I0
sg6379
g7189
sS'block_loop.thisRepN'
p7229
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7230
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p7231
Nsg69
Vn
sS'block_loop.thisTrialN'
p7232
I0
sg39
F0.66677424357840209
sg34
g752
(S'\x07\xdf\n\x10\x0f&\x08\x0c\x92\xc0'
tRp7233
sa(dp7234
S'trial_loop.thisTrialN'
p7235
I58
sg6370
g7059
sS'block_loop.thisIndex'
p7236
g6364
sg38
S'left'
p7237
sg58
g62
sS'trial_loop.thisN'
p7238
I58
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7239
g59
(g98
S':\x00\x00\x00'
tRp7240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7241
I0
sg6379
g7066
sS'block_loop.thisRepN'
p7242
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7243
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7244
Nsg69
Vn
sS'block_loop.thisTrialN'
p7245
I0
sg39
F1.7833744064264465
sg34
g752
(S'\x07\xdf\n\x10\x0f&\x0e\x08%\xf0'
tRp7246
sa(dp7247
S'trial_loop.thisTrialN'
p7248
I59
sg6370
S'26-walkers_smoky_bacon.png'
p7249
sS'block_loop.thisIndex'
p7250
g6364
sg38
S'left'
p7251
sg58
g62
sS'trial_loop.thisN'
p7252
I59
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p7253
g59
(g98
S';\x00\x00\x00'
tRp7254
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7255
I0
sg6379
S'44-crunch.png'
p7256
sS'block_loop.thisRepN'
p7257
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7258
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p7259
Nsg69
Vn
sS'block_loop.thisTrialN'
p7260
I0
sg39
F1.0505444228001579
sg34
g752
(S'\x07\xdf\n\x10\x0f&\x15\x05\x1c\x98'
tRp7261
sa(dp7262
S'trial_loop.thisTrialN'
p7263
I60
sg6370
g7042
sS'block_loop.thisIndex'
p7264
g6364
sg38
S'left'
p7265
sg58
g62
sS'trial_loop.thisN'
p7266
I60
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p7267
g59
(g98
S'<\x00\x00\x00'
tRp7268
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7269
I0
sg6379
g7050
sS'block_loop.thisRepN'
p7270
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7271
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p7272
Nsg69
Vn
sS'block_loop.thisTrialN'
p7273
I0
sg39
F0.73345748393330723
sg34
g752
(S'\x07\xdf\n\x10\x0f&\x1b\x06d\xb8'
tRp7274
sa(dp7275
S'trial_loop.thisTrialN'
p7276
I61
sg6370
g6842
sS'block_loop.thisIndex'
p7277
g6364
sg38
S'right'
p7278
sg58
g62
sS'trial_loop.thisN'
p7279
I61
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7280
g59
(g98
S'=\x00\x00\x00'
tRp7281
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7282
I0
sg6379
g6849
sS'block_loop.thisRepN'
p7283
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7284
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7285
Nsg69
Vn
sS'block_loop.thisTrialN'
p7286
I0
sg39
F1.3001760764163919
sg34
g752
(S'\x07\xdf\n\x10\x0f&!\x02\xea\x18'
tRp7287
sa(dp7288
S'trial_loop.thisTrialN'
p7289
I62
sg6370
g6720
sS'block_loop.thisIndex'
p7290
g6364
sg38
S'left'
p7291
sg58
g62
sS'trial_loop.thisN'
p7292
I62
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p7293
g59
(g98
S'>\x00\x00\x00'
tRp7294
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7295
I0
sg6379
g6728
sS'block_loop.thisRepN'
p7296
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7297
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p7298
Nsg69
Vn
sS'block_loop.thisTrialN'
p7299
I0
sg39
F0.70017858527353383
sg34
g752
(S"\x07\xdf\n\x10\x0f&'\x08\x02\xc8"
tRp7300
sa(dp7301
S'trial_loop.thisTrialN'
p7302
I63
sg6370
g7100
sS'block_loop.thisIndex'
p7303
g6364
sg38
S'right'
p7304
sg58
g62
sS'trial_loop.thisN'
p7305
I63
sg33
g6570
sg63
g64
sS'trial_loop.thisIndex'
p7306
g59
(g98
S'?\x00\x00\x00'
tRp7307
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7308
I0
sg6379
g7107
sS'block_loop.thisRepN'
p7309
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7310
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p7311
Nsg69
Vn
sS'block_loop.thisTrialN'
p7312
I0
sg39
F0.9668727733878768
sg34
g752
(S'\x07\xdf\n\x10\x0f&-\x04\x0f\x10'
tRp7313
sa(dp7314
S'trial_loop.thisTrialN'
p7315
I64
sg6370
S'22-daim.png'
p7316
sS'block_loop.thisIndex'
p7317
g6364
sg38
S'right'
p7318
sg58
g62
sS'trial_loop.thisN'
p7319
I64
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p7320
g59
(g98
S'@\x00\x00\x00'
tRp7321
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7322
I0
sg6379
S'7-olives.png'
p7323
sS'block_loop.thisRepN'
p7324
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7325
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p7326
Nsg69
Vn
sS'block_loop.thisTrialN'
p7327
I0
sg39
F1.150400505423022
sg34
g752
(S'\x07\xdf\n\x10\x0f&3\x03\xe8\x00'
tRp7328
sa(dp7329
S'trial_loop.thisTrialN'
p7330
I65
sg6370
g6442
sS'block_loop.thisIndex'
p7331
g6364
sg38
S'right'
p7332
sg58
g62
sS'trial_loop.thisN'
p7333
I65
sg33
g6453
sg63
g64
sS'trial_loop.thisIndex'
p7334
g59
(g98
S'A\x00\x00\x00'
tRp7335
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7336
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7337
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7338
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7339
Nsg69
Vn
sS'block_loop.thisTrialN'
p7340
I0
sg39
F0.93343450504835346
sg34
g752
(S'\x07\xdf\n\x10\x0f&9\x06\xdd\xd0'
tRp7341
sa(dp7342
S'trial_loop.thisTrialN'
p7343
I66
sg6370
g6391
sS'block_loop.thisIndex'
p7344
g6364
sg38
S'left'
p7345
sg58
g62
sS'trial_loop.thisN'
p7346
I66
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7347
g59
(g98
S'B\x00\x00\x00'
tRp7348
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7349
I0
sg6379
g6399
sS'block_loop.thisRepN'
p7350
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7351
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7352
Nsg69
Vn
sS'block_loop.thisTrialN'
p7353
I0
sg39
F0.94999241639743559
sg34
g752
(S"\x07\xdf\n\x10\x0f'\x03\x06=\xa8"
tRp7354
sa(dp7355
S'trial_loop.thisTrialN'
p7356
I67
sg6370
g6544
sS'block_loop.thisIndex'
p7357
g6364
sg38
S'left'
p7358
sg58
g62
sS'trial_loop.thisN'
p7359
I67
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7360
g59
(g98
S'C\x00\x00\x00'
tRp7361
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7362
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7363
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7364
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7365
Nsg69
Vn
sS'block_loop.thisTrialN'
p7366
I0
sg39
F0.86691148966929177
sg34
g752
(S"\x07\xdf\n\x10\x0f'\t\x06\x16\x98"
tRp7367
sa(dp7368
S'trial_loop.thisTrialN'
p7369
I68
sg6370
g7100
sS'block_loop.thisIndex'
p7370
g6364
sg38
S'right'
p7371
sg58
g62
sS'trial_loop.thisN'
p7372
I68
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p7373
g59
(g98
S'D\x00\x00\x00'
tRp7374
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7375
I0
sg6379
g7107
sS'block_loop.thisRepN'
p7376
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7377
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p7378
Nsg69
Vn
sS'block_loop.thisTrialN'
p7379
I0
sg39
F0.86672503569207038
sg34
g752
(S"\x07\xdf\n\x10\x0f'\x0f\x04\x84@"
tRp7380
sa(dp7381
S'trial_loop.thisTrialN'
p7382
I69
sg6370
g6408
sS'block_loop.thisIndex'
p7383
g6364
sg38
S'left'
p7384
sg58
g62
sS'trial_loop.thisN'
p7385
I69
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7386
g59
(g98
S'E\x00\x00\x00'
tRp7387
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7388
I0
sg6379
g6416
sS'block_loop.thisRepN'
p7389
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7390
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7391
Nsg69
Vn
sS'block_loop.thisTrialN'
p7392
I0
sg39
F0.71681546872059698
sg34
g752
(S"\x07\xdf\n\x10\x0f'\x15\x02\xf1\xe8"
tRp7393
sa(dp7394
S'trial_loop.thisTrialN'
p7395
I70
sg6370
g6915
sS'block_loop.thisIndex'
p7396
g6364
sg38
S'left'
p7397
sg58
g62
sS'trial_loop.thisN'
p7398
I70
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7399
g59
(g98
S'F\x00\x00\x00'
tRp7400
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7401
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7402
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7403
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7404
Nsg69
Vn
sS'block_loop.thisTrialN'
p7405
I0
sg39
F1.3170704031945206
sg34
g752
(S"\x07\xdf\n\x10\x0f'\x1a\x0e{\x08"
tRp7406
sa(dp7407
S'trial_loop.thisTrialN'
p7408
I71
sg6370
g6883
sS'block_loop.thisIndex'
p7409
g6364
sg38
S'left'
p7410
sg58
g62
sS'trial_loop.thisN'
p7411
I71
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7412
g59
(g98
S'G\x00\x00\x00'
tRp7413
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7414
I0
sg6379
g6890
sS'block_loop.thisRepN'
p7415
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7416
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7417
Nsg69
Vn
sS'block_loop.thisTrialN'
p7418
I0
sg39
F1.1835622288708691
sg34
g752
(S"\x07\xdf\n\x10\x0f'!\x04\x8c\x10"
tRp7419
sa(dp7420
S'trial_loop.thisTrialN'
p7421
I72
sg6370
g6510
sS'block_loop.thisIndex'
p7422
g6364
sg38
S'left'
p7423
sg58
g62
sS'trial_loop.thisN'
p7424
I72
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p7425
g59
(g98
S'H\x00\x00\x00'
tRp7426
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7427
I0
sg6379
g6518
sS'block_loop.thisRepN'
p7428
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7429
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7430
Nsg69
Vn
sS'block_loop.thisTrialN'
p7431
I0
sg39
F0.73351222271594452
sg34
g752
(S"\x07\xdf\n\x10\x0f''\x07\xbcx"
tRp7432
sa(dp7433
S'trial_loop.thisTrialN'
p7434
I73
sg6370
g6677
sS'block_loop.thisIndex'
p7435
g6364
sg38
S'right'
p7436
sg58
g62
sS'trial_loop.thisN'
p7437
I73
sg33
g6658
sg63
g64
sS'trial_loop.thisIndex'
p7438
g59
(g98
S'I\x00\x00\x00'
tRp7439
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7440
I0
sg6379
g6684
sS'block_loop.thisRepN'
p7441
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7442
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p7443
Nsg69
Vn
sS'block_loop.thisTrialN'
p7444
I0
sg39
F0.81674083011239418
sg34
g752
(S"\x07\xdf\n\x10\x0f'-\x04A\xd8"
tRp7445
sa(dp7446
S'trial_loop.thisTrialN'
p7447
I74
sg6370
g6883
sS'block_loop.thisIndex'
p7448
g6364
sg38
S'left'
p7449
sg58
g62
sS'trial_loop.thisN'
p7450
I74
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7451
g59
(g98
S'J\x00\x00\x00'
tRp7452
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7453
I0
sg6379
g6890
sS'block_loop.thisRepN'
p7454
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7455
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7456
Nsg69
Vn
sS'block_loop.thisTrialN'
p7457
I0
sg39
F0.80012019724017591
sg34
g752
(S"\x07\xdf\n\x10\x0f'3\x01\xf7\xe8"
tRp7458
sa(dp7459
S'trial_loop.thisTrialN'
p7460
I75
sg6370
S'46-pistachios.png'
p7461
sS'block_loop.thisIndex'
p7462
g6364
sg38
S'left'
p7463
sg58
g62
sS'trial_loop.thisN'
p7464
I75
sg33
g6902
sg63
g64
sS'trial_loop.thisIndex'
p7465
g59
(g98
S'K\x00\x00\x00'
tRp7466
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7467
I0
sg6379
S'29-beans.png'
p7468
sS'block_loop.thisRepN'
p7469
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7470
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p7471
Nsg69
Vn
sS'block_loop.thisTrialN'
p7472
I0
sg39
F0.85010611340840114
sg34
g752
(S"\x07\xdf\n\x10\x0f'8\x0e\xb5\xa0"
tRp7473
sa(dp7474
S'trial_loop.thisTrialN'
p7475
I76
sg6370
S'42-mrkipling_lemon_slices.png'
p7476
sS'block_loop.thisIndex'
p7477
g6364
sg38
S'right'
p7478
sg58
g62
sS'trial_loop.thisN'
p7479
I76
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p7480
g59
(g98
S'L\x00\x00\x00'
tRp7481
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7482
I0
sg6379
S'16-skips_prawn.png'
p7483
sS'block_loop.thisRepN'
p7484
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7485
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p7486
Nsg69
Vn
sS'block_loop.thisTrialN'
p7487
I0
sg39
F0.88377131961533451
sg34
g752
(S'\x07\xdf\n\x10\x0f(\x02\x0c\xe4\xc8'
tRp7488
sa(dp7489
S'trial_loop.thisTrialN'
p7490
I77
sg6370
g7316
sS'block_loop.thisIndex'
p7491
g6364
sg38
S'right'
p7492
sg58
g62
sS'trial_loop.thisN'
p7493
I77
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p7494
g59
(g98
S'M\x00\x00\x00'
tRp7495
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7496
I0
sg6379
g7323
sS'block_loop.thisRepN'
p7497
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7498
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p7499
Nsg69
Vn
sS'block_loop.thisTrialN'
p7500
I0
sg39
F1.0167597606086929
sg34
g752
(S'\x07\xdf\n\x10\x0f(\x08\x0b\x8d\x08'
tRp7501
sa(dp7502
S'trial_loop.thisTrialN'
p7503
I78
sg6370
g6604
sS'block_loop.thisIndex'
p7504
g6364
sg38
S'right'
p7505
sg58
g62
sS'trial_loop.thisN'
p7506
I78
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7507
g59
(g98
S'N\x00\x00\x00'
tRp7508
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7509
I0
sg6379
g6612
sS'block_loop.thisRepN'
p7510
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7511
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7512
Nsg69
Vn
sS'block_loop.thisTrialN'
p7513
I0
sg39
F1.2167858185493969
sg34
g752
(S'\x07\xdf\n\x10\x0f(\x0e\x0c\\\x10'
tRp7514
sa(dp7515
S'trial_loop.thisTrialN'
p7516
I79
sg6370
g7316
sS'block_loop.thisIndex'
p7517
g6364
sg38
S'right'
p7518
sg58
g62
sS'trial_loop.thisN'
p7519
I79
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p7520
g59
(g98
S'O\x00\x00\x00'
tRp7521
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7522
I0
sg6379
g7323
sS'block_loop.thisRepN'
p7523
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7524
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p7525
Nsg69
Vn
sS'block_loop.thisTrialN'
p7526
I0
sg39
F0.88347880924629862
sg34
g752
(S'\x07\xdf\n\x10\x0f(\x15\x01\x01\xd0'
tRp7527
sa(dp7528
S'trial_loop.thisTrialN'
p7529
I80
sg6370
g7182
sS'block_loop.thisIndex'
p7530
g6364
sg38
S'right'
p7531
sg58
g62
sS'trial_loop.thisN'
p7532
I80
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p7533
g59
(g98
S'P\x00\x00\x00'
tRp7534
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7535
I0
sg6379
g7189
sS'block_loop.thisRepN'
p7536
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7537
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p7538
Nsg69
Vn
sS'block_loop.thisTrialN'
p7539
I0
sg39
F0.7501017799222609
sg34
g752
(S'\x07\xdf\n\x10\x0f(\x1a\x0e\xecP'
tRp7540
sa(dp7541
S'trial_loop.thisTrialN'
p7542
I81
sg6370
g6930
sS'block_loop.thisIndex'
p7543
g6364
sg38
S'right'
p7544
sg58
g62
sS'trial_loop.thisN'
p7545
I81
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p7546
g59
(g98
S'Q\x00\x00\x00'
tRp7547
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7548
I0
sg6379
g6938
sS'block_loop.thisRepN'
p7549
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7550
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p7551
Nsg69
Vn
sS'block_loop.thisTrialN'
p7552
I0
sg39
F0.73344009296488366
sg34
g752
(S'\x07\xdf\n\x10\x0f( \x0b\xb00'
tRp7553
sa(dp7554
S'trial_loop.thisTrialN'
p7555
I82
sg6370
g6915
sS'block_loop.thisIndex'
p7556
g6364
sg38
S'left'
p7557
sg58
g62
sS'trial_loop.thisN'
p7558
I82
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7559
g59
(g98
S'R\x00\x00\x00'
tRp7560
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7561
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7562
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7563
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7564
Nsg69
Vn
sS'block_loop.thisTrialN'
p7565
I0
sg39
F1.6005360409253626
sg34
g752
(S'\x07\xdf\n\x10\x0f(&\x07\xf7\x10'
tRp7566
sa(dp7567
S'trial_loop.thisTrialN'
p7568
I83
sg6370
S'23-crunchie_redo.png'
p7569
sS'block_loop.thisIndex'
p7570
g6364
sg38
S'left'
p7571
sg58
g62
sS'trial_loop.thisN'
p7572
I83
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p7573
g59
(g98
S'S\x00\x00\x00'
tRp7574
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7575
I0
sg6379
S'33-ambrosia_rice.png'
p7576
sS'block_loop.thisRepN'
p7577
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7578
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p7579
Nsg69
Vn
sS'block_loop.thisTrialN'
p7580
I0
sg39
F1.750157944195962
sg34
g752
(S'\x07\xdf\n\x10\x0f(-\x02Q\xc0'
tRp7581
sa(dp7582
S'trial_loop.thisTrialN'
p7583
I84
sg6370
g7059
sS'block_loop.thisIndex'
p7584
g6364
sg38
S'left'
p7585
sg58
g62
sS'trial_loop.thisN'
p7586
I84
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7587
g59
(g98
S'T\x00\x00\x00'
tRp7588
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7589
I0
sg6379
g7066
sS'block_loop.thisRepN'
p7590
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7591
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7592
Nsg69
Vn
sS'block_loop.thisTrialN'
p7593
I0
sg39
F1.7667429398352397
sg34
g752
(S'\x07\xdf\n\x10\x0f(3\x0eP\x10'
tRp7594
sa(dp7595
S'trial_loop.thisTrialN'
p7596
I85
sg6370
g6371
sS'block_loop.thisIndex'
p7597
g6364
sg38
S'left'
p7598
sg58
g62
sS'trial_loop.thisN'
p7599
I85
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p7600
g59
(g98
S'U\x00\x00\x00'
tRp7601
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7602
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7603
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7604
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7605
Nsg69
Vn
sS'block_loop.thisTrialN'
p7606
I0
sg39
F1.2834408342205279
sg34
g752
(S'\x07\xdf\n\x10\x0f(:\x0bJ\xa0'
tRp7607
sa(dp7608
S'trial_loop.thisTrialN'
p7609
I86
sg6370
g6930
sS'block_loop.thisIndex'
p7610
g6364
sg38
S'right'
p7611
sg58
g62
sS'trial_loop.thisN'
p7612
I86
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p7613
g59
(g98
S'V\x00\x00\x00'
tRp7614
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7615
I0
sg6379
g6938
sS'block_loop.thisRepN'
p7616
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7617
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p7618
Nsg69
Vn
sS'block_loop.thisTrialN'
p7619
I0
sg39
F1.1335284162705648
sg34
g752
(S'\x07\xdf\n\x10\x0f)\x05\x00\xe2\x90'
tRp7620
sa(dp7621
S'trial_loop.thisTrialN'
p7622
I87
sg6370
g7042
sS'block_loop.thisIndex'
p7623
g6364
sg38
S'left'
p7624
sg58
g62
sS'trial_loop.thisN'
p7625
I87
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p7626
g59
(g98
S'W\x00\x00\x00'
tRp7627
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7628
I0
sg6379
g7050
sS'block_loop.thisRepN'
p7629
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7630
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p7631
Nsg69
Vn
sS'block_loop.thisTrialN'
p7632
I0
sg39
F3.3001096486223105
sg34
g752
(S'\x07\xdf\n\x10\x0f)\x0b\x03[`'
tRp7633
sa(dp7634
S'trial_loop.thisTrialN'
p7635
I88
sg6370
g6737
sS'block_loop.thisIndex'
p7636
g6364
sg38
S'right'
p7637
sg58
g62
sS'trial_loop.thisN'
p7638
I88
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p7639
g59
(g98
S'X\x00\x00\x00'
tRp7640
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7641
I0
sg6379
g6745
sS'block_loop.thisRepN'
p7642
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7643
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7644
Nsg69
Vn
sS'block_loop.thisTrialN'
p7645
I0
sg39
F0.76686325111950282
sg34
g752
(S'\x07\xdf\n\x10\x0f)\x13\x08\xa2\xf0'
tRp7646
sa(dp7647
S'trial_loop.thisTrialN'
p7648
I89
sg6370
g6527
sS'block_loop.thisIndex'
p7649
g6364
sg38
S'left'
p7650
sg58
g62
sS'trial_loop.thisN'
p7651
I89
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7652
g59
(g98
S'Y\x00\x00\x00'
tRp7653
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7654
I0
sg6379
g6535
sS'block_loop.thisRepN'
p7655
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7656
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7657
Nsg69
Vn
sS'block_loop.thisTrialN'
p7658
I0
sg39
F1.3167884414506261
sg34
g752
(S'\x07\xdf\n\x10\x0f)\x19\x05b\xe8'
tRp7659
sa(dp7660
S'trial_loop.thisTrialN'
p7661
I90
sg6370
g6827
sS'block_loop.thisIndex'
p7662
g6364
sg38
S'left'
p7663
sg58
g62
sS'trial_loop.thisN'
p7664
I90
sg33
g6748
sg63
g64
sS'trial_loop.thisIndex'
p7665
g59
(g98
S'Z\x00\x00\x00'
tRp7666
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7667
I0
sg6379
g6834
sS'block_loop.thisRepN'
p7668
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7669
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p7670
Nsg69
Vn
sS'block_loop.thisTrialN'
p7671
I0
sg39
F0.73354500896311947
sg34
g752
(S'\x07\xdf\n\x10\x0f)\x1f\n\xba\x18'
tRp7672
sa(dp7673
S'trial_loop.thisTrialN'
p7674
I91
sg6370
g6705
sS'block_loop.thisIndex'
p7675
g6364
sg38
S'right'
p7676
sg58
g62
sS'trial_loop.thisN'
p7677
I91
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p7678
g59
(g98
S'[\x00\x00\x00'
tRp7679
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7680
I0
sg6379
g6712
sS'block_loop.thisRepN'
p7681
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7682
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p7683
Nsg69
Vn
sS'block_loop.thisTrialN'
p7684
I0
sg39
F0.81685486924470752
sg34
g752
(S'\x07\xdf\n\x10\x0f)%\x07?x'
tRp7685
sa(dp7686
S'trial_loop.thisTrialN'
p7687
I92
sg6370
g6371
sS'block_loop.thisIndex'
p7688
g6364
sg38
S'left'
p7689
sg58
g62
sS'trial_loop.thisN'
p7690
I92
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p7691
g59
(g98
S'\\\x00\x00\x00'
tRp7692
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7693
I0
sg6379
g6380
sS'block_loop.thisRepN'
p7694
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7695
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p7696
Nsg69
Vn
sS'block_loop.thisTrialN'
p7697
I0
sg39
F0.7335350305402244
sg34
g752
(S'\x07\xdf\n\x10\x0f)+\x04\xf5\x88'
tRp7698
sa(dp7699
S'trial_loop.thisTrialN'
p7700
I93
sg6370
g7249
sS'block_loop.thisIndex'
p7701
g6364
sg38
S'left'
p7702
sg58
g62
sS'trial_loop.thisN'
p7703
I93
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p7704
g59
(g98
S']\x00\x00\x00'
tRp7705
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7706
I0
sg6379
g7256
sS'block_loop.thisRepN'
p7707
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7708
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p7709
Nsg69
Vn
sS'block_loop.thisTrialN'
p7710
I0
sg39
F0.63389961363282055
sg34
g752
(S'\x07\xdf\n\x10\x0f)1\x01z\xe8'
tRp7711
sa(dp7712
S'trial_loop.thisTrialN'
p7713
I94
sg6370
g6425
sS'block_loop.thisIndex'
p7714
g6364
sg38
S'right'
p7715
sg58
g62
sS'trial_loop.thisN'
p7716
I94
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7717
g59
(g98
S'^\x00\x00\x00'
tRp7718
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7719
I0
sg6379
g6433
sS'block_loop.thisRepN'
p7720
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7721
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7722
Nsg69
Vn
sS'block_loop.thisTrialN'
p7723
I0
sg39
F0.71679921814939007
sg34
g752
(S'\x07\xdf\n\x10\x0f)6\x0b\x94\xd8'
tRp7724
sa(dp7725
S'trial_loop.thisTrialN'
p7726
I95
sg6370
g6915
sS'block_loop.thisIndex'
p7727
g6364
sg38
S'left'
p7728
sg58
g62
sS'trial_loop.thisN'
p7729
I95
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7730
g59
(g98
S'_\x00\x00\x00'
tRp7731
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7732
I0
sg6379
g6922
sS'block_loop.thisRepN'
p7733
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7734
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7735
Nsg69
Vn
sS'block_loop.thisTrialN'
p7736
I0
sg39
F0.7000864986803208
sg34
g752
(S'\x07\xdf\n\x10\x0f*\x00\x07\xa1 '
tRp7737
sa(dp7738
S'trial_loop.thisTrialN'
p7739
I96
sg6370
g6975
sS'block_loop.thisIndex'
p7740
g6364
sg38
S'left'
p7741
sg58
g62
sS'trial_loop.thisN'
p7742
I96
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p7743
g59
(g98
S'`\x00\x00\x00'
tRp7744
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7745
I0
sg6379
g6982
sS'block_loop.thisRepN'
p7746
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7747
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p7748
Nsg69
Vn
sS'block_loop.thisTrialN'
p7749
I0
sg39
F0.78351838082380709
sg34
g752
(S'\x07\xdf\n\x10\x0f*\x06\x03\xadh'
tRp7750
sa(dp7751
S'trial_loop.thisTrialN'
p7752
I97
sg6370
g6677
sS'block_loop.thisIndex'
p7753
g6364
sg38
S'right'
p7754
sg58
g62
sS'trial_loop.thisN'
p7755
I97
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p7756
g59
(g98
S'a\x00\x00\x00'
tRp7757
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7758
I0
sg6379
g6684
sS'block_loop.thisRepN'
p7759
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7760
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p7761
Nsg69
Vn
sS'block_loop.thisTrialN'
p7762
I0
sg39
F1.0334302855990245
sg34
g752
(S'\x07\xdf\n\x10\x0f*\x0c\x00\xea`'
tRp7763
sa(dp7764
S'trial_loop.thisTrialN'
p7765
I98
sg6370
g7249
sS'block_loop.thisIndex'
p7766
g6364
sg38
S'left'
p7767
sg58
g62
sS'trial_loop.thisN'
p7768
I98
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p7769
g59
(g98
S'b\x00\x00\x00'
tRp7770
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7771
I0
sg6379
g7256
sS'block_loop.thisRepN'
p7772
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7773
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p7774
Nsg69
Vn
sS'block_loop.thisTrialN'
p7775
I0
sg39
F0.73354016229859553
sg34
g752
(S'\x07\xdf\n\x10\x0f*\x12\x01\xf4\x00'
tRp7776
sa(dp7777
S'trial_loop.thisTrialN'
p7778
I99
sg6370
g6947
sS'block_loop.thisIndex'
p7779
g6364
sg38
S'right'
p7780
sg58
g62
sS'trial_loop.thisN'
p7781
I99
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7782
g59
(g98
S'c\x00\x00\x00'
tRp7783
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7784
I0
sg6379
g6954
sS'block_loop.thisRepN'
p7785
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7786
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7787
Nsg69
Vn
sS'block_loop.thisTrialN'
p7788
I0
sg39
F1.0672052544650796
sg34
g752
(S'\x07\xdf\n\x10\x0f*\x17\r\x81\x08'
tRp7789
sa(dp7790
S'trial_loop.thisTrialN'
p7791
I100
sg6370
g6589
sS'block_loop.thisIndex'
p7792
g6364
sg38
S'right'
p7793
sg58
g62
sS'trial_loop.thisN'
p7794
I100
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7795
g59
(g98
S'd\x00\x00\x00'
tRp7796
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7797
I0
sg6379
g6596
sS'block_loop.thisRepN'
p7798
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7799
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7800
Nsg69
Vn
sS'block_loop.thisTrialN'
p7801
I0
sg39
F1.0667847351796809
sg34
g752
(S'\x07\xdf\n\x10\x0f*\x1d\x0f\x03\xc0'
tRp7802
sa(dp7803
S'trial_loop.thisTrialN'
p7804
I101
sg6370
g7249
sS'block_loop.thisIndex'
p7805
g6364
sg38
S'left'
p7806
sg58
g62
sS'trial_loop.thisN'
p7807
I101
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p7808
g59
(g98
S'e\x00\x00\x00'
tRp7809
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7810
I0
sg6379
g7256
sS'block_loop.thisRepN'
p7811
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7812
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p7813
Nsg69
Vn
sS'block_loop.thisTrialN'
p7814
I0
sg39
F0.63350275746415718
sg34
g752
(S'\x07\xdf\n\x10\x0f*$\x01H '
tRp7815
sa(dp7816
S'trial_loop.thisTrialN'
p7817
I102
sg6370
g6604
sS'block_loop.thisIndex'
p7818
g6364
sg38
S'right'
p7819
sg58
g62
sS'trial_loop.thisN'
p7820
I102
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7821
g59
(g98
S'f\x00\x00\x00'
tRp7822
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7823
I0
sg6379
g6612
sS'block_loop.thisRepN'
p7824
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7825
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7826
Nsg69
Vn
sS'block_loop.thisTrialN'
p7827
I0
sg39
F1.0835159860034764
sg34
g752
(S'\x07\xdf\n\x10\x0f*)\x0b\xa0\x90'
tRp7828
sa(dp7829
S'trial_loop.thisTrialN'
p7830
I103
sg6370
g7461
sS'block_loop.thisIndex'
p7831
g6364
sg38
S'left'
p7832
sg58
g62
sS'trial_loop.thisN'
p7833
I103
sg33
g6902
sg63
g64
sS'trial_loop.thisIndex'
p7834
g59
(g98
S'g\x00\x00\x00'
tRp7835
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7836
I0
sg6379
g7468
sS'block_loop.thisRepN'
p7837
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7838
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p7839
Nsg69
Vn
sS'block_loop.thisTrialN'
p7840
I0
sg39
F0.75018730926967692
sg34
g752
(S'\x07\xdf\n\x10\x0f*/\re\xb0'
tRp7841
sa(dp7842
S'trial_loop.thisTrialN'
p7843
I104
sg6370
g6442
sS'block_loop.thisIndex'
p7844
g6364
sg38
S'right'
p7845
sg58
g62
sS'trial_loop.thisN'
p7846
I104
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p7847
g59
(g98
S'h\x00\x00\x00'
tRp7848
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7849
I0
sg6379
g6450
sS'block_loop.thisRepN'
p7850
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7851
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p7852
Nsg69
Vn
sS'block_loop.thisTrialN'
p7853
I0
sg39
F0.88346170337899821
sg34
g752
(S'\x07\xdf\n\x10\x0f*5\t\xeb\x10'
tRp7854
sa(dp7855
S'trial_loop.thisTrialN'
p7856
I105
sg6370
g6459
sS'block_loop.thisIndex'
p7857
g6364
sg38
S'right'
p7858
sg58
g62
sS'trial_loop.thisN'
p7859
I105
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p7860
g59
(g98
S'i\x00\x00\x00'
tRp7861
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7862
I0
sg6379
g6467
sS'block_loop.thisRepN'
p7863
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7864
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p7865
Nsg69
Vn
sS'block_loop.thisTrialN'
p7866
I0
sg39
F0.93385644982481608
sg34
g752
(S'\x07\xdf\n\x10\x0f*;\x08\xd1\xd0'
tRp7867
sa(dp7868
S'trial_loop.thisTrialN'
p7869
I106
sg6370
g6559
sS'block_loop.thisIndex'
p7870
g6364
sg38
S'left'
p7871
sg58
g62
sS'trial_loop.thisN'
p7872
I106
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p7873
g59
(g98
S'j\x00\x00\x00'
tRp7874
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7875
I0
sg6379
g6567
sS'block_loop.thisRepN'
p7876
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7877
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p7878
Nsg69
Vn
sS'block_loop.thisTrialN'
p7879
I0
sg39
F0.95008735397277633
sg34
g752
(S'\x07\xdf\n\x10\x0f+\x05\x081\xa8'
tRp7880
sa(dp7881
S'trial_loop.thisTrialN'
p7882
I107
sg6370
g6947
sS'block_loop.thisIndex'
p7883
g6364
sg38
S'right'
p7884
sg58
g62
sS'trial_loop.thisN'
p7885
I107
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p7886
g59
(g98
S'k\x00\x00\x00'
tRp7887
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7888
I0
sg6379
g6954
sS'block_loop.thisRepN'
p7889
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7890
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p7891
Nsg69
Vn
sS'block_loop.thisTrialN'
p7892
I0
sg39
F1.4501090214071155
sg34
g752
(S'\x07\xdf\n\x10\x0f+\x0b\x08\n\x98'
tRp7893
sa(dp7894
S'trial_loop.thisTrialN'
p7895
I108
sg6370
g6604
sS'block_loop.thisIndex'
p7896
g6364
sg38
S'right'
p7897
sg58
g62
sS'trial_loop.thisN'
p7898
I108
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p7899
g59
(g98
S'l\x00\x00\x00'
tRp7900
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7901
I0
sg6379
g6612
sS'block_loop.thisRepN'
p7902
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7903
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p7904
Nsg69
Vn
sS'block_loop.thisTrialN'
p7905
I0
sg39
F1.2000833626043459
sg34
g752
(S'\x07\xdf\n\x10\x0f+\x12\x00\x03\xe8'
tRp7906
sa(dp7907
S'trial_loop.thisTrialN'
p7908
I109
sg6370
g6797
sS'block_loop.thisIndex'
p7909
g6364
sg38
S'right'
p7910
sg58
g62
sS'trial_loop.thisN'
p7911
I109
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p7912
g59
(g98
S'm\x00\x00\x00'
tRp7913
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7914
I0
sg6379
g6805
sS'block_loop.thisRepN'
p7915
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7916
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p7917
Nsg69
Vn
sS'block_loop.thisTrialN'
p7918
I0
sg39
F1.0167637519771233
sg34
g752
(S'\x07\xdf\n\x10\x0f+\x18\x03\xadh'
tRp7919
sa(dp7920
S'trial_loop.thisTrialN'
p7921
I110
sg6370
g6842
sS'block_loop.thisIndex'
p7922
g6364
sg38
S'right'
p7923
sg58
g62
sS'trial_loop.thisN'
p7924
I110
sg33
g6521
sg63
g64
sS'trial_loop.thisIndex'
p7925
g59
(g98
S'n\x00\x00\x00'
tRp7926
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7927
I0
sg6379
g6849
sS'block_loop.thisRepN'
p7928
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7929
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p7930
Nsg69
Vn
sS'block_loop.thisTrialN'
p7931
I0
sg39
F0.90022517026227433
sg34
g752
(S'\x07\xdf\n\x10\x0f+\x1e\x04|p'
tRp7932
sa(dp7933
S'trial_loop.thisTrialN'
p7934
I111
sg6370
g6544
sS'block_loop.thisIndex'
p7935
g6364
sg38
S'left'
p7936
sg58
g62
sS'trial_loop.thisN'
p7937
I111
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p7938
g59
(g98
S'o\x00\x00\x00'
tRp7939
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7940
I0
sg6379
g6551
sS'block_loop.thisRepN'
p7941
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7942
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p7943
Nsg69
Vn
sS'block_loop.thisTrialN'
p7944
I0
sg39
F0.85058707343341666
sg34
g752
(S'\x07\xdf\n\x10\x0f+$\x03c0'
tRp7945
sa(dp7946
S'trial_loop.thisTrialN'
p7947
I112
sg6370
g6898
sS'block_loop.thisIndex'
p7948
g6364
sg38
S'right'
p7949
sg58
g62
sS'trial_loop.thisN'
p7950
I112
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p7951
g59
(g98
S'p\x00\x00\x00'
tRp7952
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7953
I0
sg6379
g6906
sS'block_loop.thisRepN'
p7954
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7955
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p7956
Nsg69
Vn
sS'block_loop.thisTrialN'
p7957
I0
sg39
F0.71677755071505089
sg34
g752
(S'\x07\xdf\n\x10\x0f+*\x01\x92X'
tRp7958
sa(dp7959
S'trial_loop.thisTrialN'
p7960
I113
sg6370
g7100
sS'block_loop.thisIndex'
p7961
g6364
sg38
S'right'
p7962
sg58
g62
sS'trial_loop.thisN'
p7963
I113
sg33
g6570
sg63
g64
sS'trial_loop.thisIndex'
p7964
g59
(g98
S'q\x00\x00\x00'
tRp7965
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7966
I0
sg6379
g7107
sS'block_loop.thisRepN'
p7967
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7968
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p7969
Nsg69
Vn
sS'block_loop.thisTrialN'
p7970
I0
sg39
F0.71687277338423883
sg34
g752
(S'\x07\xdf\n\x10\x0f+/\r\x1f`'
tRp7971
sa(dp7972
S'trial_loop.thisTrialN'
p7973
I114
sg6370
S'6-sour_patch_kids.png'
p7974
sS'block_loop.thisIndex'
p7975
g6364
sg38
S'right'
p7976
sg58
g62
sS'trial_loop.thisN'
p7977
I114
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p7978
g59
(g98
S'r\x00\x00\x00'
tRp7979
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7980
I0
sg6379
S'38-maltesers.png'
p7981
sS'block_loop.thisRepN'
p7982
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7983
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p7984
Nsg69
Vn
sS'block_loop.thisTrialN'
p7985
I0
sg39
F1.2998396609837073
sg34
g752
(S"\x07\xdf\n\x10\x0f+5\t'\xc0"
tRp7986
sa(dp7987
S'trial_loop.thisTrialN'
p7988
I115
sg6370
g6476
sS'block_loop.thisIndex'
p7989
g6364
sg38
S'left'
p7990
sg58
g62
sS'trial_loop.thisN'
p7991
I115
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p7992
g59
(g98
S's\x00\x00\x00'
tRp7993
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p7994
I0
sg6379
g6484
sS'block_loop.thisRepN'
p7995
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p7996
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p7997
Nsg69
Vn
sS'block_loop.thisTrialN'
p7998
I0
sg39
F0.86675326037948253
sg34
g752
(S'\x07\xdf\n\x10\x0f+;\x0e@p'
tRp7999
sa(dp8000
S'trial_loop.thisTrialN'
p8001
I116
sg6370
g6975
sS'block_loop.thisIndex'
p8002
g6364
sg38
S'left'
p8003
sg58
g62
sS'trial_loop.thisN'
p8004
I116
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p8005
g59
(g98
S't\x00\x00\x00'
tRp8006
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8007
I0
sg6379
g6982
sS'block_loop.thisRepN'
p8008
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8009
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p8010
Nsg69
Vn
sS'block_loop.thisTrialN'
p8011
I0
sg39
F0.70018457233163645
sg34
g752
(S'\x07\xdf\n\x10\x0f,\x05\x0c\xe8\xb0'
tRp8012
sa(dp8013
S'trial_loop.thisTrialN'
p8014
I117
sg6370
g6737
sS'block_loop.thisIndex'
p8015
g6364
sg38
S'right'
p8016
sg58
g62
sS'trial_loop.thisN'
p8017
I117
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8018
g59
(g98
S'u\x00\x00\x00'
tRp8019
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8020
I0
sg6379
g6745
sS'block_loop.thisRepN'
p8021
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8022
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8023
Nsg69
Vn
sS'block_loop.thisTrialN'
p8024
I0
sg39
F0.70014266295402194
sg34
g752
(S'\x07\xdf\n\x10\x0f,\x0b\x08\xba`'
tRp8025
sa(dp8026
S'trial_loop.thisTrialN'
p8027
I118
sg6370
g7141
sS'block_loop.thisIndex'
p8028
g6364
sg38
S'right'
p8029
sg58
g62
sS'trial_loop.thisN'
p8030
I118
sg33
g6385
sg63
g64
sS'trial_loop.thisIndex'
p8031
g59
(g98
S'v\x00\x00\x00'
tRp8032
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8033
I0
sg6379
g7148
sS'block_loop.thisRepN'
p8034
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8035
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8036
Nsg69
Vn
sS'block_loop.thisTrialN'
p8037
I0
sg39
F0.98351792467292398
sg34
g752
(S'\x07\xdf\n\x10\x0f,\x11\x04\xc6\xa8'
tRp8038
sa(dp8039
S'trial_loop.thisTrialN'
p8040
I119
sg6370
g6425
sS'block_loop.thisIndex'
p8041
g6364
sg38
S'right'
p8042
sg58
g62
sS'trial_loop.thisN'
p8043
I119
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8044
g59
(g98
S'w\x00\x00\x00'
tRp8045
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8046
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8047
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8048
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8049
Nsg69
Vn
sS'block_loop.thisTrialN'
p8050
I0
sg39
F0.63346968611949706
sg34
g752
(S'\x07\xdf\n\x10\x0f,\x17\x04\xde\x18'
tRp8051
sa(dp8052
S'trial_loop.thisTrialN'
p8053
I120
sg6370
g6827
sS'block_loop.thisIndex'
p8054
g6364
sg38
S'left'
p8055
sg58
g62
sS'trial_loop.thisN'
p8056
I120
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8057
g59
(g98
S'x\x00\x00\x00'
tRp8058
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8059
I0
sg6379
g6834
sS'block_loop.thisRepN'
p8060
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8061
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8062
Nsg69
Vn
sS'block_loop.thisTrialN'
p8063
I0
sg39
F0.63344231672817841
sg34
g752
(S'\x07\xdf\n\x10\x0f,\x1c\x0f6\x88'
tRp8064
sa(dp8065
S'trial_loop.thisTrialN'
p8066
I121
sg6370
g6510
sS'block_loop.thisIndex'
p8067
g6364
sg38
S'left'
p8068
sg58
g62
sS'trial_loop.thisN'
p8069
I121
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8070
g59
(g98
S'y\x00\x00\x00'
tRp8071
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8072
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8073
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8074
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8075
Nsg69
Vn
sS'block_loop.thisTrialN'
p8076
I0
sg39
F0.65021519183574128
sg34
g752
(S'\x07\xdf\n\x10\x0f,"\n\x12 '
tRp8077
sa(dp8078
S'trial_loop.thisTrialN'
p8079
I122
sg6370
g6677
sS'block_loop.thisIndex'
p8080
g6364
sg38
S'right'
p8081
sg58
g62
sS'trial_loop.thisN'
p8082
I122
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p8083
g59
(g98
S'z\x00\x00\x00'
tRp8084
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8085
I0
sg6379
g6684
sS'block_loop.thisRepN'
p8086
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8087
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p8088
Nsg69
Vn
sS'block_loop.thisTrialN'
p8089
I0
sg39
F0.75024832020062604
sg34
g752
(S'\x07\xdf\n\x10\x0f,(\x05(P'
tRp8090
sa(dp8091
S'trial_loop.thisTrialN'
p8092
I123
sg6370
g7182
sS'block_loop.thisIndex'
p8093
g6364
sg38
S'right'
p8094
sg58
g62
sS'trial_loop.thisN'
p8095
I123
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8096
g59
(g98
S'{\x00\x00\x00'
tRp8097
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8098
I0
sg6379
g7189
sS'block_loop.thisRepN'
p8099
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8100
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8101
Nsg69
Vn
sS'block_loop.thisTrialN'
p8102
I0
sg39
F0.58355162323641707
sg34
g752
(S'\x07\xdf\n\x10\x0f,.\x01\xec0'
tRp8103
sa(dp8104
S'trial_loop.thisTrialN'
p8105
I124
sg6370
g6459
sS'block_loop.thisIndex'
p8106
g6364
sg38
S'right'
p8107
sg58
g62
sS'trial_loop.thisN'
p8108
I124
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8109
g59
(g98
S'|\x00\x00\x00'
tRp8110
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8111
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8112
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8113
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8114
Nsg69
Vn
sS'block_loop.thisTrialN'
p8115
I0
sg39
F0.81680725790647557
sg34
g752
(S'\x07\xdf\n\x10\x0f,3\x0bRp'
tRp8116
sa(dp8117
S'trial_loop.thisTrialN'
p8118
I125
sg6370
g6559
sS'block_loop.thisIndex'
p8119
g6364
sg38
S'left'
p8120
sg58
g62
sS'trial_loop.thisN'
p8121
I125
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p8122
g59
(g98
S'}\x00\x00\x00'
tRp8123
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8124
I0
sg6379
g6567
sS'block_loop.thisRepN'
p8125
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8126
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p8127
Nsg69
Vn
sS'block_loop.thisTrialN'
p8128
I0
sg39
F0.83357899262409774
sg34
g752
(S'\x07\xdf\n\x10\x0f,9\t\x08\x80'
tRp8129
sa(dp8130
S'trial_loop.thisTrialN'
p8131
I126
sg6370
g6915
sS'block_loop.thisIndex'
p8132
g6364
sg38
S'left'
p8133
sg58
g62
sS'trial_loop.thisN'
p8134
I126
sg33
g6446
sg63
g64
sS'trial_loop.thisIndex'
p8135
g59
(g98
S'~\x00\x00\x00'
tRp8136
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8137
I0
sg6379
g6922
sS'block_loop.thisRepN'
p8138
I2
sg6382
g6446
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8139
I2
sg6384
g6453
sg55
g11
sS'block_loop.thisTrial'
p8140
Nsg69
Vn
sS'block_loop.thisTrialN'
p8141
I0
sg39
F0.81677618224421167
sg34
g752
(S'\x07\xdf\n\x10\x0f-\x03\x06\xf9('
tRp8142
sa(dp8143
S'trial_loop.thisTrialN'
p8144
I127
sg6370
g6527
sS'block_loop.thisIndex'
p8145
g6364
sg38
S'left'
p8146
sg58
g62
sS'trial_loop.thisN'
p8147
I127
sg33
g6538
sg63
g64
sS'trial_loop.thisIndex'
p8148
g59
(g98
S'\x7f\x00\x00\x00'
tRp8149
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8150
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8151
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8152
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8153
Nsg69
Vn
sS'block_loop.thisTrialN'
p8154
I0
sg39
F0.90018354597850703
sg34
g752
(S'\x07\xdf\n\x10\x0f-\t\x04\xaf8'
tRp8155
sa(dp8156
S'trial_loop.thisTrialN'
p8157
I128
sg6370
g6797
sS'block_loop.thisIndex'
p8158
g6364
sg38
S'right'
p8159
sg58
g62
sS'trial_loop.thisN'
p8160
I128
sg33
g6808
sg63
g64
sS'trial_loop.thisIndex'
p8161
g59
(g98
S'\x80\x00\x00\x00'
tRp8162
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8163
I0
sg6379
g6805
sS'block_loop.thisRepN'
p8164
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8165
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p8166
Nsg69
Vn
sS'block_loop.thisTrialN'
p8167
I0
sg39
F0.83353793853893876
sg34
g752
(S'\x07\xdf\n\x10\x0f-\x0f\x03\x95\xf8'
tRp8168
sa(dp8169
S'trial_loop.thisTrialN'
p8170
I129
sg6370
g7974
sS'block_loop.thisIndex'
p8171
g6364
sg38
S'right'
p8172
sg58
g62
sS'trial_loop.thisN'
p8173
I129
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8174
g59
(g98
S'\x81\x00\x00\x00'
tRp8175
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8176
I0
sg6379
g7981
sS'block_loop.thisRepN'
p8177
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8178
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8179
Nsg69
Vn
sS'block_loop.thisTrialN'
p8180
I0
sg39
F1.4164991241814278
sg34
g752
(S'\x07\xdf\n\x10\x0f-\x15\x01\x8a\x88'
tRp8181
sa(dp8182
S'trial_loop.thisTrialN'
p8183
I130
sg6370
g6425
sS'block_loop.thisIndex'
p8184
g6364
sg38
S'right'
p8185
sg58
g62
sS'trial_loop.thisN'
p8186
I130
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8187
g59
(g98
S'\x82\x00\x00\x00'
tRp8188
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8189
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8190
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8191
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8192
Nsg69
Vn
sS'block_loop.thisTrialN'
p8193
I0
sg39
F0.63346369906503242
sg34
g752
(S'\x07\xdf\n\x10\x0f-\x1b\x08\x87\x98'
tRp8194
sa(dp8195
S'trial_loop.thisTrialN'
p8196
I131
sg6370
g7569
sS'block_loop.thisIndex'
p8197
g6364
sg38
S'left'
p8198
sg58
g62
sS'trial_loop.thisN'
p8199
I131
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p8200
g59
(g98
S'\x83\x00\x00\x00'
tRp8201
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8202
I0
sg6379
g7576
sS'block_loop.thisRepN'
p8203
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8204
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p8205
Nsg69
Vn
sS'block_loop.thisTrialN'
p8206
I0
sg39
F1.2001760193961672
sg34
g752
(S'\x07\xdf\n\x10\x0f-!\x03c0'
tRp8207
sa(dp8208
S'trial_loop.thisTrialN'
p8209
I132
sg6370
g6459
sS'block_loop.thisIndex'
p8210
g6364
sg38
S'right'
p8211
sg58
g62
sS'trial_loop.thisN'
p8212
I132
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8213
g59
(g98
S'\x84\x00\x00\x00'
tRp8214
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8215
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8216
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8217
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8218
Nsg69
Vn
sS'block_loop.thisTrialN'
p8219
I0
sg39
F0.80010252117790515
sg34
g752
(S"\x07\xdf\n\x10\x0f-'\x07\x0c\xb0"
tRp8220
sa(dp8221
S'trial_loop.thisTrialN'
p8222
I133
sg6370
g7141
sS'block_loop.thisIndex'
p8223
g6364
sg38
S'right'
p8224
sg58
g62
sS'trial_loop.thisN'
p8225
I133
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8226
g59
(g98
S'\x85\x00\x00\x00'
tRp8227
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8228
I0
sg6379
g7148
sS'block_loop.thisRepN'
p8229
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8230
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8231
Nsg69
Vn
sS'block_loop.thisTrialN'
p8232
I0
sg39
F0.73352619250727003
sg34
g752
(S'\x07\xdf\n\x10\x0f--\x04\x88('
tRp8233
sa(dp8234
S'trial_loop.thisTrialN'
p8235
I134
sg6370
g6493
sS'block_loop.thisIndex'
p8236
g6364
sg38
S'left'
p8237
sg58
g62
sS'trial_loop.thisN'
p8238
I134
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p8239
g59
(g98
S'\x86\x00\x00\x00'
tRp8240
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8241
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8242
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8243
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8244
Nsg69
Vn
sS'block_loop.thisTrialN'
p8245
I0
sg39
F1.2164958740650036
sg34
g752
(S'\x07\xdf\n\x10\x0f-3\x00\xcf\x08'
tRp8246
sa(dp8247
S'trial_loop.thisTrialN'
p8248
I135
sg6370
g6898
sS'block_loop.thisIndex'
p8249
g6364
sg38
S'right'
p8250
sg58
g62
sS'trial_loop.thisN'
p8251
I135
sg33
g6902
sg63
g64
sS'trial_loop.thisIndex'
p8252
g59
(g98
S'\x87\x00\x00\x00'
tRp8253
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8254
I0
sg6379
g6906
sS'block_loop.thisRepN'
p8255
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8256
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p8257
Nsg69
Vn
sS'block_loop.thisTrialN'
p8258
I0
sg39
F0.56677760773163754
sg34
g752
(S'\x07\xdf\n\x10\x0f-9\x04\xb7\x08'
tRp8259
sa(dp8260
S'trial_loop.thisTrialN'
p8261
I136
sg6370
g7476
sS'block_loop.thisIndex'
p8262
g6364
sg38
S'right'
p8263
sg58
g62
sS'trial_loop.thisN'
p8264
I136
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8265
g59
(g98
S'\x88\x00\x00\x00'
tRp8266
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8267
I0
sg6379
g7483
sS'block_loop.thisRepN'
p8268
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8269
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8270
Nsg69
Vn
sS'block_loop.thisTrialN'
p8271
I0
sg39
F1.1166876878778567
sg34
g752
(S'\x07\xdf\n\x10\x0f.\x02\r\xde\xc8'
tRp8272
sa(dp8273
S'trial_loop.thisTrialN'
p8274
I137
sg6370
g6493
sS'block_loop.thisIndex'
p8275
g6364
sg38
S'left'
p8276
sg58
g62
sS'trial_loop.thisN'
p8277
I137
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8278
g59
(g98
S'\x89\x00\x00\x00'
tRp8279
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8280
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8281
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8282
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8283
Nsg69
Vn
sS'block_loop.thisTrialN'
p8284
I0
sg39
F1.0498356696152769
sg34
g752
(S'\x07\xdf\n\x10\x0f.\t\x00\xd6\xd8'
tRp8285
sa(dp8286
S'trial_loop.thisTrialN'
p8287
I138
sg6370
g6720
sS'block_loop.thisIndex'
p8288
g6364
sg38
S'left'
p8289
sg58
g62
sS'trial_loop.thisN'
p8290
I138
sg33
g6731
sg63
g64
sS'trial_loop.thisIndex'
p8291
g59
(g98
S'\x8a\x00\x00\x00'
tRp8292
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8293
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8294
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8295
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8296
Nsg69
Vn
sS'block_loop.thisTrialN'
p8297
I0
sg39
F0.70020053780899616
sg34
g752
(S'\x07\xdf\n\x10\x0f.\x0f\x02"\xe0'
tRp8298
sa(dp8299
S'trial_loop.thisTrialN'
p8300
I139
sg6370
g7569
sS'block_loop.thisIndex'
p8301
g6364
sg38
S'left'
p8302
sg58
g62
sS'trial_loop.thisN'
p8303
I139
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p8304
g59
(g98
S'\x8b\x00\x00\x00'
tRp8305
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8306
I0
sg6379
g7576
sS'block_loop.thisRepN'
p8307
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8308
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p8309
Nsg69
Vn
sS'block_loop.thisTrialN'
p8310
I0
sg39
F1.2338819945907744
sg34
g752
(S'\x07\xdf\n\x10\x0f.\x14\r2\xe8'
tRp8311
sa(dp8312
S'trial_loop.thisTrialN'
p8313
I140
sg6370
g7042
sS'block_loop.thisIndex'
p8314
g6364
sg38
S'left'
p8315
sg58
g62
sS'trial_loop.thisN'
p8316
I140
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p8317
g59
(g98
S'\x8c\x00\x00\x00'
tRp8318
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8319
I0
sg6379
g7050
sS'block_loop.thisRepN'
p8320
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8321
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p8322
Nsg69
Vn
sS'block_loop.thisTrialN'
p8323
I0
sg39
F1.2001315441339102
sg34
g752
(S'\x07\xdf\n\x10\x0f.\x1b\x02\x13@'
tRp8324
sa(dp8325
S'trial_loop.thisTrialN'
p8326
I141
sg6370
g6493
sS'block_loop.thisIndex'
p8327
g6364
sg38
S'left'
p8328
sg58
g62
sS'trial_loop.thisN'
p8329
I141
sg33
g6497
sg63
g64
sS'trial_loop.thisIndex'
p8330
g59
(g98
S'\x8d\x00\x00\x00'
tRp8331
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8332
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8333
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8334
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8335
Nsg69
Vn
sS'block_loop.thisTrialN'
p8336
I0
sg39
F1.2831540258084715
sg34
g752
(S'\x07\xdf\n\x10\x0f.!\x05\xbc\xc0'
tRp8337
sa(dp8338
S'trial_loop.thisTrialN'
p8339
I142
sg6370
g6898
sS'block_loop.thisIndex'
p8340
g6364
sg38
S'right'
p8341
sg58
g62
sS'trial_loop.thisN'
p8342
I142
sg33
g6909
sg63
g64
sS'trial_loop.thisIndex'
p8343
g59
(g98
S'\x8e\x00\x00\x00'
tRp8344
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8345
I0
sg6379
g6906
sS'block_loop.thisRepN'
p8346
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8347
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p8348
Nsg69
Vn
sS'block_loop.thisTrialN'
p8349
I0
sg39
F1.6668355396104744
sg34
g752
(S"\x07\xdf\n\x10\x0f.'\n\x96\xf0"
tRp8350
sa(dp8351
S'trial_loop.thisTrialN'
p8352
I143
sg6370
g7476
sS'block_loop.thisIndex'
p8353
g6364
sg38
S'right'
p8354
sg58
g62
sS'trial_loop.thisN'
p8355
I143
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8356
g59
(g98
S'\x8f\x00\x00\x00'
tRp8357
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8358
I0
sg6379
g7483
sS'block_loop.thisRepN'
p8359
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8360
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8361
Nsg69
Vn
sS'block_loop.thisTrialN'
p8362
I0
sg39
F0.73339818358363118
sg34
g752
(S'\x07\xdf\n\x10\x0f..\x05\xe3\xd0'
tRp8363
sa(dp8364
S'trial_loop.thisTrialN'
p8365
I144
sg6370
g6883
sS'block_loop.thisIndex'
p8366
g6364
sg38
S'left'
p8367
sg58
g62
sS'trial_loop.thisN'
p8368
I144
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8369
g59
(g98
S'\x90\x00\x00\x00'
tRp8370
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8371
I0
sg6379
g6890
sS'block_loop.thisRepN'
p8372
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8373
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8374
Nsg69
Vn
sS'block_loop.thisTrialN'
p8375
I0
sg39
F0.95024672365616425
sg34
g752
(S'\x07\xdf\n\x10\x0f.4\x02i0'
tRp8376
sa(dp8377
S'trial_loop.thisTrialN'
p8378
I145
sg6370
g6647
sS'block_loop.thisIndex'
p8379
g6364
sg38
S'left'
p8380
sg58
g62
sS'trial_loop.thisN'
p8381
I145
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p8382
g59
(g98
S'\x91\x00\x00\x00'
tRp8383
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8384
I0
sg6379
g6655
sS'block_loop.thisRepN'
p8385
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8386
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p8387
Nsg69
Vn
sS'block_loop.thisTrialN'
p8388
I0
sg39
F1.2167886695278867
sg34
g752
(S'\x07\xdf\n\x10\x0f.:\x02\x07\x88'
tRp8389
sa(dp8390
S'trial_loop.thisTrialN'
p8391
I146
sg6370
g7476
sS'block_loop.thisIndex'
p8392
g6364
sg38
S'right'
p8393
sg58
g62
sS'trial_loop.thisN'
p8394
I146
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8395
g59
(g98
S'\x92\x00\x00\x00'
tRp8396
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8397
I0
sg6379
g7483
sS'block_loop.thisRepN'
p8398
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8399
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8400
Nsg69
Vn
sS'block_loop.thisTrialN'
p8401
I0
sg39
F0.56677247597326641
sg34
g752
(S'\x07\xdf\n\x10\x0f/\x04\x05\xef\x88'
tRp8402
sa(dp8403
S'trial_loop.thisTrialN'
p8404
I147
sg6370
g7461
sS'block_loop.thisIndex'
p8405
g6364
sg38
S'left'
p8406
sg58
g62
sS'trial_loop.thisN'
p8407
I147
sg33
g6902
sg63
g64
sS'trial_loop.thisIndex'
p8408
g59
(g98
S'\x93\x00\x00\x00'
tRp8409
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8410
I0
sg6379
g7468
sS'block_loop.thisRepN'
p8411
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8412
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p8413
Nsg69
Vn
sS'block_loop.thisTrialN'
p8414
I0
sg39
F0.7499700647276768
sg34
g752
(S'\x07\xdf\n\x10\x0f/\t\x0f\x17H'
tRp8415
sa(dp8416
S'trial_loop.thisTrialN'
p8417
I148
sg6370
g6510
sS'block_loop.thisIndex'
p8418
g6364
sg38
S'left'
p8419
sg58
g62
sS'trial_loop.thisN'
p8420
I148
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8421
g59
(g98
S'\x94\x00\x00\x00'
tRp8422
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8423
I0
sg6379
g6518
sS'block_loop.thisRepN'
p8424
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8425
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8426
Nsg69
Vn
sS'block_loop.thisTrialN'
p8427
I0
sg39
F0.80008912158154999
sg34
g752
(S'\x07\xdf\n\x10\x0f/\x0f\x0b\xdb('
tRp8428
sa(dp8429
S'trial_loop.thisTrialN'
p8430
I149
sg6370
g7059
sS'block_loop.thisIndex'
p8431
g6364
sg38
S'left'
p8432
sg58
g62
sS'trial_loop.thisN'
p8433
I149
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8434
g59
(g98
S'\x95\x00\x00\x00'
tRp8435
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8436
I0
sg6379
g7066
sS'block_loop.thisRepN'
p8437
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8438
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8439
Nsg69
Vn
sS'block_loop.thisTrialN'
p8440
I0
sg39
F0.93351404733766685
sg34
g752
(S'\x07\xdf\n\x10\x0f/\x15\tR\xb8'
tRp8441
sa(dp8442
S'trial_loop.thisTrialN'
p8443
I150
sg6370
g6737
sS'block_loop.thisIndex'
p8444
g6364
sg38
S'right'
p8445
sg58
g62
sS'trial_loop.thisN'
p8446
I150
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8447
g59
(g98
S'\x96\x00\x00\x00'
tRp8448
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8449
I0
sg6379
g6745
sS'block_loop.thisRepN'
p8450
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8451
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8452
Nsg69
Vn
sS'block_loop.thisTrialN'
p8453
I0
sg39
F1.1501909585203975
sg34
g752
(S'\x07\xdf\n\x10\x0f/\x1b\x08\xb2\x90'
tRp8454
sa(dp8455
S'trial_loop.thisTrialN'
p8456
I151
sg6370
g6947
sS'block_loop.thisIndex'
p8457
g6364
sg38
S'right'
p8458
sg58
g62
sS'trial_loop.thisN'
p8459
I151
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8460
g59
(g98
S'\x97\x00\x00\x00'
tRp8461
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8462
I0
sg6379
g6954
sS'block_loop.thisRepN'
p8463
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8464
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8465
Nsg69
Vn
sS'block_loop.thisTrialN'
p8466
I0
sg39
F1.0834253248976893
sg34
g752
(S'\x07\xdf\n\x10\x0f/!\x0bi\xe0'
tRp8467
sa(dp8468
S'trial_loop.thisTrialN'
p8469
I152
sg6370
g7476
sS'block_loop.thisIndex'
p8470
g6364
sg38
S'right'
p8471
sg58
g62
sS'trial_loop.thisN'
p8472
I152
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8473
g59
(g98
S'\x98\x00\x00\x00'
tRp8474
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8475
I0
sg6379
g7483
sS'block_loop.thisRepN'
p8476
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8477
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8478
Nsg69
Vn
sS'block_loop.thisTrialN'
p8479
I0
sg39
F1.0334043416987697
sg34
g752
(S"\x07\xdf\n\x10\x0f/'\ri\x98"
tRp8480
sa(dp8481
S'trial_loop.thisTrialN'
p8482
I153
sg6370
g6827
sS'block_loop.thisIndex'
p8483
g6364
sg38
S'left'
p8484
sg58
g62
sS'trial_loop.thisN'
p8485
I153
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p8486
g59
(g98
S'\x99\x00\x00\x00'
tRp8487
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8488
I0
sg6379
g6834
sS'block_loop.thisRepN'
p8489
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8490
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p8491
Nsg69
Vn
sS'block_loop.thisTrialN'
p8492
I0
sg39
F0.75019757279005717
sg34
g752
(S'\x07\xdf\n\x10\x0f/-\x0e8\xa0'
tRp8493
sa(dp8494
S'trial_loop.thisTrialN'
p8495
I154
sg6370
g6842
sS'block_loop.thisIndex'
p8496
g6364
sg38
S'right'
p8497
sg58
g62
sS'trial_loop.thisN'
p8498
I154
sg33
g6514
sg63
g64
sS'trial_loop.thisIndex'
p8499
g59
(g98
S'\x9a\x00\x00\x00'
tRp8500
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8501
I0
sg6379
g6849
sS'block_loop.thisRepN'
p8502
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8503
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8504
Nsg69
Vn
sS'block_loop.thisTrialN'
p8505
I0
sg39
F0.65020036674832227
sg34
g752
(S'\x07\xdf\n\x10\x0f/3\n\xf8\x98'
tRp8506
sa(dp8507
S'trial_loop.thisTrialN'
p8508
I155
sg6370
g7569
sS'block_loop.thisIndex'
p8509
g6364
sg38
S'left'
p8510
sg58
g62
sS'trial_loop.thisN'
p8511
I155
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p8512
g59
(g98
S'\x9b\x00\x00\x00'
tRp8513
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8514
I0
sg6379
g7576
sS'block_loop.thisRepN'
p8515
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8516
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p8517
Nsg69
Vn
sS'block_loop.thisTrialN'
p8518
I0
sg39
F1.1668458031308546
sg34
g752
(S'\x07\xdf\n\x10\x0f/9\x06\x12\xb0'
tRp8519
sa(dp8520
S'trial_loop.thisTrialN'
p8521
I156
sg6370
g6677
sS'block_loop.thisIndex'
p8522
g6364
sg38
S'right'
p8523
sg58
g62
sS'trial_loop.thisN'
p8524
I156
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p8525
g59
(g98
S'\x9c\x00\x00\x00'
tRp8526
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8527
I0
sg6379
g6684
sS'block_loop.thisRepN'
p8528
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8529
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p8530
Nsg69
Vn
sS'block_loop.thisTrialN'
p8531
I0
sg39
F0.8668758524399891
sg34
g752
(S'\x07\xdf\n\x10\x0f0\x03\t?0'
tRp8532
sa(dp8533
S'trial_loop.thisTrialN'
p8534
I157
sg6370
g6797
sS'block_loop.thisIndex'
p8535
g6364
sg38
S'right'
p8536
sg58
g62
sS'trial_loop.thisN'
p8537
I157
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p8538
g59
(g98
S'\x9d\x00\x00\x00'
tRp8539
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8540
I0
sg6379
g6805
sS'block_loop.thisRepN'
p8541
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8542
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p8543
Nsg69
Vn
sS'block_loop.thisTrialN'
p8544
I0
sg39
F1.2001945507545315
sg34
g752
(S'\x07\xdf\n\x10\x0f0\t\x07\xac\xd8'
tRp8545
sa(dp8546
S'trial_loop.thisTrialN'
p8547
I158
sg6370
g6705
sS'block_loop.thisIndex'
p8548
g6364
sg38
S'right'
p8549
sg58
g62
sS'trial_loop.thisN'
p8550
I158
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8551
g59
(g98
S'\x9e\x00\x00\x00'
tRp8552
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8553
I0
sg6379
g6712
sS'block_loop.thisRepN'
p8554
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8555
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8556
Nsg69
Vn
sS'block_loop.thisTrialN'
p8557
I0
sg39
F0.6334981959007564
sg34
g752
(S'\x07\xdf\n\x10\x0f0\x0f\x0bVX'
tRp8558
sa(dp8559
S'trial_loop.thisTrialN'
p8560
I159
sg6370
g7974
sS'block_loop.thisIndex'
p8561
g6364
sg38
S'right'
p8562
sg58
g62
sS'trial_loop.thisN'
p8563
I159
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p8564
g59
(g98
S'\x9f\x00\x00\x00'
tRp8565
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8566
I0
sg6379
g7981
sS'block_loop.thisRepN'
p8567
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8568
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8569
Nsg69
Vn
sS'block_loop.thisTrialN'
p8570
I0
sg39
F1.8331476396197104
sg34
g752
(S'\x07\xdf\n\x10\x0f0\x15\x061\xf0'
tRp8571
sa(dp8572
S'trial_loop.thisTrialN'
p8573
I160
sg6370
g6647
sS'block_loop.thisIndex'
p8574
g6364
sg38
S'left'
p8575
sg58
g62
sS'trial_loop.thisN'
p8576
I160
sg33
g6651
sg63
g64
sS'trial_loop.thisIndex'
p8577
g59
(g98
S'\xa0\x00\x00\x00'
tRp8578
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8579
I0
sg6379
g6655
sS'block_loop.thisRepN'
p8580
I2
sg6382
g6651
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8581
I2
sg6384
g6658
sg55
g11
sS'block_loop.thisTrial'
p8582
Nsg69
Vn
sS'block_loop.thisTrialN'
p8583
I0
sg39
F0.81684517591565964
sg34
g752
(S'\x07\xdf\n\x10\x0f0\x1c\x04\x1e\xb0'
tRp8584
sa(dp8585
S'trial_loop.thisTrialN'
p8586
I161
sg6370
g6391
sS'block_loop.thisIndex'
p8587
g6364
sg38
S'left'
p8588
sg58
g62
sS'trial_loop.thisN'
p8589
I161
sg33
g6395
sg63
g64
sS'trial_loop.thisIndex'
p8590
g59
(g98
S'\xa1\x00\x00\x00'
tRp8591
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8592
I0
sg6379
g6399
sS'block_loop.thisRepN'
p8593
I2
sg6382
g6395
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8594
I2
sg6384
g6402
sg55
g11
sS'block_loop.thisTrial'
p8595
Nsg69
Vn
sS'block_loop.thisTrialN'
p8596
I0
sg39
F0.88342350027232897
sg34
g752
(S'\x07\xdf\n\x10\x0f0"\x01\xd4\xc0'
tRp8597
sa(dp8598
S'trial_loop.thisTrialN'
p8599
I162
sg6370
g7059
sS'block_loop.thisIndex'
p8600
g6364
sg38
S'left'
p8601
sg58
g62
sS'trial_loop.thisN'
p8602
I162
sg33
g6608
sg63
g64
sS'trial_loop.thisIndex'
p8603
g59
(g98
S'\xa2\x00\x00\x00'
tRp8604
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8605
I0
sg6379
g7066
sS'block_loop.thisRepN'
p8606
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8607
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8608
Nsg69
Vn
sS'block_loop.thisTrialN'
p8609
I0
sg39
F1.1335232845085557
sg34
g752
(S'\x07\xdf\n\x10\x0f0(\x00\x80\xe8'
tRp8610
sa(dp8611
S'trial_loop.thisTrialN'
p8612
I163
sg6370
g6720
sS'block_loop.thisIndex'
p8613
g6364
sg38
S'left'
p8614
sg58
g62
sS'trial_loop.thisN'
p8615
I163
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8616
g59
(g98
S'\xa3\x00\x00\x00'
tRp8617
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8618
I0
sg6379
g6728
sS'block_loop.thisRepN'
p8619
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8620
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8621
Nsg69
Vn
sS'block_loop.thisTrialN'
p8622
I0
sg39
F0.68351803870973527
sg34
g752
(S'\x07\xdf\n\x10\x0f0.\x034P'
tRp8623
sa(dp8624
S'trial_loop.thisTrialN'
p8625
I164
sg6370
g6930
sS'block_loop.thisIndex'
p8626
g6364
sg38
S'right'
p8627
sg58
g62
sS'trial_loop.thisN'
p8628
I164
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p8629
g59
(g98
S'\xa4\x00\x00\x00'
tRp8630
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8631
I0
sg6379
g6938
sS'block_loop.thisRepN'
p8632
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8633
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p8634
Nsg69
Vn
sS'block_loop.thisTrialN'
p8635
I0
sg39
F1.1335247099959815
sg34
g752
(S'\x07\xdf\n\x10\x0f03\x0e\t\xc0'
tRp8636
sa(dp8637
S'trial_loop.thisTrialN'
p8638
I165
sg6370
g6975
sS'block_loop.thisIndex'
p8639
g6364
sg38
S'left'
p8640
sg58
g62
sS'trial_loop.thisN'
p8641
I165
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p8642
g59
(g98
S'\xa5\x00\x00\x00'
tRp8643
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8644
I0
sg6379
g6982
sS'block_loop.thisRepN'
p8645
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8646
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p8647
Nsg69
Vn
sS'block_loop.thisTrialN'
p8648
I0
sg39
F0.6167643791923183
sg34
g752
(S'\x07\xdf\n\x10\x0f0:\x01@P'
tRp8649
sa(dp8650
S'trial_loop.thisTrialN'
p8651
I166
sg6370
g7316
sS'block_loop.thisIndex'
p8652
g6364
sg38
S'right'
p8653
sg58
g62
sS'trial_loop.thisN'
p8654
I166
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p8655
g59
(g98
S'\xa6\x00\x00\x00'
tRp8656
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8657
I0
sg6379
g7323
sS'block_loop.thisRepN'
p8658
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8659
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p8660
Nsg69
Vn
sS'block_loop.thisTrialN'
p8661
I0
sg39
F0.73345634353972855
sg34
g752
(S'\x07\xdf\n\x10\x0f1\x03\x0b^('
tRp8662
sa(dp8663
S'trial_loop.thisTrialN'
p8664
I167
sg6370
g6544
sS'block_loop.thisIndex'
p8665
g6364
sg38
S'left'
p8666
sg58
g62
sS'trial_loop.thisN'
p8667
I167
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8668
g59
(g98
S'\xa7\x00\x00\x00'
tRp8669
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8670
I0
sg6379
g6551
sS'block_loop.thisRepN'
p8671
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8672
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8673
Nsg69
Vn
sS'block_loop.thisTrialN'
p8674
I0
sg39
F0.60047759587178007
sg34
g752
(S'\x07\xdf\n\x10\x0f1\t\x07\xa5\x08'
tRp8675
sa(dp8676
S'trial_loop.thisTrialN'
p8677
I168
sg6370
g6527
sS'block_loop.thisIndex'
p8678
g6364
sg38
S'left'
p8679
sg58
g62
sS'trial_loop.thisN'
p8680
I168
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8681
g59
(g98
S'\xa8\x00\x00\x00'
tRp8682
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8683
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8684
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8685
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8686
Nsg69
Vn
sS'block_loop.thisTrialN'
p8687
I0
sg39
F0.85014089534524828
sg34
g752
(S'\x07\xdf\n\x10\x0f1\x0f\x02\x07\x88'
tRp8688
sa(dp8689
S'trial_loop.thisTrialN'
p8690
I169
sg6370
g7316
sS'block_loop.thisIndex'
p8691
g6364
sg38
S'right'
p8692
sg58
g62
sS'trial_loop.thisN'
p8693
I169
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p8694
g59
(g98
S'\xa9\x00\x00\x00'
tRp8695
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8696
I0
sg6379
g7323
sS'block_loop.thisRepN'
p8697
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8698
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p8699
Nsg69
Vn
sS'block_loop.thisTrialN'
p8700
I0
sg39
F1.1334685457295564
sg34
g752
(S'\x07\xdf\n\x10\x0f1\x15\x006\xb0'
tRp8701
sa(dp8702
S'trial_loop.thisTrialN'
p8703
I170
sg6370
g6898
sS'block_loop.thisIndex'
p8704
g6364
sg38
S'right'
p8705
sg58
g62
sS'trial_loop.thisN'
p8706
I170
sg33
g6902
sg63
g64
sS'trial_loop.thisIndex'
p8707
g59
(g98
S'\xaa\x00\x00\x00'
tRp8708
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8709
I0
sg6379
g6906
sS'block_loop.thisRepN'
p8710
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8711
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p8712
Nsg69
Vn
sS'block_loop.thisTrialN'
p8713
I0
sg39
F0.73357865050638793
sg34
g752
(S'\x07\xdf\n\x10\x0f1\x1b\x02\xea\x18'
tRp8714
sa(dp8715
S'trial_loop.thisTrialN'
p8716
I171
sg6370
g6754
sS'block_loop.thisIndex'
p8717
g6364
sg38
S'right'
p8718
sg58
g62
sS'trial_loop.thisN'
p8719
I171
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p8720
g59
(g98
S'\xab\x00\x00\x00'
tRp8721
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8722
I0
sg6379
g6762
sS'block_loop.thisRepN'
p8723
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8724
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p8725
Nsg69
Vn
sS'block_loop.thisTrialN'
p8726
I0
sg39
F1.4000874680132256
sg34
g752
(S'\x07\xdf\n\x10\x0f1 \x0ew '
tRp8727
sa(dp8728
S'trial_loop.thisTrialN'
p8729
I172
sg6370
g6493
sS'block_loop.thisIndex'
p8730
g6364
sg38
S'left'
p8731
sg58
g62
sS'trial_loop.thisN'
p8732
I172
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p8733
g59
(g98
S'\xac\x00\x00\x00'
tRp8734
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8735
I0
sg6379
g6501
sS'block_loop.thisRepN'
p8736
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8737
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8738
Nsg69
Vn
sS'block_loop.thisTrialN'
p8739
I0
sg39
F1.216960298417689
sg34
g752
(S"\x07\xdf\n\x10\x0f1'\x05\xf7X"
tRp8740
sa(dp8741
S'trial_loop.thisTrialN'
p8742
I173
sg6370
g6371
sS'block_loop.thisIndex'
p8743
g6364
sg38
S'left'
p8744
sg58
g62
sS'trial_loop.thisN'
p8745
I173
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8746
g59
(g98
S'\xad\x00\x00\x00'
tRp8747
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8748
I0
sg6379
g6380
sS'block_loop.thisRepN'
p8749
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8750
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8751
Nsg69
Vn
sS'block_loop.thisTrialN'
p8752
I0
sg39
F1.0000889505208761
sg34
g752
(S'\x07\xdf\n\x10\x0f1-\t\xa0\xd8'
tRp8753
sa(dp8754
S'trial_loop.thisTrialN'
p8755
I174
sg6370
g6754
sS'block_loop.thisIndex'
p8756
g6364
sg38
S'right'
p8757
sg58
g62
sS'trial_loop.thisN'
p8758
I174
sg33
g6758
sg63
g64
sS'trial_loop.thisIndex'
p8759
g59
(g98
S'\xae\x00\x00\x00'
tRp8760
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8761
I0
sg6379
g6762
sS'block_loop.thisRepN'
p8762
I2
sg6382
g6758
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8763
I2
sg6384
g6765
sg55
g11
sS'block_loop.thisTrial'
p8764
Nsg69
Vn
sS'block_loop.thisTrialN'
p8765
I0
sg39
F0.68353599987312919
sg34
g752
(S'\x07\xdf\n\x10\x0f13\n1`'
tRp8766
sa(dp8767
S'trial_loop.thisTrialN'
p8768
I175
sg6370
g7141
sS'block_loop.thisIndex'
p8769
g6364
sg38
S'right'
p8770
sg58
g62
sS'trial_loop.thisN'
p8771
I175
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8772
g59
(g98
S'\xaf\x00\x00\x00'
tRp8773
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8774
I0
sg6379
g7148
sS'block_loop.thisRepN'
p8775
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8776
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8777
Nsg69
Vn
sS'block_loop.thisTrialN'
p8778
I0
sg39
F0.98344151845230954
sg34
g752
(S'\x07\xdf\n\x10\x0f19\x05\xff('
tRp8779
sa(dp8780
S'trial_loop.thisTrialN'
p8781
I176
sg6370
g7974
sS'block_loop.thisIndex'
p8782
g6364
sg38
S'right'
p8783
sg58
g62
sS'trial_loop.thisN'
p8784
I176
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p8785
g59
(g98
S'\xb0\x00\x00\x00'
tRp8786
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8787
I0
sg6379
g7981
sS'block_loop.thisRepN'
p8788
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8789
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8790
Nsg69
Vn
sS'block_loop.thisTrialN'
p8791
I0
sg39
F0.98319975550111849
sg34
g752
(S'\x07\xdf\n\x10\x0f2\x03\x06\x16\x98'
tRp8792
sa(dp8793
S'trial_loop.thisTrialN'
p8794
I177
sg6370
g6842
sS'block_loop.thisIndex'
p8795
g6364
sg38
S'right'
p8796
sg58
g62
sS'trial_loop.thisN'
p8797
I177
sg33
g6521
sg63
g64
sS'trial_loop.thisIndex'
p8798
g59
(g98
S'\xb1\x00\x00\x00'
tRp8799
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8800
I0
sg6379
g6849
sS'block_loop.thisRepN'
p8801
I2
sg6382
g6514
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8802
I2
sg6384
g6521
sg55
g11
sS'block_loop.thisTrial'
p8803
Nsg69
Vn
sS'block_loop.thisTrialN'
p8804
I0
sg39
F0.63344003594465903
sg34
g752
(S'\x07\xdf\n\x10\x0f2\t\x06l\x88'
tRp8805
sa(dp8806
S'trial_loop.thisTrialN'
p8807
I178
sg6370
g6544
sS'block_loop.thisIndex'
p8808
g6364
sg38
S'left'
p8809
sg58
g62
sS'trial_loop.thisN'
p8810
I178
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8811
g59
(g98
S'\xb2\x00\x00\x00'
tRp8812
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8813
I0
sg6379
g6551
sS'block_loop.thisRepN'
p8814
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8815
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8816
Nsg69
Vn
sS'block_loop.thisTrialN'
p8817
I0
sg39
F0.6338902054085338
sg34
g752
(S'\x07\xdf\n\x10\x0f2\x0f\x01H '
tRp8818
sa(dp8819
S'trial_loop.thisTrialN'
p8820
I179
sg6370
g7141
sS'block_loop.thisIndex'
p8821
g6364
sg38
S'right'
p8822
sg58
g62
sS'trial_loop.thisN'
p8823
I179
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p8824
g59
(g98
S'\xb3\x00\x00\x00'
tRp8825
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8826
I0
sg6379
g7148
sS'block_loop.thisRepN'
p8827
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8828
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p8829
Nsg69
Vn
sS'block_loop.thisTrialN'
p8830
I0
sg39
F0.66681529766719905
sg34
g752
(S'\x07\xdf\n\x10\x0f2\x14\x0bb\x10'
tRp8831
sa(dp8832
S'trial_loop.thisTrialN'
p8833
I180
sg6370
g6408
sS'block_loop.thisIndex'
p8834
g6364
sg38
S'left'
p8835
sg58
g62
sS'trial_loop.thisN'
p8836
I180
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p8837
g59
(g98
S'\xb4\x00\x00\x00'
tRp8838
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8839
I0
sg6379
g6416
sS'block_loop.thisRepN'
p8840
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8841
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p8842
Nsg69
Vn
sS'block_loop.thisTrialN'
p8843
I0
sg39
F0.75018730926967692
sg34
g752
(S'\x07\xdf\n\x10\x0f2\x1a\x06\xf5@'
tRp8844
sa(dp8845
S'trial_loop.thisTrialN'
p8846
I181
sg6370
g7974
sS'block_loop.thisIndex'
p8847
g6364
sg38
S'right'
p8848
sg58
g62
sS'trial_loop.thisN'
p8849
I181
sg33
g6503
sg63
g64
sS'trial_loop.thisIndex'
p8850
g59
(g98
S'\xb5\x00\x00\x00'
tRp8851
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8852
I0
sg6379
g7981
sS'block_loop.thisRepN'
p8853
I2
sg6382
g6503
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8854
I2
sg6384
g6497
sg55
g11
sS'block_loop.thisTrial'
p8855
Nsg69
Vn
sS'block_loop.thisTrialN'
p8856
I0
sg39
F1.1498613854382711
sg34
g752
(S'\x07\xdf\n\x10\x0f2 \x03\xb9 '
tRp8857
sa(dp8858
S'trial_loop.thisTrialN'
p8859
I182
sg6370
g7100
sS'block_loop.thisIndex'
p8860
g6364
sg38
S'right'
p8861
sg58
g62
sS'trial_loop.thisN'
p8862
I182
sg33
g6570
sg63
g64
sS'trial_loop.thisIndex'
p8863
g59
(g98
S'\xb6\x00\x00\x00'
tRp8864
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8865
I0
sg6379
g7107
sS'block_loop.thisRepN'
p8866
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8867
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p8868
Nsg69
Vn
sS'block_loop.thisTrialN'
p8869
I0
sg39
F1.6335095998110774
sg34
g752
(S'\x07\xdf\n\x10\x0f2&\x06l\x88'
tRp8870
sa(dp8871
S'trial_loop.thisTrialN'
p8872
I183
sg6370
g6459
sS'block_loop.thisIndex'
p8873
g6364
sg38
S'right'
p8874
sg58
g62
sS'trial_loop.thisN'
p8875
I183
sg33
g6463
sg63
g64
sS'trial_loop.thisIndex'
p8876
g59
(g98
S'\xb7\x00\x00\x00'
tRp8877
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8878
I0
sg6379
g6467
sS'block_loop.thisRepN'
p8879
I2
sg6382
g6463
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8880
I2
sg6384
g6470
sg55
g11
sS'block_loop.thisTrial'
p8881
Nsg69
Vn
sS'block_loop.thisTrialN'
p8882
I0
sg39
F0.9005823978332046
sg34
g752
(S'\x07\xdf\n\x10\x0f2-\x01@P'
tRp8883
sa(dp8884
S'trial_loop.thisTrialN'
p8885
I184
sg6370
g7249
sS'block_loop.thisIndex'
p8886
g6364
sg38
S'left'
p8887
sg58
g62
sS'trial_loop.thisN'
p8888
I184
sg33
g6940
sg63
g64
sS'trial_loop.thisIndex'
p8889
g59
(g98
S'\xb8\x00\x00\x00'
tRp8890
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8891
I0
sg6379
g7256
sS'block_loop.thisRepN'
p8892
I2
sg6382
g6940
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8893
I2
sg6384
g6934
sg55
g11
sS'block_loop.thisTrial'
p8894
Nsg69
Vn
sS'block_loop.thisTrialN'
p8895
I0
sg39
F0.71687391377417953
sg34
g752
(S'\x07\xdf\n\x10\x0f23\x00e\x90'
tRp8896
sa(dp8897
S'trial_loop.thisTrialN'
p8898
I185
sg6370
g6425
sS'block_loop.thisIndex'
p8899
g6364
sg38
S'right'
p8900
sg58
g62
sS'trial_loop.thisN'
p8901
I185
sg33
g6429
sg63
g64
sS'trial_loop.thisIndex'
p8902
g59
(g98
S'\xb9\x00\x00\x00'
tRp8903
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8904
I0
sg6379
g6433
sS'block_loop.thisRepN'
p8905
I2
sg6382
g6429
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8906
I2
sg6384
g6436
sg55
g11
sS'block_loop.thisTrial'
p8907
Nsg69
Vn
sS'block_loop.thisTrialN'
p8908
I0
sg39
F0.91684779881688883
sg34
g752
(S'\x07\xdf\n\x10\x0f28\x0b\xb4\x18'
tRp8909
sa(dp8910
S'trial_loop.thisTrialN'
p8911
I186
sg6370
g7461
sS'block_loop.thisIndex'
p8912
g6364
sg38
S'left'
p8913
sg58
g62
sS'trial_loop.thisN'
p8914
I186
sg33
g6902
sg63
g64
sS'trial_loop.thisIndex'
p8915
g59
(g98
S'\xba\x00\x00\x00'
tRp8916
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8917
I0
sg6379
g7468
sS'block_loop.thisRepN'
p8918
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8919
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p8920
Nsg69
Vn
sS'block_loop.thisTrialN'
p8921
I0
sg39
F0.81686712845112197
sg34
g752
(S'\x07\xdf\n\x10\x0f3\x02\x0b\x13\xf0'
tRp8922
sa(dp8923
S'trial_loop.thisTrialN'
p8924
I187
sg6370
g6604
sS'block_loop.thisIndex'
p8925
g6364
sg38
S'right'
p8926
sg58
g62
sS'trial_loop.thisN'
p8927
I187
sg33
g6615
sg63
g64
sS'trial_loop.thisIndex'
p8928
g59
(g98
S'\xbb\x00\x00\x00'
tRp8929
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8930
I0
sg6379
g6612
sS'block_loop.thisRepN'
p8931
I2
sg6382
g6608
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8932
I2
sg6384
g6615
sg55
g11
sS'block_loop.thisTrial'
p8933
Nsg69
Vn
sS'block_loop.thisTrialN'
p8934
I0
sg39
F1.1501396409112203
sg34
g752
(S'\x07\xdf\n\x10\x0f3\x08\x08\xca\x00'
tRp8935
sa(dp8936
S'trial_loop.thisTrialN'
p8937
I188
sg6370
g7461
sS'block_loop.thisIndex'
p8938
g6364
sg38
S'left'
p8939
sg58
g62
sS'trial_loop.thisN'
p8940
I188
sg33
g6902
sg63
g64
sS'trial_loop.thisIndex'
p8941
g59
(g98
S'\xbc\x00\x00\x00'
tRp8942
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8943
I0
sg6379
g7468
sS'block_loop.thisRepN'
p8944
I2
sg6382
g6902
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8945
I2
sg6384
g6909
sg55
g11
sS'block_loop.thisTrial'
p8946
Nsg69
Vn
sS'block_loop.thisTrialN'
p8947
I0
sg39
F0.70010987669957103
sg34
g752
(S'\x07\xdf\n\x10\x0f3\x0e\x0b\x81P'
tRp8948
sa(dp8949
S'trial_loop.thisTrialN'
p8950
I189
sg6370
g6476
sS'block_loop.thisIndex'
p8951
g6364
sg38
S'left'
p8952
sg58
g62
sS'trial_loop.thisN'
p8953
I189
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p8954
g59
(g98
S'\xbd\x00\x00\x00'
tRp8955
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8956
I0
sg6379
g6484
sS'block_loop.thisRepN'
p8957
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8958
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p8959
Nsg69
Vn
sS'block_loop.thisTrialN'
p8960
I0
sg39
F1.2001797256671125
sg34
g752
(S'\x07\xdf\n\x10\x0f3\x14\x07O\x18'
tRp8961
sa(dp8962
S'trial_loop.thisTrialN'
p8963
I190
sg6370
g7042
sS'block_loop.thisIndex'
p8964
g6364
sg38
S'left'
p8965
sg58
g62
sS'trial_loop.thisN'
p8966
I190
sg33
g7046
sg63
g64
sS'trial_loop.thisIndex'
p8967
g59
(g98
S'\xbe\x00\x00\x00'
tRp8968
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8969
I0
sg6379
g7050
sS'block_loop.thisRepN'
p8970
I2
sg6382
g7046
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8971
I2
sg6384
g7053
sg55
g11
sS'block_loop.thisTrial'
p8972
Nsg69
Vn
sS'block_loop.thisTrialN'
p8973
I0
sg39
F0.78350041966405115
sg34
g752
(S'\x07\xdf\n\x10\x0f3\x1a\n\xf8\x98'
tRp8974
sa(dp8975
S'trial_loop.thisTrialN'
p8976
I191
sg6370
g7182
sS'block_loop.thisIndex'
p8977
g6364
sg38
S'right'
p8978
sg58
g62
sS'trial_loop.thisN'
p8979
I191
sg33
g6724
sg63
g64
sS'trial_loop.thisIndex'
p8980
g59
(g98
S'\xbf\x00\x00\x00'
tRp8981
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8982
I0
sg6379
g7189
sS'block_loop.thisRepN'
p8983
I2
sg6382
g6724
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8984
I2
sg6384
g6731
sg55
g11
sS'block_loop.thisTrial'
p8985
Nsg69
Vn
sS'block_loop.thisTrialN'
p8986
I0
sg39
F0.66663226486343774
sg34
g752
(S'\x07\xdf\n\x10\x0f3 \x085\x90'
tRp8987
sa(dp8988
S'trial_loop.thisTrialN'
p8989
I192
sg6370
g6527
sS'block_loop.thisIndex'
p8990
g6364
sg38
S'left'
p8991
sg58
g62
sS'trial_loop.thisN'
p8992
I192
sg33
g6531
sg63
g64
sS'trial_loop.thisIndex'
p8993
g59
(g98
S'\xc0\x00\x00\x00'
tRp8994
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p8995
I0
sg6379
g6535
sS'block_loop.thisRepN'
p8996
I2
sg6382
g6531
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p8997
I2
sg6384
g6538
sg55
g11
sS'block_loop.thisTrial'
p8998
Nsg69
Vn
sS'block_loop.thisTrialN'
p8999
I0
sg39
F0.90019181381649105
sg34
g752
(S'\x07\xdf\n\x10\x0f3&\x03\x8a@'
tRp9000
sa(dp9001
S'trial_loop.thisTrialN'
p9002
I193
sg6370
g6737
sS'block_loop.thisIndex'
p9003
g6364
sg38
S'right'
p9004
sg58
g62
sS'trial_loop.thisN'
p9005
I193
sg33
g6741
sg63
g64
sS'trial_loop.thisIndex'
p9006
g59
(g98
S'\xc1\x00\x00\x00'
tRp9007
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9008
I0
sg6379
g6745
sS'block_loop.thisRepN'
p9009
I2
sg6382
g6741
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9010
I2
sg6384
g6748
sg55
g11
sS'block_loop.thisTrial'
p9011
Nsg69
Vn
sS'block_loop.thisTrialN'
p9012
I0
sg39
F0.63344260182566359
sg34
g752
(S'\x07\xdf\n\x10\x0f3,\x02\xab\x98'
tRp9013
sa(dp9014
S'trial_loop.thisTrialN'
p9015
I194
sg6370
g6559
sS'block_loop.thisIndex'
p9016
g6364
sg38
S'left'
p9017
sg58
g62
sS'trial_loop.thisN'
p9018
I194
sg33
g6563
sg63
g64
sS'trial_loop.thisIndex'
p9019
g59
(g98
S'\xc2\x00\x00\x00'
tRp9020
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9021
I0
sg6379
g6567
sS'block_loop.thisRepN'
p9022
I2
sg6382
g6563
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9023
I2
sg6384
g6570
sg55
g11
sS'block_loop.thisTrial'
p9024
Nsg69
Vn
sS'block_loop.thisTrialN'
p9025
I0
sg39
F1.4501979719279916
sg34
g752
(S'\x07\xdf\n\x10\x0f31\x0c\xc9p'
tRp9026
sa(dp9027
S'trial_loop.thisTrialN'
p9028
I195
sg6370
g6589
sS'block_loop.thisIndex'
p9029
g6364
sg38
S'right'
p9030
sg58
g62
sS'trial_loop.thisN'
p9031
I195
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p9032
g59
(g98
S'\xc3\x00\x00\x00'
tRp9033
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9034
I0
sg6379
g6596
sS'block_loop.thisRepN'
p9035
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9036
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p9037
Nsg69
Vn
sS'block_loop.thisTrialN'
p9038
I0
sg39
F0.68389151685551042
sg34
g752
(S'\x07\xdf\n\x10\x0f38\x04\xc2\xc0'
tRp9039
sa(dp9040
S'trial_loop.thisTrialN'
p9041
I196
sg6370
g6371
sS'block_loop.thisIndex'
p9042
g6364
sg38
S'left'
p9043
sg58
g62
sS'trial_loop.thisN'
p9044
I196
sg33
g6375
sg63
g64
sS'trial_loop.thisIndex'
p9045
g59
(g98
S'\xc4\x00\x00\x00'
tRp9046
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9047
I0
sg6379
g6380
sS'block_loop.thisRepN'
p9048
I2
sg6382
g6375
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9049
I2
sg6384
g6385
sg55
g11
sS'block_loop.thisTrial'
p9050
Nsg69
Vn
sS'block_loop.thisTrialN'
p9051
I0
sg39
F0.78353006983888918
sg34
g752
(S'\x07\xdf\n\x10\x0f4\x02\x00\x90\x88'
tRp9052
sa(dp9053
S'trial_loop.thisTrialN'
p9054
I197
sg6370
g6705
sS'block_loop.thisIndex'
p9055
g6364
sg38
S'right'
p9056
sg58
g62
sS'trial_loop.thisN'
p9057
I197
sg33
g6418
sg63
g64
sS'trial_loop.thisIndex'
p9058
g59
(g98
S'\xc5\x00\x00\x00'
tRp9059
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9060
I0
sg6379
g6712
sS'block_loop.thisRepN'
p9061
I2
sg6382
g6418
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9062
I2
sg6384
g6412
sg55
g11
sS'block_loop.thisTrial'
p9063
Nsg69
Vn
sS'block_loop.thisTrialN'
p9064
I0
sg39
F0.58343159704963909
sg34
g752
(S'\x07\xdf\n\x10\x0f4\x07\r\x0f\xc0'
tRp9065
sa(dp9066
S'trial_loop.thisTrialN'
p9067
I198
sg6370
g6476
sS'block_loop.thisIndex'
p9068
g6364
sg38
S'left'
p9069
sg58
g62
sS'trial_loop.thisN'
p9070
I198
sg33
g6486
sg63
g64
sS'trial_loop.thisIndex'
p9071
g59
(g98
S'\xc6\x00\x00\x00'
tRp9072
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9073
I0
sg6379
g6484
sS'block_loop.thisRepN'
p9074
I2
sg6382
g6486
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9075
I2
sg6384
g6480
sg55
g11
sS'block_loop.thisTrial'
p9076
Nsg69
Vn
sS'block_loop.thisTrialN'
p9077
I0
sg39
F0.98351279291091487
sg34
g752
(S'\x07\xdf\n\x10\x0f4\r\x073\xc0'
tRp9078
sa(dp9079
S'trial_loop.thisTrialN'
p9080
I199
sg6370
g7569
sS'block_loop.thisIndex'
p9081
g6364
sg38
S'left'
p9082
sg58
g62
sS'trial_loop.thisN'
p9083
I199
sg33
g6801
sg63
g64
sS'trial_loop.thisIndex'
p9084
g59
(g98
S'\xc7\x00\x00\x00'
tRp9085
sg65
g66
sg67
g68
sS'trial_loop.thisRepN'
p9086
I0
sg6379
g7576
sS'block_loop.thisRepN'
p9087
I2
sg6382
g6801
sg56
Vr
sg57
Vn
sS'block_loop.thisN'
p9088
I2
sg6384
g6808
sg55
g11
sS'block_loop.thisTrial'
p9089
Nsg69
Vn
sS'block_loop.thisTrialN'
p9090
I0
sg39
F0.90018953303297167
sg34
g752
(S'\x07\xdf\n\x10\x0f4\x13\x07K0'
tRp9091
sa(dp9092
S'block_loop.thisRepN'
p9093
I2
sg56
Vr
sS'block_loop.thisIndex'
p9094
g6364
sg57
Vn
sg58
g62
sS'block_loop.thisN'
p9095
I2
sg55
g11
sg63
g64
sS'block_loop.thisTrial'
p9096
Nsg65
g66
sg67
g68
sS'block_loop.thisTrialN'
p9097
I0
sg69
Vn
sa(dp9098
g63
g64
sg43
I25
sg56
Vr
sg57
Vn
sg42
I575
sg58
g62
sg55
g11
sg65
g66
sg67
g68
sg69
Vn
sa(dp9099
g63
g64
sg43
I25
sg55
g11
sg56
Vr
sg45
F1.53
sg42
I575
sg49
F0.01
sg57
Vn
sg58
g62
sg44
I00
sg48
I25
sg47
g650
sg51
F30.75
sg46
F0.55999999999999894
sg65
g66
sg67
g68
sg50
I0
sg69
Vn
sasS'loops'
p9100
(lp9101
g1
(cpsychopy.data
TrialHandler
p9102
g3
NtRp9103
(dp9104
S'origin'
p9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9106
sS'thisTrial'
p9107
(lp9108
sS'_exp'
p9109
I80376656
sg10
S'bdm_loop1'
p9110
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1_no_eyetracking.py'
p9111
sS'thisRepN'
p9112
I1
sg52
I01
sg53
g54
sS'data'
p9113
g1
(cpsychopy.data
DataHandler
p9114
c__builtin__
dict
p9115
(dp9116
S'ran'
p9117
cnumpy.ma.core
_mareconstruct
p9118
(cnumpy.ma.core
MaskedArray
p9119
g92
(I0
tp9120
S'b'
tRp9121
(I1
(I40
I1
tg60
(S'f4'
I0
I1
tRp9122
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9118
(g9119
g92
g9120
S'b'
tRp9123
(I1
(I40
I1
tg9122
I00
S'\x00\x00 @\xcd\xcc\x0c@\x14\xae\x07@\xaeG\xe1>\n\xd7\xa3>\xa4p\xbd?\x8f\xc2u?\xecQ8?\x8f\xc2\xf5>\x00\x00\x80?\xb8\x1e\x05?{\x14.?q=\xca?\xc3\xf5\xa8?\xecQ8?\xf6(\\?)\\\xcf?ff\xa6?\xf6(\xdc?\\\x8f\x82?\xcd\xcc\xcc=q=\n?)\\\x0f>\x1f\x85k?\xaeGa>\n\xd7#?q=\n?)\\\x0f?33\xf3?\n\xd7#>{\x14.?\x1f\x85\xeb?\n\xd7\xa3>ff\xe6?\xa4p=?\x1f\x85\xeb?H\xe1z?\x85\xebQ?\xecQ8?\x85\xeb\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9118
(g9119
g92
g9120
S'b'
tRp9124
(I1
(I40
I1
tg9122
I00
S'\x87\x16\xa9@\x19\x04\x18AT\xe3\xbd@\x87\x16\x99@\xfe\xd4\x8c@/\xdd,@33;A\xee|\x9f@\xbaI\x84@1\x08\x88@\xd5x\x0fA\xfc\xa9\x19@d;\xe3@33?Ab\x10`@D\x8b\x08A!\xb0\x1a@/\xddl@!\xb0\xd2@\x08\xac\x02A\x87\x16\xb1@!\xb0\x82@T\xe3\xd5@d;\x83@\xdd$\x0eA\xee|\x9f@T\xe3}@1\x08\xb8@!\xb0Z@\xbaID@\x10X%A\xb2\x9d\x19A\xee|\xaf@b\x10 @B`E@\xbaI\xa4@\xbaI\xb4@\xbaI\xdc@\xfe\xd4\xac@\xbaI$@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9125
g9118
(g9119
g92
g9120
S'b'
tRp9126
(I1
(I40
I1
tg9122
I00
S'\x00\x00@@\x00\x00\x0cB\x00\x00\xe0A\x00\x00\x88A\x00\x00\xa0A\x00\x00\x90A\x00\x00\x80?\x00\x00\xd8A\x00\x00\x00A\x00\x00\xc0@\x00\x00\x00@\x00\x00\x18B\x00\x00\x98A\x00\x00\x00\x00\x00\x00\x80A\x00\x00\x00B\x00\x00\xc0A\x00\x00\x1cB\x00\x00pA\x00\x000A\x00\x00\xe0@\x00\x00\xa8A\x00\x00\xb8A\x00\x00\x10A\x00\x00\xa0@\x00\x00`A\x00\x00\xf0A\x00\x00\x08B\x00\x00\xe8A\x00\x00\xb0A\x00\x00PA\x00\x00 A\x00\x00\x10B\x00\x00\x04B\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xf8A\x00\x00\x14B\x00\x00\x80@\x00\x00@A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9118
(g9119
g92
g9120
S'b'
tRp9127
(I1
(I40
I1
tg9122
I00
S'\x00\x00\xc0?\xcd\xcc\x8c?\x00\x00\xc0?ff\xa6?\x9a\x99\x99?ff\xa6?\x9a\x99\xd9?33\xf3?\xcd\xcc\x8c?\x9a\x99\xd9?\xcd\xcc\xcc?ff\xe6?\x9a\x99\x99?33\xf3?ff\xe6?\x00\x00\xc0?\x00\x00\x80?\xcd\xcc\xcc?\x9a\x99\xd9?\x9a\x99\xd9?33\xf3?ff\xe6?33\xf3?\xcd\xcc\x8c?ff\xe6?\x00\x00\x80?33\xf3?\x9a\x99\xd9?33\xb3?\x9a\x99\xd9?33\xb3?\x00\x00\x80?33\xb3?\xcd\xcc\x8c?\x00\x00\x00@ff\xe6?ff\xa6?\x9a\x99\xd9?33\xf3?ff\xa6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9128
(dp9129
S'isNumeric'
p9130
(dp9131
g9117
I01
sg19
I01
sg20
I01
sg9125
I01
sg21
I01
ssS'trials'
p9132
g9103
sS'dataTypes'
p9133
(lp9134
g9117
ag9125
ag19
ag20
ag21
asS'dataShape'
p9135
(lp9136
I40
aI1
asbsS'method'
p9137
Vrandom
p9138
sS'sequenceIndices'
p9139
g91
(g92
(I0
tS'b'
tRp9140
(I1
(I40
I1
tg98
I01
S'\r\x00\x00\x00\x06\x00\x00\x00\n\x00\x00\x00\x00\x00\x00\x00&\x00\x00\x00\x18\x00\x00\x00\t\x00\x00\x00\x14\x00\x00\x00\x08\x00\x00\x00\x17\x00\x00\x00\x1f\x00\x00\x00\x13\x00\x00\x00\'\x00\x00\x00\x1e\x00\x00\x00\x19\x00\x00\x00\x12\x00\x00\x00\x0e\x00\x00\x00\x03\x00\x00\x00\x05\x00\x00\x00\x0c\x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x00\x1d\x00\x00\x00\x16\x00\x00\x00\x10\x00\x00\x00"\x00\x00\x00#\x00\x00\x00\x07\x00\x00\x00\x02\x00\x00\x00\x1c\x00\x00\x00\x1a\x00\x00\x00$\x00\x00\x00\x0f\x00\x00\x00!\x00\x00\x00\x1b\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00%\x00\x00\x00\x0b\x00\x00\x00\x11\x00\x00\x00'
tbsS'finished'
p9141
I01
sS'nReps'
p9142
I1
sS'nRemaining'
p9143
I-1
sS'trialList'
p9144
(lp9145
g1
(cpsychopy.data
TrialType
p9146
g9115
(dp9147
g78
g123
stRp9148
ag1
(g9146
g9115
(dp9149
g78
g347
stRp9150
ag1
(g9146
g9115
(dp9151
g78
g298
stRp9152
ag1
(g9146
g9115
(dp9153
g78
g221
stRp9154
ag1
(g9146
g9115
(dp9155
g78
g242
stRp9156
ag1
(g9146
g9115
(dp9157
g78
g228
stRp9158
ag1
(g9146
g9115
(dp9159
g78
g109
stRp9160
ag1
(g9146
g9115
(dp9161
g78
g291
stRp9162
ag1
(g9146
g9115
(dp9163
g78
g158
stRp9164
ag1
(g9146
g9115
(dp9165
g78
g144
stRp9166
ag1
(g9146
g9115
(dp9167
g78
g116
stRp9168
ag1
(g9146
g9115
(dp9169
g78
g368
stRp9170
ag1
(g9146
g9115
(dp9171
g78
g235
stRp9172
ag1
(g9146
g9115
(dp9173
g78
g102
stRp9174
ag1
(g9146
g9115
(dp9175
g78
g214
stRp9176
ag1
(g9146
g9115
(dp9177
g78
g326
stRp9178
ag1
(g9146
g9115
(dp9179
g78
g270
stRp9180
ag1
(g9146
g9115
(dp9181
g78
g375
stRp9182
ag1
(g9146
g9115
(dp9183
g78
g207
stRp9184
ag1
(g9146
g9115
(dp9185
g78
g179
stRp9186
ag1
(g9146
g9115
(dp9187
g78
g151
stRp9188
ag1
(g9146
g9115
(dp9189
g78
g249
stRp9190
ag1
(g9146
g9115
(dp9191
g78
g263
stRp9192
ag1
(g9146
g9115
(dp9193
g78
g165
stRp9194
ag1
(g9146
g9115
(dp9195
g78
g137
stRp9196
ag1
(g9146
g9115
(dp9197
g78
g200
stRp9198
ag1
(g9146
g9115
(dp9199
g78
g312
stRp9200
ag1
(g9146
g9115
(dp9201
g78
g340
stRp9202
ag1
(g9146
g9115
(dp9203
g78
g305
stRp9204
ag1
(g9146
g9115
(dp9205
g78
g256
stRp9206
ag1
(g9146
g9115
(dp9207
g78
g193
stRp9208
ag1
(g9146
g9115
(dp9209
g78
g172
stRp9210
ag1
(g9146
g9115
(dp9211
g78
g354
stRp9212
ag1
(g9146
g9115
(dp9213
g78
g333
stRp9214
ag1
(g9146
g9115
(dp9215
g78
g277
stRp9216
ag1
(g9146
g9115
(dp9217
g78
g284
stRp9218
ag1
(g9146
g9115
(dp9219
g78
g319
stRp9220
ag1
(g9146
g9115
(dp9221
g78
g361
stRp9222
ag1
(g9146
g9115
(dp9223
g78
g130
stRp9224
ag1
(g9146
g9115
(dp9225
g78
g186
stRp9226
asS'seed'
p9227
NsS'thisIndex'
p9228
g372
sS'thisN'
p9229
I40
sS'thisTrialN'
p9230
I0
sS'nTotal'
p9231
I40
sS'_warnUseOfNext'
p9232
I01
sbag1
(g9102
g3
NtRp9233
(dp9234
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9235
sg9107
(lp9236
sg9109
I80376656
sg10
S'binary'
p9237
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9238
g26
g9118
(g9119
g92
g9120
S'b'
tRp9239
(I1
(I40
I1
tg9122
I00
S'\xcd\xcc\x9c@33S@33\xa3@\x00\x00\x90@\x9a\x99y@\x00\x00\xc0@\x00\x00\xb0@\xcd\xcc\xac@33\xa3@33\xa3@ff\xa6@\x9a\x99\x99@33\xa3@\xcd\xcc\x9c@33\x13@ff\x96@\xcd\xcc\x0c@\x00\x00\xa0@\xcd\xccL@\x00\x00\xb0@33\x93@33\xb3@\xcd\xcc\xbc@\x9a\x99\x89@33s@\x9a\x99y@\x9a\x99\x19@\xcd\xcc\xac@33\x93@\x00\x00\x90@ff&@33\xb3@\x00\x00\xa0@\x9a\x99\xb9@ff\xb6@ff\x96@\x00\x00\xc0@ff\x96@\x9a\x99Y@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9240
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9118
(g9119
g92
g9120
S'b'
tRp9241
(I1
(I40
I1
tg9122
I00
S'\x18\xe0\xbd?\xa8\x10\xb9@\xf8\xcd\xac?\xd6a\xa6?\xae\x9a\xb9?1\xbc\x9b?\xa1\x13\xb1?J\xe2]?\x8b\x8a\x88?\xfd\x06@?\xd4\x99\x88?\xd36\xb3?\xcb%\xc2?k[\x95?\xba\xb0\x8a?\x13\xdf\x9d?\xe9f\xc6?0\x01\xa0?C53@<\x8b\x88?v\xf2\xce?b\x90\xa8?)\x14\x91?N\x06\xa0?\x83\xad\x8a?\xf6A\xa4?\xc95s?\xa0\x07@?\xcf\xd4L?\xa0\xe0\r@u$"@\xcaJ\x84?}\xbe{?\x0ey\xb7?E`\xa6?5L\xc4?@%\xc2?>6\xb3?=G\xc4?\xc5MD?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9118
(g9119
g92
g9120
S'b'
tRp9242
(I1
(I40
I1
tg9122
I00
S'33\x83@\xcd\xcc,@\xcd\xccL@\xcd\xccl@\xcd\xccL@333@33s@\xcd\xccl@fff@ff\x86@333@ffF@fff@\x00\x00@@\x9a\x999@fff@\x9a\x999@\x9a\x999@\xcd\xcc,@33s@\xcd\xccL@ffF@\x9a\x99y@33S@\x9a\x99y@\x9a\x99Y@\x9a\x99y@\x9a\x99Y@33\x83@\x00\x00@@\x00\x00\x80@\x9a\x99y@ffF@ff\x86@\x00\x00@@\x00\x00\x80@\xcd\xcc,@\x00\x00`@ff\x86@\xcd\xcc,@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9118
(g9119
g92
g9120
S'b'
tRp9243
(I1
(I40
I1
tg60
(S'O4'
I0
I1
tRp9244
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x00\xbc\x15\x03\xc0\xb3\xd1\x0c\x00\xb6\xd1\x0c\xc0\xb5\xd1\x0c\xa0\xb5\xd1\x0c\x80q\x82\x0c\xe0[\x14\x03\xa0\xdc\xcf\x0c\xc0\xb6\xd1\x0c\x80\xb2\xd1\x0c\x80\xb0\xd1\x0c\x80\xdf\xcf\x0c`\xdc\xcf\x0c\xc0\xdd\xcf\x0c@R\x14\x03\xc0\xbb\x15\x03@\xbb\x15\x03\xa0A\x16\x03\xa0B\x16\x03 A\x16\x03\xe0A\x16\x03@@\x16\x03\xc0B\x16\x03\xa0@\x16\x03`A\x16\x03\x00C\x16\x03\xe0Q\x14\x03@Y\x14\x03\x00\\\x14\x03 C\x16\x03@A\x16\x03\x80B\x16\x03\x80E\x16\x03\xe0@\x16\x03`B\x16\x03@B\x16\x03\xe0B\x16\x03\x00A\x16\x03\x00B\x16\x03\x80\xe4\x81\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9118
(g9119
g92
g9120
S'b'
tRp9245
(I1
(I40
I1
tg9122
I00
S'\x08\xac\nA1\x08\x90@\xaa\xf1\x9e@D\x8b\x88@\xbaI\xe4@T\xe3\x8d@\x87\x16\x99@\x96C\x13@D\x8b\xa0@\xbaI\x14@!\xb0\xca@\x96CC@B`U@\x96C#@\xee|\xb7@\xdb\xf9\x8e?\x83\xc0\xea?\x0e-\xba@D\x8b\x98@\xe9&\xd1?\xa8\xc6+@\x83\xc0\xea?P\x8d\xd7?\x87\x16!@b\x10`@\x87\x16\xc9@B`\xad@\xa8\xc6K@!\xb0J@\x83\xc0\xea?^\xba\xd9?\x0e-\xa2?/\xdd\\@9\xb4\xa8?\x0e-B@\xee|G@\xbaI4@\xbaID@\x87\x16\x01@\x83\xc0\xaa?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9246
(I1
(I40
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9247
(dp9248
g9130
(dp9249
g26
I01
sg9117
I01
sg28
I01
sg25
I01
sg24
I00
sg9125
I01
sg27
I01
ssg9132
g9233
sg9133
(lp9250
g9117
ag9125
ag24
ag25
ag26
ag27
ag28
asg9135
(lp9251
I40
aI1
asbsg9137
Vsequential
p9252
sg9139
g91
(g92
(I0
tS'b'
tRp9253
(I1
(I40
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9254
g1
(g9146
g9115
(dp9255
g79
g380
sg80
g381
stRp9256
ag1
(g9146
g9115
(dp9257
g79
g389
sg80
g390
stRp9258
ag1
(g9146
g9115
(dp9259
g79
g398
sg80
g399
stRp9260
ag1
(g9146
g9115
(dp9261
g79
g407
sg80
g408
stRp9262
ag1
(g9146
g9115
(dp9263
g79
g416
sg80
g417
stRp9264
ag1
(g9146
g9115
(dp9265
g79
g425
sg80
g426
stRp9266
ag1
(g9146
g9115
(dp9267
g79
g434
sg80
g435
stRp9268
ag1
(g9146
g9115
(dp9269
g79
g443
sg80
g444
stRp9270
ag1
(g9146
g9115
(dp9271
g79
g452
sg80
g453
stRp9272
ag1
(g9146
g9115
(dp9273
g79
g461
sg80
g462
stRp9274
ag1
(g9146
g9115
(dp9275
g79
g470
sg80
g471
stRp9276
ag1
(g9146
g9115
(dp9277
g79
g479
sg80
g480
stRp9278
ag1
(g9146
g9115
(dp9279
g79
g488
sg80
g489
stRp9280
ag1
(g9146
g9115
(dp9281
g79
g497
sg80
g498
stRp9282
ag1
(g9146
g9115
(dp9283
g79
g506
sg80
g507
stRp9284
ag1
(g9146
g9115
(dp9285
g79
g515
sg80
g516
stRp9286
ag1
(g9146
g9115
(dp9287
g79
g524
sg80
g525
stRp9288
ag1
(g9146
g9115
(dp9289
g79
g533
sg80
g534
stRp9290
ag1
(g9146
g9115
(dp9291
g79
g542
sg80
g543
stRp9292
ag1
(g9146
g9115
(dp9293
g79
g551
sg80
g552
stRp9294
ag1
(g9146
g9115
(dp9295
g79
g560
sg80
g561
stRp9296
ag1
(g9146
g9115
(dp9297
g79
g569
sg80
g570
stRp9298
ag1
(g9146
g9115
(dp9299
g79
g578
sg80
g579
stRp9300
ag1
(g9146
g9115
(dp9301
g79
g587
sg80
g588
stRp9302
ag1
(g9146
g9115
(dp9303
g79
g596
sg80
g597
stRp9304
ag1
(g9146
g9115
(dp9305
g79
g605
sg80
g606
stRp9306
ag1
(g9146
g9115
(dp9307
g79
g614
sg80
g615
stRp9308
ag1
(g9146
g9115
(dp9309
g79
g623
sg80
g624
stRp9310
ag1
(g9146
g9115
(dp9311
g79
g632
sg80
g633
stRp9312
ag1
(g9146
g9115
(dp9313
g79
g641
sg80
g642
stRp9314
ag1
(g9146
g9115
(dp9315
g79
g650
sg80
g651
stRp9316
ag1
(g9146
g9115
(dp9317
g79
g659
sg80
g660
stRp9318
ag1
(g9146
g9115
(dp9319
g79
g668
sg80
g669
stRp9320
ag1
(g9146
g9115
(dp9321
g79
g677
sg80
g678
stRp9322
ag1
(g9146
g9115
(dp9323
g79
g686
sg80
g687
stRp9324
ag1
(g9146
g9115
(dp9325
g79
g695
sg80
g696
stRp9326
ag1
(g9146
g9115
(dp9327
g79
g704
sg80
g705
stRp9328
ag1
(g9146
g9115
(dp9329
g79
g713
sg80
g714
stRp9330
ag1
(g9146
g9115
(dp9331
g79
g722
sg80
g723
stRp9332
ag1
(g9146
g9115
(dp9333
g79
g731
sg80
g732
stRp9334
asg9227
Nsg9228
g735
sg9229
I40
sg9230
I0
sg9231
I40
sg9232
I01
sbag1
(g9102
g3
NtRp9335
(dp9336
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9337
sg9107
(lp9338
sg9109
I80376656
sg10
S'practice_loop'
p9339
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9340
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9341
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9118
(g9119
g92
g9120
S'b'
tRp9342
(I1
(I14
I1
tg9244
I00
S'\x10\x11\x15\r8\x11\x15\r\x00\xf1\x14\r`\x11\x15\r\x00\xf1\x14\r\x88\x11\x15\r\xd0d\x16\x03\xa0d\x16\x03P\x12\x15\r(\x12\x15\r\xa0d\x16\x03\x10\x11\x15\r8\x11\x15\r\xd0d\x16\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9343
(I1
(I14
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9344
(I1
(I14
I1
tg9244
I00
S"h\xc9R\x02\xa8kX\x04\xb8'\xfa\x04X\x8a\xf9\x04\xc0\x8e\xf9\x04\xd8\x82\xf9\x04\x10\x8a\xf9\x04\x80\x89\xf9\x04\xf8\x8c\xf9\x04\x88\x87\xf9\x04\x08\x83\xf9\x04\xf0\x82\xf9\x04(\x84\xf9\x048\x89\xf9\x04"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9345
(dp9346
g9130
(dp9347
g9117
I01
sg33
I00
sg9125
I01
sg34
I00
ssg9132
g9335
sg9133
(lp9348
g9117
ag9125
ag33
ag34
asg9135
(lp9349
I14
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9350
(I1
(I14
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9351
g1
(g9146
g9115
(dp9352
g81
g743
sg82
g744
sg83
g748
sg84
g749
stRp9353
ag1
(g9146
g9115
(dp9354
g81
g755
sg82
g756
sg83
g760
sg84
g761
stRp9355
ag1
(g9146
g9115
(dp9356
g81
g766
sg82
g767
sg83
g771
sg84
g772
stRp9357
ag1
(g9146
g9115
(dp9358
g81
g777
sg82
g778
sg83
g782
sg84
g783
stRp9359
ag1
(g9146
g9115
(dp9360
g81
g766
sg82
g788
sg83
g771
sg84
g792
stRp9361
ag1
(g9146
g9115
(dp9362
g81
g797
sg82
g798
sg83
g802
sg84
g803
stRp9363
ag1
(g9146
g9115
(dp9364
g81
g808
sg82
g809
sg83
g813
sg84
g814
stRp9365
ag1
(g9146
g9115
(dp9366
g81
g819
sg82
g820
sg83
g824
sg84
g825
stRp9367
ag1
(g9146
g9115
(dp9368
g81
g797
sg82
g830
sg83
g802
sg84
g834
stRp9369
ag1
(g9146
g9115
(dp9370
g81
g777
sg82
g839
sg83
g782
sg84
g843
stRp9371
ag1
(g9146
g9115
(dp9372
g81
g819
sg82
g848
sg83
g824
sg84
g852
stRp9373
ag1
(g9146
g9115
(dp9374
g81
g743
sg82
g857
sg83
g748
sg84
g861
stRp9375
ag1
(g9146
g9115
(dp9376
g81
g755
sg82
g866
sg83
g760
sg84
g870
stRp9377
ag1
(g9146
g9115
(dp9378
g81
g808
sg82
g875
sg83
g813
sg84
g879
stRp9379
asg9227
Nsg9228
g881
sg9229
I14
sg9230
I0
sg9231
I14
sg9232
I01
sbag1
(g9102
g3
NtRp9380
(dp9381
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9382
sg9107
(lp9383
sg9109
I80376656
sg10
S'block_loop'
p9384
sg6
g9111
sg9112
I3
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9385
g9117
g9118
(g9119
g92
g9120
S'b'
tRp9386
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9387
(I1
(I1
I3
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9388
(dp9389
g9130
(dp9390
g9117
I01
sg9125
I01
ssg9132
g9380
sg9133
(lp9391
g9117
ag9125
asg9135
(lp9392
I1
aI3
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9393
(I1
(I1
I3
tg98
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9141
I01
sg9142
I3
sg9143
I-1
sg9144
(lp9394
Nasg9227
Nsg9228
g6364
sg9229
I3
sg9230
I0
sg9231
I3
sg9232
I01
sbag1
(g9102
g3
NtRp9395
(dp9396
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9397
sg9107
(lp9398
sg9109
I80376656
sg10
S'trial_loop'
p9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9400
g33
g9118
(g9119
g92
g9120
S'b'
tRp9401
(I1
(I200
I1
tg9244
I00
S'\xd8\x11\x17\r\xe0 \x17\r\x00\x12\x17\r\x10!\x17\r(\x12\x17\r\x98\xd5\x16\r@!\x17\r\xe0\t\x14\x03\x80\x05\x14\x03`"\x17\rp!\x17\rP\x12\x17\r\x80\t\x14\x03\xd8\x11\x17\r\x08\xd6\x16\r@!\x17\r(\x12\x17\r\xe0 \x17\rx\x12\x17\r\xe0\x13\x17\r\x00\x12\x17\rp!\x17\r\x08\xd6\x16\r\xe0\t\x14\x03\x00\x12\x17\rx\xd6\x16\r(\x12\x17\r\x08\xd6\x16\r(\x12\x17\r@\x13\x17\r\xa0\x12\x17\r\xd0\xd5\x16\r\xd8\x11\x17\r\x98\xd5\x16\r\x80\x05\x14\x03\xe0\x13\x17\r\x00\x12\x17\r\xd0\xd5\x16\r\x10!\x17\r\xc8\x12\x17\r(\x12\x17\r\xe0\t\x14\x03\x98\xd5\x16\r\xa0\x0b\x14\x03\xd0!\x17\r\xa0\x12\x17\r@\xd6\x16\r(\x12\x17\r@!\x17\r\xd0\xd5\x16\r\x00\x12\x17\r\x08\xd6\x16\r\xe0 \x17\r\xe0\x13\x17\rP\x12\x17\r\xe0 \x17\r\xd8\x11\x17\r@\xd6\x16\rp!\x17\r\xd8\x11\x17\r\xa0\x12\x17\r\x08\xd6\x16\rx\xd6\x16\r\xe0\t\x14\x03\x00\t\x14\x03x\x12\x17\rp!\x17\r\xc8\x12\x17\r\xf0\x12\x17\r\x08\xd6\x16\r@\xd6\x16\r(\x12\x17\r\xe0 \x17\r\x80\x05\x14\x03@\xd6\x16\r@!\x17\r\xa0\x12\x17\rh\x13\x17\r@!\x17\r\xc8\x12\x17\r\x08\xd6\x16\r(\x12\x17\r\x08\x14\x17\r\xa0!\x17\r(\x12\x17\r\xe8\xd6\x16\rP\x12\x17\r@!\x17\r\x08\xd6\x16\r\x98\xd5\x16\rP\x12\x17\rx\x12\x17\r\xe0 \x17\r\x80\x05\x14\x03\x90"\x17\r\xa0!\x17\r\x90"\x17\rx\x12\x17\r\xa0!\x17\r@!\x17\rh\x13\x17\rP\x12\x17\r\xf0"\x17\r@\xd6\x16\r0"\x17\r\x08\x14\x17\r\xd0\xd5\x16\r\xe0\t\x14\x03\x98\xd5\x16\rP\x12\x17\r\x10!\x17\r\xf0\x12\x17\r\x80\x05\x14\x03\x80\x08\x14\x03\x80\x05\x14\x03x\xd6\x16\r\xc8\x12\x17\rx\xd6\x16\r\xa0\x12\x17\r\xc8\x12\x17\rh\x13\x17\r\xc8\x12\x17\rp!\x17\r\x08\x14\x17\r\x80\x05\x14\x03\x08\xd6\x16\rP\x12\x17\r\xe8\xd6\x16\r\xa0!\x17\r\xf0\x12\x17\r\xe0\t\x14\x03\x10!\x17\r\x00\x12\x17\r\xd0\xd5\x16\r\x10!\x17\r\xf0\x12\x17\r\xd0!\x17\r@!\x17\rx\xd6\x16\r\xa0!\x17\r\x98\xd5\x16\rp!\x17\r\x80\x05\x14\x03\xc8\x12\x17\r\xd8\x11\x17\r\xa0\x0b\x14\x03\xd8\x11\x17\r\x80\t\x14\x03\xd8\x11\x17\r\x98\xd5\x16\r\x10!\x17\r\x98\xd5\x16\r\xf0\x12\x17\r\xa0!\x17\r\xc8\x12\x17\r\x98\xd5\x16\r\xc8\x12\x17\rx\xd6\x16\rx\x12\x17\r\xd0\xd5\x16\rx\x12\x17\r`"\x17\r@\xd6\x16\r\xf0\x12\x17\r\x00\x12\x17\r@\xd6\x16\r\x00\x12\x17\r\xf0\x12\x17\r\x80\x05\x14\x03\xd8\x11\x17\r\x00\x12\x17\r\x00"\x17\r\x08\xd6\x16\r\xa0\x12\x17\r\xf0\x12\x17\r\xe0\t\x14\x03\x90"\x17\r\x80\x05\x14\x03x\x12\x17\r\xc8\x12\x17\rx\xd6\x16\r\x10!\x17\r\xa0!\x17\r\xf0\x12\x17\r\x00\x12\x17\rx\xd6\x16\rx\x12\x17\r\xd0\xd5\x16\r\x98\xd5\x16\r\xa0\x12\x17\r\x00\t\x14\x03@!\x17\r\xa0!\x17\rp!\x17\r\xe0\t\x14\x03`"\x17\r\x10!\x17\r\xa0!\x17\r\xe0 \x17\r\x80\t\x14\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9402
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9403
(I1
(I200
I1
tg9244
I00
S'\x80\xe1\x81\x0c\xa0v\xd2\x0c\xa0r\xd2\x0c@\x0b\x14\x03\x80r\xd2\x0c \x01\xd2\x0c\xe0\x1b\x15\x03\x00\x1e\x15\x03\xc0\x1f\x15\x03@\x1b\x15\x03\x00\x19\x15\x03\xe0\x1c\x15\x03\xa0\x1b\x15\x03\xc0\x1d\x15\x03 \x1d\x15\x03\xa0\x1f\x15\x03 \x1c\x15\x03`\x1e\x15\x03\x80\x15\x15\x03\x80\x1b\x15\x03`\x1b\x15\x03\xa0\x19\x15\x03`\x1d\x15\x03 \x1a\x15\x03\x80\x1e\x15\x03\xa0\x1d\x15\x03\x00\x12\x15\x03 \x1b\x15\x03`\x1c\x15\x03 \x1f\x15\x03\x00\x1b\x15\x03\xc0\x1b\x15\x03@\x1a\x15\x03\xa0\x1c\x15\x03\x80\x1f\x15\x03\x80\x1a\x15\x03\xa0\x1e\x15\x03@\x1e\x15\x03\xc0r\xd2\x0c\xe0\x1d\x15\x03\x00\x1f\x15\x03\xe0O\x81\x0c O\x81\x0c\x80O\x81\x0c\x00N\x81\x0c\xe0N\x81\x0c\x00r\xd2\x0c\x80\x06\xd2\x0c@cv\x0c\xc0gv\x0c@\x1f\x15\x03`bv\x0c\xe0bv\x0c\xa0bv\x0c\x80kv\x0c\x80lv\x0c\xa0cv\x0c\xa0fv\x0c `v\x0c@gv\x0c@`v\x0c\x00lv\x0c@kv\x0c\xa0gv\x0c\xe0gv\x0c\x00gv\x0c mv\x0c\x80gv\x0c kv\x0c`fv\x0c\xa0lv\x0c@fv\x0c\x00kv\x0c fv\x0c\x80fv\x0c gv\x0c@mv\x0c`mv\x0c\x80cv\x0c\x00fv\x0c\xc0bv\x0c\xe0fv\x0c\xe0ov\x0c`lv\x0c\xe0kv\x0c\xc0kv\x0c\x80bv\x0c`gv\x0c\x80\xd0\xce\x0c\x00\xdb\xce\x0c\xe0\xd2\xce\x0c\xa0\xd2\xce\x0c\xa0\xd0\xce\x0c@\xd1\xce\x0c\x00\xd9\xce\x0c\xe0\xd0\xce\x0c\xc0\xd0\xce\x0c`O\x81\x0c\x80J\x81\x0c\xc0B\xba\x04\xc0C\xba\x04\xe0H\xba\x04\x80B\xba\x04\x00A\xba\x04@B\xba\x04`D\xba\x04\x80A\xba\x04\x00D\xba\x04@A\xba\x04\xa0B\xba\x04@C\xba\x04\xa0D\xba\x04@E\xba\x04\x80C\xba\x04\xe0E\xba\x04\xa0A\xba\x04\x80E\xba\x04\x00E\xba\x04\x00B\xba\x04\xa0@\xba\x04`C\xba\x04`F\xba\x04\xa0E\xba\x04@F\xba\x04 D\xba\x04\xc0F\xba\x04\xa0F\xba\x04@G\xba\x04`A\xba\x04\x00G\xba\x04@D\xba\x04\xc0@\xba\x04 E\xba\x04\xc0E\xba\x04\xe0@\xba\x04\x00F\xba\x04\xc0G\xba\x04 F\xba\x04\xa0G\xba\x04`E\xba\x04\xe0F\xba\x04\xc0H\xba\x04`I\xba\x04\xa0H\xba\x04\xe0I\xba\x04\xe0B\xba\x04 C\xba\x04\x00H\xba\x04`H\xba\x04\xa0I\xba\x04 G\xba\x04\x80H\xba\x04\xe0A\xba\x04\xa0C\xba\x04\x80I\xba\x04\x00I\xba\x04\xe0G\xba\x04\xc0I\xba\x04 H\xba\x04\x00J\xba\x04\xa0J\xba\x04\x80J\xba\x04 J\xba\x04\xe0J\xba\x04\xc0J\xba\x04 B\xba\x04\x00K\xba\x04 K\xba\x04@K\xba\x04\xa0K\xba\x04\x80K\xba\x04`B\xba\x04\x00L\xba\x04\xe0K\xba\x04 A\xba\x04 L\xba\x04@L\xba\x04\xa0L\xba\x04\x80L\xba\x04\xc0A\xba\x04\x00M\xba\x04 M\xba\x04@M\xba\x04@J\xba\x04\x80G\xba\x04\xa0M\xba\x04\x80M\xba\x04\xe0M\xba\x04\xc0M\xba\x04 N\xba\x04@N\xba\x04\xe0C\xba\x04\xc0D\xba\x04\xa0N\xba\x04\x80N\xba\x04\x00C\xba\x04\xc0N\xba\x04 O\xba\x04@O\xba\x04`G\xba\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9404
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9405
(I1
(I200
I1
tg9122
I00
S'\x9c\xf4\xae?\xc7i\x86?\xf6\xce\xac?\xff\xce\xec?\xd2\x00\x8f?*\x01\x00@\xea\xe3\x9d?#\x04\xc0?\xa8\xc1\xfb?\xee\x0e\x91?\xf1\x8f\x88?\xf9\xb7;@\xa6F\x14@\xa3"B@\x15\x01\xcf?\xa4\x11\x11@\x11\x8bH@\x0ey\'@`\x89\x08@W\xad\x1a@\xecz\xb7?\xf1y\xb7?\xbe\xcd\x0c@U\x08 @_tf?\x92\x02\x10@\xbeI\xc4?g:s?\xf8\xe9]?\xbbKD?\xf4\x8b\xc8?\x8b\xacZ@\xb0?s?y\x8f\x18@\xd4\xcd\x1c@\xf2E$@\xe0$\x82?G;\x93?\xb2We@\x12\x131@E?D?\xaf\xc1{?\xc05\xf3?\x82\xc1\xfb?\xbc#\xc2?Y\x8b\xc8?Am\x86?\xfb\xe4]?\x82\xbb*?.\x8c\x88?\xf8af?\xce\xf9n?\x8bW5@\x95\xf9n?z\x93\xd9?\xd2\xad\x8a?\xd3\xfbn?\x9d=3?\x7f\xbc*?\x9f\x9cH?\xec\xd3\x8c?\x84m&?\xa6E\x14@5\x9bw?\x0cm\x86?\xe8w\xb7?\x94\xfd.?k\xad\x8a?=\xd5\x0c@\xc4\xfb.?\xcdtf?\x18\xe1\x9d?^\x85w?z\xad\x1a@[\xe0-@\x00\x8f\x88?\xd8\xf3.?\x02\xb2\x8a?\x1aRD?\xc2\xa4Y?8\x857?\x1c;s?`n&?\x9f\x9a\xe8?\x11q&?kv\x97?\xadR\x95?\xd5:3?!\x08@?\x12x\xc6?\xcd\x96\x99?\x01\x10\x91?\xf1:\xd3?\x94G\x04@%\x99H?X\xb0\x8a?\xfb\xe4\x1d?2\xe1\x9d?+\x8b\xa8?\x01\xbb*?\xcc\xf2n? QU?6\xea]?\xf3\x9e\xb9?\x8a\xc8;?\xa1\x857?o*b?\xd5\xac\xaa?\xaa\xa6Y?:\xc7\x8c?e\x9a\x81@\xecg\x06@\x1f\xdfL?\x13\x03\x80?\xda-"?)\xe4\x9d?\x8b\xa7Y?\xf4\x8b\x88?\x19\x80w?\x14\x99w?\x14\x84w?3\x16\x91?gm&?\x89\xd5\x0c?\x87~7?Xsf?\x84\x1d\xa2?\t\x98Y?\xaeE\x04@I\x94H?!\x8f\x88?\xe05#@\xf7\xb8*?\x19~w?.\xf5\x8e?\xb4/"?c\xa2\x19?5n&?\xfb\xb0\x8a?\x85}\x97?^i\x86?\xd8\xbc\x19?\xf8\xae\x8a?\x076\x93?\xfel\x86?~\x0b@?\xee\x95H?\xebOD?g:3?\xe9\'b?F\x9e\xb9?\xcb8s?\xd4\x1f\x11?\xac\xb0j?\xe8:3?z\xc3;?)\xfcn?\xf2\xbf\x9b?\xe6\x16Q?*(\x82?\xf3ef?\xb5^\xe6?1\x89\x08@&<b?\x19*b?\xeb6\xb3?\x03/"?\x04\xe9\x1d?\xcf\xb1j?\xd9\x98\xa8?\x83\xb1*?\x19\r@?\xd2\xeb\x1d?\xd9\xea]?\xca\xb7*?S\xb1\x8a?6\xb5*?,."?d\x02\x80?2uf?\xe6\xa1Y?\xb2F\x14@\x88\xfc\x8e?X\xb1j?\x8e)"?\xcc\x13\xb1?\x8bi\xa6?\x1f\x03\x80?q\xf6n?\xac\xb0j?\x01~w?9&\x82?\x1f\x90H?[\xc8;?\xd2$\xe2?\xe5A\x14@ERD?\xb0}7?a\xdf=@\x84\xa6Y?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9406
(I1
(I200
I1
tg9244
I00
S'\xe8\x87\xf9\x048\x83\xf9\x04(\xb1\xf2\x04\x18\xb5\xf2\x04(\xb7\xf2\x04P\xb0\xf2\x04X\xb7\xf2\x04\x80\xbc\xf2\x040\xb8\xf2\x04\xd8\xb2\xf2\x04\xb8\xb4\xf2\x04p\xb4\xf2\x04H\xb8\xf2\x04`\xbb\xf2\x04\xc8\xbc\xf2\x04\xa0\xb4\xf2\x04\x80\xbf\xf2\x04\x98\xb9\xf2\x04\xa8\xb5\xf2\x04\x80\xb9\xf2\x04\xf8\xb0\xf2\x04\xb8\xba\xf2\x04X\xb1\xf2\x04x\xb8\xf2\x04\xf0\xb2\xf2\x04`\xb8\xf2\x04H\xb5\xf2\x048\xb3\xf2\x04\xe8\xb1\xf2\x04\xf0\xbb\xf2\x04\xd0\xbd\xf2\x04`\xb5\xf2\x04(\xbd\xf2\x04x\xbe\xf2\x040\xbb\xf2\x04\xb0\xbf\xf2\x04@\xb4\xf2\x04\x10\xb1\xf2\x04\x80\xb3\xf2\x04\x90\xbe\xf2\x048\xb6\xf2\x04\xd0\xba\xf2\x04p\xba\xf2\x04x\xb5\xf2\x04\x90\xbb\xf2\x04\xe8\xba\xf2\x04\x80\xb0\xf2\x04\xf8\xb6\xf2\x04\xe0\xb0\xf2\x04\x18\xb2\xf2\x048\xb9\xf2\x04\xf8\xbc\xf2\x04\xa0\xb7\xf2\x04H\xbe\xf2\x04P\xbc\xf2\x04\xd8\xb8\xf2\x04\xc0\xbb\xf2\x04\xa0\xb1\xf2\x040\xbe\xf2\x04p\xb1\xf2\x04\x00\xb2\xf2\x04\x88\xba\xf2\x04\x90\xb8\xf2\x04\xd8\xb5\xf2\x04@\xb7\xf2\x04\xc8\xb0\xf2\x04\xf0\xbe\xf2\x04(\xb4\xf2\x04\xe0\xb9\xf2\x04\xa8\xbe\xf2\x040\xb5\xf2\x04\xe8\xb7\xf2\x04@\xbd\xf2\x04\xe0\xbf\xf2\x04\xc0\xbe\xf2\x04\xc0\xb5\xf2\x04P\xbf\xf2\x04\x08\xb3\xf2\x04 \xbc\xf2\x04\xd0\xb4\xf2\x04X\xba\xf2\x04\x98\xbf\xf2\x04\xf8\xb9\xf2\x04\xa8\xbb\xf2\x04X\xb4\xf2\x04p\xb7\xf2\x04\xc8\xb6\xf2\x04 \xbf\xf2\x04\xd0\xb7\xf2\x04\x18\xb8\xf2\x04h\xb3\xf2\x04\x98\xb3\xf2\x04\x00\xb8\xf2\x048\xbf\xf2\x04\xe0\xb6\xf2\x04\x08\xbc\xf2\x04 \xb9\xf2\x04\xc8\xb9\xf2\x04X\xbd\xf2\x04\x88\xbd\xf2\x04\xb0\xb0\xf2\x04\x10\xbd\xf2\x04\x18\xbb\xf2\x04\x90\xb2\xf2\x04\x00\xbb\xf2\x04P\xb9\xf2\x04\xb0\xb9\xf2\x04\xf8\xb3\xf2\x04\x18\xbe\xf2\x04\x08\xbf\xf2\x04\xd0\xb1\xf2\x04`\xb2\xf2\x04\xb0\xbc\xf2\x04p\xbd\xf2\x04h\xbc\xf2\x04H\xb2\xf2\x04\xd8\xbe\xf2\x04\xa8\xb8\xf2\x048\xbc\xf2\x04\xb8\xbd\xf2\x04h\xb0\xf2\x04\xc8\xbf\xf2\x04(\xba\xf2\x04\xc0\xb2\xf2\x04\x10\xba\xf2\x04h\xb9\xf2\x04\xe8\xbd\xf2\x04H\xbb\xf2\x04@\xb1\xf2\x04\xe0\xb3\xf2\x04\xf0\xb8\xf2\x04\xb8\xb7\xf2\x04\xb0\xb3\xf2\x04P\xb3\xf2\x04\x98\xbc\xf2\x04 \xb0\xf2\x04\x08\xb9\xf2\x04h\xbf\xf2\x04\xa0\xba\xf2\x04\x80,\xef\x04\xf8\xb0\xf9\x04\x98\xbf\xf9\x04P\xb9\xf9\x04\x10\xb7\xf9\x04\x18\xbe\xf9\x04\xf0\xb8\xf9\x04@\xb7\xf9\x04\x80\xbf\xf9\x048\xb9\xf9\x04P\xb6\xf9\x04\xb8\xb4\xf9\x04\xc0\xbe\xf9\x04\x08\xb9\xf9\x04\x00\xbe\xf9\x04\x98\xb3\xf9\x04P\xbf\xf9\x04 \xb9\xf9\x04\xb0\xb3\xf9\x04 \xbf\xf9\x04\xd8\xb2\xf9\x04\xf8\xb3\xf9\x04\xa0\xb1\xf9\x04\xa8\xb8\xf9\x048\xb6\xf9\x04\x80\xb6\xf9\x04(\xba\xf9\x04\x10\xbd\xf9\x04\xd0\xbd\xf9\x04H\xb5\xf9\x04\x88\xba\xf9\x04h\xbf\xf9\x04@\xba\xf9\x04\xe8\xbd\xf9\x048\xb0\xf9\x04\xa0\xba\xf9\x04\xa8\xb2\xf9\x04X\xba\xf9\x04p\xba\xf9\x04\xb8\xb1\xf9\x04x\xbe\xf9\x04 \xb0\xf9\x04\xb0\xbf\xf9\x04p\xb7\xf9\x04\x90\xb8\xf9\x04\xb8\xb7\xf9\x04`\xb5\xf9\x04\x80\xb0\xf9\x04@\xbd\xf9\x040\xb8\xf9\x04\xe0\xbc\xf9\x04\x18\xb2\xf9\x04\x08\xb6\xf9\x04`\xbe\xf2\x04\xa8\xb2\xf2\x04\xd8\xbb\xf2\x04\xe8\xb4\xf2\x04\x00\xbe\xf2\x040\xb2\xf2\x04x\xb2\xf2\x04\x10\xb7\xf2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9407
(dp9408
g9130
(dp9409
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9395
sg9133
(lp9410
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9411
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9412
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9413
g1
(g9146
g9115
(dp9414
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9415
ag1
(g9146
g9115
(dp9416
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9417
ag1
(g9146
g9115
(dp9418
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9419
ag1
(g9146
g9115
(dp9420
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9421
ag1
(g9146
g9115
(dp9422
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9423
ag1
(g9146
g9115
(dp9424
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9425
ag1
(g9146
g9115
(dp9426
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9427
ag1
(g9146
g9115
(dp9428
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9429
ag1
(g9146
g9115
(dp9430
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9431
ag1
(g9146
g9115
(dp9432
g906
g1061
sg894
g1051
sg908
g1055
sg903
g1059
stRp9433
ag1
(g9146
g9115
(dp9434
g906
g1072
sg894
g1068
sg908
g1079
sg903
g1076
stRp9435
ag1
(g9146
g9115
(dp9436
g906
g1061
sg894
g1051
sg908
g1055
sg903
g1059
stRp9437
ag1
(g9146
g9115
(dp9438
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9439
ag1
(g9146
g9115
(dp9440
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9441
ag1
(g9146
g9115
(dp9442
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9443
ag1
(g9146
g9115
(dp9444
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9445
ag1
(g9146
g9115
(dp9446
g906
g970
sg894
g1158
sg908
g977
sg903
g1165
stRp9447
ag1
(g9146
g9115
(dp9448
g906
g919
sg894
g1173
sg908
g926
sg903
g1180
stRp9449
ag1
(g9146
g9115
(dp9450
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9451
ag1
(g9146
g9115
(dp9452
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9453
ag1
(g9146
g9115
(dp9454
g906
g936
sg894
g1222
sg908
g943
sg903
g1229
stRp9455
ag1
(g9146
g9115
(dp9456
g906
g1072
sg894
g1068
sg908
g1079
sg903
g1076
stRp9457
ag1
(g9146
g9115
(dp9458
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9459
ag1
(g9146
g9115
(dp9460
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9461
ag1
(g9146
g9115
(dp9462
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9463
ag1
(g9146
g9115
(dp9464
g906
g1293
sg894
g1289
sg908
g1300
sg903
g1297
stRp9465
ag1
(g9146
g9115
(dp9466
g906
g970
sg894
g1158
sg908
g977
sg903
g1165
stRp9467
ag1
(g9146
g9115
(dp9468
g906
g1132
sg894
g1319
sg908
g1139
sg903
g1326
stRp9469
ag1
(g9146
g9115
(dp9470
g906
g970
sg894
g1158
sg908
g977
sg903
g1165
stRp9471
ag1
(g9146
g9115
(dp9472
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9473
ag1
(g9146
g9115
(dp9474
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9475
ag1
(g9146
g9115
(dp9476
g906
g1108
sg894
g1377
sg908
g1102
sg903
g1384
stRp9477
ag1
(g9146
g9115
(dp9478
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9479
ag1
(g9146
g9115
(dp9480
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9481
ag1
(g9146
g9115
(dp9482
g906
g1038
sg894
g1418
sg908
g1045
sg903
g1425
stRp9483
ag1
(g9146
g9115
(dp9484
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9485
ag1
(g9146
g9115
(dp9486
g906
g936
sg894
g1222
sg908
g943
sg903
g1229
stRp9487
ag1
(g9146
g9115
(dp9488
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9489
ag1
(g9146
g9115
(dp9490
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9491
ag1
(g9146
g9115
(dp9492
g906
g1489
sg894
g1485
sg908
g1496
sg903
g1493
stRp9493
ag1
(g9146
g9115
(dp9494
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9495
ag1
(g9146
g9115
(dp9496
g906
g1021
sg894
g1515
sg908
g1028
sg903
g1522
stRp9497
ag1
(g9146
g9115
(dp9498
g906
g987
sg894
g1530
sg908
g994
sg903
g1537
stRp9499
ag1
(g9146
g9115
(dp9500
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9501
ag1
(g9146
g9115
(dp9502
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9503
ag1
(g9146
g9115
(dp9504
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9505
ag1
(g9146
g9115
(dp9506
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9507
ag1
(g9146
g9115
(dp9508
g906
g970
sg894
g1158
sg908
g977
sg903
g1165
stRp9509
ag1
(g9146
g9115
(dp9510
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9511
ag1
(g9146
g9115
(dp9512
g906
g1108
sg894
g1377
sg908
g1102
sg903
g1384
stRp9513
ag1
(g9146
g9115
(dp9514
g906
g936
sg894
g1222
sg908
g943
sg903
g1229
stRp9515
ag1
(g9146
g9115
(dp9516
g906
g1132
sg894
g1319
sg908
g1139
sg903
g1326
stRp9517
ag1
(g9146
g9115
(dp9518
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9519
ag1
(g9146
g9115
(dp9520
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9521
ag1
(g9146
g9115
(dp9522
g906
g1061
sg894
g1688
sg908
g1055
sg903
g1695
stRp9523
ag1
(g9146
g9115
(dp9524
g906
g919
sg894
g1173
sg908
g926
sg903
g1180
stRp9525
ag1
(g9146
g9115
(dp9526
g906
g899
sg894
g1716
sg908
g909
sg903
g1723
stRp9527
ag1
(g9146
g9115
(dp9528
g906
g1215
sg894
g1731
sg908
g1209
sg903
g1738
stRp9529
ag1
(g9146
g9115
(dp9530
g906
g1072
sg894
g1068
sg908
g1079
sg903
g1076
stRp9531
ag1
(g9146
g9115
(dp9532
g906
g899
sg894
g1716
sg908
g909
sg903
g1723
stRp9533
ag1
(g9146
g9115
(dp9534
g906
g1364
sg894
g1772
sg908
g1371
sg903
g1779
stRp9535
ag1
(g9146
g9115
(dp9536
g906
g1132
sg894
g1319
sg908
g1139
sg903
g1326
stRp9537
ag1
(g9146
g9115
(dp9538
g906
g1293
sg894
g1800
sg908
g1300
sg903
g1807
stRp9539
ag1
(g9146
g9115
(dp9540
g906
g1021
sg894
g1515
sg908
g1028
sg903
g1522
stRp9541
ag1
(g9146
g9115
(dp9542
g906
g1293
sg894
g1289
sg908
g1300
sg903
g1297
stRp9543
ag1
(g9146
g9115
(dp9544
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9545
ag1
(g9146
g9115
(dp9546
g906
g1072
sg894
g1854
sg908
g1079
sg903
g1861
stRp9547
ag1
(g9146
g9115
(dp9548
g906
g1489
sg894
g1869
sg908
g1496
sg903
g1876
stRp9549
ag1
(g9146
g9115
(dp9550
g906
g1888
sg894
g1884
sg908
g1895
sg903
g1892
stRp9551
ag1
(g9146
g9115
(dp9552
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9553
ag1
(g9146
g9115
(dp9554
g906
g1215
sg894
g1731
sg908
g1209
sg903
g1738
stRp9555
ag1
(g9146
g9115
(dp9556
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9557
ag1
(g9146
g9115
(dp9558
g906
g919
sg894
g1173
sg908
g926
sg903
g1180
stRp9559
ag1
(g9146
g9115
(dp9560
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9561
ag1
(g9146
g9115
(dp9562
g906
g1215
sg894
g1731
sg908
g1209
sg903
g1738
stRp9563
ag1
(g9146
g9115
(dp9564
g906
g1004
sg894
g1979
sg908
g1011
sg903
g1986
stRp9565
ag1
(g9146
g9115
(dp9566
g906
g1364
sg894
g1772
sg908
g1371
sg903
g1779
stRp9567
ag1
(g9146
g9115
(dp9568
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9569
ag1
(g9146
g9115
(dp9570
g906
g1004
sg894
g1979
sg908
g1011
sg903
g1986
stRp9571
ag1
(g9146
g9115
(dp9572
g906
g1489
sg894
g1485
sg908
g1496
sg903
g1493
stRp9573
ag1
(g9146
g9115
(dp9574
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9575
ag1
(g9146
g9115
(dp9576
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9577
ag1
(g9146
g9115
(dp9578
g906
g1364
sg894
g1772
sg908
g1371
sg903
g1779
stRp9579
ag1
(g9146
g9115
(dp9580
g906
g2089
sg894
g2085
sg908
g2096
sg903
g2093
stRp9581
ag1
(g9146
g9115
(dp9582
g906
g970
sg894
g1158
sg908
g977
sg903
g1165
stRp9583
ag1
(g9146
g9115
(dp9584
g906
g1192
sg894
g2115
sg908
g1199
sg903
g2122
stRp9585
ag1
(g9146
g9115
(dp9586
g906
g1061
sg894
g1688
sg908
g1055
sg903
g1695
stRp9587
ag1
(g9146
g9115
(dp9588
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9589
ag1
(g9146
g9115
(dp9590
g906
g1132
sg894
g1319
sg908
g1139
sg903
g1326
stRp9591
ag1
(g9146
g9115
(dp9592
g906
g987
sg894
g1530
sg908
g994
sg903
g1537
stRp9593
ag1
(g9146
g9115
(dp9594
g906
g1061
sg894
g1051
sg908
g1055
sg903
g1059
stRp9595
ag1
(g9146
g9115
(dp9596
g906
g1192
sg894
g2115
sg908
g1199
sg903
g2122
stRp9597
ag1
(g9146
g9115
(dp9598
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9599
ag1
(g9146
g9115
(dp9600
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9601
ag1
(g9146
g9115
(dp9602
g906
g1072
sg894
g1854
sg908
g1079
sg903
g1861
stRp9603
ag1
(g9146
g9115
(dp9604
g906
g2089
sg894
g2085
sg908
g2096
sg903
g2093
stRp9605
ag1
(g9146
g9115
(dp9606
g906
g1072
sg894
g1854
sg908
g1079
sg903
g1861
stRp9607
ag1
(g9146
g9115
(dp9608
g906
g1192
sg894
g2115
sg908
g1199
sg903
g2122
stRp9609
ag1
(g9146
g9115
(dp9610
g906
g2089
sg894
g2286
sg908
g2096
sg903
g2293
stRp9611
ag1
(g9146
g9115
(dp9612
g906
g1004
sg894
g1979
sg908
g1011
sg903
g1986
stRp9613
ag1
(g9146
g9115
(dp9614
g906
g919
sg894
g915
sg908
g926
sg903
g923
stRp9615
ag1
(g9146
g9115
(dp9616
g906
g1061
sg894
g1688
sg908
g1055
sg903
g1695
stRp9617
ag1
(g9146
g9115
(dp9618
g906
g2089
sg894
g2085
sg908
g2096
sg903
g2093
stRp9619
ag1
(g9146
g9115
(dp9620
g906
g1215
sg894
g1731
sg908
g1209
sg903
g1738
stRp9621
ag1
(g9146
g9115
(dp9622
g906
g1004
sg894
g1979
sg908
g1011
sg903
g1986
stRp9623
ag1
(g9146
g9115
(dp9624
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9625
ag1
(g9146
g9115
(dp9626
g906
g1108
sg894
g1377
sg908
g1102
sg903
g1384
stRp9627
ag1
(g9146
g9115
(dp9628
g906
g1021
sg894
g1515
sg908
g1028
sg903
g1522
stRp9629
ag1
(g9146
g9115
(dp9630
g906
g987
sg894
g1530
sg908
g994
sg903
g1537
stRp9631
ag1
(g9146
g9115
(dp9632
g906
g1061
sg894
g1051
sg908
g1055
sg903
g1059
stRp9633
ag1
(g9146
g9115
(dp9634
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9635
ag1
(g9146
g9115
(dp9636
g906
g1888
sg894
g1884
sg908
g1895
sg903
g1892
stRp9637
ag1
(g9146
g9115
(dp9638
g906
g1038
sg894
g1418
sg908
g1045
sg903
g1425
stRp9639
ag1
(g9146
g9115
(dp9640
g906
g1888
sg894
g1884
sg908
g1895
sg903
g1892
stRp9641
ag1
(g9146
g9115
(dp9642
g906
g1038
sg894
g1418
sg908
g1045
sg903
g1425
stRp9643
ag1
(g9146
g9115
(dp9644
g906
g1293
sg894
g1800
sg908
g1300
sg903
g1807
stRp9645
ag1
(g9146
g9115
(dp9646
g906
g1489
sg894
g1869
sg908
g1496
sg903
g1876
stRp9647
ag1
(g9146
g9115
(dp9648
g906
g1293
sg894
g1800
sg908
g1300
sg903
g1807
stRp9649
ag1
(g9146
g9115
(dp9650
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9651
ag1
(g9146
g9115
(dp9652
g906
g1489
sg894
g1485
sg908
g1496
sg903
g1493
stRp9653
ag1
(g9146
g9115
(dp9654
g906
g919
sg894
g1173
sg908
g926
sg903
g1180
stRp9655
ag1
(g9146
g9115
(dp9656
g906
g1489
sg894
g1485
sg908
g1496
sg903
g1493
stRp9657
ag1
(g9146
g9115
(dp9658
g906
g1072
sg894
g1854
sg908
g1079
sg903
g1861
stRp9659
ag1
(g9146
g9115
(dp9660
g906
g1364
sg894
g1772
sg908
g1371
sg903
g1779
stRp9661
ag1
(g9146
g9115
(dp9662
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9663
ag1
(g9146
g9115
(dp9664
g906
g1132
sg894
g1319
sg908
g1139
sg903
g1326
stRp9665
ag1
(g9146
g9115
(dp9666
g906
g1061
sg894
g1688
sg908
g1055
sg903
g1695
stRp9667
ag1
(g9146
g9115
(dp9668
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9669
ag1
(g9146
g9115
(dp9670
g906
g2089
sg894
g2286
sg908
g2096
sg903
g2293
stRp9671
ag1
(g9146
g9115
(dp9672
g906
g1888
sg894
g2691
sg908
g1895
sg903
g2698
stRp9673
ag1
(g9146
g9115
(dp9674
g906
g1021
sg894
g1515
sg908
g1028
sg903
g1522
stRp9675
ag1
(g9146
g9115
(dp9676
g906
g953
sg894
g2719
sg908
g960
sg903
g2726
stRp9677
ag1
(g9146
g9115
(dp9678
g906
g936
sg894
g1222
sg908
g943
sg903
g1229
stRp9679
ag1
(g9146
g9115
(dp9680
g906
g1108
sg894
g1377
sg908
g1102
sg903
g1384
stRp9681
ag1
(g9146
g9115
(dp9682
g906
g953
sg894
g2719
sg908
g960
sg903
g2726
stRp9683
ag1
(g9146
g9115
(dp9684
g906
g1888
sg894
g1884
sg908
g1895
sg903
g1892
stRp9685
ag1
(g9146
g9115
(dp9686
g906
g953
sg894
g2719
sg908
g960
sg903
g2726
stRp9687
ag1
(g9146
g9115
(dp9688
g906
g1004
sg894
g1000
sg908
g1011
sg903
g1008
stRp9689
ag1
(g9146
g9115
(dp9690
g906
g1293
sg894
g1800
sg908
g1300
sg903
g1807
stRp9691
ag1
(g9146
g9115
(dp9692
g906
g2089
sg894
g2085
sg908
g2096
sg903
g2093
stRp9693
ag1
(g9146
g9115
(dp9694
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9695
ag1
(g9146
g9115
(dp9696
g906
g1072
sg894
g1068
sg908
g1079
sg903
g1076
stRp9697
ag1
(g9146
g9115
(dp9698
g906
g1038
sg894
g1418
sg908
g1045
sg903
g1425
stRp9699
ag1
(g9146
g9115
(dp9700
g906
g1489
sg894
g1869
sg908
g1496
sg903
g1876
stRp9701
ag1
(g9146
g9115
(dp9702
g906
g899
sg894
g1716
sg908
g909
sg903
g1723
stRp9703
ag1
(g9146
g9115
(dp9704
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9705
ag1
(g9146
g9115
(dp9706
g906
g899
sg894
g1716
sg908
g909
sg903
g1723
stRp9707
ag1
(g9146
g9115
(dp9708
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9709
ag1
(g9146
g9115
(dp9710
g906
g899
sg894
g1716
sg908
g909
sg903
g1723
stRp9711
ag1
(g9146
g9115
(dp9712
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9713
ag1
(g9146
g9115
(dp9714
g906
g953
sg894
g2719
sg908
g960
sg903
g2726
stRp9715
ag1
(g9146
g9115
(dp9716
g906
g987
sg894
g1530
sg908
g994
sg903
g1537
stRp9717
ag1
(g9146
g9115
(dp9718
g906
g1888
sg894
g2691
sg908
g1895
sg903
g2698
stRp9719
ag1
(g9146
g9115
(dp9720
g906
g2089
sg894
g2286
sg908
g2096
sg903
g2293
stRp9721
ag1
(g9146
g9115
(dp9722
g906
g1489
sg894
g1869
sg908
g1496
sg903
g1876
stRp9723
ag1
(g9146
g9115
(dp9724
g906
g987
sg894
g1530
sg908
g994
sg903
g1537
stRp9725
ag1
(g9146
g9115
(dp9726
g906
g1489
sg894
g1485
sg908
g1496
sg903
g1493
stRp9727
ag1
(g9146
g9115
(dp9728
g906
g1293
sg894
g1289
sg908
g1300
sg903
g1297
stRp9729
ag1
(g9146
g9115
(dp9730
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9731
ag1
(g9146
g9115
(dp9732
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9733
ag1
(g9146
g9115
(dp9734
g906
g1192
sg894
g2115
sg908
g1199
sg903
g2122
stRp9735
ag1
(g9146
g9115
(dp9736
g906
g1061
sg894
g1051
sg908
g1055
sg903
g1059
stRp9737
ag1
(g9146
g9115
(dp9738
g906
g1215
sg894
g1205
sg908
g1209
sg903
g1213
stRp9739
ag1
(g9146
g9115
(dp9740
g906
g1888
sg894
g2691
sg908
g1895
sg903
g2698
stRp9741
ag1
(g9146
g9115
(dp9742
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9743
ag1
(g9146
g9115
(dp9744
g906
g1215
sg894
g1731
sg908
g1209
sg903
g1738
stRp9745
ag1
(g9146
g9115
(dp9746
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9747
ag1
(g9146
g9115
(dp9748
g906
g1888
sg894
g2691
sg908
g1895
sg903
g2698
stRp9749
ag1
(g9146
g9115
(dp9750
g906
g1038
sg894
g1418
sg908
g1045
sg903
g1425
stRp9751
ag1
(g9146
g9115
(dp9752
g906
g899
sg894
g895
sg908
g909
sg903
g904
stRp9753
ag1
(g9146
g9115
(dp9754
g906
g936
sg894
g932
sg908
g943
sg903
g940
stRp9755
ag1
(g9146
g9115
(dp9756
g906
g970
sg894
g966
sg908
g977
sg903
g974
stRp9757
ag1
(g9146
g9115
(dp9758
g906
g1132
sg894
g1128
sg908
g1139
sg903
g1136
stRp9759
ag1
(g9146
g9115
(dp9760
g906
g1364
sg894
g1360
sg908
g1371
sg903
g1368
stRp9761
ag1
(g9146
g9115
(dp9762
g906
g1888
sg894
g2691
sg908
g1895
sg903
g2698
stRp9763
ag1
(g9146
g9115
(dp9764
g906
g1021
sg894
g1515
sg908
g1028
sg903
g1522
stRp9765
ag1
(g9146
g9115
(dp9766
g906
g1072
sg894
g1068
sg908
g1079
sg903
g1076
stRp9767
ag1
(g9146
g9115
(dp9768
g906
g1038
sg894
g1034
sg908
g1045
sg903
g1042
stRp9769
ag1
(g9146
g9115
(dp9770
g906
g1192
sg894
g1188
sg908
g1199
sg903
g1196
stRp9771
ag1
(g9146
g9115
(dp9772
g906
g1489
sg894
g1869
sg908
g1496
sg903
g1876
stRp9773
ag1
(g9146
g9115
(dp9774
g906
g1293
sg894
g1800
sg908
g1300
sg903
g1807
stRp9775
ag1
(g9146
g9115
(dp9776
g906
g953
sg894
g949
sg908
g960
sg903
g957
stRp9777
ag1
(g9146
g9115
(dp9778
g906
g2089
sg894
g2085
sg908
g2096
sg903
g2093
stRp9779
ag1
(g9146
g9115
(dp9780
g906
g1888
sg894
g1884
sg908
g1895
sg903
g1892
stRp9781
ag1
(g9146
g9115
(dp9782
g906
g936
sg894
g1222
sg908
g943
sg903
g1229
stRp9783
ag1
(g9146
g9115
(dp9784
g906
g1293
sg894
g1289
sg908
g1300
sg903
g1297
stRp9785
ag1
(g9146
g9115
(dp9786
g906
g1192
sg894
g2115
sg908
g1199
sg903
g2122
stRp9787
ag1
(g9146
g9115
(dp9788
g906
g1108
sg894
g1098
sg908
g1102
sg903
g1106
stRp9789
ag1
(g9146
g9115
(dp9790
g906
g987
sg894
g983
sg908
g994
sg903
g991
stRp9791
ag1
(g9146
g9115
(dp9792
g906
g1364
sg894
g1772
sg908
g1371
sg903
g1779
stRp9793
ag1
(g9146
g9115
(dp9794
g906
g1293
sg894
g1289
sg908
g1300
sg903
g1297
stRp9795
ag1
(g9146
g9115
(dp9796
g906
g1004
sg894
g1979
sg908
g1011
sg903
g1986
stRp9797
ag1
(g9146
g9115
(dp9798
g906
g2089
sg894
g2286
sg908
g2096
sg903
g2293
stRp9799
ag1
(g9146
g9115
(dp9800
g906
g1072
sg894
g1854
sg908
g1079
sg903
g1861
stRp9801
ag1
(g9146
g9115
(dp9802
g906
g1021
sg894
g1017
sg908
g1028
sg903
g1025
stRp9803
ag1
(g9146
g9115
(dp9804
g906
g1061
sg894
g1688
sg908
g1055
sg903
g1695
stRp9805
ag1
(g9146
g9115
(dp9806
g906
g953
sg894
g2719
sg908
g960
sg903
g2726
stRp9807
ag1
(g9146
g9115
(dp9808
g906
g2089
sg894
g2286
sg908
g2096
sg903
g2293
stRp9809
ag1
(g9146
g9115
(dp9810
g906
g919
sg894
g1173
sg908
g926
sg903
g1180
stRp9811
ag1
(g9146
g9115
(dp9812
g906
g1108
sg894
g1377
sg908
g1102
sg903
g1384
stRp9813
asg9227
Nsg9228
g3609
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp9814
(dp9815
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9816
sg9107
(lp9817
sg9109
I80376656
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp9818
g33
g9118
(g9119
g92
g9120
S'b'
tRp9819
(I1
(I200
I1
tg9244
I00
S'p7\x8b\x12\xa07\x8b\x12\xd07\x8b\x12\xf8t\x8b\x12 u\x8b\x12Hu\x8b\x12\xe0O\xba\x04\x008\x8b\x12\xa07\x8b\x12pu\x8b\x12 u\x8b\x12\xd0\x0c\x8b\x12\xb8\x0b\x8b\x12\x008\x8b\x12(\x0c\x8b\x12 u\x8b\x12\xa07\x8b\x12\x98u\x8b\x12\xb8\x0b\x8b\x1208\x8b\x12\xc0u\x8b\x12@I\xba\x04\xe0O\xba\x04`\x0c\x8b\x12\x98\x0c\x8b\x12\xf8t\x8b\x12Pw\x8b\x12 u\x8b\x12`\x0c\x8b\x12(\x0c\x8b\x12\xd07\x8b\x12\xf0\x0b\x8b\x12\x809\x8b\x12\xd8v\x8b\x12 9\x8b\x12\x10v\x8b\x12(\x0c\x8b\x12pu\x8b\x12\xd07\x8b\x1208\x8b\x12\x008\x8b\x12\x98\x0c\x8b\x12`\x0c\x8b\x12\xd07\x8b\x12\xc0O\xba\x04\xa07\x8b\x1208\x8b\x12@I\xba\x04\x98u\x8b\x12\xe8u\x8b\x12\xa07\x8b\x12Hu\x8b\x12\xc0u\x8b\x12\x98\x0c\x8b\x12\xf8t\x8b\x12(\x0c\x8b\x12\x008\x8b\x12\xb8\x0b\x8b\x12\x00w\x8b\x12p7\x8b\x12(\x0c\x8b\x12\xc0O\xba\x04pu\x8b\x12\xf8t\x8b\x12\xc0O\xba\x04\xb8\x0b\x8b\x12\x008\x8b\x12@I\xba\x04`\x0c\x8b\x12Hu\x8b\x12\x98u\x8b\x12\xd07\x8b\x12\xf8t\x8b\x12\xc0u\x8b\x12 9\x8b\x12\xf0\x0b\x8b\x12pu\x8b\x12 u\x8b\x12\xe8u\x8b\x12\x10v\x8b\x12\xf8t\x8b\x12\xf08\x8b\x12`8\x8b\x12\xf0\x0b\x8b\x12(w\x8b\x12@I\xba\x04\xc0O\xba\x04(w\x8b\x12\xc0O\xba\x04\xf0\x0b\x8b\x12Hu\x8b\x1208\x8b\x12\xc0O\xba\x04\x98\x0c\x8b\x12p7\x8b\x12Pw\x8b\x12\xd07\x8b\x12\xc0u\x8b\x12\xd07\x8b\x12@I\xba\x04\xd07\x8b\x12\x08\r\x8b\x12\xe8u\x8b\x12\xe0O\xba\x04@I\xba\x04Pw\x8b\x12\xd8v\x8b\x12\x008\x8b\x12\xa07\x8b\x12\xd0\x0c\x8b\x12\x98u\x8b\x12p7\x8b\x12\xc0u\x8b\x12\x008\x8b\x12\x10v\x8b\x12pu\x8b\x12\x008\x8b\x12\xa07\x8b\x12`v\x8b\x12pu\x8b\x12\xf0\x0b\x8b\x1208\x8b\x12p7\x8b\x12pu\x8b\x12@I\xba\x04\xf8t\x8b\x12pu\x8b\x12\xc0u\x8b\x12`\x0c\x8b\x12\xd07\x8b\x12\xc0u\x8b\x12\xd07\x8b\x12\x98u\x8b\x12(w\x8b\x12Hu\x8b\x12`\x0c\x8b\x12@\x80\x8b\x12\x10v\x8b\x12Hu\x8b\x12P9\x8b\x12\x809\x8b\x12p7\x8b\x12\xb8\x0b\x8b\x12\xf0\x0b\x8b\x12\xa07\x8b\x12\xe8u\x8b\x12 \x80\x8b\x12\x008\x8b\x12`v\x8b\x12\xa07\x8b\x12\x98\x0c\x8b\x12\x10v\x8b\x12(\x0c\x8b\x12\x98u\x8b\x12\xf08\x8b\x12`\x0c\x8b\x12\xf0\x0b\x8b\x12P9\x8b\x1208\x8b\x12 9\x8b\x12\x98u\x8b\x12p7\x8b\x1208\x8b\x12`\x0c\x8b\x12\x10v\x8b\x12\xe0O\xba\x04\xc0u\x8b\x12\xe8u\x8b\x12@\x80\x8b\x12pu\x8b\x12 u\x8b\x12`\x0c\x8b\x12 u\x8b\x12Pw\x8b\x12\x10v\x8b\x12(\x0c\x8b\x12\x10v\x8b\x12@I\xba\x04\x88v\x8b\x12p7\x8b\x12Hu\x8b\x12pu\x8b\x12\xa07\x8b\x12\xc0O\xba\x04\x809\x8b\x12\xf0\x0b\x8b\x12(w\x8b\x12\x00w\x8b\x12\xe8u\x8b\x12\xc0O\xba\x04p7\x8b\x12 u\x8b\x12\x008\x8b\x12\x08\r\x8b\x12 u\x8b\x12\xb8\x0b\x8b\x12Hu\x8b\x12\x98u\x8b\x12\x98\x0c\x8b\x12\xf8t\x8b\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp9820
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp9821
(I1
(I200
I1
tg9244
I00
S' [\x14\x03\xe0P\x14\x03\xc0P\x14\x03@\x82\x8b\x12`\x82\x8b\x12 \x81\x8b\x12\x00\x82\x8b\x12\xa0\x82\x8b\x12\xc0\x82\x8b\x12 \x83\x8b\x12\x00\x83\x8b\x12\xe0\x81\x8b\x12\x80\x83\x8b\x12\xa0\x83\x8b\x12`\x80\x8b\x12\xe0\x83\x8b\x12\xc0\x83\x8b\x12\xe0\x80\x8b\x12@\x84\x8b\x12 \x84\x8b\x12\x00\x81\x8b\x12`\x84\x8b\x12\xc0\x84\x8b\x12\xa0\x84\x8b\x12@\x81\x8b\x12\xe0\x84\x8b\x12\x00\x85\x8b\x12 \x85\x8b\x12@\x85\x8b\x12`\x85\x8b\x12\xc0\x85\x8b\x12\xa0\x85\x8b\x12`\x83\x8b\x12\xe0\x85\x8b\x12@\x86\x8b\x12 \x86\x8b\x12\x00\x84\x8b\x12`\x86\x8b\x12\x80\x86\x8b\x12\xe0\x86\x8b\x12\xc0\x86\x8b\x12\xa0\x80\x8b\x12\x00\x87\x8b\x12 \x87\x8b\x12@\x87\x8b\x12 P\x14\x03\x80\x87\x8b\x12\xe0\x87\x8b\x12\x80\x80\x8b\x12\xe0\x82\x8b\x12@\x88\x8b\x12`\x88\x8b\x12\x80\x84\x8b\x12\x80\x88\x8b\x12\x80\x85\x8b\x12@\x83\x8b\x12\x80\x82\x8b\x12`\x87\x8b\x12\xc0\x87\x8b\x12\xc0\x88\x8b\x12\x80\x89\x8b\x12\xa0\x89\x8b\x12\x00\x89\x8b\x12\xa0\x88\x8b\x12\xe0\xb9\x15\x03\x80\xbf\x15\x03`\xbd\x15\x03`\xbf\x15\x03\xc0\xb9\x15\x03\xe0\xba\x15\x03@\xbf\x15\x03\x00\xbb\x15\x03 \xb6\x15\x03`\xbb\x15\x03\xe0\xbf\x15\x03\xa0\xbf\x15\x03@\xb8\x15\x03\xe0\xbb\x15\x03\x80\xbb\x15\x03@\xbc\x15\x03\x80\xb6\x15\x03@\xb9\x15\x03\xa0\xb4\x15\x03\xc0\xba\x15\x03\xc0\xbd\x15\x03 \xbf\x15\x03@\xb5\x15\x03`\xb4\x15\x03\x80\xbd\x15\x03\x80\xba\x15\x03 \xb4\x15\x03\x80\xb3\x15\x03\xa0\xbe\x15\x03\x00\xb5\x15\x03\x80\xb5\x15\x03\xe0\xb8\x15\x03 \xbb\x15\x03 \xba\x15\x03\xa0\xb0\x15\x03@\xbd\x15\x03\xc0\xb8\x15\x03@\xb3\x15\x03\x00\xbd\x15\x03\x80\xbc\x15\x03@\xb6\x15\x03\xc0\xbf\x15\x03\xe0\xbd\x15\x03\xe0\xb4\x15\x03\xa0\xba\x15\x03\xa0\xb9\x15\x03\xa0\xbd\x15\x03`\xb9\x15\x03\xa0\xbb\x15\x03 \xbd\x15\x03\xc0\xb5\x15\x03`\xba\x15\x03\xa0\xb8\x15\x03\x00\xbe\x15\x03\xc0\x1e\x15\x03`\x1f\x15\x03@r\x82\x0c\x80\x1d\x15\x03@\x1c\x15\x03@\x1d\x15\x03\xc0\x1c\x15\x03\x00\x1c\x15\x03\xe0\xcf\xb7\x04\xc0\xb3\x15\x03`\xb6\x15\x03 \xb8\x15\x03\xe0\x1f\x15\x03\xe0\xbc\x15\x03\x80\xbe\x15\x03\x80F\xba\x04\x80|\x83\x0c\xa0{\x83\x0c@t\x83\x0c`}\x83\x0c u\x83\x0c\xe0u\x83\x0c\x00r\x83\x0c\xa0t\x83\x0c@{\x83\x0c\x00{\x83\x0c\x80t\x83\x0c\x80z\x83\x0c\x00z\x83\x0c\xc0{\x83\x0c\xe0z\x83\x0c\x00u\x83\x0c x\x83\x0c`x\x83\x0c`z\x83\x0c\x00v\x83\x0c`t\x83\x0c\xc0s\x83\x0c\xe0t\x83\x0c\x00t\x83\x0c\xc0u\x83\x0c \xb3\x15\x03@u\x83\x0c\x00B\x84\x0c\xc0G\x84\x0c\xe0K\x84\x0c\xe0O\x84\x0c\x80D\x84\x0c\xa0K\x84\x0c\xe0F\x84\x0c\xc0D\x84\x0c\xe0D\x84\x0c`C\x84\x0c`N\x84\x0c\x00L\x84\x0c\xe0A\x84\x0c A\x84\x0c\xa0A\x84\x0c\xa0w\x82\x0c`\xda\xce\x0c\xa0\xda\xce\x0c\xc0\xda\xce\x0c@\xd0\xce\x0c\x00\xd7\xce\x0c`\xd1\xce\x0c \xd3\xce\x0c\x00\x1d\x15\x03\xc0y\x83\x0c\xc0\xb0\xd1\x0c@\xb0\xd1\x0c\xa0\xb0\xd1\x0c`\xb9\xd1\x0c\xc0\xb4\xd1\x0c`Q\x14\x03 Y\x14\x03`\xb8\x15\x03\xc0\xd2\xce\x0c\xa0\xb6\xd1\x0c\xe0\xb6\xd1\x0c \xbf\xd1\x0c`\xb0\xd1\x0c\x80Q\x14\x03'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp9822
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp9823
(I1
(I200
I1
tg9122
I00
S'\x8e\xf5\xae?\x02\xb0\xca?\xc7\x837?\xbe\xb4*?\xacTs?\xdb\xb8\xdb?\x03\x9f\x99?\xdcpf?7\x8b\xa8?BwU?\x8d\x1dQ?0\xfbn?\xe2{\x97?\xb0G\x84?\t\xb2*?\xb2\xf1L?\xbb\xc2;?\xe3\x8eH?\x87(\xa2?\xce\xfbn?\x1d\xe3]?4\xed\x9d?_\xd0\x8c?F\xf6n?\x94\xe1\xdd?\x855\x13@H\x14/?\xf8\xe9]?\xf2mf?m)"?=b\x15?\xe3PD?\x91\xc9;?\x978s?Y\xf6.?\xe5!b?\xe8\xc1{?a\x07@?C0"?\x83\xb3*?\xde\xb1j?\x7f/b?\x97\xd9L?\xc8\xf2.?&lD?\xc9 \x82?S\x94H?\x85\x0c@?\x01\xb7j?A\xfc.?i\x1cQ?\x8f\xb7\x9b?\xd8\xab\x1a@\xe1\xe1]?\x05\xc1\xdb?~\x8c&?K\xd9L?LY\x95?x\x847?\xf4f6@\x16\x13/?Q\x02\xe0?\x83s&?j\xdaL?M\x13\x01@T\x9c7?\x08/b?\xbe/"?\xef\x03\xa0?\xe0*s?\x93\xa0\x19?\x88\x01\x1e?\x9e\xc2{?w=3?\xfdrf?\xb85\xf3?\xe2\xb7*?S#\x02@\xf9r&?m\x9a\x99?\xe5X\x95?\x96^\xb5?\x1a\x06\xa0?\xd8\xd4L?\x10\xb1\x8a?\x90\xd8L?\x92V\xa4?\x0e\xe5]?\nlf?\x82\xee\x1d?3\xfa\x9f?\xc8?3?\xef\xa5\x19?\xda\x8b\x88? \xf2\x8e?\xb7\x94H?\x1d\xda\x0c?\xfel&?\x9c\xba*?\x12b\x15?\xbd\xfe\xee>?\xbf\x9b?P/"?\x99SD?Gs\x15?n\xfb.?\r\x0e@?\x86\xc6{?W(\x82?\x81\x8fH?\xa1\xb8*?\xa4\x9d\xb9?\x0fnf?\xa5\xc5{?jhf?L\xe1\x8c?\x98)"?p\xb3*?\xc3\xb6*?\x03+"?\x83\x95Y?\xb1\x16/?G(\x82?\x8c\xb3*?\xebn&?\xa0\xc5;?\xc4\xa7\x19?h\x0e@?\xff\x05\x80?\xc1\xb1*?L\xe3\x1d??\xa1\x19?4\xeb\x1d?\x9b5\xa2?\xf8`\x86?K)b?\xed\xc0\x8a?\xca\xee\x8e?\xdep\xa6?\xc6\xe8\x1d?\xe5\xe5\x1d?H\x8e\xa8?l-b?\xa9$\x82?p\xe2{?4\x06\x80?R\x847?\xfc\xf4.?(\xb8{?]\xea]?\xcc\xef\x9d?\xc1\x99Y?\x08LD?\xfa*b?\xec\xd7\x9d?\xab\x95H?\xfe.b?\xe1\xa3\x19?3)"?I*"?\xa5<3?\x059\xb3?\xed\xa8\x19?~\x04\xa0?IGD?\xff~7?\x15@3?\xdfm&?\x90\x9b7?\xf6\xb1*?t@s?|r&?C\xc8;?r%\xa2?\xda\x8b\x88?\xbc@3?c\xb9{?R\xa0\x99?\xc2\x19Q?\xcc\xc3{?\xc7\x19\xb1?.\xb8*?\xfbv\x97?\xd4GD?\xf3)"?\xae\x03\x80?\xae\xe0{?[l&?\xfb\xfan?\xdb\x7f7?Y\xa6Y?\x03b\x15?"\xf1L?s2\x93?-X\x95?\xed\xad\x8a?\x8f[f?\xab\xf5\x8e?\xee\xf1\x8e?\x13\x8b\xa8?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp9824
(I1
(I200
I1
tg9244
I00
S'h/\xef\x04h)\xef\x04\xe0 \x8a\x04\x00"\x8a\x04\x08/\x8a\x04\xb0&\x8a\x04(\'\x8a\x04\x88$\x8a\x04\xe0&\x8a\x048&\x8a\x04\xd8+\x8a\x04\xe8-\x8a\x04\xc0"\x8a\x04\x98#\x8a\x04@!\x8a\x04p*\x8a\x040.\x8a\x04\x18+\x8a\x04\x10\'\x8a\x04 &\x8a\x04 )\x8a\x040(\x8a\x04\xf8,\x8a\x04\x00(\x8a\x04h&\x8a\x04\xa8+\x8a\x04H(\x8a\x04\xf8)\x8a\x04\x90.\x8a\x04h \x8a\x04\x88*\x8a\x04\xc8&\x8a\x04\x80)\x8a\x04P/\x8a\x04 ,\x8a\x04\xc0(\x8a\x048 \x8a\x04\x88-\x8a\x04h,\x8a\x04\xd8.\x8a\x04\xd8(\x8a\x04x.\x8a\x04P \x8a\x04\xc8/\x8a\x04\xc8,\x8a\x048,\x8a\x04\x18(\x8a\x04\x18"\x8a\x04h/\x8a\x04(-\x8a\x04\xb0/\x8a\x04\xd0-\x8a\x04p\'\x8a\x04\xd0!\x8a\x04X-\x8a\x04\xb8-\x8a\x04\xf0+\x8a\x04\x98&\x8a\x04\x80,\x8a\x04\xb8*\x8a\x04\xf0.\x8a\x04\xe0,\x8a\x04\x00.\x8a\x04\x98/\x8a\x04\x88\xb1\xf2\x04\x80 \x8a\x04x+\x8a\x04@-\x8a\x04p!\x8a\x04\xc0.\x8a\x04\x80/\x8a\x04`.\x8a\x04\x10-\x8a\x04 /\x8a\x04\xb0)\x8a\x04\x10*\x8a\x04H.\x8a\x04\xa0-\x8a\x048/\x8a\x04\xe8*\x8a\x04\x08,\x8a\x04\x80#\x8a\x04\xe0/\x8a\x048\xcf\xd3\x04\x18\xce\xd3\x04(\xc7\xd3\x04\x08\xcf\xd3\x04h\xc9\xd3\x04@\xc7\xd3\x04\xe0\xc9\xd3\x04\xc8\xcc\xd3\x04\xd0\xcd\xd3\x04\xd0\xc7\xd3\x04\x18\xcb\xd3\x04\xb0\xcc\xd3\x04\x08\xc9\xd3\x04\xa0\xc7\xd3\x04\x98\xcc\xd3\x04H\xcb\xd3\x04\x80\xcf\xd3\x04\x18\xc8\xd3\x04\xb0\xc3\xd3\x04(\xcd\xd3\x04\x18\xc5\xd3\x04(\xc4\xd3\x04h\xcf\xd3\x04H\xc8\xd3\x04P\xcf\xd3\x048\x80\xf9\x04\x90\x8e\xf9\x04\xe0\x83\xf9\x04\xb8\x87\xf9\x04\xe8\x8d\xf9\x04 \x89\xf9\x04\x18\x8e\xf9\x04P\x83\xf9\x048\x8f\xf9\x04P\x80\xf9\x04\xc8\x86\xf9\x04\xa0\x8d\xf9\x04\xf0\x85\xf9\x04\xc8\x8c\xf9\x04P\x89\xf9\x04X\x81\xf9\x04\xd8\x88\xf9\x04\xb8\x8a\xf9\x04x\x85\xf9\x04\xb8\x84\xf9\x04\xd8\x8e\xf9\x04\x00\x85\xf9\x04\xd0\x87\xf9\x04\x10\x87\xf9\x04X\x8d\xf9\x04\x90\x88\xf9\x04\x90"\x8a\x04h)\x8a\x04P#\x8a\x04@*\x8a\x04\x00+\x8a\x04@\'\x8a\x04X\'\x8a\x04\xe0)\x8a\x04\x98 \x8a\x04\x10!\x8a\x04\xb0,\x8a\x04\xf0(\x8a\x048)\x8a\x040"\x8a\x04\x90(\x8a\x04P,\x8a\x04\xb8\'\x8a\x04\xe0#\x8a\x04  \x8a\x04\xe8!\x8a\x04\x18.\x8a\x04P)\x8a\x04\x88!\x8a\x04X*\x8a\x04\x98)\x8a\x04\x88\'\x8a\x04`(\x8a\x04p-\x8a\x04\xe8\'\x8a\x04\xb0 \x8a\x04\xf8#\x8a\x04($\x8a\x04\xb8!\x8a\x04\xd8%\x8a\x04(!\x8a\x04\x80&\x8a\x04\xa0*\x8a\x04\xc8 \x8a\x04\xc8)\x8a\x04\xc8#\x8a\x04\xa0\'\x8a\x04H+\x8a\x04`+\x8a\x04`"\x8a\x04\xc0+\x8a\x04\xd0*\x8a\x04x(\x8a\x04\xf0%\x8a\x04\xa8(\x8a\x04\xd0\'\x8a\x04h#\x8a\x04H"\x8a\x040+\x8a\x04\xf8 \x8a\x04\xa8%\x8a\x04\xc0%\x8a\x04\xf8&\x8a\x04\x08&\x8a\x04\xa0!\x8a\x048#\x8a\x04x"\x8a\x04\xb0#\x8a\x04\xa8.\x8a\x04X!\x8a\x04\x98,\x8a\x04(*\x8a\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9825
(dp9826
g9130
(dp9827
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g9814
sg9133
(lp9828
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp9829
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp9830
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp9831
g1
(g9146
g9115
(dp9832
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9833
ag1
(g9146
g9115
(dp9834
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9835
ag1
(g9146
g9115
(dp9836
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9837
ag1
(g9146
g9115
(dp9838
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9839
ag1
(g9146
g9115
(dp9840
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9841
ag1
(g9146
g9115
(dp9842
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp9843
ag1
(g9146
g9115
(dp9844
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9845
ag1
(g9146
g9115
(dp9846
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9847
ag1
(g9146
g9115
(dp9848
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp9849
ag1
(g9146
g9115
(dp9850
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp9851
ag1
(g9146
g9115
(dp9852
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9853
ag1
(g9146
g9115
(dp9854
g3644
g3825
sg3632
g3815
sg3646
g3819
sg3641
g3823
stRp9855
ag1
(g9146
g9115
(dp9856
g3644
g3748
sg3632
g3832
sg3646
g3742
sg3641
g3839
stRp9857
ag1
(g9146
g9115
(dp9858
g3644
g3759
sg3632
g3847
sg3646
g3766
sg3641
g3854
stRp9859
ag1
(g9146
g9115
(dp9860
g3644
g3866
sg3632
g3862
sg3646
g3873
sg3641
g3870
stRp9861
ag1
(g9146
g9115
(dp9862
g3644
g3708
sg3632
g3879
sg3646
g3715
sg3641
g3886
stRp9863
ag1
(g9146
g9115
(dp9864
g3644
g3657
sg3632
g3894
sg3646
g3664
sg3641
g3901
stRp9865
ag1
(g9146
g9115
(dp9866
g3644
g3913
sg3632
g3909
sg3646
g3920
sg3641
g3917
stRp9867
ag1
(g9146
g9115
(dp9868
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9869
ag1
(g9146
g9115
(dp9870
g3644
g3943
sg3632
g3939
sg3646
g3950
sg3641
g3947
stRp9871
ag1
(g9146
g9115
(dp9872
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp9873
ag1
(g9146
g9115
(dp9874
g3644
g3977
sg3632
g3973
sg3646
g3984
sg3641
g3981
stRp9875
ag1
(g9146
g9115
(dp9876
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9877
ag1
(g9146
g9115
(dp9878
g3644
g4007
sg3632
g4003
sg3646
g4014
sg3641
g4011
stRp9879
ag1
(g9146
g9115
(dp9880
g3644
g4024
sg3632
g4020
sg3646
g4031
sg3641
g4028
stRp9881
ag1
(g9146
g9115
(dp9882
g3644
g3691
sg3632
g4037
sg3646
g3698
sg3641
g4044
stRp9883
ag1
(g9146
g9115
(dp9884
g3644
g4062
sg3632
g4052
sg3646
g4056
sg3641
g4060
stRp9885
ag1
(g9146
g9115
(dp9886
g3644
g3708
sg3632
g3879
sg3646
g3715
sg3641
g3886
stRp9887
ag1
(g9146
g9115
(dp9888
g3644
g4007
sg3632
g4003
sg3646
g4014
sg3641
g4011
stRp9889
ag1
(g9146
g9115
(dp9890
g3644
g3866
sg3632
g3862
sg3646
g3873
sg3641
g3870
stRp9891
ag1
(g9146
g9115
(dp9892
g3644
g3674
sg3632
g4108
sg3646
g3681
sg3641
g4115
stRp9893
ag1
(g9146
g9115
(dp9894
g3644
g3825
sg3632
g4123
sg3646
g3819
sg3641
g4130
stRp9895
ag1
(g9146
g9115
(dp9896
g3644
g3943
sg3632
g4138
sg3646
g3950
sg3641
g4145
stRp9897
ag1
(g9146
g9115
(dp9898
g3644
g3960
sg3632
g4153
sg3646
g3967
sg3641
g4160
stRp9899
ag1
(g9146
g9115
(dp9900
g3644
g3866
sg3632
g4168
sg3646
g3873
sg3641
g4175
stRp9901
ag1
(g9146
g9115
(dp9902
g3644
g4187
sg3632
g4183
sg3646
g4194
sg3641
g4191
stRp9903
ag1
(g9146
g9115
(dp9904
g3644
g3866
sg3632
g4168
sg3646
g3873
sg3641
g4175
stRp9905
ag1
(g9146
g9115
(dp9906
g3644
g3789
sg3632
g4213
sg3646
g3796
sg3641
g4220
stRp9907
ag1
(g9146
g9115
(dp9908
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp9909
ag1
(g9146
g9115
(dp9910
g3644
g3943
sg3632
g4138
sg3646
g3950
sg3641
g4145
stRp9911
ag1
(g9146
g9115
(dp9912
g3644
g3759
sg3632
g3847
sg3646
g3766
sg3641
g3854
stRp9913
ag1
(g9146
g9115
(dp9914
g3644
g4024
sg3632
g4020
sg3646
g4031
sg3641
g4028
stRp9915
ag1
(g9146
g9115
(dp9916
g3644
g4007
sg3632
g4280
sg3646
g4014
sg3641
g4287
stRp9917
ag1
(g9146
g9115
(dp9918
g3644
g3674
sg3632
g4108
sg3646
g3681
sg3641
g4115
stRp9919
ag1
(g9146
g9115
(dp9920
g3644
g4312
sg3632
g4308
sg3646
g4319
sg3641
g4316
stRp9921
ag1
(g9146
g9115
(dp9922
g3644
g3657
sg3632
g3894
sg3646
g3664
sg3641
g3901
stRp9923
ag1
(g9146
g9115
(dp9924
g3644
g3943
sg3632
g3939
sg3646
g3950
sg3641
g3947
stRp9925
ag1
(g9146
g9115
(dp9926
g3644
g3977
sg3632
g3973
sg3646
g3984
sg3641
g3981
stRp9927
ag1
(g9146
g9115
(dp9928
g3644
g3913
sg3632
g3909
sg3646
g3920
sg3641
g3917
stRp9929
ag1
(g9146
g9115
(dp9930
g3644
g4062
sg3632
g4377
sg3646
g4056
sg3641
g4384
stRp9931
ag1
(g9146
g9115
(dp9932
g3644
g3657
sg3632
g3894
sg3646
g3664
sg3641
g3901
stRp9933
ag1
(g9146
g9115
(dp9934
g3644
g3725
sg3632
g4405
sg3646
g3732
sg3641
g4412
stRp9935
ag1
(g9146
g9115
(dp9936
g3644
g3960
sg3632
g4153
sg3646
g3967
sg3641
g4160
stRp9937
ag1
(g9146
g9115
(dp9938
g3644
g4024
sg3632
g4433
sg3646
g4031
sg3641
g4440
stRp9939
ag1
(g9146
g9115
(dp9940
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9941
ag1
(g9146
g9115
(dp9942
g3644
g3866
sg3632
g3862
sg3646
g3873
sg3641
g3870
stRp9943
ag1
(g9146
g9115
(dp9944
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9945
ag1
(g9146
g9115
(dp9946
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp9947
ag1
(g9146
g9115
(dp9948
g3644
g3977
sg3632
g4500
sg3646
g3984
sg3641
g4507
stRp9949
ag1
(g9146
g9115
(dp9950
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp9951
ag1
(g9146
g9115
(dp9952
g3644
g3866
sg3632
g4168
sg3646
g3873
sg3641
g4175
stRp9953
ag1
(g9146
g9115
(dp9954
g3644
g4312
sg3632
g4308
sg3646
g4319
sg3641
g4316
stRp9955
ag1
(g9146
g9115
(dp9956
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp9957
ag1
(g9146
g9115
(dp9958
g3644
g3691
sg3632
g4037
sg3646
g3698
sg3641
g4044
stRp9959
ag1
(g9146
g9115
(dp9960
g3644
g4312
sg3632
g4580
sg3646
g4319
sg3641
g4587
stRp9961
ag1
(g9146
g9115
(dp9962
g3644
g3748
sg3632
g3832
sg3646
g3742
sg3641
g3839
stRp9963
ag1
(g9146
g9115
(dp9964
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp9965
ag1
(g9146
g9115
(dp9966
g3644
g3977
sg3632
g3973
sg3646
g3984
sg3641
g3981
stRp9967
ag1
(g9146
g9115
(dp9968
g3644
g4007
sg3632
g4003
sg3646
g4014
sg3641
g4011
stRp9969
ag1
(g9146
g9115
(dp9970
g3644
g3725
sg3632
g4405
sg3646
g3732
sg3641
g4412
stRp9971
ag1
(g9146
g9115
(dp9972
g3644
g3913
sg3632
g4660
sg3646
g3920
sg3641
g4667
stRp9973
ag1
(g9146
g9115
(dp9974
g3644
g3674
sg3632
g4108
sg3646
g3681
sg3641
g4115
stRp9975
ag1
(g9146
g9115
(dp9976
g3644
g3691
sg3632
g4037
sg3646
g3698
sg3641
g4044
stRp9977
ag1
(g9146
g9115
(dp9978
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp9979
ag1
(g9146
g9115
(dp9980
g3644
g3866
sg3632
g4168
sg3646
g3873
sg3641
g4175
stRp9981
ag1
(g9146
g9115
(dp9982
g3644
g3825
sg3632
g4123
sg3646
g3819
sg3641
g4130
stRp9983
ag1
(g9146
g9115
(dp9984
g3644
g3789
sg3632
g4213
sg3646
g3796
sg3641
g4220
stRp9985
ag1
(g9146
g9115
(dp9986
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp9987
ag1
(g9146
g9115
(dp9988
g3644
g4062
sg3632
g4052
sg3646
g4056
sg3641
g4060
stRp9989
ag1
(g9146
g9115
(dp9990
g3644
g4187
sg3632
g4183
sg3646
g4194
sg3641
g4191
stRp9991
ag1
(g9146
g9115
(dp9992
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp9993
ag1
(g9146
g9115
(dp9994
g3644
g3725
sg3632
g4405
sg3646
g3732
sg3641
g4412
stRp9995
ag1
(g9146
g9115
(dp9996
g3644
g3637
sg3632
g4818
sg3646
g3647
sg3641
g4825
stRp9997
ag1
(g9146
g9115
(dp9998
g3644
g3825
sg3632
g3815
sg3646
g3819
sg3641
g3823
stRp9999
ag1
(g9146
g9115
(dp10000
g3644
g4024
sg3632
g4020
sg3646
g4031
sg3641
g4028
stRp10001
ag1
(g9146
g9115
(dp10002
g3644
g3977
sg3632
g4500
sg3646
g3984
sg3641
g4507
stRp10003
ag1
(g9146
g9115
(dp10004
g3644
g4312
sg3632
g4580
sg3646
g4319
sg3641
g4587
stRp10005
ag1
(g9146
g9115
(dp10006
g3644
g4024
sg3632
g4433
sg3646
g4031
sg3641
g4440
stRp10007
ag1
(g9146
g9115
(dp10008
g3644
g4312
sg3632
g4580
sg3646
g4319
sg3641
g4587
stRp10009
ag1
(g9146
g9115
(dp10010
g3644
g3825
sg3632
g4123
sg3646
g3819
sg3641
g4130
stRp10011
ag1
(g9146
g9115
(dp10012
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10013
ag1
(g9146
g9115
(dp10014
g3644
g3943
sg3632
g4138
sg3646
g3950
sg3641
g4145
stRp10015
ag1
(g9146
g9115
(dp10016
g3644
g4312
sg3632
g4308
sg3646
g4319
sg3641
g4316
stRp10017
ag1
(g9146
g9115
(dp10018
g3644
g4024
sg3632
g4020
sg3646
g4031
sg3641
g4028
stRp10019
ag1
(g9146
g9115
(dp10020
g3644
g3637
sg3632
g4818
sg3646
g3647
sg3641
g4825
stRp10021
ag1
(g9146
g9115
(dp10022
g3644
g4062
sg3632
g4052
sg3646
g4056
sg3641
g4060
stRp10023
ag1
(g9146
g9115
(dp10024
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10025
ag1
(g9146
g9115
(dp10026
g3644
g3960
sg3632
g4153
sg3646
g3967
sg3641
g4160
stRp10027
ag1
(g9146
g9115
(dp10028
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10029
ag1
(g9146
g9115
(dp10030
g3644
g3977
sg3632
g3973
sg3646
g3984
sg3641
g3981
stRp10031
ag1
(g9146
g9115
(dp10032
g3644
g3674
sg3632
g3670
sg3646
g3681
sg3641
g3678
stRp10033
ag1
(g9146
g9115
(dp10034
g3644
g4187
sg3632
g4183
sg3646
g4194
sg3641
g4191
stRp10035
ag1
(g9146
g9115
(dp10036
g3644
g4062
sg3632
g4377
sg3646
g4056
sg3641
g4384
stRp10037
ag1
(g9146
g9115
(dp10038
g3644
g3748
sg3632
g3738
sg3646
g3742
sg3641
g3746
stRp10039
ag1
(g9146
g9115
(dp10040
g3644
g3977
sg3632
g4500
sg3646
g3984
sg3641
g4507
stRp10041
ag1
(g9146
g9115
(dp10042
g3644
g4062
sg3632
g4052
sg3646
g4056
sg3641
g4060
stRp10043
ag1
(g9146
g9115
(dp10044
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp10045
ag1
(g9146
g9115
(dp10046
g3644
g3759
sg3632
g3847
sg3646
g3766
sg3641
g3854
stRp10047
ag1
(g9146
g9115
(dp10048
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10049
ag1
(g9146
g9115
(dp10050
g3644
g3825
sg3632
g3815
sg3646
g3819
sg3641
g3823
stRp10051
ag1
(g9146
g9115
(dp10052
g3644
g3913
sg3632
g4660
sg3646
g3920
sg3641
g4667
stRp10053
ag1
(g9146
g9115
(dp10054
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10055
ag1
(g9146
g9115
(dp10056
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp10057
ag1
(g9146
g9115
(dp10058
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10059
ag1
(g9146
g9115
(dp10060
g3644
g4187
sg3632
g4183
sg3646
g4194
sg3641
g4191
stRp10061
ag1
(g9146
g9115
(dp10062
g3644
g3789
sg3632
g4213
sg3646
g3796
sg3641
g4220
stRp10063
ag1
(g9146
g9115
(dp10064
g3644
g3759
sg3632
g3847
sg3646
g3766
sg3641
g3854
stRp10065
ag1
(g9146
g9115
(dp10066
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10067
ag1
(g9146
g9115
(dp10068
g3644
g3691
sg3632
g4037
sg3646
g3698
sg3641
g4044
stRp10069
ag1
(g9146
g9115
(dp10070
g3644
g3789
sg3632
g4213
sg3646
g3796
sg3641
g4220
stRp10071
ag1
(g9146
g9115
(dp10072
g3644
g3825
sg3632
g3815
sg3646
g3819
sg3641
g3823
stRp10073
ag1
(g9146
g9115
(dp10074
g3644
g3943
sg3632
g4138
sg3646
g3950
sg3641
g4145
stRp10075
ag1
(g9146
g9115
(dp10076
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10077
ag1
(g9146
g9115
(dp10078
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10079
ag1
(g9146
g9115
(dp10080
g3644
g3977
sg3632
g4500
sg3646
g3984
sg3641
g4507
stRp10081
ag1
(g9146
g9115
(dp10082
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10083
ag1
(g9146
g9115
(dp10084
g3644
g3789
sg3632
g4213
sg3646
g3796
sg3641
g4220
stRp10085
ag1
(g9146
g9115
(dp10086
g3644
g3960
sg3632
g4153
sg3646
g3967
sg3641
g4160
stRp10087
ag1
(g9146
g9115
(dp10088
g3644
g4007
sg3632
g4280
sg3646
g4014
sg3641
g4287
stRp10089
ag1
(g9146
g9115
(dp10090
g3644
g3674
sg3632
g4108
sg3646
g3681
sg3641
g4115
stRp10091
ag1
(g9146
g9115
(dp10092
g3644
g3960
sg3632
g4153
sg3646
g3967
sg3641
g4160
stRp10093
ag1
(g9146
g9115
(dp10094
g3644
g3674
sg3632
g4108
sg3646
g3681
sg3641
g4115
stRp10095
ag1
(g9146
g9115
(dp10096
g3644
g3913
sg3632
g4660
sg3646
g3920
sg3641
g4667
stRp10097
ag1
(g9146
g9115
(dp10098
g3644
g4024
sg3632
g4020
sg3646
g4031
sg3641
g4028
stRp10099
ag1
(g9146
g9115
(dp10100
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10101
ag1
(g9146
g9115
(dp10102
g3644
g4007
sg3632
g4003
sg3646
g4014
sg3641
g4011
stRp10103
ag1
(g9146
g9115
(dp10104
g3644
g4312
sg3632
g4580
sg3646
g4319
sg3641
g4587
stRp10105
ag1
(g9146
g9115
(dp10106
g3644
g4187
sg3632
g5535
sg3646
g4194
sg3641
g5542
stRp10107
ag1
(g9146
g9115
(dp10108
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10109
ag1
(g9146
g9115
(dp10110
g3644
g3913
sg3632
g3909
sg3646
g3920
sg3641
g3917
stRp10111
ag1
(g9146
g9115
(dp10112
g3644
g3943
sg3632
g4138
sg3646
g3950
sg3641
g4145
stRp10113
ag1
(g9146
g9115
(dp10114
g3644
g3637
sg3632
g4818
sg3646
g3647
sg3641
g4825
stRp10115
ag1
(g9146
g9115
(dp10116
g3644
g3748
sg3632
g3832
sg3646
g3742
sg3641
g3839
stRp10117
ag1
(g9146
g9115
(dp10118
g3644
g3825
sg3632
g4123
sg3646
g3819
sg3641
g4130
stRp10119
ag1
(g9146
g9115
(dp10120
g3644
g3657
sg3632
g3653
sg3646
g3664
sg3641
g3661
stRp10121
ag1
(g9146
g9115
(dp10122
g3644
g4062
sg3632
g4377
sg3646
g4056
sg3641
g4384
stRp10123
ag1
(g9146
g9115
(dp10124
g3644
g4007
sg3632
g4003
sg3646
g4014
sg3641
g4011
stRp10125
ag1
(g9146
g9115
(dp10126
g3644
g3759
sg3632
g3755
sg3646
g3766
sg3641
g3763
stRp10127
ag1
(g9146
g9115
(dp10128
g3644
g3691
sg3632
g3687
sg3646
g3698
sg3641
g3695
stRp10129
ag1
(g9146
g9115
(dp10130
g3644
g3657
sg3632
g3894
sg3646
g3664
sg3641
g3901
stRp10131
ag1
(g9146
g9115
(dp10132
g3644
g4024
sg3632
g4433
sg3646
g4031
sg3641
g4440
stRp10133
ag1
(g9146
g9115
(dp10134
g3644
g4187
sg3632
g4183
sg3646
g4194
sg3641
g4191
stRp10135
ag1
(g9146
g9115
(dp10136
g3644
g3866
sg3632
g4168
sg3646
g3873
sg3641
g4175
stRp10137
ag1
(g9146
g9115
(dp10138
g3644
g3913
sg3632
g3909
sg3646
g3920
sg3641
g3917
stRp10139
ag1
(g9146
g9115
(dp10140
g3644
g3725
sg3632
g3721
sg3646
g3732
sg3641
g3729
stRp10141
ag1
(g9146
g9115
(dp10142
g3644
g4007
sg3632
g4280
sg3646
g4014
sg3641
g4287
stRp10143
ag1
(g9146
g9115
(dp10144
g3644
g3825
sg3632
g4123
sg3646
g3819
sg3641
g4130
stRp10145
ag1
(g9146
g9115
(dp10146
g3644
g3913
sg3632
g3909
sg3646
g3920
sg3641
g3917
stRp10147
ag1
(g9146
g9115
(dp10148
g3644
g3943
sg3632
g3939
sg3646
g3950
sg3641
g3947
stRp10149
ag1
(g9146
g9115
(dp10150
g3644
g3866
sg3632
g3862
sg3646
g3873
sg3641
g3870
stRp10151
ag1
(g9146
g9115
(dp10152
g3644
g3913
sg3632
g4660
sg3646
g3920
sg3641
g4667
stRp10153
ag1
(g9146
g9115
(dp10154
g3644
g3637
sg3632
g4818
sg3646
g3647
sg3641
g4825
stRp10155
ag1
(g9146
g9115
(dp10156
g3644
g3943
sg3632
g3939
sg3646
g3950
sg3641
g3947
stRp10157
ag1
(g9146
g9115
(dp10158
g3644
g4007
sg3632
g4280
sg3646
g4014
sg3641
g4287
stRp10159
ag1
(g9146
g9115
(dp10160
g3644
g4187
sg3632
g5535
sg3646
g4194
sg3641
g5542
stRp10161
ag1
(g9146
g9115
(dp10162
g3644
g3748
sg3632
g3832
sg3646
g3742
sg3641
g3839
stRp10163
ag1
(g9146
g9115
(dp10164
g3644
g3960
sg3632
g3956
sg3646
g3967
sg3641
g3964
stRp10165
ag1
(g9146
g9115
(dp10166
g3644
g4062
sg3632
g4377
sg3646
g4056
sg3641
g4384
stRp10167
ag1
(g9146
g9115
(dp10168
g3644
g4312
sg3632
g4580
sg3646
g4319
sg3641
g4587
stRp10169
ag1
(g9146
g9115
(dp10170
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10171
ag1
(g9146
g9115
(dp10172
g3644
g3708
sg3632
g3879
sg3646
g3715
sg3641
g3886
stRp10173
ag1
(g9146
g9115
(dp10174
g3644
g4007
sg3632
g4280
sg3646
g4014
sg3641
g4287
stRp10175
ag1
(g9146
g9115
(dp10176
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10177
ag1
(g9146
g9115
(dp10178
g3644
g4062
sg3632
g4052
sg3646
g4056
sg3641
g4060
stRp10179
ag1
(g9146
g9115
(dp10180
g3644
g4187
sg3632
g5535
sg3646
g4194
sg3641
g5542
stRp10181
ag1
(g9146
g9115
(dp10182
g3644
g3866
sg3632
g3862
sg3646
g3873
sg3641
g3870
stRp10183
ag1
(g9146
g9115
(dp10184
g3644
g4187
sg3632
g5535
sg3646
g4194
sg3641
g5542
stRp10185
ag1
(g9146
g9115
(dp10186
g3644
g3977
sg3632
g4500
sg3646
g3984
sg3641
g4507
stRp10187
ag1
(g9146
g9115
(dp10188
g3644
g3708
sg3632
g3704
sg3646
g3715
sg3641
g3712
stRp10189
ag1
(g9146
g9115
(dp10190
g3644
g3637
sg3632
g3633
sg3646
g3647
sg3641
g3642
stRp10191
ag1
(g9146
g9115
(dp10192
g3644
g3725
sg3632
g4405
sg3646
g3732
sg3641
g4412
stRp10193
ag1
(g9146
g9115
(dp10194
g3644
g3789
sg3632
g3785
sg3646
g3796
sg3641
g3793
stRp10195
ag1
(g9146
g9115
(dp10196
g3644
g3657
sg3632
g3894
sg3646
g3664
sg3641
g3901
stRp10197
ag1
(g9146
g9115
(dp10198
g3644
g4312
sg3632
g4308
sg3646
g4319
sg3641
g4316
stRp10199
ag1
(g9146
g9115
(dp10200
g3644
g3943
sg3632
g3939
sg3646
g3950
sg3641
g3947
stRp10201
ag1
(g9146
g9115
(dp10202
g3644
g3825
sg3632
g3815
sg3646
g3819
sg3641
g3823
stRp10203
ag1
(g9146
g9115
(dp10204
g3644
g4024
sg3632
g4433
sg3646
g4031
sg3641
g4440
stRp10205
ag1
(g9146
g9115
(dp10206
g3644
g3977
sg3632
g3973
sg3646
g3984
sg3641
g3981
stRp10207
ag1
(g9146
g9115
(dp10208
g3644
g4062
sg3632
g4377
sg3646
g4056
sg3641
g4384
stRp10209
ag1
(g9146
g9115
(dp10210
g3644
g4312
sg3632
g4308
sg3646
g4319
sg3641
g4316
stRp10211
ag1
(g9146
g9115
(dp10212
g3644
g3637
sg3632
g4818
sg3646
g3647
sg3641
g4825
stRp10213
ag1
(g9146
g9115
(dp10214
g3644
g3708
sg3632
g3879
sg3646
g3715
sg3641
g3886
stRp10215
ag1
(g9146
g9115
(dp10216
g3644
g3759
sg3632
g3847
sg3646
g3766
sg3641
g3854
stRp10217
ag1
(g9146
g9115
(dp10218
g3644
g4187
sg3632
g5535
sg3646
g4194
sg3641
g5542
stRp10219
ag1
(g9146
g9115
(dp10220
g3644
g3708
sg3632
g3879
sg3646
g3715
sg3641
g3886
stRp10221
ag1
(g9146
g9115
(dp10222
g3644
g3748
sg3632
g3832
sg3646
g3742
sg3641
g3839
stRp10223
ag1
(g9146
g9115
(dp10224
g3644
g3725
sg3632
g4405
sg3646
g3732
sg3641
g4412
stRp10225
ag1
(g9146
g9115
(dp10226
g3644
g3913
sg3632
g4660
sg3646
g3920
sg3641
g4667
stRp10227
ag1
(g9146
g9115
(dp10228
g3644
g4024
sg3632
g4433
sg3646
g4031
sg3641
g4440
stRp10229
ag1
(g9146
g9115
(dp10230
g3644
g3691
sg3632
g4037
sg3646
g3698
sg3641
g4044
stRp10231
asg9227
Nsg9228
g6347
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbag1
(g9102
g3
NtRp10232
(dp10233
g9105
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000a# io=launchHubServer(iohub_config_name='iohub_config.yaml')\u000a# tracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1_no_eyetracking'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. \u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. Please call the experimenter into the room.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # # Minimize the psychopy window so the calibration window can be seen\u000a    # win.winHandle.minimize()\u000a    # #Do the eye tracker setup at the beginning of each block\u000a    # tracker.runSetupProcedure()\u000a    # # Re-display the psychopy window after setup is completed\u000a    # win.winHandle.maximize()\u000a    # win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # # Start getting data from the eye tracker\u000a        # tracker.enableEventReporting(True)\u000a        # # Send beginning-of-trial messages to eye tracker data file\u000a        # trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        # tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        # tracker.sendMessage("TRIALID %d" % trial_number)\u000a        # tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    # tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    # tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        # tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                # tracker.enableEventReporting(False) # End eye tracker data recording\u000a                # tracker.sendMessage("EXPERIMENT ABORTED")\u000a                # io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000a# tracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating!'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. The experimenter will now run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000a# io.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10234
sg9107
(lp10235
sg9109
I80376656
sg10
g9399
sg6
g9111
sg9112
I1
sg52
I01
sg53
g54
sg9113
g1
(g9114
g9115
(dp10236
g33
g9118
(g9119
g92
g9120
S'b'
tRp10237
(I1
(I200
I1
tg9244
I00
S'p\x01\xcc\x12x\xec\xcb\x12\x10\r\xcb\x12\xa0\xec\xcb\x12\xe0\x01\xcc\x12\xc8\xec\xcb\x12@\r\xcb\x12p\r\xcb\x12\x18\xed\xcb\x12\x18\x02\xcc\x12\xa0\xec\xcb\x12P\x02\xcc\x12x\xec\xcb\x12 \x0c\xcb\x12@\xed\xcb\x12 \x0c\xcb\x12\xa8\x01\xcc\x12\xa0\r\x14\x03\x00\x0c\x14\x03\xa0\r\x14\x03\x18\xed\xcb\x12\x10\r\xcb\x12P\x0c\xcb\x12\x80\x0c\xcb\x12\xa0\x06\x14\x03`\x0c\x14\x03\x00\x0c\x14\x03\xb0\x0c\xcb\x12x\xec\xcb\x12\x00\x0e\xcb\x12\x18\xed\xcb\x12\xa0\x06\x14\x03\xa8\x01\xcc\x12\xc8\xec\xcb\x12h\xed\xcb\x12\xe0\x01\xcc\x12\xd0\xee\xcb\x12\x18\x02\xcc\x12\xe0\x0c\xcb\x12\xa0\x06\x14\x03 \x0c\xcb\x12 \x0c\x14\x03\xc8\xec\xcb\x12\xa0\x06\x14\x03\x90\xed\xcb\x12@\xed\xcb\x12\xa0\x06\x14\x03P\x0c\xcb\x12P\x02\xcc\x12\xa8\x01\xcc\x12 \x0c\xcb\x12p\x01\xcc\x12 \x0c\x14\x03\x80\x0c\xcb\x12\xd0\r\xcb\x12\x18\x02\xcc\x12\xb0\x0c\xcb\x12P\x0c\xcb\x12@\xed\xcb\x12\xe0\x0c\xcb\x12\x90\xed\xcb\x12\x18\xed\xcb\x12P\x0c\xcb\x12`\x0c\x14\x03\x90\xed\xcb\x12\x00\x0c\x14\x03x\xec\xcb\x12\xa0\xec\xcb\x12P\x02\xcc\x12\xa8\x01\xcc\x12\xe0\x01\xcc\x12\xc8\xec\xcb\x12\x18\xed\xcb\x12 \x0c\x14\x03\xc8\xec\xcb\x12h\xed\xcb\x12x\xec\xcb\x12\x90\xed\xcb\x12@\xed\xcb\x12\x90\xed\xcb\x12P\x0c\xcb\x12\xe0\x0c\xcb\x12\xe0\x01\xcc\x12\xb0\x0c\xcb\x12@\xed\xcb\x12p\x01\xcc\x12\xe0\x0c\xcb\x12\x90\xed\xcb\x12\x80\x0c\xcb\x12\x18\x02\xcc\x12\x00\x0e\xcb\x12\xa8\x01\xcc\x12\x88\x02\xcc\x12\xe0\x0c\xcb\x12\xa0\xec\xcb\x12\xe0\x01\xcc\x12\xa0\x06\x14\x03\xa0\r\x14\x03\xe0\x0c\xcb\x12\x18\x02\xcc\x12 \x0c\xcb\x12\xe0\x0c\xcb\x12@\xed\xcb\x12h\xed\xcb\x12\xe0\x01\xcc\x12\xc8\xec\xcb\x12P\x02\xcc\x12\x18\x02\xcc\x12@\xed\xcb\x12\xb0\x0c\xcb\x12\xa0\r\xcb\x12\xa0\xec\xcb\x12\xa8\xee\xcb\x12`\x0c\x14\x03\xf0\xec\xcb\x12 \x0c\xcb\x12\xa0\x06\x14\x03\x80\x0c\xcb\x12\x88\x02\xcc\x12\xa0\xec\xcb\x12\x80\x0c\xcb\x12\x18\xed\xcb\x12\xa0\r\x14\x03P\x0c\xcb\x12\xc8\xec\xcb\x12P\x02\xcc\x12\xe0\x01\xcc\x120\xee\xcb\x120\x0e\xcb\x12p\r\xcb\x12\xa0\xec\xcb\x12\xb0\x0c\xcb\x12\xc8\xec\xcb\x12p\x01\xcc\x12\xf0\xec\xcb\x12h\xed\xcb\x12x\xec\xcb\x12p\r\xcb\x12\xd0\r\xcb\x12\xb0\x0c\xcb\x12\x90\xed\xcb\x12p\r\xcb\x12\xa8\xee\xcb\x12x\xec\xcb\x12\xc8\xec\xcb\x12\xa0\r\x14\x03x\xec\xcb\x12h\xed\xcb\x12\x18\xed\xcb\x12@\xed\xcb\x12\x80\x0c\xcb\x12\x18\x02\xcc\x12x\xec\xcb\x12\x80\x0c\xcb\x12\x18\xed\xcb\x12\xb0\x0c\xcb\x12\xa0\r\x14\x03\xb0\x0c\xcb\x12\xa8\x01\xcc\x12\xf0\xec\xcb\x12\xa0\r\x14\x03x\xec\xcb\x12@\xed\xcb\x12P\x0c\xcb\x12\xe0\x0c\xcb\x12\xa0\x06\x14\x03\x90\xed\xcb\x12\xa0\xec\xcb\x12\x18\x02\xcc\x12\x90\xed\xcb\x12h\xed\xcb\x12\xa0\x06\x14\x03\xf0\xec\xcb\x12p\x01\xcc\x12\xa0\x06\x14\x03p\x01\xcc\x12\xf0\xec\xcb\x12\xa0\r\xcb\x12\xa0\xec\xcb\x12p\x01\xcc\x12\xa8\x01\xcc\x12\xf0\xec\xcb\x12`\x0c\x14\x03\xc8\xec\xcb\x12\xe0\x0c\xcb\x12\xa0\xec\xcb\x12h\xed\xcb\x12X\xee\xcb\x12h\xed\xcb\x12 \x0c\xcb\x12\x90\xed\xcb\x12P\x0c\xcb\x12\x18\x02\xcc\x12\x80\x0c\xcb\x12P\x02\xcc\x12 \x0c\xcb\x12p\x01\xcc\x12\xa8\x01\xcc\x12 \x0c\xcb\x12\xb0\x0c\xcb\x12'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9117
g9118
(g9119
g92
g9120
S'b'
tRp10238
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9118
(g9119
g92
g9120
S'b'
tRp10239
(I1
(I200
I1
tg9244
I00
S'\x80{\xcc\x12`z\xcc\x12\x80|\xcc\x12@|\xcc\x12\xa0{\xcc\x12\xa0z\xcc\x12\x00z\xcc\x12\xe0|\xcc\x12\x00}\xcc\x12\x80z\xcc\x12 |\xcc\x12\xe0z\xcc\x12\xa0|\xcc\x12\xa0}\xcc\x12\xc0}\xcc\x12\xc0{\xcc\x12 {\xcc\x12`|\xcc\x12@}\xcc\x12 }\xcc\x12\x80~\xcc\x12\xe0y\xcc\x12\xc0~\xcc\x12\xe0~\xcc\x12@z\xcc\x12\xc0z\xcc\x12\xe0{\xcc\x12`}\xcc\x12 z\xcc\x12`~\xcc\x12`\x7f\xcc\x12\x00~\xcc\x12 ~\xcc\x12`{\xcc\x12\xa0\x7f\xcc\x12@\x7f\xcc\x12\xc0\x7f\xcc\x12@{\xcc\x12\x80\x7f\xcc\x12\x00\x7f\xcc\x12\x00|\xcc\x12@~\xcc\x12\xe0}\xcc\x12\x00{\xcc\x12\x80}\xcc\x12 \x7f\xcc\x12\xe0\x7f\xcc\x12\x00\xb7\xd1\x0c\xc0A\xe4\x12@B\xe4\x12\xa0B\xe4\x12`B\xe4\x12\x80B\xe4\x12\xa0@\xe4\x12 @\xe4\x12\x00C\xe4\x12 C\xe4\x12@C\xe4\x12`C\xe4\x12@@\xe4\x12\xe0@\xe4\x12\x80C\xe4\x12\xe0C\xe4\x12\xc0C\xe4\x12 D\xe4\x12\x00D\xe4\x12\x80@\xe4\x12\x80D\xe4\x12`D\xe4\x12\xc0D\xe4\x12\xa0D\xe4\x12`@\xe4\x12\xe0D\xe4\x12@E\xe4\x12 E\xe4\x12\x80A\xe4\x12`E\xe4\x12\x80E\xe4\x12\xa0E\xe4\x12\xc0E\xe4\x12\xe0E\xe4\x12@F\xe4\x12 F\xe4\x12@D\xe4\x12\xa0F\xe4\x12\x80F\xe4\x12\xc0B\xe4\x12\xc0F\xe4\x12\xe0F\xe4\x12\x00G\xe4\x12 G\xe4\x12@G\xe4\x12\xa0G\xe4\x12\x80G\xe4\x12 A\xe4\x12\x00H\xe4\x12\xe0G\xe4\x12@H\xe4\x12 H\xe4\x12`A\xe4\x12\xa0H\xe4\x12\x80H\xe4\x12\x00B\xe4\x12\xc0H\xe4\x12\xe0H\xe4\x12\x00I\xe4\x12`I\xe4\x12@I\xe4\x12\xa0I\xe4\x12\x80I\xe4\x12\xe0I\xe4\x12\x00J\xe4\x12\x00F\xe4\x12@J\xe4\x12`J\xe4\x12\xc0@\xe4\x12\xa0J\xe4\x12\xc0J\xe4\x12@A\xe4\x12\x00K\xe4\x12 K\xe4\x12\xa0A\xe4\x12`K\xe4\x12@K\xe4\x12\xa0K\xe4\x12\xc0K\xe4\x12\x00A\xe4\x12\xe0B\xe4\x12\xe0K\xe4\x12@L\xe4\x12 L\xe4\x12\x80L\xe4\x12\xa0L\xe4\x12\xc0L\xe4\x12\xe0L\xe4\x12`G\xe4\x12 M\xe4\x12\x00M\xe4\x12 I\xe4\x12@M\xe4\x12\xa0M\xe4\x12\x80M\xe4\x12\x00E\xe4\x12\x00N\xe4\x12\xe0M\xe4\x12`F\xe4\x12 N\xe4\x12\x00A\x84\x0c`L\xe4\x12\xc0N\xe4\x12\xe0N\xe4\x12\xe0A\xe4\x12\x00O\xe4\x12\xa0N\xe4\x12\xc0I\xe4\x12@O\xe4\x12\xc0O\xe4\x12\xe0O\xe4\x12\xa0C\xe4\x12\x80N\xe4\x12\x80K\xe4\x12`O\xe4\x12`N\xe4\x12 J\xe4\x12@N\xe4\x12\x80J\xe4\x12\xa0O\xe4\x12\x00L\xe4\x12\x80O\xe4\x12 O\xe4\x12\xc0G\xe4\x12\xe0J\xe4\x12 B\xe4\x12\xc0M\xe4\x12`H\xe4\x12\xc0\xf1\x0e\x13@\xf2\x0e\x13\xa0\xf1\x0e\x13`\xf2\x0e\x13\xa0\xf2\x0e\x13\xc0\xf2\x0e\x13\x80\xf2\x0e\x13 \xf0\x0e\x13 \xf3\x0e\x13@\xf3\x0e\x13`\xf1\x0e\x13\x80\xf3\x0e\x13`\xf3\x0e\x13\xe0\xf1\x0e\x13\xa0\xf3\x0e\x13\x00\xf4\x0e\x13\xc0|\xcc\x12`\xf0\x0e\x13 \xf4\x0e\x13\x80\xf4\x0e\x13 \xf1\x0e\x13\x00\xf3\x0e\x13\x00\xf1\x0e\x13\xa0\xf0\x0e\x13\xe0\xf4\x0e\x13'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9125
g9118
(g9119
g92
g9120
S'b'
tRp10240
(I1
(I200
I1
tg9122
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9118
(g9119
g92
g9120
S'b'
tRp10241
(I1
(I200
I1
tg9122
I00
S'\xd2rf?C\xaaj?j\xdaL?~_U?\x05\xa5Y?7\xa6Y?\xe1\xdaL?\x1bS\x95?\x18\xf9.?\xc9\xad\x8a?\xa3\xc2;?\xb9\xbaj?\xf3\xf0n?Z[\x95?\x98{\xb7?\xe0$\xa2?\x1a6\x82?\xb3\x8e\x88?\xbe\x83w?(\x04\x80?\x13QD?\xc6\x02\x80?\xd5\xc1;?\xfdt&?\xf9\xc6{?\x03\x14\x01@\x07\xa8Y?\xd3i\x86?JUU?\x07\xc3;?\xa5\xa7*?\xdfk&?\xa7\x03/?G\xb2j?\xbfX\x95?\x19\xb5j?\xfa\xd0\x8c?\xd4x\x86?4\xeb]?\xcfJ\x84?\xf3}\xb7?\xa1\xb8*?\xfa\xd4L?\xe4\xd3L?\xa5\x877?\xb7z\x97?\x9b\xb1*?\x8a)"?\xea\xe1;?(\xb1\x8a?\xf3\xd1\x8c?G)b?\'\xb9*?\xd0\x1d\x11?\xb0\x02\x1e?\xea\xd0\x8c?\x18\xe3\xdd?\xb8\xb1*?\x9dE\xe4?=x\x86?\xdf\xc3;?+l\xa6?\xe7>3?\xf9\x84w?S@\x93?\x90\xf5n?\xb42s?\xe9\xed]?\xb1\xe1]?8\x817?\xc3\x95\xa8?\xf8~\x97?u\xc7;?\xed\x15Q?\xad\xd4L?\x8e\xa0Y?\xd6>b?/%\x82?\xa3\xbf\x9b?\xab+b?\xac\x06@?\xbb\xc2;?]\xde\xcc?-\x05\xe0?\xa2$\xe2?\xcaG\xa4?v\x17\x91?\xff4S@&QD?\x86\x8c\xa8?\x9b\xc9;?g\x1dQ?\xf4\xc8;??G"?\'\x807?\xde83?\xa9\x94H?rG\x84?J\xc9;?/\x9a\x88?g\x8c\x88?=-"?\xa7\xb0\x8a?G\x0c@?\x8c*b?7\x11o?\xed8s?,\x9d\xb9?U\x9c\x99?Q%\x82?(uf?\x13\xc0Y?\xbc~7?\xf9\x847?%a\xa6?\x8b\xe3]?L?3?\x8d<3?\xd5\xc7{?\x12+"?G)"?\x81t&?F\x10@?\xa4c\x15?H\x1aQ?oeU?>\x18Q?nrf?\xbebU?\xd8O\xb5?\xad*"?^\x9f\x99?\x85\xd3L?_\xc8;?#\xb6\x9b?V\x18\x11?\x9f\xef\x8e?\x04a\x86?X@3?\xd8\xef\x9d?\xe9\x9d\x99?d>\xa4?\xdeZ\xd5?\xfc\xbf;?_Cs?\xbb\xbf\x9b?\x00\x18\x11?\n\xfe??\xa4\xd2L?\xc7\xfan?u9\x93?\xae\xad\x8a?\x98F\x84?\xf3\x0c@?\x88s&?4[\x95?\x93\xeb]?\xfa\x9f\x99?\xf0,"?\x95\xa4\xea?\xc4\x1cQ?\x0b(b?J\x17\x91?\n\xfb.?V\x17\x91?E\xe4\x1d?\xcc\xc3;?\xe6\xb8\x19?\xd5\xa2Y?\x7f\x15\x91?\xcf\xcb;?\x116\xb3?[\xc5\x9b?\xea\x02\x80?7\xfc.?\xd3\xc2{?\xfb\xb2{? )"?\xa1F"?h\xb4*?G\x0c@?\xa8.\x93?\xd8\x16\xd1?\x91\x8cf?\x0c\x857?\x8a\xb6j?4\x1eQ?\xc77\x93?g:3?}\x9f\x99?|\x93H?j\xa8*?\xf9rf?K)"?\x16\xa0\xb9?\x84\x13/?m\x95H?\xc6[\x15?\x7f\xc7{?\xd2rf?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9118
(g9119
g92
g9120
S'b'
tRp10242
(I1
(I200
I1
tg9244
I00
S'\xa8\xc5\xd3\x04\xa0\xc1\xd3\x04\x10\xe1\xef\x04\x88\xe1\xef\x04\x80\xef\xef\x04\x80\xec\xef\x04\xd8\xe8\xef\x04x\xe8\xef\x04 \xef\xef\x04\x18\xeb\xef\x04\x18\xee\xef\x04\xe0\xe9\xef\x04\x80\xe9\xef\x04\xc8\xe9\xef\x04\x08\xe3\xef\x04\xa0\xea\xef\x04\xb0\xe3\xef\x04H\xeb\xef\x04h\xef\xef\x04\x90\xe8\xef\x04\x18\xe8\xef\x04\xe0\xec\xef\x04\x90\xe5\xef\x04\xa8\xe8\xef\x04\xb8\xe7\xef\x048\xec\xef\x04\xa0\xe7\xef\x04\x98\xe9\xef\x04\xc0\xee\xef\x04(\xe1\xef\x04\xa8\xe2\xef\x04x\xee\xef\x04\x80\xe3\xef\x04\x90\xee\xef\x04h\xe0\xef\x04\x08\xec\xef\x04`\xe8\xef\x04\xe8\xe4\xef\x04\xb0\xef\xef\x04\xf8\xe6\xef\x04\xf8\xc6\x18\x05p\xc1\x18\x05\x00\xce\x18\x05x\xce\x18\x05\x18\xc5\x18\x05(\xca\x18\x05p\xcd\x18\x05\x00\xc5\x18\x05`\xc5\x18\x05\xb0\xc6\x18\x05h\xcf\x18\x05 \xc0\x18\x05\xa0\xc1\x18\x05\xc8\xc6\x18\x05\xf8\xc0\x18\x050\xc5\x18\x05\x98\xc9\x18\x05\xd0\xca\x18\x05X\xcd\x18\x05\x08\xc3\x18\x05\x10\xc7\x18\x05@\xca\x18\x05\x10\xc1\x18\x05\xb0\xc0\x18\x05H\xc2\x18\x05@\xc1\x18\x05\xb8\xcd\x18\x05h\xc9\x18\x058\xc6\x18\x05\xe0\xc3\x18\x05P\xc0\x18\x05(\xc7\x18\x05\x98\xc0\x18\x05\x18\xc2\x18\x05\x00\xc2\x18\x05\xa0\xc7\x18\x05 \xc9\x18\x05P\xc6\x18\x05@\xc4\x18\x05\x98\xc3\x18\x05x\xc8\x18\x05\xc8\xc0\x18\x05\x88\xc1\x18\x05\xc0\xc5\x18\x050\xc8\x18\x05\xb8\xc1\x18\x05`\xc2\x18\x05\xd8\xc5\x18\x05\xc8\xc9\x18\x05\xf8\xc9\x18\x05 \xc3\x18\x05`\xc8\x18\x05\xb0\xcf\x18\x05\xc8\xcc\x18\x05\xe8\xc7\x18\x05x\xc5\x18\x05\xd0\xc1\x18\x05\x18\xc8\x18\x05\x08\xc9\x18\x05\xe0\xc0\x18\x05\xc0\xce\x18\x05X\xc7\x18\x05h\xcc\x18\x05\x80\xcc\x18\x050\xce\x18\x05\xe0\xcc\x18\x05@\xcd\x18\x05\x00\xcb\x18\x05H\xcb\x18\x05\x88\xc7\x18\x05\xd0\xc7\x18\x05\x08\xcf\x18\x05\x90\xc5\x18\x058\xc9\x18\x05\x08\xc6\x18\x05p\xc7\x18\x05P\xcc\x18\x05\xb0\xcc\x18\x05\xe0\xc9\x18\x05\xc0\xcb\x18\x05\x80\xc9\x18\x05\xa8\xce\x18\x05\xa8\xc8\x18\x05X\xca\x18\x05\x90\xc2\x18\x05\x10\xcd\x18\x05\xe0\xcf\x18\x05\x90\xcb\x18\x05H\xce\x18\x05\xd8\xce\x18\x05(\xcd\x18\x05h\xc0\x18\x05\x18\xce\x18\x05\x08\xcc\x18\x05`\xcb\x18\x05h\xc6\x18\x05\xe0\xc6\x18\x05\xa8\xcb\x18\x058\xcf\x18\x05\x98\xc6\x18\x05\xa0\xcd\x18\x05\x98\xcc\x18\x05\xb8\xca\x18\x05\xd8\xcb\x18\x050\xc2\x18\x05\x80\xc6\x18\x05\xd8\xc8\x18\x05\xf0\xce\x18\x05P\xc9\x18\x05 \xc6\x18\x05(\xc4\x18\x05\xc0\xc8\x18\x05\x98\xcf\x18\x05H\xc5\x18\x05P\xcf\x18\x05\xe8\xca\x18\x05\xe8\xcd\x18\x05\xb0\xc9\x18\x05p\xca\x18\x05\x88\xcd\x18\x05\x80\xcf\x18\x05\xb8\xc7\x18\x05\x10\xca\x18\x05\xa8\xc2\x18\x05\xa0\xc4\x18\x05\x88\xca\x18\x05\xb8\xc4\x18\x05\x00\xc8\x18\x058\xcc\x18\x05 \xcc\x18\x05\xe8\xc4\x18\x05\xc8\xcf\x18\x05\xa0\xca\x18\x050\xcb\x18\x05`\xce\x18\x05\x90\xce\x18\x05\x90\xc8\x18\x05\xb0\xe9\xef\x04\xd8\xe5\xef\x04\xb8\xed\xef\x04\x98\xe0\xef\x04P\xe6\xef\x04\xa0\xe4\xef\x04\xf8\xec\xef\x04\x10\xe4\xef\x04X\xed\xef\x040\xe8\xef\x04\xb0\xe0\xef\x04\xd8\xe2\xef\x04\xd0\xe1\xef\x04\x00\xe2\xef\x04\xf8\xe0\xef\x04X\xe7\xef\x04p\xed\xef\x04\xf0\xe2\xef\x04\xa0\xed\xef\x04P\xef\xef\x04p\xe7\xef\x04\xe0\xe6\xef\x04\x88\xe7\xef\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10243
(dp10244
g9130
(dp10245
g9117
I01
sg38
I00
sg33
I00
sg9125
I01
sg39
I01
sg34
I00
ssg9132
g10232
sg9133
(lp10246
g9117
ag9125
ag38
ag39
ag33
ag34
asg9135
(lp10247
I200
aI1
asbsg9137
g9252
sg9139
g91
(g92
(I0
tS'b'
tRp10248
(I1
(I200
I1
tg98
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9141
I01
sg9142
I1
sg9143
I-1
sg9144
(lp10249
g1
(g9146
g9115
(dp10250
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10251
ag1
(g9146
g9115
(dp10252
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10253
ag1
(g9146
g9115
(dp10254
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10255
ag1
(g9146
g9115
(dp10256
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10257
ag1
(g9146
g9115
(dp10258
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10259
ag1
(g9146
g9115
(dp10260
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10261
ag1
(g9146
g9115
(dp10262
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10263
ag1
(g9146
g9115
(dp10264
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10265
ag1
(g9146
g9115
(dp10266
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10267
ag1
(g9146
g9115
(dp10268
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10269
ag1
(g9146
g9115
(dp10270
g6382
g6429
sg6370
g6544
sg6384
g6436
sg6379
g6551
stRp10271
ag1
(g9146
g9115
(dp10272
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10273
ag1
(g9146
g9115
(dp10274
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10275
ag1
(g9146
g9115
(dp10276
g6382
g6486
sg6370
g6589
sg6384
g6480
sg6379
g6596
stRp10277
ag1
(g9146
g9115
(dp10278
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10279
ag1
(g9146
g9115
(dp10280
g6382
g6486
sg6370
g6589
sg6384
g6480
sg6379
g6596
stRp10281
ag1
(g9146
g9115
(dp10282
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10283
ag1
(g9146
g9115
(dp10284
g6382
g6651
sg6370
g6647
sg6384
g6658
sg6379
g6655
stRp10285
ag1
(g9146
g9115
(dp10286
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10287
ag1
(g9146
g9115
(dp10288
g6382
g6651
sg6370
g6677
sg6384
g6658
sg6379
g6684
stRp10289
ag1
(g9146
g9115
(dp10290
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10291
ag1
(g9146
g9115
(dp10292
g6382
g6418
sg6370
g6705
sg6384
g6412
sg6379
g6712
stRp10293
ag1
(g9146
g9115
(dp10294
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10295
ag1
(g9146
g9115
(dp10296
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10297
ag1
(g9146
g9115
(dp10298
g6382
g6758
sg6370
g6754
sg6384
g6765
sg6379
g6762
stRp10299
ag1
(g9146
g9115
(dp10300
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10301
ag1
(g9146
g9115
(dp10302
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10303
ag1
(g9146
g9115
(dp10304
g6382
g6801
sg6370
g6797
sg6384
g6808
sg6379
g6805
stRp10305
ag1
(g9146
g9115
(dp10306
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10307
ag1
(g9146
g9115
(dp10308
g6382
g6741
sg6370
g6827
sg6384
g6748
sg6379
g6834
stRp10309
ag1
(g9146
g9115
(dp10310
g6382
g6514
sg6370
g6842
sg6384
g6521
sg6379
g6849
stRp10311
ag1
(g9146
g9115
(dp10312
g6382
g6758
sg6370
g6754
sg6384
g6765
sg6379
g6762
stRp10313
ag1
(g9146
g9115
(dp10314
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10315
ag1
(g9146
g9115
(dp10316
g6382
g6463
sg6370
g6883
sg6384
g6470
sg6379
g6890
stRp10317
ag1
(g9146
g9115
(dp10318
g6382
g6902
sg6370
g6898
sg6384
g6909
sg6379
g6906
stRp10319
ag1
(g9146
g9115
(dp10320
g6382
g6446
sg6370
g6915
sg6384
g6453
sg6379
g6922
stRp10321
ag1
(g9146
g9115
(dp10322
g6382
g6940
sg6370
g6930
sg6384
g6934
sg6379
g6938
stRp10323
ag1
(g9146
g9115
(dp10324
g6382
g6531
sg6370
g6947
sg6384
g6538
sg6379
g6954
stRp10325
ag1
(g9146
g9115
(dp10326
g6382
g6940
sg6370
g6930
sg6384
g6934
sg6379
g6938
stRp10327
ag1
(g9146
g9115
(dp10328
g6382
g6758
sg6370
g6975
sg6384
g6765
sg6379
g6982
stRp10329
ag1
(g9146
g9115
(dp10330
g6382
g6486
sg6370
g6589
sg6384
g6480
sg6379
g6596
stRp10331
ag1
(g9146
g9115
(dp10332
g6382
g6651
sg6370
g6647
sg6384
g6658
sg6379
g6655
stRp10333
ag1
(g9146
g9115
(dp10334
g6382
g6463
sg6370
g6883
sg6384
g6470
sg6379
g6890
stRp10335
ag1
(g9146
g9115
(dp10336
g6382
g6758
sg6370
g6754
sg6384
g6765
sg6379
g6762
stRp10337
ag1
(g9146
g9115
(dp10338
g6382
g7046
sg6370
g7042
sg6384
g7053
sg6379
g7050
stRp10339
ag1
(g9146
g9115
(dp10340
g6382
g6608
sg6370
g7059
sg6384
g6615
sg6379
g7066
stRp10341
ag1
(g9146
g9115
(dp10342
g6382
g6758
sg6370
g6975
sg6384
g6765
sg6379
g6982
stRp10343
ag1
(g9146
g9115
(dp10344
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10345
ag1
(g9146
g9115
(dp10346
g6382
g6563
sg6370
g7100
sg6384
g6570
sg6379
g7107
stRp10347
ag1
(g9146
g9115
(dp10348
g6382
g6418
sg6370
g6705
sg6384
g6412
sg6379
g6712
stRp10349
ag1
(g9146
g9115
(dp10350
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10351
ag1
(g9146
g9115
(dp10352
g6382
g6375
sg6370
g7141
sg6384
g6385
sg6379
g7148
stRp10353
ag1
(g9146
g9115
(dp10354
g6382
g6651
sg6370
g6647
sg6384
g6658
sg6379
g6655
stRp10355
ag1
(g9146
g9115
(dp10356
g6382
g6741
sg6370
g6827
sg6384
g6748
sg6379
g6834
stRp10357
ag1
(g9146
g9115
(dp10358
g6382
g6724
sg6370
g7182
sg6384
g6731
sg6379
g7189
stRp10359
ag1
(g9146
g9115
(dp10360
g6382
g6531
sg6370
g6947
sg6384
g6538
sg6379
g6954
stRp10361
ag1
(g9146
g9115
(dp10362
g6382
g6801
sg6370
g6797
sg6384
g6808
sg6379
g6805
stRp10363
ag1
(g9146
g9115
(dp10364
g6382
g6724
sg6370
g7182
sg6384
g6731
sg6379
g7189
stRp10365
ag1
(g9146
g9115
(dp10366
g6382
g6608
sg6370
g7059
sg6384
g6615
sg6379
g7066
stRp10367
ag1
(g9146
g9115
(dp10368
g6382
g6940
sg6370
g7249
sg6384
g6934
sg6379
g7256
stRp10369
ag1
(g9146
g9115
(dp10370
g6382
g7046
sg6370
g7042
sg6384
g7053
sg6379
g7050
stRp10371
ag1
(g9146
g9115
(dp10372
g6382
g6514
sg6370
g6842
sg6384
g6521
sg6379
g6849
stRp10373
ag1
(g9146
g9115
(dp10374
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10375
ag1
(g9146
g9115
(dp10376
g6382
g6563
sg6370
g7100
sg6384
g6570
sg6379
g7107
stRp10377
ag1
(g9146
g9115
(dp10378
g6382
g7046
sg6370
g7316
sg6384
g7053
sg6379
g7323
stRp10379
ag1
(g9146
g9115
(dp10380
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10381
ag1
(g9146
g9115
(dp10382
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10383
ag1
(g9146
g9115
(dp10384
g6382
g6429
sg6370
g6544
sg6384
g6436
sg6379
g6551
stRp10385
ag1
(g9146
g9115
(dp10386
g6382
g6563
sg6370
g7100
sg6384
g6570
sg6379
g7107
stRp10387
ag1
(g9146
g9115
(dp10388
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10389
ag1
(g9146
g9115
(dp10390
g6382
g6446
sg6370
g6915
sg6384
g6453
sg6379
g6922
stRp10391
ag1
(g9146
g9115
(dp10392
g6382
g6463
sg6370
g6883
sg6384
g6470
sg6379
g6890
stRp10393
ag1
(g9146
g9115
(dp10394
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10395
ag1
(g9146
g9115
(dp10396
g6382
g6651
sg6370
g6677
sg6384
g6658
sg6379
g6684
stRp10397
ag1
(g9146
g9115
(dp10398
g6382
g6463
sg6370
g6883
sg6384
g6470
sg6379
g6890
stRp10399
ag1
(g9146
g9115
(dp10400
g6382
g6902
sg6370
g7461
sg6384
g6909
sg6379
g7468
stRp10401
ag1
(g9146
g9115
(dp10402
g6382
g6395
sg6370
g7476
sg6384
g6402
sg6379
g7483
stRp10403
ag1
(g9146
g9115
(dp10404
g6382
g7046
sg6370
g7316
sg6384
g7053
sg6379
g7323
stRp10405
ag1
(g9146
g9115
(dp10406
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10407
ag1
(g9146
g9115
(dp10408
g6382
g7046
sg6370
g7316
sg6384
g7053
sg6379
g7323
stRp10409
ag1
(g9146
g9115
(dp10410
g6382
g6724
sg6370
g7182
sg6384
g6731
sg6379
g7189
stRp10411
ag1
(g9146
g9115
(dp10412
g6382
g6940
sg6370
g6930
sg6384
g6934
sg6379
g6938
stRp10413
ag1
(g9146
g9115
(dp10414
g6382
g6446
sg6370
g6915
sg6384
g6453
sg6379
g6922
stRp10415
ag1
(g9146
g9115
(dp10416
g6382
g6801
sg6370
g7569
sg6384
g6808
sg6379
g7576
stRp10417
ag1
(g9146
g9115
(dp10418
g6382
g6608
sg6370
g7059
sg6384
g6615
sg6379
g7066
stRp10419
ag1
(g9146
g9115
(dp10420
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10421
ag1
(g9146
g9115
(dp10422
g6382
g6940
sg6370
g6930
sg6384
g6934
sg6379
g6938
stRp10423
ag1
(g9146
g9115
(dp10424
g6382
g7046
sg6370
g7042
sg6384
g7053
sg6379
g7050
stRp10425
ag1
(g9146
g9115
(dp10426
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10427
ag1
(g9146
g9115
(dp10428
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10429
ag1
(g9146
g9115
(dp10430
g6382
g6741
sg6370
g6827
sg6384
g6748
sg6379
g6834
stRp10431
ag1
(g9146
g9115
(dp10432
g6382
g6418
sg6370
g6705
sg6384
g6412
sg6379
g6712
stRp10433
ag1
(g9146
g9115
(dp10434
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10435
ag1
(g9146
g9115
(dp10436
g6382
g6940
sg6370
g7249
sg6384
g6934
sg6379
g7256
stRp10437
ag1
(g9146
g9115
(dp10438
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10439
ag1
(g9146
g9115
(dp10440
g6382
g6446
sg6370
g6915
sg6384
g6453
sg6379
g6922
stRp10441
ag1
(g9146
g9115
(dp10442
g6382
g6758
sg6370
g6975
sg6384
g6765
sg6379
g6982
stRp10443
ag1
(g9146
g9115
(dp10444
g6382
g6651
sg6370
g6677
sg6384
g6658
sg6379
g6684
stRp10445
ag1
(g9146
g9115
(dp10446
g6382
g6940
sg6370
g7249
sg6384
g6934
sg6379
g7256
stRp10447
ag1
(g9146
g9115
(dp10448
g6382
g6531
sg6370
g6947
sg6384
g6538
sg6379
g6954
stRp10449
ag1
(g9146
g9115
(dp10450
g6382
g6486
sg6370
g6589
sg6384
g6480
sg6379
g6596
stRp10451
ag1
(g9146
g9115
(dp10452
g6382
g6940
sg6370
g7249
sg6384
g6934
sg6379
g7256
stRp10453
ag1
(g9146
g9115
(dp10454
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10455
ag1
(g9146
g9115
(dp10456
g6382
g6902
sg6370
g7461
sg6384
g6909
sg6379
g7468
stRp10457
ag1
(g9146
g9115
(dp10458
g6382
g6446
sg6370
g6442
sg6384
g6453
sg6379
g6450
stRp10459
ag1
(g9146
g9115
(dp10460
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10461
ag1
(g9146
g9115
(dp10462
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10463
ag1
(g9146
g9115
(dp10464
g6382
g6531
sg6370
g6947
sg6384
g6538
sg6379
g6954
stRp10465
ag1
(g9146
g9115
(dp10466
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10467
ag1
(g9146
g9115
(dp10468
g6382
g6801
sg6370
g6797
sg6384
g6808
sg6379
g6805
stRp10469
ag1
(g9146
g9115
(dp10470
g6382
g6514
sg6370
g6842
sg6384
g6521
sg6379
g6849
stRp10471
ag1
(g9146
g9115
(dp10472
g6382
g6429
sg6370
g6544
sg6384
g6436
sg6379
g6551
stRp10473
ag1
(g9146
g9115
(dp10474
g6382
g6902
sg6370
g6898
sg6384
g6909
sg6379
g6906
stRp10475
ag1
(g9146
g9115
(dp10476
g6382
g6563
sg6370
g7100
sg6384
g6570
sg6379
g7107
stRp10477
ag1
(g9146
g9115
(dp10478
g6382
g6503
sg6370
g7974
sg6384
g6497
sg6379
g7981
stRp10479
ag1
(g9146
g9115
(dp10480
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10481
ag1
(g9146
g9115
(dp10482
g6382
g6758
sg6370
g6975
sg6384
g6765
sg6379
g6982
stRp10483
ag1
(g9146
g9115
(dp10484
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10485
ag1
(g9146
g9115
(dp10486
g6382
g6375
sg6370
g7141
sg6384
g6385
sg6379
g7148
stRp10487
ag1
(g9146
g9115
(dp10488
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10489
ag1
(g9146
g9115
(dp10490
g6382
g6741
sg6370
g6827
sg6384
g6748
sg6379
g6834
stRp10491
ag1
(g9146
g9115
(dp10492
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10493
ag1
(g9146
g9115
(dp10494
g6382
g6651
sg6370
g6677
sg6384
g6658
sg6379
g6684
stRp10495
ag1
(g9146
g9115
(dp10496
g6382
g6724
sg6370
g7182
sg6384
g6731
sg6379
g7189
stRp10497
ag1
(g9146
g9115
(dp10498
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10499
ag1
(g9146
g9115
(dp10500
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10501
ag1
(g9146
g9115
(dp10502
g6382
g6446
sg6370
g6915
sg6384
g6453
sg6379
g6922
stRp10503
ag1
(g9146
g9115
(dp10504
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10505
ag1
(g9146
g9115
(dp10506
g6382
g6801
sg6370
g6797
sg6384
g6808
sg6379
g6805
stRp10507
ag1
(g9146
g9115
(dp10508
g6382
g6503
sg6370
g7974
sg6384
g6497
sg6379
g7981
stRp10509
ag1
(g9146
g9115
(dp10510
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10511
ag1
(g9146
g9115
(dp10512
g6382
g6801
sg6370
g7569
sg6384
g6808
sg6379
g7576
stRp10513
ag1
(g9146
g9115
(dp10514
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10515
ag1
(g9146
g9115
(dp10516
g6382
g6375
sg6370
g7141
sg6384
g6385
sg6379
g7148
stRp10517
ag1
(g9146
g9115
(dp10518
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10519
ag1
(g9146
g9115
(dp10520
g6382
g6902
sg6370
g6898
sg6384
g6909
sg6379
g6906
stRp10521
ag1
(g9146
g9115
(dp10522
g6382
g6395
sg6370
g7476
sg6384
g6402
sg6379
g7483
stRp10523
ag1
(g9146
g9115
(dp10524
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10525
ag1
(g9146
g9115
(dp10526
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10527
ag1
(g9146
g9115
(dp10528
g6382
g6801
sg6370
g7569
sg6384
g6808
sg6379
g7576
stRp10529
ag1
(g9146
g9115
(dp10530
g6382
g7046
sg6370
g7042
sg6384
g7053
sg6379
g7050
stRp10531
ag1
(g9146
g9115
(dp10532
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10533
ag1
(g9146
g9115
(dp10534
g6382
g6902
sg6370
g6898
sg6384
g6909
sg6379
g6906
stRp10535
ag1
(g9146
g9115
(dp10536
g6382
g6395
sg6370
g7476
sg6384
g6402
sg6379
g7483
stRp10537
ag1
(g9146
g9115
(dp10538
g6382
g6463
sg6370
g6883
sg6384
g6470
sg6379
g6890
stRp10539
ag1
(g9146
g9115
(dp10540
g6382
g6651
sg6370
g6647
sg6384
g6658
sg6379
g6655
stRp10541
ag1
(g9146
g9115
(dp10542
g6382
g6395
sg6370
g7476
sg6384
g6402
sg6379
g7483
stRp10543
ag1
(g9146
g9115
(dp10544
g6382
g6902
sg6370
g7461
sg6384
g6909
sg6379
g7468
stRp10545
ag1
(g9146
g9115
(dp10546
g6382
g6514
sg6370
g6510
sg6384
g6521
sg6379
g6518
stRp10547
ag1
(g9146
g9115
(dp10548
g6382
g6608
sg6370
g7059
sg6384
g6615
sg6379
g7066
stRp10549
ag1
(g9146
g9115
(dp10550
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10551
ag1
(g9146
g9115
(dp10552
g6382
g6531
sg6370
g6947
sg6384
g6538
sg6379
g6954
stRp10553
ag1
(g9146
g9115
(dp10554
g6382
g6395
sg6370
g7476
sg6384
g6402
sg6379
g7483
stRp10555
ag1
(g9146
g9115
(dp10556
g6382
g6741
sg6370
g6827
sg6384
g6748
sg6379
g6834
stRp10557
ag1
(g9146
g9115
(dp10558
g6382
g6514
sg6370
g6842
sg6384
g6521
sg6379
g6849
stRp10559
ag1
(g9146
g9115
(dp10560
g6382
g6801
sg6370
g7569
sg6384
g6808
sg6379
g7576
stRp10561
ag1
(g9146
g9115
(dp10562
g6382
g6651
sg6370
g6677
sg6384
g6658
sg6379
g6684
stRp10563
ag1
(g9146
g9115
(dp10564
g6382
g6801
sg6370
g6797
sg6384
g6808
sg6379
g6805
stRp10565
ag1
(g9146
g9115
(dp10566
g6382
g6418
sg6370
g6705
sg6384
g6412
sg6379
g6712
stRp10567
ag1
(g9146
g9115
(dp10568
g6382
g6503
sg6370
g7974
sg6384
g6497
sg6379
g7981
stRp10569
ag1
(g9146
g9115
(dp10570
g6382
g6651
sg6370
g6647
sg6384
g6658
sg6379
g6655
stRp10571
ag1
(g9146
g9115
(dp10572
g6382
g6395
sg6370
g6391
sg6384
g6402
sg6379
g6399
stRp10573
ag1
(g9146
g9115
(dp10574
g6382
g6608
sg6370
g7059
sg6384
g6615
sg6379
g7066
stRp10575
ag1
(g9146
g9115
(dp10576
g6382
g6724
sg6370
g6720
sg6384
g6731
sg6379
g6728
stRp10577
ag1
(g9146
g9115
(dp10578
g6382
g6940
sg6370
g6930
sg6384
g6934
sg6379
g6938
stRp10579
ag1
(g9146
g9115
(dp10580
g6382
g6758
sg6370
g6975
sg6384
g6765
sg6379
g6982
stRp10581
ag1
(g9146
g9115
(dp10582
g6382
g7046
sg6370
g7316
sg6384
g7053
sg6379
g7323
stRp10583
ag1
(g9146
g9115
(dp10584
g6382
g6429
sg6370
g6544
sg6384
g6436
sg6379
g6551
stRp10585
ag1
(g9146
g9115
(dp10586
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10587
ag1
(g9146
g9115
(dp10588
g6382
g7046
sg6370
g7316
sg6384
g7053
sg6379
g7323
stRp10589
ag1
(g9146
g9115
(dp10590
g6382
g6902
sg6370
g6898
sg6384
g6909
sg6379
g6906
stRp10591
ag1
(g9146
g9115
(dp10592
g6382
g6758
sg6370
g6754
sg6384
g6765
sg6379
g6762
stRp10593
ag1
(g9146
g9115
(dp10594
g6382
g6503
sg6370
g6493
sg6384
g6497
sg6379
g6501
stRp10595
ag1
(g9146
g9115
(dp10596
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10597
ag1
(g9146
g9115
(dp10598
g6382
g6758
sg6370
g6754
sg6384
g6765
sg6379
g6762
stRp10599
ag1
(g9146
g9115
(dp10600
g6382
g6375
sg6370
g7141
sg6384
g6385
sg6379
g7148
stRp10601
ag1
(g9146
g9115
(dp10602
g6382
g6503
sg6370
g7974
sg6384
g6497
sg6379
g7981
stRp10603
ag1
(g9146
g9115
(dp10604
g6382
g6514
sg6370
g6842
sg6384
g6521
sg6379
g6849
stRp10605
ag1
(g9146
g9115
(dp10606
g6382
g6429
sg6370
g6544
sg6384
g6436
sg6379
g6551
stRp10607
ag1
(g9146
g9115
(dp10608
g6382
g6375
sg6370
g7141
sg6384
g6385
sg6379
g7148
stRp10609
ag1
(g9146
g9115
(dp10610
g6382
g6418
sg6370
g6408
sg6384
g6412
sg6379
g6416
stRp10611
ag1
(g9146
g9115
(dp10612
g6382
g6503
sg6370
g7974
sg6384
g6497
sg6379
g7981
stRp10613
ag1
(g9146
g9115
(dp10614
g6382
g6563
sg6370
g7100
sg6384
g6570
sg6379
g7107
stRp10615
ag1
(g9146
g9115
(dp10616
g6382
g6463
sg6370
g6459
sg6384
g6470
sg6379
g6467
stRp10617
ag1
(g9146
g9115
(dp10618
g6382
g6940
sg6370
g7249
sg6384
g6934
sg6379
g7256
stRp10619
ag1
(g9146
g9115
(dp10620
g6382
g6429
sg6370
g6425
sg6384
g6436
sg6379
g6433
stRp10621
ag1
(g9146
g9115
(dp10622
g6382
g6902
sg6370
g7461
sg6384
g6909
sg6379
g7468
stRp10623
ag1
(g9146
g9115
(dp10624
g6382
g6608
sg6370
g6604
sg6384
g6615
sg6379
g6612
stRp10625
ag1
(g9146
g9115
(dp10626
g6382
g6902
sg6370
g7461
sg6384
g6909
sg6379
g7468
stRp10627
ag1
(g9146
g9115
(dp10628
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10629
ag1
(g9146
g9115
(dp10630
g6382
g7046
sg6370
g7042
sg6384
g7053
sg6379
g7050
stRp10631
ag1
(g9146
g9115
(dp10632
g6382
g6724
sg6370
g7182
sg6384
g6731
sg6379
g7189
stRp10633
ag1
(g9146
g9115
(dp10634
g6382
g6531
sg6370
g6527
sg6384
g6538
sg6379
g6535
stRp10635
ag1
(g9146
g9115
(dp10636
g6382
g6741
sg6370
g6737
sg6384
g6748
sg6379
g6745
stRp10637
ag1
(g9146
g9115
(dp10638
g6382
g6563
sg6370
g6559
sg6384
g6570
sg6379
g6567
stRp10639
ag1
(g9146
g9115
(dp10640
g6382
g6486
sg6370
g6589
sg6384
g6480
sg6379
g6596
stRp10641
ag1
(g9146
g9115
(dp10642
g6382
g6375
sg6370
g6371
sg6384
g6385
sg6379
g6380
stRp10643
ag1
(g9146
g9115
(dp10644
g6382
g6418
sg6370
g6705
sg6384
g6412
sg6379
g6712
stRp10645
ag1
(g9146
g9115
(dp10646
g6382
g6486
sg6370
g6476
sg6384
g6480
sg6379
g6484
stRp10647
ag1
(g9146
g9115
(dp10648
g6382
g6801
sg6370
g7569
sg6384
g6808
sg6379
g7576
stRp10649
asg9227
Nsg9228
g9085
sg9229
I200
sg9230
I0
sg9231
I200
sg9232
I01
sbasS'savePickle'
p10650
I00
sb.